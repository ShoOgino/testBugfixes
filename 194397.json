{"path":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#createCacheEntry(Class[#]).mjava","commits":[{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#createCacheEntry(Class[#]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a cached information about shallow size and reference fields for \n   * a given class.\n   */\n  private static ClassCache createCacheEntry(final Class<?> clazz) {\n    ClassCache cachedInfo;\n    long shallowInstanceSize = NUM_BYTES_OBJECT_HEADER;\n    final ArrayList<Field> referenceFields = new ArrayList<Field>(32);\n    for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {\n      final Field[] fields = c.getDeclaredFields();\n      for (final Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          shallowInstanceSize = adjustForField(shallowInstanceSize, f);\n\n          if (!f.getType().isPrimitive()) {\n            f.setAccessible(true);\n            referenceFields.add(f);\n          }\n        }\n      }\n    }\n\n    cachedInfo = new ClassCache(\n        alignObjectSize(shallowInstanceSize), \n        referenceFields.toArray(new Field[referenceFields.size()]));\n    return cachedInfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#createCacheEntry(Class[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#createCacheEntry(Class[#]).mjava","sourceNew":"  /**\n   * Create a cached information about shallow size and reference fields for \n   * a given class.\n   */\n  private static ClassCache createCacheEntry(final Class<?> clazz) {\n    ClassCache cachedInfo;\n    long shallowInstanceSize = NUM_BYTES_OBJECT_HEADER;\n    final ArrayList<Field> referenceFields = new ArrayList<>(32);\n    for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {\n      final Field[] fields = c.getDeclaredFields();\n      for (final Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          shallowInstanceSize = adjustForField(shallowInstanceSize, f);\n\n          if (!f.getType().isPrimitive()) {\n            f.setAccessible(true);\n            referenceFields.add(f);\n          }\n        }\n      }\n    }\n\n    cachedInfo = new ClassCache(\n        alignObjectSize(shallowInstanceSize), \n        referenceFields.toArray(new Field[referenceFields.size()]));\n    return cachedInfo;\n  }\n\n","sourceOld":"  /**\n   * Create a cached information about shallow size and reference fields for \n   * a given class.\n   */\n  private static ClassCache createCacheEntry(final Class<?> clazz) {\n    ClassCache cachedInfo;\n    long shallowInstanceSize = NUM_BYTES_OBJECT_HEADER;\n    final ArrayList<Field> referenceFields = new ArrayList<Field>(32);\n    for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {\n      final Field[] fields = c.getDeclaredFields();\n      for (final Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          shallowInstanceSize = adjustForField(shallowInstanceSize, f);\n\n          if (!f.getType().isPrimitive()) {\n            f.setAccessible(true);\n            referenceFields.add(f);\n          }\n        }\n      }\n    }\n\n    cachedInfo = new ClassCache(\n        alignObjectSize(shallowInstanceSize), \n        referenceFields.toArray(new Field[referenceFields.size()]));\n    return cachedInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RamUsageTester#createCacheEntry(Class[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#createCacheEntry(Class[#]).mjava","sourceNew":"  /**\n   * Create a cached information about shallow size and reference fields for \n   * a given class.\n   */\n  private static ClassCache createCacheEntry(final Class<?> clazz) {\n    ClassCache cachedInfo;\n    long shallowInstanceSize = RamUsageEstimator.NUM_BYTES_OBJECT_HEADER;\n    final ArrayList<Field> referenceFields = new ArrayList<>(32);\n    for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {\n      final Field[] fields = c.getDeclaredFields();\n      for (final Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          shallowInstanceSize = RamUsageEstimator.adjustForField(shallowInstanceSize, f);\n\n          if (!f.getType().isPrimitive()) {\n            f.setAccessible(true);\n            referenceFields.add(f);\n          }\n        }\n      }\n    }\n\n    cachedInfo = new ClassCache(\n        RamUsageEstimator.alignObjectSize(shallowInstanceSize), \n        referenceFields.toArray(new Field[referenceFields.size()]));\n    return cachedInfo;\n  }\n\n","sourceOld":"  /**\n   * Create a cached information about shallow size and reference fields for \n   * a given class.\n   */\n  private static ClassCache createCacheEntry(final Class<?> clazz) {\n    ClassCache cachedInfo;\n    long shallowInstanceSize = NUM_BYTES_OBJECT_HEADER;\n    final ArrayList<Field> referenceFields = new ArrayList<>(32);\n    for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {\n      final Field[] fields = c.getDeclaredFields();\n      for (final Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          shallowInstanceSize = adjustForField(shallowInstanceSize, f);\n\n          if (!f.getType().isPrimitive()) {\n            f.setAccessible(true);\n            referenceFields.add(f);\n          }\n        }\n      }\n    }\n\n    cachedInfo = new ClassCache(\n        alignObjectSize(shallowInstanceSize), \n        referenceFields.toArray(new Field[referenceFields.size()]));\n    return cachedInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RamUsageTester#createCacheEntry(Class[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#createCacheEntry(Class[#]).mjava","sourceNew":"  /**\n   * Create a cached information about shallow size and reference fields for \n   * a given class.\n   */\n  private static ClassCache createCacheEntry(final Class<?> clazz) {\n    ClassCache cachedInfo;\n    long shallowInstanceSize = RamUsageEstimator.NUM_BYTES_OBJECT_HEADER;\n    final ArrayList<Field> referenceFields = new ArrayList<>(32);\n    for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {\n      final Field[] fields = c.getDeclaredFields();\n      for (final Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          shallowInstanceSize = RamUsageEstimator.adjustForField(shallowInstanceSize, f);\n\n          if (!f.getType().isPrimitive()) {\n            f.setAccessible(true);\n            referenceFields.add(f);\n          }\n        }\n      }\n    }\n\n    cachedInfo = new ClassCache(\n        RamUsageEstimator.alignObjectSize(shallowInstanceSize), \n        referenceFields.toArray(new Field[referenceFields.size()]));\n    return cachedInfo;\n  }\n\n","sourceOld":"  /**\n   * Create a cached information about shallow size and reference fields for \n   * a given class.\n   */\n  private static ClassCache createCacheEntry(final Class<?> clazz) {\n    ClassCache cachedInfo;\n    long shallowInstanceSize = NUM_BYTES_OBJECT_HEADER;\n    final ArrayList<Field> referenceFields = new ArrayList<>(32);\n    for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {\n      final Field[] fields = c.getDeclaredFields();\n      for (final Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          shallowInstanceSize = adjustForField(shallowInstanceSize, f);\n\n          if (!f.getType().isPrimitive()) {\n            f.setAccessible(true);\n            referenceFields.add(f);\n          }\n        }\n      }\n    }\n\n    cachedInfo = new ClassCache(\n        alignObjectSize(shallowInstanceSize), \n        referenceFields.toArray(new Field[referenceFields.size()]));\n    return cachedInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}