{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","commits":[{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs,TwoDoublesFieldInfo).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, TwoDoublesFieldInfo fieldInfo) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox, fieldInfo);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox, fieldInfo);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args, fieldInfo);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox, fieldInfo);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args, fieldInfo);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getDistance() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28bce66b0b769a7827b1f4df30b3f50a2ed6c355","date":1347720564,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public ConstantScoreQuery makeQuery(SpatialArgs args) {\n    if(! SpatialOperation.is( args.getOperation(),\n        SpatialOperation.Intersects,\n        SpatialOperation.IsWithin ))\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle))\n      throw new InvalidShapeException(\"Only Rectangle is currently supported, got \"+shape.getClass());\n    Rectangle bbox = (Rectangle) shape;\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n    return new ConstantScoreQuery(makeWithin(bbox));\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeValueSource(args);\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeValueSource(args);\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2165e2bf547d6644ce2088f7789457b9f30c787","date":1347728770,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public ConstantScoreQuery makeQuery(SpatialArgs args) {\n    if(! SpatialOperation.is( args.getOperation(),\n        SpatialOperation.Intersects,\n        SpatialOperation.IsWithin ))\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    Shape shape = args.getShape();\n    if (shape instanceof Rectangle) {\n      Rectangle bbox = (Rectangle) shape;\n      return new ConstantScoreQuery(makeWithin(bbox));\n    } else if (shape instanceof Circle) {\n      Circle circle = (Circle)shape;\n      Rectangle bbox = circle.getBoundingBox();\n      ValueSourceFilter vsf = new ValueSourceFilter(\n          new QueryWrapperFilter(makeWithin(bbox)),\n          makeDistanceValueSource(circle.getCenter()),\n          0,\n          circle.getRadius() );\n      return new ConstantScoreQuery(vsf);\n    } else {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n  }\n\n","sourceOld":"  @Override\n  public ConstantScoreQuery makeQuery(SpatialArgs args) {\n    if(! SpatialOperation.is( args.getOperation(),\n        SpatialOperation.Intersects,\n        SpatialOperation.IsWithin ))\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle))\n      throw new InvalidShapeException(\"Only Rectangle is currently supported, got \"+shape.getClass());\n    Rectangle bbox = (Rectangle) shape;\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n    return new ConstantScoreQuery(makeWithin(bbox));\n  }\n\n","bugFix":null,"bugIntro":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f65afee0ae7c7a78e3de849a5772a0af60c50ead","date":1348341124,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public ConstantScoreQuery makeQuery(SpatialArgs args) {\n    if(! SpatialOperation.is( args.getOperation(),\n        SpatialOperation.Intersects,\n        SpatialOperation.IsWithin ))\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    Shape shape = args.getShape();\n    if (shape instanceof Rectangle) {\n      Rectangle bbox = (Rectangle) shape;\n      return new ConstantScoreQuery(makeWithin(bbox));\n    } else if (shape instanceof Circle) {\n      Circle circle = (Circle)shape;\n      Rectangle bbox = circle.getBoundingBox();\n      ValueSourceFilter vsf = new ValueSourceFilter(\n          new QueryWrapperFilter(makeWithin(bbox)),\n          makeDistanceValueSource(circle.getCenter()),\n          0,\n          circle.getRadius() );\n      return new ConstantScoreQuery(vsf);\n    } else {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n  }\n\n","sourceOld":"  @Override\n  public ConstantScoreQuery makeQuery(SpatialArgs args) {\n    if(! SpatialOperation.is( args.getOperation(),\n        SpatialOperation.Intersects,\n        SpatialOperation.IsWithin ))\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    Shape shape = args.getShape();\n    if (shape instanceof Rectangle) {\n      Rectangle bbox = (Rectangle) shape;\n      return new ConstantScoreQuery(makeWithin(bbox));\n    } else if (shape instanceof Circle) {\n      Circle circle = (Circle)shape;\n      Rectangle bbox = circle.getBoundingBox();\n      ValueSourceFilter vsf = new ValueSourceFilter(\n          new QueryWrapperFilter(makeWithin(bbox)),\n          makeDistanceValueSource(circle.getCenter()),\n          0,\n          circle.getRadius() );\n      return new ConstantScoreQuery(vsf);\n    } else {\n      throw new InvalidShapeException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bc1e76fdb8a9952244528f098da956d2f52acec","date":1348348531,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public ConstantScoreQuery makeQuery(SpatialArgs args) {\n    if(! SpatialOperation.is( args.getOperation(),\n        SpatialOperation.Intersects,\n        SpatialOperation.IsWithin ))\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    Shape shape = args.getShape();\n    if (shape instanceof Rectangle) {\n      Rectangle bbox = (Rectangle) shape;\n      return new ConstantScoreQuery(makeWithin(bbox));\n    } else if (shape instanceof Circle) {\n      Circle circle = (Circle)shape;\n      Rectangle bbox = circle.getBoundingBox();\n      ValueSourceFilter vsf = new ValueSourceFilter(\n          new QueryWrapperFilter(makeWithin(bbox)),\n          makeDistanceValueSource(circle.getCenter()),\n          0,\n          circle.getRadius() );\n      return new ConstantScoreQuery(vsf);\n    } else {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n  }\n\n","sourceOld":"  @Override\n  public ConstantScoreQuery makeQuery(SpatialArgs args) {\n    if(! SpatialOperation.is( args.getOperation(),\n        SpatialOperation.Intersects,\n        SpatialOperation.IsWithin ))\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    Shape shape = args.getShape();\n    if (shape instanceof Rectangle) {\n      Rectangle bbox = (Rectangle) shape;\n      return new ConstantScoreQuery(makeWithin(bbox));\n    } else if (shape instanceof Circle) {\n      Circle circle = (Circle)shape;\n      Rectangle bbox = circle.getBoundingBox();\n      ValueSourceFilter vsf = new ValueSourceFilter(\n          new QueryWrapperFilter(makeWithin(bbox)),\n          makeDistanceValueSource(circle.getCenter()),\n          0,\n          circle.getRadius() );\n      return new ConstantScoreQuery(vsf);\n    } else {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc1e76fdb8a9952244528f098da956d2f52acec":["f65afee0ae7c7a78e3de849a5772a0af60c50ead"],"c2165e2bf547d6644ce2088f7789457b9f30c787":["28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"f65afee0ae7c7a78e3de849a5772a0af60c50ead":["c2165e2bf547d6644ce2088f7789457b9f30c787"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0415a016b37e58a017fed0a91234f733ab359971"],"da956410d7a790f567af4e7e94584fb0930212f2":["0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28bce66b0b769a7827b1f4df30b3f50a2ed6c355":["da956410d7a790f567af4e7e94584fb0930212f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bc1e76fdb8a9952244528f098da956d2f52acec"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["fe33227f6805edab2036cbb80645cc4e2d1fa424","da956410d7a790f567af4e7e94584fb0930212f2"],"6bc1e76fdb8a9952244528f098da956d2f52acec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2165e2bf547d6644ce2088f7789457b9f30c787":["f65afee0ae7c7a78e3de849a5772a0af60c50ead"],"f65afee0ae7c7a78e3de849a5772a0af60c50ead":["6bc1e76fdb8a9952244528f098da956d2f52acec"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0415a016b37e58a017fed0a91234f733ab359971","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"da956410d7a790f567af4e7e94584fb0930212f2":["28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"28bce66b0b769a7827b1f4df30b3f50a2ed6c355":["c2165e2bf547d6644ce2088f7789457b9f30c787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}