{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readVIntBlock(IndexInput,long[],long[],int,boolean).mjava","commits":[{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readVIntBlock(IndexInput,long[],long[],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  static void readVIntBlock(IndexInput docIn, long[] docBuffer, long[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d569dbc58dcfe4b83257a5b1d867b66532beef1","date":1344416896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readVIntBlock(IndexInput,long[],long[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readVIntBlock(IndexInput,long[],long[],int,boolean).mjava","sourceNew":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  static void readVIntBlock(IndexInput docIn, long[] docBuffer,\n      long[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  static void readVIntBlock(IndexInput docIn, long[] docBuffer, long[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","date":1344442349,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readVIntBlock(IndexInput,long[],long[],int,boolean).mjava","sourceNew":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  static void readVIntBlock(IndexInput docIn, int[] docBuffer,\n      int[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  static void readVIntBlock(IndexInput docIn, long[] docBuffer,\n      long[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d569dbc58dcfe4b83257a5b1d867b66532beef1":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":["2d569dbc58dcfe4b83257a5b1d867b66532beef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2d569dbc58dcfe4b83257a5b1d867b66532beef1":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e3359210474c12c0b79e6400450313e3d7ef2bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["2d569dbc58dcfe4b83257a5b1d867b66532beef1"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}