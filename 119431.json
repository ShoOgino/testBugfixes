{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","sourceNew":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    tmp.setUseCompoundFile(r.nextBoolean());\n    tmp.setNoCFSRatio(0.1 + r.nextDouble()*0.8);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","sourceOld":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    tmp.setUseCompoundFile(r.nextBoolean());\n    tmp.setNoCFSRatio(0.1 + r.nextDouble()*0.8);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7211b1fba79597955a78855e9f646de9248ca57","date":1345763711,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","sourceNew":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    tmp.setUseCompoundFile(r.nextBoolean());\n    tmp.setNoCFSRatio(0.1 + r.nextDouble()*0.8);\n    if (rarely()) {\n      tmp.setMaxCFSSegmentSizeMB(0.2 + r.nextDouble() * 2.0);\n    }\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","sourceOld":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    tmp.setUseCompoundFile(r.nextBoolean());\n    tmp.setNoCFSRatio(0.1 + r.nextDouble()*0.8);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","sourceNew":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    tmp.setUseCompoundFile(r.nextBoolean());\n    tmp.setNoCFSRatio(0.1 + r.nextDouble()*0.8);\n    if (rarely()) {\n      tmp.setMaxCFSSegmentSizeMB(0.2 + r.nextDouble() * 2.0);\n    }\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","sourceOld":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    tmp.setUseCompoundFile(r.nextBoolean());\n    tmp.setNoCFSRatio(0.1 + r.nextDouble()*0.8);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","sourceNew":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","sourceOld":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    tmp.setUseCompoundFile(r.nextBoolean());\n    tmp.setNoCFSRatio(0.1 + r.nextDouble()*0.8);\n    if (rarely()) {\n      tmp.setMaxCFSSegmentSizeMB(0.2 + r.nextDouble() * 2.0);\n    }\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","sourceNew":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","sourceOld":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a90cc8c90aa53ddf51fbd15019989ac269514a3","date":1531845066,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","sourceNew":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setDeletesPctAllowed(20 + random().nextDouble() * 30);\n    return tmp;\n  }\n\n","sourceOld":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","sourceNew":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setDeletesPctAllowed(20 + random().nextDouble() * 30);\n    return tmp;\n  }\n\n","sourceOld":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setReclaimDeletesWeight(r.nextDouble()*4);\n    return tmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newTieredMergePolicy(Random).mjava","sourceNew":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(10 + r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setDeletesPctAllowed(20 + random().nextDouble() * 30);\n    return tmp;\n  }\n\n","sourceOld":"  public static TieredMergePolicy newTieredMergePolicy(Random r) {\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    if (rarely(r)) {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 2, 9));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 2, 9));\n    } else {\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(r, 10, 50));\n      tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r, 10, 50));\n    }\n    if (rarely(r)) {\n      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);\n    } else {\n      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);\n    }\n    tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);\n    tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);\n    if (rarely(r)) {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 2, 20));\n    } else {\n      tmp.setSegmentsPerTier(TestUtil.nextInt(r, 10, 50));\n    }\n    configureRandom(r, tmp);\n    tmp.setDeletesPctAllowed(20 + random().nextDouble() * 30);\n    return tmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c7211b1fba79597955a78855e9f646de9248ca57"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6613659748fe4411a7dcf85266e55db1f95f7315","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["c7211b1fba79597955a78855e9f646de9248ca57"],"6613659748fe4411a7dcf85266e55db1f95f7315":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7211b1fba79597955a78855e9f646de9248ca57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","c7211b1fba79597955a78855e9f646de9248ca57"],"6613659748fe4411a7dcf85266e55db1f95f7315":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"c7211b1fba79597955a78855e9f646de9248ca57":["001b25b42373b22a52f399dbf072f1224632e8e6","088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}