{"path":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\r\n  {\r\n    vals.numDocs = vals.numTerms = 0;\r\n    Terms terms = MultiFields.getTerms(reader, field);\r\n    if (terms != null) {\r\n      final TermsEnum termsEnum = terms.iterator();\r\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\r\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\r\n      DocsEnum docs = null;\r\n      while(true) {\r\n        final BytesRef term = termsEnum.next();\r\n        if (term == null) {\r\n          break;\r\n        }\r\n        docs = termsEnum.docs(delDocs, docs);\r\n        while (true) {\r\n          final int docID = docs.nextDoc();\r\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\r\n            break;\r\n          }\r\n          validBits.set( docID );\r\n          vals.numDocs++;\r\n        }\r\n        vals.numTerms++;\r\n      }\r\n\r\n      vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, reader.maxDoc() );\r\n    }\r\n    if( vals.numDocs < 1 ) {\r\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5637938a7dc36e7ff09a5d9398957bd46b15129a","date":1285538458,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","sourceNew":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(delDocs, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","sourceOld":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\r\n  {\r\n    vals.numDocs = vals.numTerms = 0;\r\n    Terms terms = MultiFields.getTerms(reader, field);\r\n    if (terms != null) {\r\n      final TermsEnum termsEnum = terms.iterator();\r\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\r\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\r\n      DocsEnum docs = null;\r\n      while(true) {\r\n        final BytesRef term = termsEnum.next();\r\n        if (term == null) {\r\n          break;\r\n        }\r\n        docs = termsEnum.docs(delDocs, docs);\r\n        while (true) {\r\n          final int docID = docs.nextDoc();\r\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\r\n            break;\r\n          }\r\n          validBits.set( docID );\r\n          vals.numDocs++;\r\n        }\r\n        vals.numTerms++;\r\n      }\r\n\r\n      vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, reader.maxDoc() );\r\n    }\r\n    if( vals.numDocs < 1 ) {\r\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":["eee24cbec95372b8e747bf9146a5ef33734029a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eee24cbec95372b8e747bf9146a5ef33734029a6","date":1291686380,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","sourceNew":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(null, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","sourceOld":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(delDocs, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","bugFix":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","sourceNew":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(null, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","sourceOld":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(delDocs, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( delDocs, validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(null, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","sourceNew":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      FixedBitSet validBits = new FixedBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(null, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","sourceOld":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      OpenBitSet validBits = new OpenBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(null, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#fillValidBits(T,IndexReader,String).mjava","sourceNew":null,"sourceOld":"  public void fillValidBits( T vals, IndexReader reader, String field ) throws IOException\n  {\n    vals.numDocs = vals.numTerms = 0;\n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      FixedBitSet validBits = new FixedBitSet( reader.maxDoc() );\n      DocsEnum docs = null;\n      while(true) {\n        final BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        docs = termsEnum.docs(null, docs);\n        while (true) {\n          final int docID = docs.nextDoc();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          validBits.set( docID );\n          vals.numDocs++;\n        }\n        vals.numTerms++;\n      }\n\n      vals.valid = checkMatchAllBits( validBits, vals.numDocs, reader.maxDoc() );\n    }\n    if( vals.numDocs < 1 ) {\n      vals.valid = new Bits.MatchNoBits( reader.maxDoc() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eee24cbec95372b8e747bf9146a5ef33734029a6"],"382fe3a6ca9745891afebda9b9a57cc158305545":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["eee24cbec95372b8e747bf9146a5ef33734029a6"],"eee24cbec95372b8e747bf9146a5ef33734029a6":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","eee24cbec95372b8e747bf9146a5ef33734029a6"],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee24cbec95372b8e747bf9146a5ef33734029a6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["382fe3a6ca9745891afebda9b9a57cc158305545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}