{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporters(PluginInfo[],SolrResourceLoader,SolrInfoMBean.Group,String...).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporters(PluginInfo[],SolrResourceLoader,SolrInfoMBean.Group,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create and register {@link SolrMetricReporter}-s specific to a {@link org.apache.solr.core.SolrInfoMBean.Group}.\n   * Note: reporters that specify neither \"group\" nor \"registry\" attributes are treated as universal -\n   * they will always be loaded for any group. These two attributes may also contain multiple comma- or\n   * whitespace-separated values, in which case the reporter will be loaded for any matching value from\n   * the list. If both attributes are present then only \"group\" attribute will be processed.\n   * @param pluginInfos plugin configurations\n   * @param loader resource loader\n   * @param group selected group, not null\n   * @param registryNames optional child registry name elements\n   */\n  public void loadReporters(PluginInfo[] pluginInfos, SolrResourceLoader loader, SolrInfoMBean.Group group, String... registryNames) {\n    if (pluginInfos == null || pluginInfos.length == 0) {\n      return;\n    }\n    String registryName = getRegistryName(group, registryNames);\n    for (PluginInfo info : pluginInfos) {\n      String target = info.attributes.get(\"group\");\n      if (target == null) { // no \"group\"\n        target = info.attributes.get(\"registry\");\n        if (target != null) {\n          String[] targets = target.split(\"[\\\\s,]+\");\n          boolean found = false;\n          for (String t : targets) {\n            t = overridableRegistryName(t);\n            if (registryName.equals(t)) {\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            continue;\n          }\n        } else {\n          // neither group nor registry specified.\n          // always register this plugin for all groups and registries\n        }\n      } else { // check groups\n        String[] targets = target.split(\"[\\\\s,]+\");\n        boolean found = false;\n        for (String t : targets) {\n          if (group.toString().equals(t)) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          continue;\n        }\n      }\n      try {\n        loadReporter(registryName, loader, info);\n      } catch (Exception e) {\n        log.warn(\"Error loading metrics reporter, plugin info: \" + info, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporters(PluginInfo[],SolrResourceLoader,SolrInfoMBean.Group,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create and register {@link SolrMetricReporter}-s specific to a {@link org.apache.solr.core.SolrInfoMBean.Group}.\n   * Note: reporters that specify neither \"group\" nor \"registry\" attributes are treated as universal -\n   * they will always be loaded for any group. These two attributes may also contain multiple comma- or\n   * whitespace-separated values, in which case the reporter will be loaded for any matching value from\n   * the list. If both attributes are present then only \"group\" attribute will be processed.\n   * @param pluginInfos plugin configurations\n   * @param loader resource loader\n   * @param group selected group, not null\n   * @param registryNames optional child registry name elements\n   */\n  public void loadReporters(PluginInfo[] pluginInfos, SolrResourceLoader loader, SolrInfoMBean.Group group, String... registryNames) {\n    if (pluginInfos == null || pluginInfos.length == 0) {\n      return;\n    }\n    String registryName = getRegistryName(group, registryNames);\n    for (PluginInfo info : pluginInfos) {\n      String target = info.attributes.get(\"group\");\n      if (target == null) { // no \"group\"\n        target = info.attributes.get(\"registry\");\n        if (target != null) {\n          String[] targets = target.split(\"[\\\\s,]+\");\n          boolean found = false;\n          for (String t : targets) {\n            t = overridableRegistryName(t);\n            if (registryName.equals(t)) {\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            continue;\n          }\n        } else {\n          // neither group nor registry specified.\n          // always register this plugin for all groups and registries\n        }\n      } else { // check groups\n        String[] targets = target.split(\"[\\\\s,]+\");\n        boolean found = false;\n        for (String t : targets) {\n          if (group.toString().equals(t)) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          continue;\n        }\n      }\n      try {\n        loadReporter(registryName, loader, info);\n      } catch (Exception e) {\n        log.warn(\"Error loading metrics reporter, plugin info: \" + info, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporters(PluginInfo[],SolrResourceLoader,String,SolrInfoMBean.Group,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporters(PluginInfo[],SolrResourceLoader,SolrInfoMBean.Group,String...).mjava","sourceNew":"  /**\n   * Create and register {@link SolrMetricReporter}-s specific to a {@link org.apache.solr.core.SolrInfoMBean.Group}.\n   * Note: reporters that specify neither \"group\" nor \"registry\" attributes are treated as universal -\n   * they will always be loaded for any group. These two attributes may also contain multiple comma- or\n   * whitespace-separated values, in which case the reporter will be loaded for any matching value from\n   * the list. If both attributes are present then only \"group\" attribute will be processed.\n   * @param pluginInfos plugin configurations\n   * @param loader resource loader\n   * @param tag optional tag for the reporters, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @param group selected group, not null\n   * @param registryNames optional child registry name elements\n   */\n  public void loadReporters(PluginInfo[] pluginInfos, SolrResourceLoader loader, String tag, SolrInfoMBean.Group group, String... registryNames) {\n    if (pluginInfos == null || pluginInfos.length == 0) {\n      return;\n    }\n    String registryName = getRegistryName(group, registryNames);\n    for (PluginInfo info : pluginInfos) {\n      String target = info.attributes.get(\"group\");\n      if (target == null) { // no \"group\"\n        target = info.attributes.get(\"registry\");\n        if (target != null) {\n          String[] targets = target.split(\"[\\\\s,]+\");\n          boolean found = false;\n          for (String t : targets) {\n            t = overridableRegistryName(t);\n            if (registryName.equals(t)) {\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            continue;\n          }\n        } else {\n          // neither group nor registry specified.\n          // always register this plugin for all groups and registries\n        }\n      } else { // check groups\n        String[] targets = target.split(\"[\\\\s,]+\");\n        boolean found = false;\n        for (String t : targets) {\n          if (group.toString().equals(t)) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          continue;\n        }\n      }\n      try {\n        loadReporter(registryName, loader, info, tag);\n      } catch (Exception e) {\n        log.warn(\"Error loading metrics reporter, plugin info: \" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Create and register {@link SolrMetricReporter}-s specific to a {@link org.apache.solr.core.SolrInfoMBean.Group}.\n   * Note: reporters that specify neither \"group\" nor \"registry\" attributes are treated as universal -\n   * they will always be loaded for any group. These two attributes may also contain multiple comma- or\n   * whitespace-separated values, in which case the reporter will be loaded for any matching value from\n   * the list. If both attributes are present then only \"group\" attribute will be processed.\n   * @param pluginInfos plugin configurations\n   * @param loader resource loader\n   * @param group selected group, not null\n   * @param registryNames optional child registry name elements\n   */\n  public void loadReporters(PluginInfo[] pluginInfos, SolrResourceLoader loader, SolrInfoMBean.Group group, String... registryNames) {\n    if (pluginInfos == null || pluginInfos.length == 0) {\n      return;\n    }\n    String registryName = getRegistryName(group, registryNames);\n    for (PluginInfo info : pluginInfos) {\n      String target = info.attributes.get(\"group\");\n      if (target == null) { // no \"group\"\n        target = info.attributes.get(\"registry\");\n        if (target != null) {\n          String[] targets = target.split(\"[\\\\s,]+\");\n          boolean found = false;\n          for (String t : targets) {\n            t = overridableRegistryName(t);\n            if (registryName.equals(t)) {\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            continue;\n          }\n        } else {\n          // neither group nor registry specified.\n          // always register this plugin for all groups and registries\n        }\n      } else { // check groups\n        String[] targets = target.split(\"[\\\\s,]+\");\n        boolean found = false;\n        for (String t : targets) {\n          if (group.toString().equals(t)) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          continue;\n        }\n      }\n      try {\n        loadReporter(registryName, loader, info);\n      } catch (Exception e) {\n        log.warn(\"Error loading metrics reporter, plugin info: \" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}