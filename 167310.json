{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","commits":[{"id":"8512200aed2724abd80dbeb686d3412d537b7d8a","date":1342139754,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getCloudState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getCloudState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getCloudState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getCloudState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getCloudState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getCloudState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,ZkNodeProps> sliceShards = sliceEntry.getValue().getShards();\n        Iterator<Entry<String,ZkNodeProps>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,ZkNodeProps> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,Map<String,Slice>> collections = solrj.getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c215736a9e29403edd2132d9f0829a287b428df4"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8512200aed2724abd80dbeb686d3412d537b7d8a"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"c215736a9e29403edd2132d9f0829a287b428df4":["c5a558d54519c651068ddb202f03befefb1514a7"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["c215736a9e29403edd2132d9f0829a287b428df4"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0eff89b16ebd0046c839c5d02ee44500be5c7886"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c215736a9e29403edd2132d9f0829a287b428df4":["407687e67faf6e1f02a211ca078d8e3eed631027","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","8512200aed2724abd80dbeb686d3412d537b7d8a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c5a558d54519c651068ddb202f03befefb1514a7":["c215736a9e29403edd2132d9f0829a287b428df4"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}