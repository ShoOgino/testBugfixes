{"path":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to BitSetProducer?\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to BitSetProducer?\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to BitSetProducer?\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return childrenScorer.freq();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, scoreMode, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, scoreMode, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}