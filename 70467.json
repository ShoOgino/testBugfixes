{"path":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","sourceNew":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","sourceOld":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","sourceNew":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","sourceOld":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","sourceNew":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","sourceOld":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f3c1f22c5fe0011e187dac3151422365ae857f3","date":1425728437,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","sourceNew":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch (expected: \" + expectedList.size() + \", got: \" + v.size() + \")\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","sourceOld":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efce6dea0cfd25d21147c588865c2eaf639d02","date":1426252676,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","sourceNew":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","sourceOld":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch (expected: \" + expectedList.size() + \", got: \" + v.size() + \")\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchList().mjava","sourceNew":"  boolean matchList() {\n    @SuppressWarnings({\"rawtypes\"})\n    List expectedList = (List)expected;\n    @SuppressWarnings({\"rawtypes\"})\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","sourceOld":"  boolean matchList() {\n    List expectedList = (List)expected;\n    List v = asList();\n    if (v == null) return false;\n    int a = 0;\n    int b = 0;\n    pushPath(null);\n    for (;;) {\n      if (a >= expectedList.size() &&  b >=v.size()) {\n        break;\n      }\n\n      if (a >= expectedList.size() || b >=v.size()) {\n        popPath();\n        setErr(\"List size mismatch\");\n        return false;\n      }\n\n      expected = expectedList.get(a);\n      val = v.get(b);\n      setPath(b);\n      if (!match()) return false;\n\n      a++; b++;\n    }\n    \n    popPath();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["f1efce6dea0cfd25d21147c588865c2eaf639d02"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f3c1f22c5fe0011e187dac3151422365ae857f3":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1efce6dea0cfd25d21147c588865c2eaf639d02":["6f3c1f22c5fe0011e187dac3151422365ae857f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["6f3c1f22c5fe0011e187dac3151422365ae857f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6f3c1f22c5fe0011e187dac3151422365ae857f3":["f1efce6dea0cfd25d21147c588865c2eaf639d02"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f1efce6dea0cfd25d21147c588865c2eaf639d02":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}