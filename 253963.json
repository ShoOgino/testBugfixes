{"path":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    final Terms result;\n\n    if (!terms.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to terms:\n      final List<Terms> subs2 = new ArrayList<Terms>();\n      final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n        final Terms terms = subs[i].terms(field);\n        if (terms != null) {\n          subs2.add(terms);\n          slices2.add(subSlices[i]);\n        }\n      }\n      if (subs2.size() == 0) {\n        result = null;\n      } else {\n        result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n                                slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n      terms.put(field, result);\n    } else {\n      result = terms.get(field);\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["24cb556000804a8845226c22306b0e257f9670dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24cb556000804a8845226c22306b0e257f9670dc","date":1292598901,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","sourceNew":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    final Terms result;\n\n    if (!terms.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to terms:\n      final List<Terms> subs2 = new ArrayList<Terms>();\n      final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n        final Terms terms = subs[i].terms(field);\n        if (terms != null) {\n          subs2.add(terms);\n          slices2.add(subSlices[i]);\n        }\n      }\n      if (subs2.size() == 0) {\n        result = null;\n      } else {\n        result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n                                slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n      terms.put(field, result);\n    } else {\n      result = terms.get(field);\n    }\n\n    return result;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","sourceNew":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    final Terms result;\n\n    if (!terms.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to terms:\n      final List<Terms> subs2 = new ArrayList<Terms>();\n      final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n        final Terms terms = subs[i].terms(field);\n        if (terms != null) {\n          subs2.add(terms);\n          slices2.add(subSlices[i]);\n        }\n      }\n      if (subs2.size() == 0) {\n        result = null;\n      } else {\n        result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n                                slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n      terms.put(field, result);\n    } else {\n      result = terms.get(field);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","sourceNew":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    final Terms result;\n\n    if (!terms.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to terms:\n      final List<Terms> subs2 = new ArrayList<Terms>();\n      final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n        final Terms terms = subs[i].terms(field);\n        if (terms != null) {\n          subs2.add(terms);\n          slices2.add(subSlices[i]);\n        }\n      }\n      if (subs2.size() == 0) {\n        result = null;\n      } else {\n        result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n                                slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n      terms.put(field, result);\n    } else {\n      result = terms.get(field);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","sourceNew":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["24cb556000804a8845226c22306b0e257f9670dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","24cb556000804a8845226c22306b0e257f9670dc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","24cb556000804a8845226c22306b0e257f9670dc"],"24cb556000804a8845226c22306b0e257f9670dc":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","24cb556000804a8845226c22306b0e257f9670dc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"24cb556000804a8845226c22306b0e257f9670dc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}