{"path":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"/dev/null","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    new BytesRef(terms[i].text()));\n      if (postings != null) {\n        docsEnums.add(postings);\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"953de31d76c9d58f1e3f4e41ff8a48a1529226de","date":1277371072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      final BytesRef text = new BytesRef(terms[i].text());\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    text);\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (MultiFields.getTermDocsEnum(indexReader, delDocs, terms[i].field(), text) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    new BytesRef(terms[i].text()));\n      if (postings != null) {\n        docsEnums.add(postings);\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (MultiFields.getTermDocsEnum(indexReader, delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      final BytesRef text = new BytesRef(terms[i].text());\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    text);\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (MultiFields.getTermDocsEnum(indexReader, delDocs, terms[i].field(), text) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (MultiFields.getTermDocsEnum(indexReader, delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    new BytesRef(terms[i].text()));\n      if (postings != null) {\n        docsEnums.add(postings);\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = indexReader.getDeletedDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (MultiFields.getTermDocsEnum(indexReader, delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = indexReader.getDeletedDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = MultiFields.getDeletedDocs(indexReader);\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (MultiFields.getTermDocsEnum(indexReader, delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits liveDocs = indexReader.getLiveDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(liveDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(liveDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = indexReader.getDeletedDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits liveDocs = indexReader.getLiveDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(liveDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(liveDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = indexReader.getDeletedDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits liveDocs = indexReader.getLiveDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(liveDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(liveDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits delDocs = indexReader.getDeletedDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(delDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(delDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits liveDocs = indexReader.getLiveDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(liveDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(liveDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits liveDocs = indexReader.getLiveDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(liveDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(liveDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d827579cb8382b568e1eb2ab73a72189eb3d9b80","date":1317751030,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,IndexReader,Term[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(IndexReader,Term[]).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(liveDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(liveDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(IndexReader indexReader, Term[] terms) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    final Bits liveDocs = indexReader.getLiveDocs();\n    for (int i = 0; i < terms.length; i++) {\n      DocsAndPositionsEnum postings = indexReader.termPositionsEnum(liveDocs,\n                                                                    terms[i].field(),\n                                                                    terms[i].bytes());\n      if (postings != null) {\n        docsEnums.add(postings);\n      } else {\n        if (indexReader.termDocsEnum(liveDocs, terms[i].field(), terms[i].bytes()) != null) {\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + terms[i].field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + terms[i].text() + \")\");\n        }\n      }\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"d827579cb8382b568e1eb2ab73a72189eb3d9b80":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d827579cb8382b568e1eb2ab73a72189eb3d9b80"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["d827579cb8382b568e1eb2ab73a72189eb3d9b80"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","5f4e87790277826a2aea119328600dfb07761f32"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"d827579cb8382b568e1eb2ab73a72189eb3d9b80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}