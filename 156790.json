{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      // TODO: would be nice to first check if DocTermsIndex\n      // was already cached for this field and then return\n      // that instead, to avoid insanity\n\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final int termCountHardLimit = maxDoc;\n\n      // Holds the actual term data, expanded.\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBPV;\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > termCountHardLimit) {\n            numUniqueTerms = termCountHardLimit;\n          }\n          startBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n        } else {\n          startBPV = 1;\n        }\n      } else {\n        startBPV = 1;\n      }\n\n      final GrowableWriter docToOffset = new GrowableWriter(startBPV, maxDoc, acceptableOverheadRatio);\n      \n      // pointer==0 means not set\n      bytes.copyUsingLengthPrefix(new BytesRef());\n\n      if (terms != null) {\n        int termCount = 0;\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n        while(true) {\n          if (termCount++ == termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            break;\n          }\n\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final long pointer = bytes.copyUsingLengthPrefix(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            docToOffset.set(docID, pointer);\n          }\n        }\n      }\n\n      final PackedInts.Reader offsetReader = docToOffset.getMutable();\n      wrapper.setDocsWithField(reader, key.field, new Bits() {\n          @Override\n          public boolean get(int index) {\n            return offsetReader.get(index) != 0;\n          }\n\n          @Override\n          public int length() {\n            return maxDoc;\n          }\n        }, null);\n      // maybe an int-only impl?\n      return new BinaryDocValuesImpl(bytes.freeze(true), offsetReader);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      // TODO: would be nice to first check if DocTermsIndex\n      // was already cached for this field and then return\n      // that instead, to avoid insanity\n\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final int termCountHardLimit = maxDoc;\n\n      // Holds the actual term data, expanded.\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBPV;\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > termCountHardLimit) {\n            numUniqueTerms = termCountHardLimit;\n          }\n          startBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n        } else {\n          startBPV = 1;\n        }\n      } else {\n        startBPV = 1;\n      }\n\n      final GrowableWriter docToOffset = new GrowableWriter(startBPV, maxDoc, acceptableOverheadRatio);\n      \n      // pointer==0 means not set\n      bytes.copyUsingLengthPrefix(new BytesRef());\n\n      if (terms != null) {\n        int termCount = 0;\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n        while(true) {\n          if (termCount++ == termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            break;\n          }\n\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final long pointer = bytes.copyUsingLengthPrefix(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            docToOffset.set(docID, pointer);\n          }\n        }\n      }\n\n      final PackedInts.Reader offsetReader = docToOffset.getMutable();\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, new Bits() {\n          @Override\n          public boolean get(int index) {\n            return offsetReader.get(index) != 0;\n          }\n\n          @Override\n          public int length() {\n            return maxDoc;\n          }\n        }, null);\n      }\n      // maybe an int-only impl?\n      return new BinaryDocValuesImpl(bytes.freeze(true), offsetReader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      // TODO: would be nice to first check if DocTermsIndex\n      // was already cached for this field and then return\n      // that instead, to avoid insanity\n\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final int termCountHardLimit = maxDoc;\n\n      // Holds the actual term data, expanded.\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBPV;\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > termCountHardLimit) {\n            numUniqueTerms = termCountHardLimit;\n          }\n          startBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n        } else {\n          startBPV = 1;\n        }\n      } else {\n        startBPV = 1;\n      }\n\n      final GrowableWriter docToOffset = new GrowableWriter(startBPV, maxDoc, acceptableOverheadRatio);\n      \n      // pointer==0 means not set\n      bytes.copyUsingLengthPrefix(new BytesRef());\n\n      if (terms != null) {\n        int termCount = 0;\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n        while(true) {\n          if (termCount++ == termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            break;\n          }\n\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final long pointer = bytes.copyUsingLengthPrefix(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            docToOffset.set(docID, pointer);\n          }\n        }\n      }\n\n      final PackedInts.Reader offsetReader = docToOffset.getMutable();\n      wrapper.setDocsWithField(reader, key.field, new Bits() {\n          @Override\n          public boolean get(int index) {\n            return offsetReader.get(index) != 0;\n          }\n\n          @Override\n          public int length() {\n            return maxDoc;\n          }\n        }, null);\n      // maybe an int-only impl?\n      return new BinaryDocValuesImpl(bytes.freeze(true), offsetReader);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      // TODO: would be nice to first check if DocTermsIndex\n      // was already cached for this field and then return\n      // that instead, to avoid insanity\n\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final int termCountHardLimit = maxDoc;\n\n      // Holds the actual term data, expanded.\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBPV;\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > termCountHardLimit) {\n            numUniqueTerms = termCountHardLimit;\n          }\n          startBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n        } else {\n          startBPV = 1;\n        }\n      } else {\n        startBPV = 1;\n      }\n\n      final GrowableWriter docToOffset = new GrowableWriter(startBPV, maxDoc, acceptableOverheadRatio);\n      \n      // pointer==0 means not set\n      bytes.copyUsingLengthPrefix(new BytesRef());\n\n      if (terms != null) {\n        int termCount = 0;\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n        while(true) {\n          if (termCount++ == termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            break;\n          }\n\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final long pointer = bytes.copyUsingLengthPrefix(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            docToOffset.set(docID, pointer);\n          }\n        }\n      }\n\n      final PackedInts.Reader offsetReader = docToOffset.getMutable();\n      wrapper.setDocsWithField(reader, key.field, new Bits() {\n          @Override\n          public boolean get(int index) {\n            return offsetReader.get(index) != 0;\n          }\n\n          @Override\n          public int length() {\n            return maxDoc;\n          }\n        }, null);\n      // maybe an int-only impl?\n      return new BinaryDocValuesImpl(bytes.freeze(true), offsetReader);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c066767cf781550d3a8f94fff30ed80464bc0ad","date":1481239747,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      // TODO: would be nice to first check if DocTermsIndex\n      // was already cached for this field and then return\n      // that instead, to avoid insanity\n\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final int termCountHardLimit = maxDoc;\n\n      // Holds the actual term data, expanded.\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBPV;\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > termCountHardLimit) {\n            numUniqueTerms = termCountHardLimit;\n          }\n          startBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n        } else {\n          startBPV = 1;\n        }\n      } else {\n        startBPV = 1;\n      }\n\n      final GrowableWriter docToOffset = new GrowableWriter(startBPV, maxDoc, acceptableOverheadRatio);\n      \n      // pointer==0 means not set\n      bytes.copyUsingLengthPrefix(new BytesRef());\n\n      if (terms != null) {\n        int termCount = 0;\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n        while(true) {\n          if (termCount++ == termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            break;\n          }\n\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final long pointer = bytes.copyUsingLengthPrefix(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            docToOffset.set(docID, pointer);\n          }\n        }\n      }\n\n      final PackedInts.Reader offsetReader = docToOffset.getMutable();\n      Bits docsWithField = new Bits() {\n        @Override\n        public boolean get(int index) {\n          return offsetReader.get(index) != 0;\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n\n      wrapper.setDocsWithField(reader, key.field, docsWithField, null);\n      // maybe an int-only impl?\n      return new BinaryDocValuesImpl(bytes.freeze(true), offsetReader, docsWithField);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      // TODO: would be nice to first check if DocTermsIndex\n      // was already cached for this field and then return\n      // that instead, to avoid insanity\n\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final int termCountHardLimit = maxDoc;\n\n      // Holds the actual term data, expanded.\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBPV;\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > termCountHardLimit) {\n            numUniqueTerms = termCountHardLimit;\n          }\n          startBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n        } else {\n          startBPV = 1;\n        }\n      } else {\n        startBPV = 1;\n      }\n\n      final GrowableWriter docToOffset = new GrowableWriter(startBPV, maxDoc, acceptableOverheadRatio);\n      \n      // pointer==0 means not set\n      bytes.copyUsingLengthPrefix(new BytesRef());\n\n      if (terms != null) {\n        int termCount = 0;\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n        while(true) {\n          if (termCount++ == termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            break;\n          }\n\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final long pointer = bytes.copyUsingLengthPrefix(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            docToOffset.set(docID, pointer);\n          }\n        }\n      }\n\n      final PackedInts.Reader offsetReader = docToOffset.getMutable();\n      wrapper.setDocsWithField(reader, key.field, new Bits() {\n          @Override\n          public boolean get(int index) {\n            return offsetReader.get(index) != 0;\n          }\n\n          @Override\n          public int length() {\n            return maxDoc;\n          }\n        }, null);\n      // maybe an int-only impl?\n      return new BinaryDocValuesImpl(bytes.freeze(true), offsetReader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesCache#createValue(LeafReader,CacheKey).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      // TODO: would be nice to first check if DocTermsIndex\n      // was already cached for this field and then return\n      // that instead, to avoid insanity\n\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final int termCountHardLimit = maxDoc;\n\n      // Holds the actual term data, expanded.\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBPV;\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > termCountHardLimit) {\n            numUniqueTerms = termCountHardLimit;\n          }\n          startBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n        } else {\n          startBPV = 1;\n        }\n      } else {\n        startBPV = 1;\n      }\n\n      final GrowableWriter docToOffset = new GrowableWriter(startBPV, maxDoc, acceptableOverheadRatio);\n      \n      // pointer==0 means not set\n      bytes.copyUsingLengthPrefix(new BytesRef());\n\n      if (terms != null) {\n        int termCount = 0;\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n        while(true) {\n          if (termCount++ == termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            break;\n          }\n\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final long pointer = bytes.copyUsingLengthPrefix(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            docToOffset.set(docID, pointer);\n          }\n        }\n      }\n\n      final PackedInts.Reader offsetReader = docToOffset.getMutable();\n      Bits docsWithField = new Bits() {\n        @Override\n        public boolean get(int index) {\n          return offsetReader.get(index) != 0;\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n\n      wrapper.setDocsWithField(reader, key.field, docsWithField, null);\n      // maybe an int-only impl?\n      return new BinaryDocValuesImpl(bytes.freeze(true), offsetReader, docsWithField);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      // TODO: would be nice to first check if DocTermsIndex\n      // was already cached for this field and then return\n      // that instead, to avoid insanity\n\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final int termCountHardLimit = maxDoc;\n\n      // Holds the actual term data, expanded.\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBPV;\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > termCountHardLimit) {\n            numUniqueTerms = termCountHardLimit;\n          }\n          startBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n        } else {\n          startBPV = 1;\n        }\n      } else {\n        startBPV = 1;\n      }\n\n      final GrowableWriter docToOffset = new GrowableWriter(startBPV, maxDoc, acceptableOverheadRatio);\n      \n      // pointer==0 means not set\n      bytes.copyUsingLengthPrefix(new BytesRef());\n\n      if (terms != null) {\n        int termCount = 0;\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n        while(true) {\n          if (termCount++ == termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            break;\n          }\n\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          final long pointer = bytes.copyUsingLengthPrefix(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            docToOffset.set(docID, pointer);\n          }\n        }\n      }\n\n      final PackedInts.Reader offsetReader = docToOffset.getMutable();\n      wrapper.setDocsWithField(reader, key.field, new Bits() {\n          @Override\n          public boolean get(int index) {\n            return offsetReader.get(index) != 0;\n          }\n\n          @Override\n          public int length() {\n            return maxDoc;\n          }\n        }, null);\n      // maybe an int-only impl?\n      return new BinaryDocValuesImpl(bytes.freeze(true), offsetReader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9c066767cf781550d3a8f94fff30ed80464bc0ad"],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c066767cf781550d3a8f94fff30ed80464bc0ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9c066767cf781550d3a8f94fff30ed80464bc0ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}