{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field],List[DataConfig.Field]).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field],List[DataConfig.Field]).mjava","pathOld":"/dev/null","sourceNew":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields,\n                                  List<DataConfig.Field> autoFields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n        autoFields.add(new DataConfig.Field(sf.getName(), sf.multiValued()));\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      FieldType fieldType = null;\n\n      try {\n        fieldType = schema.getDynamicFieldType(fld.name);\n      } catch (RuntimeException e) {\n        // Ignore because it may not be a dynamic field\n      }\n\n      if (fld.name != null) {\n        if (schema.getFields().get(fld.name) == null && fieldType == null) {\n          errors\n                  .add(\"The field :\"\n                          + fld.name\n                          + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      } else if (schema.getFields().get(fld.column) == null\n              && fieldType == null) {\n        LOG.info(\"Column : \" + fld.column + \" is not a schema field\");\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e46bf22400b9cd12540418cd46bfa17c100f983a","date":1225303526,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(DataConfig.Entity,Map[String,DataConfig.Field]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field],List[DataConfig.Field]).mjava","sourceNew":"  private String verifyWithSchema(DataConfig.Entity e, Map<String, DataConfig.Field> fields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n        DataConfig.Field field = new DataConfig.Field(sf.getName(), sf.multiValued());\n        e.implicitFields.add(field);\n        e.colNameVsField.put(field.column, field);\n        e.lowercaseColNameVsField.put(field.column.toLowerCase(), field);\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      FieldType fieldType = null;\n\n      try {\n        fieldType = schema.getDynamicFieldType(fld.name);\n      } catch (RuntimeException ex) {\n        // Ignore because it may not be a dynamic field\n      }\n\n      if (fld.name != null) {\n        if (schema.getFields().get(fld.name) == null && fieldType == null) {\n          errors\n                  .add(\"The field :\"\n                          + fld.name\n                          + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      } else if (schema.getFields().get(fld.column) == null\n              && fieldType == null) {\n        LOG.info(\"Column : \" + fld.column + \" is not a schema field\");\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","sourceOld":"  private String verifyWithSchema(Map<String, DataConfig.Field> fields,\n                                  List<DataConfig.Field> autoFields) {\n    List<String> errors = new ArrayList<String>();\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n        autoFields.add(new DataConfig.Field(sf.getName(), sf.multiValued()));\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      FieldType fieldType = null;\n\n      try {\n        fieldType = schema.getDynamicFieldType(fld.name);\n      } catch (RuntimeException e) {\n        // Ignore because it may not be a dynamic field\n      }\n\n      if (fld.name != null) {\n        if (schema.getFields().get(fld.name) == null && fieldType == null) {\n          errors\n                  .add(\"The field :\"\n                          + fld.name\n                          + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      } else if (schema.getFields().get(fld.column) == null\n              && fieldType == null) {\n        LOG.info(\"Column : \" + fld.column + \" is not a schema field\");\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      StringBuffer sb = new StringBuffer(\"There are errors in the Schema\\n\");\n      for (String error : errors) {\n        sb.append(error).append(\"\\n\");\n      }\n      return sb.toString();\n\n    }\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46bf22400b9cd12540418cd46bfa17c100f983a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["e46bf22400b9cd12540418cd46bfa17c100f983a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e46bf22400b9cd12540418cd46bfa17c100f983a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e46bf22400b9cd12540418cd46bfa17c100f983a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}