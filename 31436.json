{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership).mjava","commits":[{"id":"d564e0296db7f80d73dd62b17710f61c85f38c50","date":1523483630,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership).mjava","pathOld":"/dev/null","sourceNew":"    /** Find the intersections with an envelope plane, and assess those intersections for \n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane envelopePlane, final Membership envelopeBound1, final Membership envelopeBound2) {\n      final GeoPoint[] intersections = edge.plane.findIntersections(planetModel, envelopePlane, edge.startPlane, edge.endPlane, envelopeBound1, envelopeBound2);\n      int crossings = 0;\n      if (intersections != null) {\n        for (final GeoPoint intersection : intersections) {\n          // It's unique, so assess it\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      return crossings;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd56d07f4412123997b4b19dfcd68d39aa5b4acd","date":1523531331,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership).mjava","sourceNew":"    /** Find the intersections with an envelope plane, and assess those intersections for \n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane envelopePlane, final Membership envelopeBound1, final Membership envelopeBound2) {\n      final GeoPoint[] intersections = edge.plane.findIntersections(planetModel, envelopePlane, envelopeBound1, envelopeBound2);\n      int crossings = 0;\n      if (intersections != null) {\n        for (final GeoPoint intersection : intersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","sourceOld":"    /** Find the intersections with an envelope plane, and assess those intersections for \n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane envelopePlane, final Membership envelopeBound1, final Membership envelopeBound2) {\n      final GeoPoint[] intersections = edge.plane.findIntersections(planetModel, envelopePlane, edge.startPlane, edge.endPlane, envelopeBound1, envelopeBound2);\n      int crossings = 0;\n      if (intersections != null) {\n        for (final GeoPoint intersection : intersections) {\n          // It's unique, so assess it\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      return crossings;\n    }\n\n","bugFix":null,"bugIntro":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4417cae689ce0fc964a3546ded2b0ab6e374f1b0","date":1523635542,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership).mjava","sourceNew":"    /** Find the intersections with an envelope plane, and assess those intersections for \n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane envelopePlane, final Membership envelopeBound1, final Membership envelopeBound2) {\n      final GeoPoint[] intersections = edge.plane.findIntersections(planetModel, envelopePlane, envelopeBound1, envelopeBound2);\n      int crossings = 0;\n      if (intersections != null) {\n        for (final GeoPoint intersection : intersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            crossings += edgeCrossesEnvelope(edge.plane, intersection, envelopePlane)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","sourceOld":"    /** Find the intersections with an envelope plane, and assess those intersections for \n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane envelopePlane, final Membership envelopeBound1, final Membership envelopeBound2) {\n      final GeoPoint[] intersections = edge.plane.findIntersections(planetModel, envelopePlane, envelopeBound1, envelopeBound2);\n      int crossings = 0;\n      if (intersections != null) {\n        for (final GeoPoint intersection : intersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","bugFix":["cd56d07f4412123997b4b19dfcd68d39aa5b4acd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456381ade0a256838cbf558702284e345c8d3d6","date":1524920804,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership).mjava","sourceNew":"    /** Find the intersections with an envelope plane, and assess those intersections for \n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane envelopePlane, final Membership envelopeBound1, final Membership envelopeBound2) {\n      final GeoPoint[] intersections = edge.plane.findIntersections(planetModel, envelopePlane, envelopeBound1, envelopeBound2);\n      int crossings = 0;\n      if (intersections != null) {\n        for (final GeoPoint intersection : intersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            //System.out.println(\"   Envelope intersection point = \"+intersection);\n            // It's unique, so assess it\n            final int counter = edgeCrossesEnvelope(edge.plane, intersection, envelopePlane)?1:0;\n            //System.out.println(\"   Edge crosses envelope \"+counter+\" times\");\n            crossings += counter;\n          }\n        }\n      } else {\n        //System.out.println(\"   Intersections = null\");\n      }\n      return crossings;\n    }\n\n","sourceOld":"    /** Find the intersections with an envelope plane, and assess those intersections for \n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane envelopePlane, final Membership envelopeBound1, final Membership envelopeBound2) {\n      final GeoPoint[] intersections = edge.plane.findIntersections(planetModel, envelopePlane, envelopeBound1, envelopeBound2);\n      int crossings = 0;\n      if (intersections != null) {\n        for (final GeoPoint intersection : intersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            crossings += edgeCrossesEnvelope(edge.plane, intersection, envelopePlane)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e456381ade0a256838cbf558702284e345c8d3d6":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"d564e0296db7f80d73dd62b17710f61c85f38c50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4417cae689ce0fc964a3546ded2b0ab6e374f1b0":["cd56d07f4412123997b4b19dfcd68d39aa5b4acd"],"cd56d07f4412123997b4b19dfcd68d39aa5b4acd":["d564e0296db7f80d73dd62b17710f61c85f38c50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e456381ade0a256838cbf558702284e345c8d3d6"]},"commit2Childs":{"e456381ade0a256838cbf558702284e345c8d3d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d564e0296db7f80d73dd62b17710f61c85f38c50":["cd56d07f4412123997b4b19dfcd68d39aa5b4acd"],"4417cae689ce0fc964a3546ded2b0ab6e374f1b0":["e456381ade0a256838cbf558702284e345c8d3d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d564e0296db7f80d73dd62b17710f61c85f38c50"],"cd56d07f4412123997b4b19dfcd68d39aa5b4acd":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}