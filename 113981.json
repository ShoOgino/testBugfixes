{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean,boolean).mjava","commits":[{"id":"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702","date":1578318221,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare, boolean filesystem) {\n    // IOContext randomization might make NRTCachingDirectory make bad decisions, so avoid\n    // using it if the user requested a filesystem directory.\n    if (rarely(random) && !bare && filesystem == false) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare, boolean filesystem) {\n    // IOContext randomization might make NRTCachingDirectory make bad decisions, so avoid\n    // using it if the user requested a filesystem directory.\n    if (rarely(random) && !bare && filesystem == false) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7b7b37c556b53f91c7690ec4fc7f11a41f6b702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b7b37c556b53f91c7690ec4fc7f11a41f6b702"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7b7b37c556b53f91c7690ec4fc7f11a41f6b702","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}