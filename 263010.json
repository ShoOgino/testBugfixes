{"path":"lucene/core/src/java/org/apache/lucene/util/BroadWord#selectNaive(long,int).mjava","commits":[{"id":"0debe908d97b40345a206ca1671a9fd299833558","date":1373663120,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BroadWord#selectNaive(long,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Naive implementation of {@link #select9(long,int)}, using {@link Long#numberOfTrailingZeros} repetitively.\n   * @return The index of the r-th 1 bit in x, or if no such bit exists, 72.\n   */\n  public static int selectNaive(long x, int r) {\n    assert r >= 1;\n    int s = -1;\n    while ((x != 0L) && (r > 0)) {\n      int ntz = Long.numberOfTrailingZeros(x);\n      x >>>= (ntz + 1);\n      s += (ntz + 1);\n      r -= 1;\n    }\n    int res = (r > 0) ? 72 : s;\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BroadWord#selectNaive(long,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Naive implementation of {@link #select9(long,int)}, using {@link Long#numberOfTrailingZeros} repetitively.\n   * @return The index of the r-th 1 bit in x, or if no such bit exists, 72.\n   */\n  public static int selectNaive(long x, int r) {\n    assert r >= 1;\n    int s = -1;\n    while ((x != 0L) && (r > 0)) {\n      int ntz = Long.numberOfTrailingZeros(x);\n      x >>>= (ntz + 1);\n      s += (ntz + 1);\n      r -= 1;\n    }\n    int res = (r > 0) ? 72 : s;\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423470dff9e19aa0db92590e282e2ca12e34d65a","date":1381851051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BroadWord#selectNaive(long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BroadWord#selectNaive(long,int).mjava","sourceNew":"  /**\n   * Naive implementation of {@link #select(long,int)}, using {@link Long#numberOfTrailingZeros} repetitively.\n   * Works relatively fast for low ranks.\n   * @return The index of the r-th 1 bit in x, or if no such bit exists, 72.\n   */\n  public static int selectNaive(long x, int r) {\n    assert r >= 1;\n    int s = -1;\n    while ((x != 0L) && (r > 0)) {\n      int ntz = Long.numberOfTrailingZeros(x);\n      x >>>= (ntz + 1);\n      s += (ntz + 1);\n      r -= 1;\n    }\n    int res = (r > 0) ? 72 : s;\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Naive implementation of {@link #select9(long,int)}, using {@link Long#numberOfTrailingZeros} repetitively.\n   * @return The index of the r-th 1 bit in x, or if no such bit exists, 72.\n   */\n  public static int selectNaive(long x, int r) {\n    assert r >= 1;\n    int s = -1;\n    while ((x != 0L) && (r > 0)) {\n      int ntz = Long.numberOfTrailingZeros(x);\n      x >>>= (ntz + 1);\n      s += (ntz + 1);\n      r -= 1;\n    }\n    int res = (r > 0) ? 72 : s;\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9291fc3833dffda8db27cfa063a07f17a8bbbfe7","date":1415205164,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitUtil#selectNaive(long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BroadWord#selectNaive(long,int).mjava","sourceNew":"  /**\n   * Naive implementation of {@link #select(long,int)}, using {@link Long#numberOfTrailingZeros} repetitively.\n   * Works relatively fast for low ranks.\n   * @return The index of the r-th 1 bit in x, or -1 if no such bit exists.\n   */\n  public static int selectNaive(long x, int r) {\n    assert r >= 1;\n    int s = -1;\n    while ((x != 0L) && (r > 0)) {\n      int ntz = Long.numberOfTrailingZeros(x);\n      x >>>= (ntz + 1);\n      s += (ntz + 1);\n      r -= 1;\n    }\n    int res = (r > 0) ? -1 : s;\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Naive implementation of {@link #select(long,int)}, using {@link Long#numberOfTrailingZeros} repetitively.\n   * Works relatively fast for low ranks.\n   * @return The index of the r-th 1 bit in x, or if no such bit exists, 72.\n   */\n  public static int selectNaive(long x, int r) {\n    assert r >= 1;\n    int s = -1;\n    while ((x != 0L) && (r > 0)) {\n      int ntz = Long.numberOfTrailingZeros(x);\n      x >>>= (ntz + 1);\n      s += (ntz + 1);\n      r -= 1;\n    }\n    int res = (r > 0) ? 72 : s;\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0debe908d97b40345a206ca1671a9fd299833558"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["0debe908d97b40345a206ca1671a9fd299833558"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9291fc3833dffda8db27cfa063a07f17a8bbbfe7":["423470dff9e19aa0db92590e282e2ca12e34d65a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9291fc3833dffda8db27cfa063a07f17a8bbbfe7"],"0debe908d97b40345a206ca1671a9fd299833558":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"423470dff9e19aa0db92590e282e2ca12e34d65a":["9291fc3833dffda8db27cfa063a07f17a8bbbfe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0debe908d97b40345a206ca1671a9fd299833558"],"9291fc3833dffda8db27cfa063a07f17a8bbbfe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0debe908d97b40345a206ca1671a9fd299833558":["37a0f60745e53927c4c876cfe5b5a58170f0646c","423470dff9e19aa0db92590e282e2ca12e34d65a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}