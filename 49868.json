{"path":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#fastBits(AtomicIndexReader,Bits).mjava","commits":[{"id":"e0e127513fa72fb902d0fdf25139f738dd04c1d1","date":1327855878,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#fastBits(AtomicIndexReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#fastBits(IndexReader,Bits).mjava","sourceNew":"  private FixedBitSet fastBits(AtomicIndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n    bits.set(0, reader.maxDoc()); //assume all are valid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        if (termsEnum.docFreq() > 1) {\n          // unset potential duplicates\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          int doc = docs.nextDoc();\n          if (doc != DocsEnum.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              doc = docs.nextDoc();\n            }\n          }\n\n          int lastDoc = -1;\n          while (true) {\n            lastDoc = doc;\n            bits.clear(lastDoc);\n            doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n          if (keepMode == KeepMode.KM_USE_LAST_OCCURRENCE) {\n            // restore the last bit\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet fastBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n    bits.set(0, reader.maxDoc()); //assume all are valid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        if (termsEnum.docFreq() > 1) {\n          // unset potential duplicates\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          int doc = docs.nextDoc();\n          if (doc != DocsEnum.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              doc = docs.nextDoc();\n            }\n          }\n\n          int lastDoc = -1;\n          while (true) {\n            lastDoc = doc;\n            bits.clear(lastDoc);\n            doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n          if (keepMode == KeepMode.KM_USE_LAST_OCCURRENCE) {\n            // restore the last bit\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#fastBits(AtomicReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#fastBits(AtomicIndexReader,Bits).mjava","sourceNew":"  private FixedBitSet fastBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n    bits.set(0, reader.maxDoc()); //assume all are valid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        if (termsEnum.docFreq() > 1) {\n          // unset potential duplicates\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          int doc = docs.nextDoc();\n          if (doc != DocsEnum.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              doc = docs.nextDoc();\n            }\n          }\n\n          int lastDoc = -1;\n          while (true) {\n            lastDoc = doc;\n            bits.clear(lastDoc);\n            doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n          if (keepMode == KeepMode.KM_USE_LAST_OCCURRENCE) {\n            // restore the last bit\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet fastBits(AtomicIndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n    bits.set(0, reader.maxDoc()); //assume all are valid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        if (termsEnum.docFreq() > 1) {\n          // unset potential duplicates\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          int doc = docs.nextDoc();\n          if (doc != DocsEnum.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              doc = docs.nextDoc();\n            }\n          }\n\n          int lastDoc = -1;\n          while (true) {\n            lastDoc = doc;\n            bits.clear(lastDoc);\n            doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n          if (keepMode == KeepMode.KM_USE_LAST_OCCURRENCE) {\n            // restore the last bit\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0e127513fa72fb902d0fdf25139f738dd04c1d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["e0e127513fa72fb902d0fdf25139f738dd04c1d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e0e127513fa72fb902d0fdf25139f738dd04c1d1":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0e127513fa72fb902d0fdf25139f738dd04c1d1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}