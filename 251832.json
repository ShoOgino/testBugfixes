{"path":"lucene/core/src/java/org/apache/lucene/search/MaxScoreCache#getSkipLevel(Impacts,float).mjava","commits":[{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreCache#getSkipLevel(Impacts,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MaxScoreCache#getSkipLevel(float).mjava","sourceNew":"  /**\n   * Return the maximum level at which scores are all less than {@code minScore},\n   * or -1 if none.\n   */\n  private int getSkipLevel(Impacts impacts, float minScore) throws IOException {\n    final int numLevels = impacts.numLevels();\n    for (int level = 0; level < numLevels; ++level) {\n      if (getMaxScoreForLevel(level) >= minScore) {\n        return level - 1;\n      }\n    }\n    return numLevels - 1;\n  }\n\n","sourceOld":"  /**\n   * Return the maximum level at which scores are all less than {@code minScore},\n   * or -1 if none.\n   */\n  int getSkipLevel(float minScore) throws IOException {\n    final Impacts impacts = impactsEnum.getImpacts();\n    final int numLevels = impacts.numLevels();\n    for (int level = 0; level < numLevels; ++level) {\n      if (getMaxScoreForLevel(level) >= minScore) {\n        return level - 1;\n      }\n    }\n    return numLevels - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f2c13220a828a78007cedb364e22dd8986ed650":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f2c13220a828a78007cedb364e22dd8986ed650"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f2c13220a828a78007cedb364e22dd8986ed650"],"2f2c13220a828a78007cedb364e22dd8986ed650":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}