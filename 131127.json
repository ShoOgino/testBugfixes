{"path":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","commits":[{"id":"42f6b4065cdaf7d1be530c926dc327494bee4ffa","date":1239273470,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = (SegmentReader) IndexReader.open(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = (SegmentReader) IndexReader.open(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}