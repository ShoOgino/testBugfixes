{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoShape(int,PlanetModel,Constraints).mjava","commits":[{"id":"f215583134d6d66410e3c48b32282e3eb9d5fcde","date":1505141283,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoShape(int,PlanetModel,Constraints).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that returns a random generated GeoShape under given constraints. Returns\n   * NULL if it cannot build the GeoShape under the given constraints.\n   *\n   * @param shapeType The polygon code.\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoShape.\n   */\n  public GeoShape randomGeoShape(int shapeType, PlanetModel planetModel, Constraints constraints){\n    switch (shapeType) {\n      case CONVEX_POLYGON: {\n        return convexPolygon(planetModel, constraints);\n      }\n      case CONVEX_POLYGON_WITH_HOLES: {\n        return convexPolygonWithHoles(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON: {\n        return concavePolygon(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON_WITH_HOLES: {\n        return concavePolygonWithHoles(planetModel, constraints);\n      }\n      case COMPLEX_POLYGON: {\n        return complexPolygon(planetModel, constraints);\n      }\n      case CIRCLE: {\n        return circle(planetModel, constraints);\n      }\n      case RECTANGLE: {\n        return rectangle(planetModel, constraints);\n      }\n      case PATH: {\n        return path(planetModel, constraints);\n      }\n      case COLLECTION: {\n        return collection(planetModel, constraints);\n      }\n      case POINT: {\n        return point(planetModel, constraints);\n      }\n      case LINE: {\n        return line(planetModel, constraints);\n      }\n      case CONVEX_SIMPLE_POLYGON: {\n        return simpleConvexPolygon(planetModel, constraints);\n      }\n      case CONCAVE_SIMPLE_POLYGON: {\n        return concaveSimplePolygon(planetModel, constraints);\n      }\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoShape(int,PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#randomGeoShape(int,PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated GeoShape under given constraints. Returns\n   * NULL if it cannot build the GeoShape under the given constraints.\n   *\n   * @param shapeType The polygon code.\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoShape.\n   */\n  public GeoShape randomGeoShape(int shapeType, PlanetModel planetModel, Constraints constraints){\n    switch (shapeType) {\n      case CONVEX_POLYGON: {\n        return convexPolygon(planetModel, constraints);\n      }\n      case CONVEX_POLYGON_WITH_HOLES: {\n        return convexPolygonWithHoles(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON: {\n        return concavePolygon(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON_WITH_HOLES: {\n        return concavePolygonWithHoles(planetModel, constraints);\n      }\n      case COMPLEX_POLYGON: {\n        return complexPolygon(planetModel, constraints);\n      }\n      case CIRCLE: {\n        return circle(planetModel, constraints);\n      }\n      case RECTANGLE: {\n        return rectangle(planetModel, constraints);\n      }\n      case PATH: {\n        return path(planetModel, constraints);\n      }\n      case COLLECTION: {\n        return collection(planetModel, constraints);\n      }\n      case POINT: {\n        return point(planetModel, constraints);\n      }\n      case LINE: {\n        return line(planetModel, constraints);\n      }\n      case CONVEX_SIMPLE_POLYGON: {\n        return simpleConvexPolygon(planetModel, constraints);\n      }\n      case CONCAVE_SIMPLE_POLYGON: {\n        return concaveSimplePolygon(planetModel, constraints);\n      }\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated GeoShape under given constraints. Returns\n   * NULL if it cannot build the GeoShape under the given constraints.\n   *\n   * @param shapeType The polygon code.\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoShape.\n   */\n  public GeoShape randomGeoShape(int shapeType, PlanetModel planetModel, Constraints constraints){\n    switch (shapeType) {\n      case CONVEX_POLYGON: {\n        return convexPolygon(planetModel, constraints);\n      }\n      case CONVEX_POLYGON_WITH_HOLES: {\n        return convexPolygonWithHoles(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON: {\n        return concavePolygon(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON_WITH_HOLES: {\n        return concavePolygonWithHoles(planetModel, constraints);\n      }\n      case COMPLEX_POLYGON: {\n        return complexPolygon(planetModel, constraints);\n      }\n      case CIRCLE: {\n        return circle(planetModel, constraints);\n      }\n      case RECTANGLE: {\n        return rectangle(planetModel, constraints);\n      }\n      case PATH: {\n        return path(planetModel, constraints);\n      }\n      case COLLECTION: {\n        return collection(planetModel, constraints);\n      }\n      case CONVEX_SIMPLE_POLYGON: {\n        return simpleConvexPolygon(planetModel, constraints);\n      }\n      case CONCAVE_SIMPLE_POLYGON: {\n        return concaveSimplePolygon(planetModel, constraints);\n      }\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2252ea609db951d15af4430bee806a8d09fd8d6d","date":1506501078,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoShape(int,PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoShape(int,PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated GeoShape under given constraints. Returns\n   * NULL if it cannot build the GeoShape under the given constraints.\n   *\n   * @param shapeType The polygon code.\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoShape.\n   */\n  public GeoShape randomGeoShape(int shapeType, PlanetModel planetModel, Constraints constraints){\n    switch (shapeType) {\n      case CONVEX_POLYGON: {\n        return convexPolygon(planetModel, constraints);\n      }\n      case CONVEX_POLYGON_WITH_HOLES: {\n        return convexPolygonWithHoles(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON: {\n        return concavePolygon(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON_WITH_HOLES: {\n        return concavePolygonWithHoles(planetModel, constraints);\n      }\n      case COMPLEX_POLYGON: {\n        return complexPolygon(planetModel, constraints);\n      }\n      case CIRCLE: {\n        return circle(planetModel, constraints);\n      }\n      case RECTANGLE: {\n        return rectangle(planetModel, constraints);\n      }\n      case PATH: {\n        return path(planetModel, constraints);\n      }\n      case COLLECTION: {\n        return collection(planetModel, constraints);\n      }\n      case POINT: {\n        return point(planetModel, constraints);\n      }\n      case LINE: {\n        return line(planetModel, constraints);\n      }\n      case CONVEX_SIMPLE_POLYGON: {\n        return simpleConvexPolygon(planetModel, constraints);\n      }\n      case CONCAVE_SIMPLE_POLYGON: {\n        return concaveSimplePolygon(planetModel, constraints);\n      }\n      case EXACT_CIRCLE: {\n        return exactCircle(planetModel, constraints);\n      }\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated GeoShape under given constraints. Returns\n   * NULL if it cannot build the GeoShape under the given constraints.\n   *\n   * @param shapeType The polygon code.\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoShape.\n   */\n  public GeoShape randomGeoShape(int shapeType, PlanetModel planetModel, Constraints constraints){\n    switch (shapeType) {\n      case CONVEX_POLYGON: {\n        return convexPolygon(planetModel, constraints);\n      }\n      case CONVEX_POLYGON_WITH_HOLES: {\n        return convexPolygonWithHoles(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON: {\n        return concavePolygon(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON_WITH_HOLES: {\n        return concavePolygonWithHoles(planetModel, constraints);\n      }\n      case COMPLEX_POLYGON: {\n        return complexPolygon(planetModel, constraints);\n      }\n      case CIRCLE: {\n        return circle(planetModel, constraints);\n      }\n      case RECTANGLE: {\n        return rectangle(planetModel, constraints);\n      }\n      case PATH: {\n        return path(planetModel, constraints);\n      }\n      case COLLECTION: {\n        return collection(planetModel, constraints);\n      }\n      case POINT: {\n        return point(planetModel, constraints);\n      }\n      case LINE: {\n        return line(planetModel, constraints);\n      }\n      case CONVEX_SIMPLE_POLYGON: {\n        return simpleConvexPolygon(planetModel, constraints);\n      }\n      case CONCAVE_SIMPLE_POLYGON: {\n        return concaveSimplePolygon(planetModel, constraints);\n      }\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoShape(int,PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoShape(int,PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated GeoShape under given constraints. Returns\n   * NULL if it cannot build the GeoShape under the given constraints.\n   *\n   * @param shapeType The polygon code.\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoShape.\n   */\n  public GeoShape randomGeoShape(int shapeType, PlanetModel planetModel, Constraints constraints){\n    switch (shapeType) {\n      case CONVEX_POLYGON: {\n        return convexPolygon(planetModel, constraints);\n      }\n      case CONVEX_POLYGON_WITH_HOLES: {\n        return convexPolygonWithHoles(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON: {\n        return concavePolygon(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON_WITH_HOLES: {\n        return concavePolygonWithHoles(planetModel, constraints);\n      }\n      case COMPLEX_POLYGON: {\n        return complexPolygon(planetModel, constraints);\n      }\n      case CIRCLE: {\n        return circle(planetModel, constraints);\n      }\n      case RECTANGLE: {\n        return rectangle(planetModel, constraints);\n      }\n      case PATH: {\n        return path(planetModel, constraints);\n      }\n      case COLLECTION: {\n        return collection(planetModel, constraints);\n      }\n      case POINT: {\n        return point(planetModel, constraints);\n      }\n      case LINE: {\n        return line(planetModel, constraints);\n      }\n      case CONVEX_SIMPLE_POLYGON: {\n        return simpleConvexPolygon(planetModel, constraints);\n      }\n      case CONCAVE_SIMPLE_POLYGON: {\n        return concaveSimplePolygon(planetModel, constraints);\n      }\n      case EXACT_CIRCLE: {\n        return exactCircle(planetModel, constraints);\n      }\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated GeoShape under given constraints. Returns\n   * NULL if it cannot build the GeoShape under the given constraints.\n   *\n   * @param shapeType The polygon code.\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoShape.\n   */\n  public GeoShape randomGeoShape(int shapeType, PlanetModel planetModel, Constraints constraints){\n    switch (shapeType) {\n      case CONVEX_POLYGON: {\n        return convexPolygon(planetModel, constraints);\n      }\n      case CONVEX_POLYGON_WITH_HOLES: {\n        return convexPolygonWithHoles(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON: {\n        return concavePolygon(planetModel, constraints);\n      }\n      case CONCAVE_POLYGON_WITH_HOLES: {\n        return concavePolygonWithHoles(planetModel, constraints);\n      }\n      case COMPLEX_POLYGON: {\n        return complexPolygon(planetModel, constraints);\n      }\n      case CIRCLE: {\n        return circle(planetModel, constraints);\n      }\n      case RECTANGLE: {\n        return rectangle(planetModel, constraints);\n      }\n      case PATH: {\n        return path(planetModel, constraints);\n      }\n      case COLLECTION: {\n        return collection(planetModel, constraints);\n      }\n      case POINT: {\n        return point(planetModel, constraints);\n      }\n      case LINE: {\n        return line(planetModel, constraints);\n      }\n      case CONVEX_SIMPLE_POLYGON: {\n        return simpleConvexPolygon(planetModel, constraints);\n      }\n      case CONCAVE_SIMPLE_POLYGON: {\n        return concaveSimplePolygon(planetModel, constraints);\n      }\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["685bd38810c206c93e9058f3c2cfa9827c086c27","2252ea609db951d15af4430bee806a8d09fd8d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2252ea609db951d15af4430bee806a8d09fd8d6d":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2252ea609db951d15af4430bee806a8d09fd8d6d"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"2252ea609db951d15af4430bee806a8d09fd8d6d":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["685bd38810c206c93e9058f3c2cfa9827c086c27","2252ea609db951d15af4430bee806a8d09fd8d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}