{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","commits":[{"id":"09b2046a929f8ee073bf5b75cbbf2b60e413a6bd","date":1490979270,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since special buckets missing and allBuckets themselves will always be included, we only need to worry about subfacets being partial.\n      if (freq.missing) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, missingBucket, \"missing\");\n      }\n      if (freq.allBuckets) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, allBuckets, \"allBuckets\");\n      }\n    }\n    return refinement;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14abccfea62dff435ac0457e128ca6bc703087d6","date":1491045405,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since special buckets missing and allBuckets themselves will always be included, we only need to worry about subfacets being partial.\n      if (freq.missing) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, missingBucket, \"missing\");\n      }\n      if (freq.allBuckets) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, allBuckets, \"allBuckets\");\n      }\n    }\n    return refinement;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c711bb8c3aac052fb8e0e9d417517c94166d5d","date":1491485369,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","sourceNew":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since special buckets missing and allBuckets themselves will always be included, we only need to worry about subfacets being partial.\n      if (freq.missing) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, missingBucket, \"missing\");\n      }\n      /** allBuckets does not execute sub-facets because we don't change the domain.  We may need refinement info in the future though for stats.\n      if (freq.allBuckets) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, allBuckets, \"allBuckets\");\n      }\n       **/\n    }\n    return refinement;\n  }\n\n","sourceOld":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since special buckets missing and allBuckets themselves will always be included, we only need to worry about subfacets being partial.\n      if (freq.missing) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, missingBucket, \"missing\");\n      }\n      if (freq.allBuckets) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, allBuckets, \"allBuckets\");\n      }\n    }\n    return refinement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","sourceNew":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since special buckets missing and allBuckets themselves will always be included, we only need to worry about subfacets being partial.\n      if (freq.missing) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, missingBucket, \"missing\");\n      }\n      /** allBuckets does not execute sub-facets because we don't change the domain.  We may need refinement info in the future though for stats.\n      if (freq.allBuckets) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, allBuckets, \"allBuckets\");\n      }\n       **/\n    }\n    return refinement;\n  }\n\n","sourceOld":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since special buckets missing and allBuckets themselves will always be included, we only need to worry about subfacets being partial.\n      if (freq.missing) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, missingBucket, \"missing\");\n      }\n      if (freq.allBuckets) {\n        refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, allBuckets, \"allBuckets\");\n      }\n    }\n    return refinement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["14abccfea62dff435ac0457e128ca6bc703087d6"],"14abccfea62dff435ac0457e128ca6bc703087d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09b2046a929f8ee073bf5b75cbbf2b60e413a6bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10c711bb8c3aac052fb8e0e9d417517c94166d5d":["09b2046a929f8ee073bf5b75cbbf2b60e413a6bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10c711bb8c3aac052fb8e0e9d417517c94166d5d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"14abccfea62dff435ac0457e128ca6bc703087d6":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14abccfea62dff435ac0457e128ca6bc703087d6","09b2046a929f8ee073bf5b75cbbf2b60e413a6bd"],"09b2046a929f8ee073bf5b75cbbf2b60e413a6bd":["10c711bb8c3aac052fb8e0e9d417517c94166d5d"],"10c711bb8c3aac052fb8e0e9d417517c94166d5d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}