{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}