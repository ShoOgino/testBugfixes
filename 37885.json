{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#decodeTriangle(byte[],int[]).mjava","commits":[{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#decodeTriangle(byte[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decode a triangle encoded by {@link LatLonShape#encodeTriangle(byte[], int, int, int, int, int, int)}.\n   */\n  public static void decodeTriangle(byte[] t, int[] triangle) {\n    assert triangle.length == 6;\n    int bits = NumericUtils.sortableBytesToInt(t, 6 * LatLonShape.BYTES);\n    //extract the first three bits\n    int tCode = (((1 << 3) - 1) & (bits >> 0));\n    switch (tCode) {\n      case MINY_MINX_MAXY_MAXX_Y_X:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        break;\n      case MINY_MINX_Y_X_MAXY_MAXX:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        break;\n      case MAXY_MINX_Y_X_MINY_MAXX:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        break;\n      case MAXY_MINX_MINY_MAXX_Y_X:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        break;\n      case Y_MINX_MINY_X_MAXY_MAXX:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        break;\n      case Y_MINX_MINY_MAXX_MAXY_X:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        break;\n      case MAXY_MINX_MINY_X_Y_MAXX:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        break;\n      case MINY_MINX_Y_MAXX_MAXY_X:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Could not decode the provided triangle\");\n    }\n    //Points of the decoded triangle must be co-planar or CCW oriented\n    assert GeoUtils.orient(triangle[1], triangle[0], triangle[3], triangle[2], triangle[5], triangle[4]) >= 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#decodeTriangle(byte[],int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Decode a triangle encoded by {@link LatLonShape#encodeTriangle(byte[], int, int, int, int, int, int)}.\n   */\n  public static void decodeTriangle(byte[] t, int[] triangle) {\n    assert triangle.length == 6;\n    int bits = NumericUtils.sortableBytesToInt(t, 6 * LatLonShape.BYTES);\n    //extract the first three bits\n    int tCode = (((1 << 3) - 1) & (bits >> 0));\n    switch (tCode) {\n      case MINY_MINX_MAXY_MAXX_Y_X:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        break;\n      case MINY_MINX_Y_X_MAXY_MAXX:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        break;\n      case MAXY_MINX_Y_X_MINY_MAXX:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        break;\n      case MAXY_MINX_MINY_MAXX_Y_X:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        break;\n      case Y_MINX_MINY_X_MAXY_MAXX:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        break;\n      case Y_MINX_MINY_MAXX_MAXY_X:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        break;\n      case MAXY_MINX_MINY_X_Y_MAXX:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        break;\n      case MINY_MINX_Y_MAXX_MAXY_X:\n        triangle[0] = NumericUtils.sortableBytesToInt(t, 0 * LatLonShape.BYTES);\n        triangle[1] = NumericUtils.sortableBytesToInt(t, 1 * LatLonShape.BYTES);\n        triangle[2] = NumericUtils.sortableBytesToInt(t, 4 * LatLonShape.BYTES);\n        triangle[3] = NumericUtils.sortableBytesToInt(t, 3 * LatLonShape.BYTES);\n        triangle[4] = NumericUtils.sortableBytesToInt(t, 2 * LatLonShape.BYTES);\n        triangle[5] = NumericUtils.sortableBytesToInt(t, 5 * LatLonShape.BYTES);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Could not decode the provided triangle\");\n    }\n    //Points of the decoded triangle must be co-planar or CCW oriented\n    assert GeoUtils.orient(triangle[1], triangle[0], triangle[3], triangle[2], triangle[5], triangle[4]) >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2aeefba8262036d422d639e48c49d51316bea138":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"]},"commit2Childs":{"2aeefba8262036d422d639e48c49d51316bea138":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2aeefba8262036d422d639e48c49d51316bea138"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}