{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","commits":[{"id":"009caa80830ac6369c42e5f6515405d686eabfee","date":1494487120,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d64e4b13048b3a4c03a20959037e5fb858764a2f","date":1495651323,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2f4717538692c396242d8b00ae0001626caebdd","date":1495700710,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2480cf60350a342e5e57439f3e71092fabc364a2","date":1499215962,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":["464244264804e3f981bf1fb4b732516d8d62dbc2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":["009caa80830ac6369c42e5f6515405d686eabfee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d815fede7a7f5184fb54d235b3ecb95cadcf554c","date":1551718463,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    if (!triggerFiredLatch.await(30, TimeUnit.SECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testTriggerThrottling().mjava","sourceNew":null,"sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the node we had started earlier\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner jettySolrRunner = jettySolrRunners.get(i);\n      if (jettySolrRunner == newNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2480cf60350a342e5e57439f3e71092fabc364a2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0d9c88546c1a130d50b56981790d87a308daffd"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"e2f4717538692c396242d8b00ae0001626caebdd":["009caa80830ac6369c42e5f6515405d686eabfee","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["009caa80830ac6369c42e5f6515405d686eabfee"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["89948af0461fead48f44ba8fb7866f107ce83f22"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["d815fede7a7f5184fb54d235b3ecb95cadcf554c"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["e2f4717538692c396242d8b00ae0001626caebdd","464244264804e3f981bf1fb4b732516d8d62dbc2"],"009caa80830ac6369c42e5f6515405d686eabfee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["e2f4717538692c396242d8b00ae0001626caebdd"],"d815fede7a7f5184fb54d235b3ecb95cadcf554c":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","2480cf60350a342e5e57439f3e71092fabc364a2"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"2480cf60350a342e5e57439f3e71092fabc364a2":["e0d9c88546c1a130d50b56981790d87a308daffd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["d815fede7a7f5184fb54d235b3ecb95cadcf554c"],"e2f4717538692c396242d8b00ae0001626caebdd":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["e2f4717538692c396242d8b00ae0001626caebdd"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["2480cf60350a342e5e57439f3e71092fabc364a2","e0d9c88546c1a130d50b56981790d87a308daffd"],"009caa80830ac6369c42e5f6515405d686eabfee":["e2f4717538692c396242d8b00ae0001626caebdd","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","009caa80830ac6369c42e5f6515405d686eabfee","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"d815fede7a7f5184fb54d235b3ecb95cadcf554c":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"e0d9c88546c1a130d50b56981790d87a308daffd":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}