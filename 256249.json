{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertClusterStateEquals(ClusterState,ClusterState).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertClusterStateEquals(ClusterState,ClusterState).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertClusterStateEquals(ClusterState one, ClusterState two) {\n    assertEquals(one.getLiveNodes(), two.getLiveNodes());\n    assertEquals(one.getCollectionsMap().keySet(), two.getCollectionsMap().keySet());\n    one.forEachCollection(oneColl -> {\n      DocCollection twoColl = two.getCollection(oneColl.getName());\n      Map<String, Slice> oneSlices = oneColl.getSlicesMap();\n      Map<String, Slice> twoSlices = twoColl.getSlicesMap();\n      assertEquals(oneSlices.keySet(), twoSlices.keySet());\n      oneSlices.forEach((s, slice) -> {\n        Slice sTwo = twoSlices.get(s);\n        for (Replica oneReplica : slice.getReplicas()) {\n          Replica twoReplica = sTwo.getReplica(oneReplica.getName());\n          assertNotNull(twoReplica);\n          assertReplicaEquals(oneReplica, twoReplica);\n        }\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb2411226bebe23191dc34a8e8252a936a7261a8","date":1557853382,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#assertClusterStateEquals(ClusterState,ClusterState).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertClusterStateEquals(ClusterState,ClusterState).mjava","sourceNew":"  /**\n   * Compare two ClusterState-s, filtering out simulation framework artifacts.\n   * @param one\n   * @param two\n   */\n  public static void assertClusterStateEquals(ClusterState one, ClusterState two) {\n    assertEquals(one.getLiveNodes(), two.getLiveNodes());\n    assertEquals(one.getCollectionsMap().keySet(), two.getCollectionsMap().keySet());\n    one.forEachCollection(oneColl -> {\n      DocCollection twoColl = two.getCollection(oneColl.getName());\n      Map<String, Slice> oneSlices = oneColl.getSlicesMap();\n      Map<String, Slice> twoSlices = twoColl.getSlicesMap();\n      assertEquals(oneSlices.keySet(), twoSlices.keySet());\n      oneSlices.forEach((s, slice) -> {\n        Slice sTwo = twoSlices.get(s);\n        for (Replica oneReplica : slice.getReplicas()) {\n          Replica twoReplica = sTwo.getReplica(oneReplica.getName());\n          assertNotNull(twoReplica);\n          assertReplicaEquals(oneReplica, twoReplica);\n        }\n      });\n    });\n  }\n\n","sourceOld":"  private static void assertClusterStateEquals(ClusterState one, ClusterState two) {\n    assertEquals(one.getLiveNodes(), two.getLiveNodes());\n    assertEquals(one.getCollectionsMap().keySet(), two.getCollectionsMap().keySet());\n    one.forEachCollection(oneColl -> {\n      DocCollection twoColl = two.getCollection(oneColl.getName());\n      Map<String, Slice> oneSlices = oneColl.getSlicesMap();\n      Map<String, Slice> twoSlices = twoColl.getSlicesMap();\n      assertEquals(oneSlices.keySet(), twoSlices.keySet());\n      oneSlices.forEach((s, slice) -> {\n        Slice sTwo = twoSlices.get(s);\n        for (Replica oneReplica : slice.getReplicas()) {\n          Replica twoReplica = sTwo.getReplica(oneReplica.getName());\n          assertNotNull(twoReplica);\n          assertReplicaEquals(oneReplica, twoReplica);\n        }\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb2411226bebe23191dc34a8e8252a936a7261a8":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb2411226bebe23191dc34a8e8252a936a7261a8"]},"commit2Childs":{"cb2411226bebe23191dc34a8e8252a936a7261a8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["cb2411226bebe23191dc34a8e8252a936a7261a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}