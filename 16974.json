{"path":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3741149a89925c02f14dbeef8365b896798d91fc","date":1303483574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","3741149a89925c02f14dbeef8365b896798d91fc"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3741149a89925c02f14dbeef8365b896798d91fc"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["962d04139994fce5193143ef35615499a9a96d78","3741149a89925c02f14dbeef8365b896798d91fc"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","3741149a89925c02f14dbeef8365b896798d91fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3741149a89925c02f14dbeef8365b896798d91fc":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["962d04139994fce5193143ef35615499a9a96d78","3741149a89925c02f14dbeef8365b896798d91fc"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3741149a89925c02f14dbeef8365b896798d91fc":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}