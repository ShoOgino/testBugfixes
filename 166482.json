{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random.nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random.nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random.nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    FieldCache.Ints ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    FieldCache.Ints numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    FieldCache.Ints ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    FieldCache.Ints numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    FieldCache.Ints ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    FieldCache.Ints numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    FieldCache.Ints ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    FieldCache.Ints numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    FieldCache.Ints ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    FieldCache.Ints numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","f45457a742a53533c348c4b990b1c579ff364467"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["d4d69c535930b5cce125cff868d40f6373dc27d4","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["d4d69c535930b5cce125cff868d40f6373dc27d4","93dd449115a9247533e44bab47e8429e5dccbc6d"],"f45457a742a53533c348c4b990b1c579ff364467":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d4d69c535930b5cce125cff868d40f6373dc27d4","f45457a742a53533c348c4b990b1c579ff364467"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}