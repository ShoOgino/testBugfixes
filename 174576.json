{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#getRandomIDs().mjava","commits":[{"id":"ca044bd4a0bea8391cbebb44a34aba53a9b50541","date":1400784655,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#getRandomIDs().mjava","pathOld":"/dev/null","sourceNew":"  private IDSource getRandomIDs() {\n    IDSource ids;\n    switch (random().nextInt(6)) {\n    case 0:\n      // random simple\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random simple ids\");\n      }\n      ids = new IDSource() {\n          @Override\n          public String next() {\n            return TestUtil.randomSimpleString(random());\n          }\n        };\n      break;\n    case 1:\n      // random realistic unicode\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random realistic unicode ids\");\n      }\n      ids = new IDSource() {\n          @Override\n          public String next() {\n            return TestUtil.randomRealisticUnicodeString(random());\n          }\n        };\n      break;\n    case 2:\n      // sequential\n      if (VERBOSE) {\n        System.out.println(\"TEST: use seuquential ids\");\n      }\n      ids = new IDSource() {\n          int upto;\n          @Override\n          public String next() {\n            return Integer.toString(upto++);\n          }\n        };\n      break;\n    case 3:\n      // zero-pad sequential\n      if (VERBOSE) {\n        System.out.println(\"TEST: use zero-pad seuquential ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          final String zeroPad = String.format(Locale.ROOT, \"%0\" + TestUtil.nextInt(random(), 4, 20) + \"d\", 0);\n          int upto;\n          @Override\n          public String next() {\n            String s = Integer.toString(upto++);\n            return zeroPad.substring(zeroPad.length() - s.length()) + s;\n          }\n        };\n      break;\n    case 4:\n      // random long\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random long ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          int upto;\n          @Override\n          public String next() {\n            return Long.toString(random().nextLong() & 0x7ffffffffffffffL, radix);\n          }\n        };\n      break;\n    case 5:\n      // zero-pad random long\n      if (VERBOSE) {\n        System.out.println(\"TEST: use zero-pad random long ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          final String zeroPad = String.format(Locale.ROOT, \"%015d\", 0);\n          int upto;\n          @Override\n          public String next() {\n            return Long.toString(random().nextLong() & 0x7ffffffffffffffL, radix);\n          }\n        };\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    return ids;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#getRandomIDs().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#getRandomIDs().mjava","sourceNew":"  private IDSource getRandomIDs() {\n    IDSource ids;\n    switch (random().nextInt(6)) {\n    case 0:\n      // random simple\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random simple ids\");\n      }\n      ids = new IDSource() {\n          @Override\n          public String next() {\n            return TestUtil.randomSimpleString(random());\n          }\n        };\n      break;\n    case 1:\n      // random realistic unicode\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random realistic unicode ids\");\n      }\n      ids = new IDSource() {\n          @Override\n          public String next() {\n            return TestUtil.randomRealisticUnicodeString(random());\n          }\n        };\n      break;\n    case 2:\n      // sequential\n      if (VERBOSE) {\n        System.out.println(\"TEST: use seuquential ids\");\n      }\n      ids = new IDSource() {\n          int upto;\n          @Override\n          public String next() {\n            return Integer.toString(upto++);\n          }\n        };\n      break;\n    case 3:\n      // zero-pad sequential\n      if (VERBOSE) {\n        System.out.println(\"TEST: use zero-pad seuquential ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          final String zeroPad = String.format(Locale.ROOT, \"%0\" + TestUtil.nextInt(random(), 4, 20) + \"d\", 0);\n          int upto;\n          @Override\n          public String next() {\n            String s = Integer.toString(upto++);\n            return zeroPad.substring(zeroPad.length() - s.length()) + s;\n          }\n        };\n      break;\n    case 4:\n      // random long\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random long ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          int upto;\n          @Override\n          public String next() {\n            return Long.toString(random().nextLong() & 0x7ffffffffffffffL, radix);\n          }\n        };\n      break;\n    case 5:\n      // zero-pad random long\n      if (VERBOSE) {\n        System.out.println(\"TEST: use zero-pad random long ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          final String zeroPad = String.format(Locale.ROOT, \"%015d\", 0);\n          int upto;\n          @Override\n          public String next() {\n            return Long.toString(random().nextLong() & 0x7ffffffffffffffL, radix);\n          }\n        };\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    return ids;\n  }\n\n","sourceOld":"  private IDSource getRandomIDs() {\n    IDSource ids;\n    switch (random().nextInt(6)) {\n    case 0:\n      // random simple\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random simple ids\");\n      }\n      ids = new IDSource() {\n          @Override\n          public String next() {\n            return TestUtil.randomSimpleString(random());\n          }\n        };\n      break;\n    case 1:\n      // random realistic unicode\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random realistic unicode ids\");\n      }\n      ids = new IDSource() {\n          @Override\n          public String next() {\n            return TestUtil.randomRealisticUnicodeString(random());\n          }\n        };\n      break;\n    case 2:\n      // sequential\n      if (VERBOSE) {\n        System.out.println(\"TEST: use seuquential ids\");\n      }\n      ids = new IDSource() {\n          int upto;\n          @Override\n          public String next() {\n            return Integer.toString(upto++);\n          }\n        };\n      break;\n    case 3:\n      // zero-pad sequential\n      if (VERBOSE) {\n        System.out.println(\"TEST: use zero-pad seuquential ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          final String zeroPad = String.format(Locale.ROOT, \"%0\" + TestUtil.nextInt(random(), 4, 20) + \"d\", 0);\n          int upto;\n          @Override\n          public String next() {\n            String s = Integer.toString(upto++);\n            return zeroPad.substring(zeroPad.length() - s.length()) + s;\n          }\n        };\n      break;\n    case 4:\n      // random long\n      if (VERBOSE) {\n        System.out.println(\"TEST: use random long ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          int upto;\n          @Override\n          public String next() {\n            return Long.toString(random().nextLong() & 0x7ffffffffffffffL, radix);\n          }\n        };\n      break;\n    case 5:\n      // zero-pad random long\n      if (VERBOSE) {\n        System.out.println(\"TEST: use zero-pad random long ids\");\n      }\n      ids = new IDSource() {\n          final int radix = TestUtil.nextInt(random(), Character.MIN_RADIX, Character.MAX_RADIX);\n          final String zeroPad = String.format(Locale.ROOT, \"%015d\", 0);\n          int upto;\n          @Override\n          public String next() {\n            return Long.toString(random().nextLong() & 0x7ffffffffffffffL, radix);\n          }\n        };\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["ca044bd4a0bea8391cbebb44a34aba53a9b50541"],"ca044bd4a0bea8391cbebb44a34aba53a9b50541":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"ca044bd4a0bea8391cbebb44a34aba53a9b50541":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca044bd4a0bea8391cbebb44a34aba53a9b50541","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}