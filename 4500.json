{"path":"src/java/org/apache/lucene/queryParser/QueryParser#setUseOldRangeQuery(boolean).mjava","commits":[{"id":"fe05d78659c647b5665db68d3848e0c081c1d167","date":1163625969,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setUseOldRangeQuery(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * By default QueryParser uses new ConstantScoreRangeQuery in preference to RangeQuery\n   * for range queries. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of range terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the old-fashioned RangeQuery and the above\n   * points are not required then set this option to <code>true</code>\n   * Default is <code>false</code>.\n   */\n  public void setUseOldRangeQuery(boolean useOldRangeQuery) {\n    this.useOldRangeQuery = useOldRangeQuery;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setUseOldRangeQuery(boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setUseOldRangeQuery(boolean).mjava","sourceNew":"  /**\n   * @deprecated Please use {@link #setConstantScoreRewrite} instead.\n   */\n  public void setUseOldRangeQuery(boolean useOldRangeQuery) {\n    constantScoreRewrite = !useOldRangeQuery;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses new ConstantScoreRangeQuery in preference to RangeQuery\n   * for range queries. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of range terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the old-fashioned RangeQuery and the above\n   * points are not required then set this option to <code>true</code>\n   * Default is <code>false</code>.\n   */\n  public void setUseOldRangeQuery(boolean useOldRangeQuery) {\n    this.useOldRangeQuery = useOldRangeQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setUseOldRangeQuery(boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setUseOldRangeQuery(boolean).mjava","sourceNew":"  /**\n   * @deprecated Please use {@link #setMultiTermRewriteMethod} instead.\n   */\n  public void setUseOldRangeQuery(boolean useOldRangeQuery) {\n    if (useOldRangeQuery) {\n      setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    } else {\n      setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    }\n  }\n\n","sourceOld":"  /**\n   * @deprecated Please use {@link #setConstantScoreRewrite} instead.\n   */\n  public void setUseOldRangeQuery(boolean useOldRangeQuery) {\n    constantScoreRewrite = !useOldRangeQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setUseOldRangeQuery(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated Please use {@link #setMultiTermRewriteMethod} instead.\n   */\n  public void setUseOldRangeQuery(boolean useOldRangeQuery) {\n    if (useOldRangeQuery) {\n      setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    } else {\n      setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe05d78659c647b5665db68d3848e0c081c1d167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["fe05d78659c647b5665db68d3848e0c081c1d167"]},"commit2Childs":{"fe05d78659c647b5665db68d3848e0c081c1d167":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe05d78659c647b5665db68d3848e0c081c1d167"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}