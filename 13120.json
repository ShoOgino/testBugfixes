{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random, sdir1, new MockAnalyzer(random));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random, sdir2, new MockAnalyzer(random));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      IndexReader.open(sdir1), IndexReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"data\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"data\", Integer.toString(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"data\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.shutdown(); swriter1.shutdown(); swriter2.shutdown();\n    \n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"data\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"data\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.close(); swriter1.close(); swriter2.close();\n    \n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    sdir1 = newDirectory();\n    sdir2 = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter1 = new RandomIndexWriter(random(), sdir1, new MockAnalyzer(random()));\n    final RandomIndexWriter swriter2 = new RandomIndexWriter(random(), sdir2, new MockAnalyzer(random()));\n\n    for (int i = 0; i < 10; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"data\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n      ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);\n    }\n    writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);\n    writer.shutdown(); swriter1.shutdown(); swriter2.shutdown();\n    \n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    \n    multiReader = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(sdir2) \n    }, true);\n    multiSearcher = newSearcher(multiReader);\n    \n    multiReaderDupls = new MultiReader(new IndexReader[] {\n      DirectoryReader.open(sdir1), DirectoryReader.open(dir) \n    }, true);\n    multiSearcherDupls = newSearcher(multiReaderDupls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}