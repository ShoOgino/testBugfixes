{"path":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","commits":[{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<PostingsFormat,FieldsGroup>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<String,Integer>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          assert suffixes.containsKey(formatName);\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        assert previousValue == null;\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        assert previousValue == null;\n      }\n\n      // Second pass: write postings\n      for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n        PostingsFormat format = ent.getKey();\n        final FieldsGroup group = ent.getValue();\n\n        // Exposes only the fields from this group:\n        Fields maskedFields = new FilterFields(fields) {\n            @Override\n            public Iterator<String> iterator() {\n              return group.fields.iterator();\n            }\n          };\n\n        format.fieldsConsumer(group.state).write(maskedFields);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["132f1575a9078b618f9e1c35ac94f06444006662"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          assert suffixes.containsKey(formatName);\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        assert previousValue == null;\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        assert previousValue == null;\n      }\n\n      // Second pass: write postings\n      for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n        PostingsFormat format = ent.getKey();\n        final FieldsGroup group = ent.getValue();\n\n        // Exposes only the fields from this group:\n        Fields maskedFields = new FilterFields(fields) {\n            @Override\n            public Iterator<String> iterator() {\n              return group.fields.iterator();\n            }\n          };\n\n        format.fieldsConsumer(group.state).write(maskedFields);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<PostingsFormat,FieldsGroup>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<String,Integer>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          assert suffixes.containsKey(formatName);\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        assert previousValue == null;\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        assert previousValue == null;\n      }\n\n      // Second pass: write postings\n      for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n        PostingsFormat format = ent.getKey();\n        final FieldsGroup group = ent.getValue();\n\n        // Exposes only the fields from this group:\n        Fields maskedFields = new FilterFields(fields) {\n            @Override\n            public Iterator<String> iterator() {\n              return group.fields.iterator();\n            }\n          };\n\n        format.fieldsConsumer(group.state).write(maskedFields);\n      }\n    }\n\n","bugFix":null,"bugIntro":["132f1575a9078b618f9e1c35ac94f06444006662"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","date":1398957288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          assert suffixes.containsKey(formatName);\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        assert previousValue == null;\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        assert previousValue == null;\n      }\n\n      // Second pass: write postings\n      boolean success = false;\n      try {\n        for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n              @Override\n              public Iterator<String> iterator() {\n                return group.fields.iterator();\n              }\n            };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (success == false) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          assert suffixes.containsKey(formatName);\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        assert previousValue == null;\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        assert previousValue == null;\n      }\n\n      // Second pass: write postings\n      for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n        PostingsFormat format = ent.getKey();\n        final FieldsGroup group = ent.getValue();\n\n        // Exposes only the fields from this group:\n        Fields maskedFields = new FilterFields(fields) {\n            @Override\n            public Iterator<String> iterator() {\n              return group.fields.iterator();\n            }\n          };\n\n        format.fieldsConsumer(group.state).write(maskedFields);\n      }\n    }\n\n","bugFix":null,"bugIntro":["132f1575a9078b618f9e1c35ac94f06444006662"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ee4acc14f03bf124a6f983def032db2489bd00d","date":1411815313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          if (!suffixes.containsKey(formatName)) {\n            throw new IllegalStateException(\"no suffix for format name: \" + formatName + \", expected: \" + group.suffix);\n          }\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + formatName);\n        }\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + group.suffix);\n        }\n      }\n\n      // Second pass: write postings\n      boolean success = false;\n      try {\n        for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n              @Override\n              public Iterator<String> iterator() {\n                return group.fields.iterator();\n              }\n            };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (success == false) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          assert suffixes.containsKey(formatName);\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        assert previousValue == null;\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        assert previousValue == null;\n      }\n\n      // Second pass: write postings\n      boolean success = false;\n      try {\n        for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n              @Override\n              public Iterator<String> iterator() {\n                return group.fields.iterator();\n              }\n            };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (success == false) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["132f1575a9078b618f9e1c35ac94f06444006662"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          if (!suffixes.containsKey(formatName)) {\n            throw new IllegalStateException(\"no suffix for format name: \" + formatName + \", expected: \" + group.suffix);\n          }\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + formatName);\n        }\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + group.suffix);\n        }\n      }\n\n      // Second pass: write postings\n      boolean success = false;\n      try {\n        for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n              @Override\n              public Iterator<String> iterator() {\n                return group.fields.iterator();\n              }\n            };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (success == false) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          assert suffixes.containsKey(formatName);\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        assert previousValue == null;\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        assert previousValue == null;\n      }\n\n      // Second pass: write postings\n      boolean success = false;\n      try {\n        for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n              @Override\n              public Iterator<String> iterator() {\n                return group.fields.iterator();\n              }\n            };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (success == false) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132f1575a9078b618f9e1c35ac94f06444006662","date":1475595294,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      Map<PostingsFormat, FieldsGroup> formatToGroups = buildFieldsGroupMapping(fields);\n\n      // Write postings\n      boolean success = false;\n      try {\n        for (Map.Entry<PostingsFormat, FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n            @Override\n            public Iterator<String> iterator() {\n              return group.fields.iterator();\n            }\n          };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          if (!suffixes.containsKey(formatName)) {\n            throw new IllegalStateException(\"no suffix for format name: \" + formatName + \", expected: \" + group.suffix);\n          }\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + formatName);\n        }\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + group.suffix);\n        }\n      }\n\n      // Second pass: write postings\n      boolean success = false;\n      try {\n        for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n              @Override\n              public Iterator<String> iterator() {\n                return group.fields.iterator();\n              }\n            };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (success == false) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","bugFix":["8ee4acc14f03bf124a6f983def032db2489bd00d","634f330c54fd3f9f491d52036dc3f40b4f4d8934","7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      Map<PostingsFormat, FieldsGroup> formatToGroups = buildFieldsGroupMapping(fields);\n\n      // Write postings\n      boolean success = false;\n      try {\n        for (Map.Entry<PostingsFormat, FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n            @Override\n            public Iterator<String> iterator() {\n              return group.fields.iterator();\n            }\n          };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // First pass: assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          if (!suffixes.containsKey(formatName)) {\n            throw new IllegalStateException(\"no suffix for format name: \" + formatName + \", expected: \" + group.suffix);\n          }\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + formatName);\n        }\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + group.suffix);\n        }\n      }\n\n      // Second pass: write postings\n      boolean success = false;\n      try {\n        for(Map.Entry<PostingsFormat,FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n              @Override\n              public Iterator<String> iterator() {\n                return group.fields.iterator();\n              }\n            };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (success == false) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n      Map<PostingsFormat, FieldsGroup> formatToGroups = buildFieldsGroupMapping(fields);\n\n      // Write postings\n      boolean success = false;\n      try {\n        for (Map.Entry<PostingsFormat, FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n            @Override\n            public Iterator<String> iterator() {\n              return group.fields.iterator();\n            }\n          };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields, norms);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      Map<PostingsFormat, FieldsGroup> formatToGroups = buildFieldsGroupMapping(fields);\n\n      // Write postings\n      boolean success = false;\n      try {\n        for (Map.Entry<PostingsFormat, FieldsGroup> ent : formatToGroups.entrySet()) {\n          PostingsFormat format = ent.getKey();\n          final FieldsGroup group = ent.getValue();\n\n          // Exposes only the fields from this group:\n          Fields maskedFields = new FilterFields(fields) {\n            @Override\n            public Iterator<String> iterator() {\n              return group.fields.iterator();\n            }\n          };\n\n          FieldsConsumer consumer = format.fieldsConsumer(group.state);\n          toClose.add(consumer);\n          consumer.write(maskedFields);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(toClose);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"132f1575a9078b618f9e1c35ac94f06444006662":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","8ee4acc14f03bf124a6f983def032db2489bd00d"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ee4acc14f03bf124a6f983def032db2489bd00d":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"622a708571e534680618b3c5e0c28ac539a47776":["132f1575a9078b618f9e1c35ac94f06444006662"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","132f1575a9078b618f9e1c35ac94f06444006662"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["9bb9a29a5e71a90295f175df8919802993142c9a","8ee4acc14f03bf124a6f983def032db2489bd00d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"132f1575a9078b618f9e1c35ac94f06444006662":["622a708571e534680618b3c5e0c28ac539a47776","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9bb9a29a5e71a90295f175df8919802993142c9a":["132f1575a9078b618f9e1c35ac94f06444006662","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8ee4acc14f03bf124a6f983def032db2489bd00d":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}