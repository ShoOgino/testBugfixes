{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#testFacetPivotRange().mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#testFacetPivotRange().mjava","pathOld":"/dev/null","sourceNew":"  private void testFacetPivotRange() throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"{!range=s1}place_t,company_t\");\n    params.add(\"facet.range\", \"{!tag=s1 key=price}price_ti\");\n    params.add(\"facet.range.start\", \"0\");\n    params.add(\"facet.range.end\", \"100\");\n    params.add(\"facet.range.gap\", \"20\");\n\n    QueryResponse rsp = queryServer(params);\n\n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\",\n        \"microsoft\", 2, null, null, createExpectedRange(\"price\", 0, 100,\n        20, 1, 0, 0, 0, 0)));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        3, null, null, createExpectedRange(\"price\", 0, 100, 20, 1, 1, 0,\n        0, 0)));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",\n        1, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 0, 0,\n        0, 0)));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null, null, createExpectedRange(\"price\", 0, 100, 20, 2, 1, 0,\n        0, 0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null, null, createExpectedRange(\"price\", 0, 100, 20, 2, 1, 0,\n        0, 0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 1, 1, 0, 0,\n        0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",\n        2, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0,\n        0, 0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 0, 0, 0,\n        0)));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        3, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 2, 0,\n        0, 0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        2, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0,\n        0, 0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",\n        2, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0,\n        0, 0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 2, 0, 0,\n        0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null,\n        null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0, 0)));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null,\n        null, createExpectedRange(\"price\", 0, 100, 20, 0, 0, 0, 0, 0)));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        2, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0,\n        0, 0)));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",\n        1, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 0, 0,\n        0, 0)));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        1, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 0, 0,\n        0, 0)));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 0, 0, 0,\n        0)));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 0, 0, 0,\n        0)));\n\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots, null, createExpectedRange(\"price\", 0, 100,\n        20, 2, 1, 0, 0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,\n        expectedCardiffPivots, null, createExpectedRange(\"price\", 0, 100,\n        20, 1, 1, 0, 0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots, null, createExpectedRange(\"price\", 0, 100,\n        20, 0, 3, 0, 0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3,\n        expectedLAPivots, null, createExpectedRange(\"price\", 0, 100, 20,\n        0, 1, 0, 0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3,\n        expectedKrakowPivots, null, createExpectedRange(\"price\", 0, 100,\n        20, 0, 1, 0, 0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1,\n        expectedCorkPivots, null, createExpectedRange(\"price\", 0, 100,\n        20, 0, 0, 0, 0, 0)));\n\n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n\n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n\n    assertEquals(expectedPlacePivots, placePivots);\n\n    // Test sorting by count\n\n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n\n    rsp = queryServer(params);\n\n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n\n    testCountSorting(placePivots);\n\n    // Test limit\n\n    params.set(FacetParams.FACET_LIMIT, 2);\n\n    rsp = queryServer(params);\n\n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null, null, createExpectedRange(\"price\", 0, 100, 20, 2, 1, 0,\n        0, 0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null, null, createExpectedRange(\"price\", 0, 100, 20, 2, 1, 0,\n        0, 0)));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 2, 0, 0,\n        0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        3, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 2, 0,\n        0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots, null, createExpectedRange(\"price\", 0, 100,\n        20, 2, 1, 0, 0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots, null, createExpectedRange(\"price\", 0, 100,\n        20, 0, 3, 0, 0, 0)));\n\n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n\n    assertEquals(expectedPlacePivots, placePivots);\n\n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n\n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n\n    rsp = queryServer(params);\n\n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null, null, createExpectedRange(\"price\", 0, 100, 20, 2, 1, 0,\n        0, 0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null, null, createExpectedRange(\"price\", 0, 100, 20, 2, 1, 0,\n        0, 0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 1, 1, 0, 0,\n        0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",\n        2, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0,\n        0, 0)));\n\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 2, 0, 0,\n        0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        3, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 2, 0,\n        0, 0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",\n        2, null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0,\n        0, 0)));\n\n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        3, null, null, createExpectedRange(\"price\", 0, 100, 20, 1, 1, 0,\n        0, 0)));\n\n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n\n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 1, 0, 0,\n        0)));\n\n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1,\n        null, null, createExpectedRange(\"price\", 0, 100, 20, 0, 0, 0, 0,\n        0)));\n\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots, null, createExpectedRange(\"price\", 0, 100,\n        20, 2, 1, 0, 0, 0)));\n\n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    assertEquals(expectedPlacePivots, placePivots);\n\n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n\n    // Test facet.missing=true with diff sorts\n\n    index(\"id\", 777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n        \"facet.pivot\", \"place_t,company_t\",\n        // default facet.sort\n        FacetParams.FACET_MISSING, \"true\");\n    SolrParams missingB = SolrParams.wrapDefaults(missingA,\n        params(FacetParams.FACET_LIMIT, \"4\", \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[]{missingA, missingB}) {\n      // in either case, the last pivot option should be the same\n      rsp = query(p);\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots,\n          1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size() - 1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \" + p + \" => \"\n          + missing.getPivot(), 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size() - 1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[]{\n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\", \"0\", \"facet.overrequest.ratio\", \"0\"),\n        params()}) {\n\n      SolrParams p = SolrParams.wrapDefaults(\n          params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.pivot\",\n              \"company_t\", \"facet.sort\", \"index\", \"facet.pivot.mincount\", \"4\",\n              \"facet.limit\", \"4\"), variableParams);\n\n      try {\n        List<PivotField> pivots = query(p).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[]{\n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\", \"0\", \"facet.overrequest.ratio\", \"0\"),\n        params()}) {\n\n      SolrParams p = SolrParams.wrapDefaults(\n          params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.pivot\",\n              \"company_t\", \"facet.sort\", \"index\", \"facet.pivot.mincount\", \"4\",\n              \"facet.offset\", \"1\", \"facet.limit\", \"4\"), variableParams);\n      try {\n        List<PivotField> pivots = query(p).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the\n        // mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n\n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[]{\n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\", \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\", \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\", \"facet.offset\", \"0\")}) {\n\n      SolrParams p = SolrParams.wrapDefaults(\n          params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.limit\", \"1\",\n              \"facet.sort\", \"index\", \"facet.overrequest.ratio\", \"0\",\n              \"facet.pivot\", \"company_t\"), variableParams);\n\n      try {\n        List<PivotField> pivots = query(p).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}