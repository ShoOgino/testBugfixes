{"path":"solr/core/src/java/org/apache/solr/search/join/FiltersQParser#excludeSet(Map,Set[String]).mjava","commits":[{"id":"5f7c69c29432074b666568db5e84001acd540dee","date":1520745905,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/FiltersQParser#excludeSet(Map,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private Collection<?> excludeSet(@SuppressWarnings(\"rawtypes\") \n                                     Map tagMap, Set<String> tagsToExclude) {\n\n    IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<>();\n    for (String excludeTag : tagsToExclude) {\n      Object olst = tagMap.get(excludeTag);\n      // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n      if (!(olst instanceof Collection)) continue;\n      for (Object o : (Collection<?>)olst) {\n        if (!(o instanceof QParser)) continue;\n        QParser qp = (QParser)o;\n        try {\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        } catch (SyntaxError syntaxError) {\n          // This should not happen since we should only be retrieving a previously parsed query\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      }\n    }\n    return excludeSet.keySet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b2cebce8aded9fff0c315c32efe811679c29d47","date":1593532507,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/FiltersQParser#excludeSet(Map,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/FiltersQParser#excludeSet(Map,Set[String]).mjava","sourceNew":"  private Collection<QParser> excludeSet(@SuppressWarnings(\"rawtypes\")\n                                     Map tagMap, Set<String> tagsToExclude) {\n\n    IdentityHashMap<QParser,Boolean> excludeSet = new IdentityHashMap<>();\n    for (String excludeTag : tagsToExclude) {\n      Object olst = tagMap.get(excludeTag);\n      // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n      if (!(olst instanceof Collection)) continue;\n      for (Object o : (Collection<?>)olst) {\n        if (!(o instanceof QParser)) continue;\n        QParser qp = (QParser)o;\n        excludeSet.put(qp, Boolean.TRUE);\n      }\n    }\n    return excludeSet.keySet();\n  }\n\n","sourceOld":"  private Collection<?> excludeSet(@SuppressWarnings(\"rawtypes\") \n                                     Map tagMap, Set<String> tagsToExclude) {\n\n    IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<>();\n    for (String excludeTag : tagsToExclude) {\n      Object olst = tagMap.get(excludeTag);\n      // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n      if (!(olst instanceof Collection)) continue;\n      for (Object o : (Collection<?>)olst) {\n        if (!(o instanceof QParser)) continue;\n        QParser qp = (QParser)o;\n        try {\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        } catch (SyntaxError syntaxError) {\n          // This should not happen since we should only be retrieving a previously parsed query\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      }\n    }\n    return excludeSet.keySet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b2cebce8aded9fff0c315c32efe811679c29d47":["5f7c69c29432074b666568db5e84001acd540dee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f7c69c29432074b666568db5e84001acd540dee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b2cebce8aded9fff0c315c32efe811679c29d47"]},"commit2Childs":{"5b2cebce8aded9fff0c315c32efe811679c29d47":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f7c69c29432074b666568db5e84001acd540dee"],"5f7c69c29432074b666568db5e84001acd540dee":["5b2cebce8aded9fff0c315c32efe811679c29d47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}