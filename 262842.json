{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#testAutoScalingConfig().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#testAutoScalingConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#testAutoScalingConfig().mjava","sourceNew":"  @Test\n  public void testAutoScalingConfig() throws Exception {\n    final CountDownLatch triggered = new CountDownLatch(1);\n    Watcher w = ev -> {\n      if (triggered.getCount() == 0) {\n        fail(\"already triggered once!\");\n      }\n      triggered.countDown();\n    };\n    AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig(w);\n    assertEquals(autoScalingConfig, cfg);\n    Preference p = new Preference(Collections.singletonMap(\"maximize\", \"freedisk\"));\n    cfg = cfg.withPolicy(cfg.getPolicy().withClusterPreferences(Collections.singletonList(p)));\n    setAutoScalingConfig(cfg);\n    if (!triggered.await(10, TimeUnit.SECONDS)) {\n      fail(\"Watch should be triggered on update!\");\n    }\n    AutoScalingConfig cfg1 = cloudManager.getDistribStateManager().getAutoScalingConfig(null);\n    assertEquals(cfg, cfg1);\n\n    // restore\n    setAutoScalingConfig(autoScalingConfig);\n    cfg1 = cloudManager.getDistribStateManager().getAutoScalingConfig(null);\n    assertEquals(autoScalingConfig, cfg1);\n  }\n\n","sourceOld":"  @Test\n  public void testAutoScalingConfig() throws Exception {\n    final CountDownLatch triggered = new CountDownLatch(1);\n    Watcher w = ev -> {\n      if (triggered.getCount() == 0) {\n        fail(\"already triggered once!\");\n      }\n      triggered.countDown();\n    };\n    AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig(w);\n    assertEquals(autoScalingConfig, cfg);\n    Preference p = new Preference(Collections.singletonMap(\"maximize\", \"freedisk\"));\n    cfg = cfg.withPolicy(cfg.getPolicy().withClusterPreferences(Collections.singletonList(p)));\n    setAutoScalingConfig(cfg);\n    if (!triggered.await(10, TimeUnit.SECONDS)) {\n      fail(\"Watch should be triggered on update!\");\n    }\n    AutoScalingConfig cfg1 = cloudManager.getDistribStateManager().getAutoScalingConfig(null);\n    assertEquals(cfg, cfg1);\n\n    // restore\n    setAutoScalingConfig(autoScalingConfig);\n    cfg1 = cloudManager.getDistribStateManager().getAutoScalingConfig(null);\n    assertEquals(autoScalingConfig, cfg1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#testAutoScalingConfig().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAutoScalingConfig() throws Exception {\n    final CountDownLatch triggered = new CountDownLatch(1);\n    Watcher w = ev -> {\n      if (triggered.getCount() == 0) {\n        fail(\"already triggered once!\");\n      }\n      triggered.countDown();\n    };\n    AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig(w);\n    assertEquals(autoScalingConfig, cfg);\n    Preference p = new Preference(Collections.singletonMap(\"maximize\", \"freedisk\"));\n    cfg = cfg.withPolicy(cfg.getPolicy().withClusterPreferences(Collections.singletonList(p)));\n    setAutoScalingConfig(cfg);\n    if (!triggered.await(10, TimeUnit.SECONDS)) {\n      fail(\"Watch should be triggered on update!\");\n    }\n    AutoScalingConfig cfg1 = cloudManager.getDistribStateManager().getAutoScalingConfig(null);\n    assertEquals(cfg, cfg1);\n\n    // restore\n    setAutoScalingConfig(autoScalingConfig);\n    cfg1 = cloudManager.getDistribStateManager().getAutoScalingConfig(null);\n    assertEquals(autoScalingConfig, cfg1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}