{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp, Collections.emptySet());\n          if (srsp.getSolrResponse().getResponse() == null) {\n            NamedList response = new NamedList();\n            response.add(\"STATUS\", \"failed\");\n            return response;\n          }\n          \n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp, Collections.emptySet());\n          if (srsp.getSolrResponse().getResponse() == null) {\n            NamedList response = new NamedList();\n            response.add(\"STATUS\", \"failed\");\n            return response;\n          }\n          \n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp, Collections.emptySet());\n          if (srsp.getSolrResponse().getResponse() == null) {\n            NamedList response = new NamedList();\n            response.add(\"STATUS\", \"failed\");\n            return response;\n          }\n          \n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp, Collections.emptySet());\n          if (srsp.getSolrResponse().getResponse() == null) {\n            NamedList response = new NamedList();\n            response.add(\"STATUS\", \"failed\");\n            return response;\n          }\n          \n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList<Object> waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList<Object> results = new NamedList<>();\n          processResponse(results, srsp, Collections.emptySet());\n          if (srsp.getSolrResponse().getResponse() == null) {\n            NamedList<Object> response = new NamedList<>();\n            response.add(\"STATUS\", \"failed\");\n            return response;\n          }\n          \n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp, Collections.emptySet());\n          if (srsp.getSolrResponse().getResponse() == null) {\n            NamedList response = new NamedList();\n            response.add(\"STATUS\", \"failed\");\n            return response;\n          }\n          \n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","b0518fb0484171888adf6ca2256cdd695032e3f3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList<Object> waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList<Object> results = new NamedList<>();\n          processResponse(results, srsp, Collections.emptySet());\n          if (srsp.getSolrResponse().getResponse() == null) {\n            NamedList<Object> response = new NamedList<>();\n            response.add(\"STATUS\", \"failed\");\n            return response;\n          }\n\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList<Object> waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList<Object> results = new NamedList<>();\n          processResponse(results, srsp, Collections.emptySet());\n          if (srsp.getSolrResponse().getResponse() == null) {\n            NamedList<Object> response = new NamedList<>();\n            response.add(\"STATUS\", \"failed\");\n            return response;\n          }\n          \n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"69e6520a21709190413a63084ed135271aab1a7c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["69e6520a21709190413a63084ed135271aab1a7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["69e6520a21709190413a63084ed135271aab1a7c"],"69e6520a21709190413a63084ed135271aab1a7c":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}