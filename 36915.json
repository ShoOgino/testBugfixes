{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","commits":[{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      ScoreDoc sd1 = td1.scoreDocs[i];\n      ScoreDoc sd2 = td2.scoreDocs[i];\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0.01f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["93a1c3f6de2edfe63ec17b5925b14f98fe8a6437"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93a1c3f6de2edfe63ec17b5925b14f98fe8a6437","date":1475478443,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, 10e-5);\n    }\n  }\n\n","sourceOld":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      ScoreDoc sd1 = td1.scoreDocs[i];\n      ScoreDoc sd2 = td2.scoreDocs[i];\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0.01f);\n    }\n  }\n\n","bugFix":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3607fe579ac3eb5d35b8dc39dffa376491f417f0","date":1475480207,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, 10e-5);\n    }\n  }\n\n","sourceOld":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      ScoreDoc sd1 = td1.scoreDocs[i];\n      ScoreDoc sd2 = td2.scoreDocs[i];\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0.01f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, 10e-5);\n    }\n  }\n\n","sourceOld":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      ScoreDoc sd1 = td1.scoreDocs[i];\n      ScoreDoc sd2 = td2.scoreDocs[i];\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0.01f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2421070ac55ffe31a8784157df61bb68b2837c","date":1477033948,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, expectedScore / 100); // error under 1%\n    }\n  }\n\n","sourceOld":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, 10e-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, expectedScore / 100); // error under 1%\n    }\n  }\n\n","sourceOld":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, 10e-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits.value, td2.totalHits.value);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, expectedScore / 100); // error under 1%\n    }\n  }\n\n","sourceOld":"  private void assertEquals(TopDocs td1, TopDocs td2) {\n    assertEquals(td1.totalHits, td2.totalHits);\n    assertEquals(td1.scoreDocs.length, td2.scoreDocs.length);\n    Map<Integer, Float> expectedScores = Arrays.stream(td1.scoreDocs).collect(Collectors.toMap(sd -> sd.doc, sd -> sd.score));\n    Set<Integer> actualResultSet = Arrays.stream(td2.scoreDocs).map(sd -> sd.doc).collect(Collectors.toSet());\n\n    assertEquals(\"Set of matching documents differs\",\n        expectedScores.keySet(), actualResultSet);\n\n    for (ScoreDoc scoreDoc : td2.scoreDocs) {\n      final float expectedScore = expectedScores.get(scoreDoc.doc);\n      final float actualScore = scoreDoc.score;\n      assertEquals(expectedScore, actualScore, expectedScore / 100); // error under 1%\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a2421070ac55ffe31a8784157df61bb68b2837c":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7a2421070ac55ffe31a8784157df61bb68b2837c"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["7a2421070ac55ffe31a8784157df61bb68b2837c"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","93a1c3f6de2edfe63ec17b5925b14f98fe8a6437"],"93a1c3f6de2edfe63ec17b5925b14f98fe8a6437":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"7a2421070ac55ffe31a8784157df61bb68b2837c":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","83788ad129a5154d5c6562c4e8ce3db48793aada"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["3607fe579ac3eb5d35b8dc39dffa376491f417f0","93a1c3f6de2edfe63ec17b5925b14f98fe8a6437","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["7a2421070ac55ffe31a8784157df61bb68b2837c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"93a1c3f6de2edfe63ec17b5925b14f98fe8a6437":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}