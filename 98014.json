{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","commits":[{"id":"95dac0f45251471041578dd8de89dfc7fbb28f8b","date":1370889677,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n    CategoryPath cp = null;\n    while (true) {\n      int len = CategoryPath.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n      bigs = _TestUtil.randomSimpleString(random(), len, len);\n      cp = new CategoryPath(\"dim\", bigs);\n      ordinal = taxoWriter.addCategory(cp);\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(cp));\n      indexWriter.addDocument(doc);\n      break;\n    }\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new CategoryPath(\"dim\", s));\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"dim\", s)));\n      indexWriter.addDocument(doc);\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n    ddq.add(cp);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n    FacetLabel cp = null;\n    while (true) {\n      int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n      bigs = _TestUtil.randomSimpleString(random(), len, len);\n      cp = new FacetLabel(\"dim\", bigs);\n      ordinal = taxoWriter.addCategory(cp);\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(cp));\n      indexWriter.addDocument(doc);\n      break;\n    }\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"dim\", s)));\n      indexWriter.addDocument(doc);\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n    ddq.add(cp);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n    CategoryPath cp = null;\n    while (true) {\n      int len = CategoryPath.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n      bigs = _TestUtil.randomSimpleString(random(), len, len);\n      cp = new CategoryPath(\"dim\", bigs);\n      ordinal = taxoWriter.addCategory(cp);\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(cp));\n      indexWriter.addDocument(doc);\n      break;\n    }\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new CategoryPath(\"dim\", s));\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"dim\", s)));\n      indexWriter.addDocument(doc);\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n    ddq.add(cp);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = _TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = FacetLabel.create(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n    FacetLabel cp = null;\n    while (true) {\n      int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n      bigs = _TestUtil.randomSimpleString(random(), len, len);\n      cp = new FacetLabel(\"dim\", bigs);\n      ordinal = taxoWriter.addCategory(cp);\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(cp));\n      indexWriter.addDocument(doc);\n      break;\n    }\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"dim\", s)));\n      indexWriter.addDocument(doc);\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n    ddq.add(cp);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = _TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = FacetLabel.create(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = _TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = FacetLabel.create(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = _TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = _TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = FacetLabel.create(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = _TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n    CategoryPath cp = null;\n    while (true) {\n      int len = CategoryPath.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n      bigs = _TestUtil.randomSimpleString(random(), len, len);\n      cp = new CategoryPath(\"dim\", bigs);\n      ordinal = taxoWriter.addCategory(cp);\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(cp));\n      indexWriter.addDocument(doc);\n      break;\n    }\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new CategoryPath(\"dim\", s));\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"dim\", s)));\n      indexWriter.addDocument(doc);\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n    ddq.add(cp);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = _TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = _TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n    \n    IOUtils.close(indexWriter, taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.close();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.shutdown();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ae0982c0457fa3cfe0cda93a327c573fbe6f874","date":1507039114,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new UTF8TaxonomyWriterCache());\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.close();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new Cl2oTaxonomyWriterCache(2, 1f, 1));\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.close();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new UTF8TaxonomyWriterCache());\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.close();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits.value);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new UTF8TaxonomyWriterCache());\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.close();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testHugeLabel().mjava","sourceNew":"  // TODO: this test can hit pathological cases: it adds only a few docs, what is going on?\n  @Test @Nightly\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new UTF8TaxonomyWriterCache());\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.close();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits.value);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testHugeLabel() throws Exception {\n    Directory indexDir = newDirectory(), taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE, new UTF8TaxonomyWriterCache());\n    FacetsConfig config = new FacetsConfig();\n    \n    // Add one huge label:\n    String bigs = null;\n    int ordinal = -1;\n\n    int len = FacetLabel.MAX_CATEGORY_PATH_LENGTH - 4; // for the dimension and separator\n    bigs = TestUtil.randomSimpleString(random(), len, len);\n    FacetField ff = new FacetField(\"dim\", bigs);\n    FacetLabel cp = new FacetLabel(\"dim\", bigs);\n    ordinal = taxoWriter.addCategory(cp);\n    Document doc = new Document();\n    doc.add(ff);\n    indexWriter.addDocument(config.build(taxoWriter, doc));\n\n    // Add tiny ones to cause a re-hash\n    for (int i = 0; i < 3; i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 10);\n      taxoWriter.addCategory(new FacetLabel(\"dim\", s));\n      doc = new Document();\n      doc.add(new FacetField(\"dim\", s));\n      indexWriter.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // when too large components were allowed to be added, this resulted in a new added category\n    assertEquals(ordinal, taxoWriter.addCategory(cp));\n\n    indexWriter.close();\n    IOUtils.close(taxoWriter);\n    \n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    DrillDownQuery ddq = new DrillDownQuery(new FacetsConfig());\n    ddq.add(\"dim\", bigs);\n    assertEquals(1, searcher.search(ddq, 10).totalHits.value);\n    \n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":["95dac0f45251471041578dd8de89dfc7fbb28f8b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ae0982c0457fa3cfe0cda93a327c573fbe6f874":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["95dac0f45251471041578dd8de89dfc7fbb28f8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"95dac0f45251471041578dd8de89dfc7fbb28f8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21d36d0db865f7b84026b447bec653469a6e66df":["d33e19a97046248623a7591aeaa6547233fd15e2"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["21d36d0db865f7b84026b447bec653469a6e66df"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["95dac0f45251471041578dd8de89dfc7fbb28f8b","fd83550e4b0bdd36e7d9dca9273264100782440b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["2ae0982c0457fa3cfe0cda93a327c573fbe6f874"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"2ae0982c0457fa3cfe0cda93a327c573fbe6f874":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"d33e19a97046248623a7591aeaa6547233fd15e2":["21d36d0db865f7b84026b447bec653469a6e66df"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95dac0f45251471041578dd8de89dfc7fbb28f8b"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2ae0982c0457fa3cfe0cda93a327c573fbe6f874"],"95dac0f45251471041578dd8de89dfc7fbb28f8b":["c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6613659748fe4411a7dcf85266e55db1f95f7315"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["71da933d30aea361ccc224d6544c451cbf49916d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}