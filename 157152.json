{"path":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","commits":[{"id":"a0a506fe165b26e024afa1aec8a4a7d758e837ff","date":1410971446,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,DirContext).mjava","sourceNew":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n      ((MockDirectoryWrapper)cdir).setEnableVirusScanner(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), NoLockFactory.getNoLockFactory());\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n      ((MockDirectoryWrapper)cdir).setEnableVirusScanner(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n      ((MockDirectoryWrapper)cdir).setEnableVirusScanner(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n      ((MockDirectoryWrapper)cdir).setEnableVirusScanner(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n      ((MockDirectoryWrapper)cdir).setEnableVirusScanner(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n      ((MockDirectoryWrapper)cdir).setEnableVirusScanner(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n    }\n    return dir;\n  }\n\n","bugFix":["8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n    // we can't currently do this check because of how\n    // Solr has to reboot a new Directory sometimes when replicating\n    // or rolling back - the old directory is closed and the following\n    // test assumes it can open an IndexWriter when that happens - we\n    // have a new Directory for the same dir and still an open IW at \n    // this point\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)cdir).setAssertNoUnrefencedFilesOnClose(false);\n      ((MockDirectoryWrapper)cdir).setPreventDoubleWrite(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0a506fe165b26e024afa1aec8a4a7d758e837ff","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["a0a506fe165b26e024afa1aec8a4a7d758e837ff","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0a506fe165b26e024afa1aec8a4a7d758e837ff","b470f36a9372c97283360b1304eacbde22df6c0d"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["5a207d19eac354d649c3f0e2cce070017c78125e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}