{"path":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(byte[],int,int).mjava","commits":[{"id":"fb6255bc49ccd64debd0b43ca8d2f835df0faa07","date":1262510560,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the number of chars required to encode the given bytes.\n   * \n   * @param inputArray byte sequence to be encoded\n   * @param inputOffset initial offset into inputArray\n   * @param inputLength number of bytes in inputArray\n   * @return The number of chars required to encode the number of bytes.\n   */\n  public static int getEncodedLength(byte[] inputArray, int inputOffset,\n      int inputLength) {\n    // Use long for intermediaries to protect against overflow\n    return (int)(((long)inputLength * 8L + 14L) / 15L) + 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(byte[],int,int).mjava","sourceNew":"  /**\n   * Returns the number of chars required to encode the given bytes.\n   * \n   * @param inputArray byte sequence to be encoded\n   * @param inputOffset initial offset into inputArray\n   * @param inputLength number of bytes in inputArray\n   * @return The number of chars required to encode the number of bytes.\n   */\n  public static int getEncodedLength(byte[] inputArray, int inputOffset,\n      int inputLength) {\n    // Use long for intermediaries to protect against overflow\n    return (int)((8L * inputLength + 14L) / 15L) + 1;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of chars required to encode the given bytes.\n   * \n   * @param inputArray byte sequence to be encoded\n   * @param inputOffset initial offset into inputArray\n   * @param inputLength number of bytes in inputArray\n   * @return The number of chars required to encode the number of bytes.\n   */\n  public static int getEncodedLength(byte[] inputArray, int inputOffset,\n      int inputLength) {\n    // Use long for intermediaries to protect against overflow\n    return (int)(((long)inputLength * 8L + 14L) / 15L) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(byte[],int,int).mjava","sourceNew":"  /**\n   * Returns the number of chars required to encode the given bytes.\n   * \n   * @param inputArray byte sequence to be encoded\n   * @param inputOffset initial offset into inputArray\n   * @param inputLength number of bytes in inputArray\n   * @return The number of chars required to encode the number of bytes.\n   */\n  public static int getEncodedLength(byte[] inputArray, int inputOffset,\n      int inputLength) {\n    // Use long for intermediaries to protect against overflow\n    return (int)((8L * inputLength + 14L) / 15L) + 1;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of chars required to encode the given bytes.\n   * \n   * @param inputArray byte sequence to be encoded\n   * @param inputOffset initial offset into inputArray\n   * @param inputLength number of bytes in inputArray\n   * @return The number of chars required to encode the number of bytes.\n   */\n  public static int getEncodedLength(byte[] inputArray, int inputOffset,\n      int inputLength) {\n    // Use long for intermediaries to protect against overflow\n    return (int)((8L * inputLength + 14L) / 15L) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}