{"path":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams,String,String).mjava","commits":[{"id":"1214bb624eb41181e5c8e260e0050c7e973ba0f4","date":1487943042,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}\n   * @param setDistribParams whether to do a distributed request\n   * @param user basic auth username (set to null if not in use)\n   * @param pass basic auth password (set to null if not in use)\n   * @return the query response\n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p, String user, String pass) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    QueryRequest req = generateQueryRequest(params, user, pass);\n    final QueryResponse controlRsp = req.process(controlClient, null);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n    req = generateQueryRequest(params, user, pass);\n\n    QueryResponse rsp = queryServer(req);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryRequest qreq = generateQueryRequest(new ModifiableSolrParams(params), user, pass);\n                QueryResponse rsp = qreq.process(client, null);\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","date":1487979822,"type":4,"author":"Jan Høydahl","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}\n   * @param setDistribParams whether to do a distributed request\n   * @param user basic auth username (set to null if not in use)\n   * @param pass basic auth password (set to null if not in use)\n   * @return the query response\n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p, String user, String pass) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    QueryRequest req = generateQueryRequest(params, user, pass);\n    final QueryResponse controlRsp = req.process(controlClient, null);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n    req = generateQueryRequest(params, user, pass);\n\n    QueryResponse rsp = queryServer(req);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryRequest qreq = generateQueryRequest(new ModifiableSolrParams(params), user, pass);\n                QueryResponse rsp = qreq.process(client, null);\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}