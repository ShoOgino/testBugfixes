{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * \n   * 将RawToken类型转换成索引需要的Token类型， 因为索引需要RawToken在原句中的内容， 因此转换时需要指定原句子。\n   * \n   * @param rt\n   * @param sentence 转换需要的句子内容\n   * @param sentenceStartOffset sentence在文章中的初始位置\n   * @param type token类型，默认应该是word\n   * @return\n   */\n  public Token convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset, String type) {\n    Token result;\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n\n    result = new Token(st.charArray, 0, st.charArray.length, st.startOffset\n        + sentenceStartOffset, st.endOffset + sentenceStartOffset);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be5ef2f970a6c1141562b06dd26ed04c3dc29d70","date":1246444343,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","sourceNew":"  /**\n   * Convert a {@link SegToken} to a Lucene {@link Token}\n   * \n   * @param st input {@link SegToken}\n   * @param sentence associated Sentence\n   * @param sentenceStartOffset offset into sentence\n   * @param type token type, default is word\n   * @return Lucene {@link Token}\n   */\n  public Token convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset, String type) {\n    Token result;\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n\n    result = new Token(st.charArray, 0, st.charArray.length, st.startOffset\n        + sentenceStartOffset, st.endOffset + sentenceStartOffset);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * \n   * 将RawToken类型转换成索引需要的Token类型， 因为索引需要RawToken在原句中的内容， 因此转换时需要指定原句子。\n   * \n   * @param rt\n   * @param sentence 转换需要的句子内容\n   * @param sentenceStartOffset sentence在文章中的初始位置\n   * @param type token类型，默认应该是word\n   * @return\n   */\n  public Token convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset, String type) {\n    Token result;\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n\n    result = new Token(st.charArray, 0, st.charArray.length, st.startOffset\n        + sentenceStartOffset, st.endOffset + sentenceStartOffset);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","sourceNew":"  /**\n   * Convert a {@link SegToken} to a Lucene {@link Token}\n   * \n   * @param st input {@link SegToken}\n   * @param sentence associated Sentence\n   * @param sentenceStartOffset offset into sentence\n   * @param type token type, default is word\n   * @return Lucene {@link Token}\n   */\n  public Token convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset, String type) {\n    Token result;\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n\n    result = new Token(st.charArray, 0, st.charArray.length, st.startOffset\n        + sentenceStartOffset, st.endOffset + sentenceStartOffset);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link SegToken} to a Lucene {@link Token}\n   * \n   * @param st input {@link SegToken}\n   * @param sentence associated Sentence\n   * @param sentenceStartOffset offset into sentence\n   * @param type token type, default is word\n   * @return Lucene {@link Token}\n   */\n  public Token convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset, String type) {\n    Token result;\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n\n    result = new Token(st.charArray, 0, st.charArray.length, st.startOffset\n        + sentenceStartOffset, st.endOffset + sentenceStartOffset);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}