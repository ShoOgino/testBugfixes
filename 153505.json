{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","commits":[{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","sourceNew":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(payloadTerm, createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","sourceNew":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(payloadTerm, createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","sourceNew":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(partition);\n    String docValuesField = field + categoryListTermStr;\n    return new DocValuesCategoryListIterator(docValuesField, createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(payloadTerm, createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","sourceNew":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(partition);\n    String docValuesField = field + categoryListTermStr;\n    return new DocValuesCategoryListIterator(docValuesField, createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(payloadTerm, createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/params/CategoryListParams#createCategoryListIterator(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","sourceNew":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(partition);\n    String docValuesField = field + categoryListTermStr;\n    return new DocValuesCategoryListIterator(docValuesField, createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(partition);\n    String docValuesField = field + categoryListTermStr;\n    return new DocValuesCategoryListIterator(docValuesField, createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}