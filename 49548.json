{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean).mjava","commits":[{"id":"ec77e67e448734229255f16b8e0b1b4402f23095","date":1453748031,"type":1,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39fd399a800c79eff2beaad702c9b6190d499fd","date":1453997311,"type":5,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c39fd399a800c79eff2beaad702c9b6190d499fd":["ec77e67e448734229255f16b8e0b1b4402f23095"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec77e67e448734229255f16b8e0b1b4402f23095":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["ec77e67e448734229255f16b8e0b1b4402f23095","c39fd399a800c79eff2beaad702c9b6190d499fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d15e34266d75e4e8b95da046cd0afc812367b38"]},"commit2Childs":{"c39fd399a800c79eff2beaad702c9b6190d499fd":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec77e67e448734229255f16b8e0b1b4402f23095"],"ec77e67e448734229255f16b8e0b1b4402f23095":["c39fd399a800c79eff2beaad702c9b6190d499fd","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}