{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#slice(String,long,long).mjava","commits":[{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#slice(String,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a slice of this index input, with the given description, offset, and length. The slice is seeked to the beginning.\n   */\n  public final ByteBufferIndexInput slice(String sliceDescription, long offset, long length) {\n    if (isClone) { // well we could, but this is stupid\n      throw new IllegalStateException(\"cannot slice() \" + sliceDescription + \" from a cloned IndexInput: \" + this);\n    }\n    final ByteBufferIndexInput clone = buildSlice(offset, length);\n    clone.sliceDescription = sliceDescription;\n    try {\n      clone.seek(0L);\n    } catch(IOException ioe) {\n      throw new RuntimeException(\"Should never happen: \" + this, ioe);\n    }\n    \n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f986320666d675a260eb4529a0c3c40595731441"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#slice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#slice(String,long,long).mjava","sourceNew":"  /**\n   * Creates a slice of this index input, with the given description, offset, and length. The slice is seeked to the beginning.\n   */\n  @Override\n  public final ByteBufferIndexInput slice(String sliceDescription, long offset, long length) {\n    final ByteBufferIndexInput clone = buildSlice(offset, length);\n    clone.sliceDescription = sliceDescription;\n    try {\n      clone.seek(0L);\n    } catch(IOException ioe) {\n      throw new RuntimeException(\"Should never happen: \" + this, ioe);\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Creates a slice of this index input, with the given description, offset, and length. The slice is seeked to the beginning.\n   */\n  public final ByteBufferIndexInput slice(String sliceDescription, long offset, long length) {\n    if (isClone) { // well we could, but this is stupid\n      throw new IllegalStateException(\"cannot slice() \" + sliceDescription + \" from a cloned IndexInput: \" + this);\n    }\n    final ByteBufferIndexInput clone = buildSlice(offset, length);\n    clone.sliceDescription = sliceDescription;\n    try {\n      clone.seek(0L);\n    } catch(IOException ioe) {\n      throw new RuntimeException(\"Should never happen: \" + this, ioe);\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#slice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#slice(String,long,long).mjava","sourceNew":"  /**\n   * Creates a slice of this index input, with the given description, offset, and length. The slice is seeked to the beginning.\n   */\n  @Override\n  public final ByteBufferIndexInput slice(String sliceDescription, long offset, long length) {\n    final ByteBufferIndexInput clone = buildSlice(offset, length);\n    clone.sliceDescription = sliceDescription;\n    try {\n      clone.seek(0L);\n    } catch(IOException ioe) {\n      throw new RuntimeException(\"Should never happen: \" + this, ioe);\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Creates a slice of this index input, with the given description, offset, and length. The slice is seeked to the beginning.\n   */\n  public final ByteBufferIndexInput slice(String sliceDescription, long offset, long length) {\n    if (isClone) { // well we could, but this is stupid\n      throw new IllegalStateException(\"cannot slice() \" + sliceDescription + \" from a cloned IndexInput: \" + this);\n    }\n    final ByteBufferIndexInput clone = buildSlice(offset, length);\n    clone.sliceDescription = sliceDescription;\n    try {\n      clone.seek(0L);\n    } catch(IOException ioe) {\n      throw new RuntimeException(\"Should never happen: \" + this, ioe);\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f986320666d675a260eb4529a0c3c40595731441","date":1401729997,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#slice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#slice(String,long,long).mjava","sourceNew":"  /**\n   * Creates a slice of this index input, with the given description, offset, and length. The slice is seeked to the beginning.\n   */\n  @Override\n  public final ByteBufferIndexInput slice(String sliceDescription, long offset, long length) {    \n    if (offset < 0 || length < 0 || offset+length > this.length) {\n      throw new IllegalArgumentException(\"slice() \" + sliceDescription + \" out of bounds: offset=\" + offset + \",length=\" + length + \",fileLength=\"  + this.length + \": \"  + this);\n    }\n    \n    return buildSlice(sliceDescription, offset, length);\n  }\n\n","sourceOld":"  /**\n   * Creates a slice of this index input, with the given description, offset, and length. The slice is seeked to the beginning.\n   */\n  @Override\n  public final ByteBufferIndexInput slice(String sliceDescription, long offset, long length) {\n    final ByteBufferIndexInput clone = buildSlice(offset, length);\n    clone.sliceDescription = sliceDescription;\n    try {\n      clone.seek(0L);\n    } catch(IOException ioe) {\n      throw new RuntimeException(\"Should never happen: \" + this, ioe);\n    }\n    \n    return clone;\n  }\n\n","bugFix":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"f986320666d675a260eb4529a0c3c40595731441":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f986320666d675a260eb4529a0c3c40595731441"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","56572ec06f1407c066d6b7399413178b33176cd8"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["f986320666d675a260eb4529a0c3c40595731441","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"f986320666d675a260eb4529a0c3c40595731441":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}