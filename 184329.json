{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery#testDifferentField().mjava","commits":[{"id":"d14e5699abc6d0854ab3a692587156cb84f189de","date":1428897312,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery#testDifferentField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDifferentField() throws Exception {\n    SpanTermQuery q1 = new SpanTermQuery(new Term(\"field1\", \"foo\"));\n    SpanTermQuery q2 = new SpanTermQuery(new Term(\"field2\", \"bar\"));\n    try {\n      new SpanNearQuery(new SpanQuery[] { q1, q2 }, 10, true);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"must have same field\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery#testDifferentField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery#testDifferentField().mjava","sourceNew":"  public void testDifferentField() throws Exception {\n    SpanTermQuery q1 = new SpanTermQuery(new Term(\"field1\", \"foo\"));\n    SpanTermQuery q2 = new SpanTermQuery(new Term(\"field2\", \"bar\"));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SpanNearQuery(new SpanQuery[] { q1, q2 }, 10, true);\n    });\n    assertTrue(expected.getMessage().contains(\"must have same field\"));\n  }\n\n","sourceOld":"  public void testDifferentField() throws Exception {\n    SpanTermQuery q1 = new SpanTermQuery(new Term(\"field1\", \"foo\"));\n    SpanTermQuery q2 = new SpanTermQuery(new Term(\"field2\", \"bar\"));\n    try {\n      new SpanNearQuery(new SpanQuery[] { q1, q2 }, 10, true);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"must have same field\"));\n    }\n  }\n\n","bugFix":["d14e5699abc6d0854ab3a692587156cb84f189de"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d14e5699abc6d0854ab3a692587156cb84f189de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"d14e5699abc6d0854ab3a692587156cb84f189de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e5699abc6d0854ab3a692587156cb84f189de"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e5699abc6d0854ab3a692587156cb84f189de":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}