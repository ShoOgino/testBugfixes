{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readNumericEntry(IndexInput).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readNumericEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readNumericEntry(IndexInput).mjava","sourceNew":"  static NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","sourceOld":"  static NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readNumericEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readNumericEntry(IndexInput).mjava","sourceNew":"  static NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","sourceOld":"  static NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readNumericEntry(IndexInput).mjava","sourceNew":null,"sourceOld":"  static NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}