{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"/dev/null","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void xxxtestManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void xxxtestManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}