{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","commits":[{"id":"77f264c55cbf75404f8601ae7290d69157273a56","date":1380484282,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                   Lucene46SegmentInfoFormat.VERSION_START,\n                                   Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final ChecksumIndexInput input = dir.openChecksumInput(fileName, context);\n    boolean success = false;\n    try {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                   Lucene46SegmentInfoFormat.VERSION_START,\n                                   Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final ChecksumIndexInput input = dir.openChecksumInput(fileName, context);\n    boolean success = false;\n    try {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                   Lucene46SegmentInfoFormat.VERSION_START,\n                                   Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final ChecksumIndexInput input = dir.openChecksumInput(fileName, context);\n    boolean success = false;\n    try {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final ChecksumIndexInput input = dir.openChecksumInput(fileName, context);\n    boolean success = false;\n    try {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3cc329405ce41b8ef462b4cd30611eca1567620","date":1408661910,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final ChecksumIndexInput input = dir.openChecksumInput(fileName, context);\n    boolean success = false;\n    try {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final ChecksumIndexInput input = dir.openChecksumInput(fileName, context);\n    boolean success = false;\n    try {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    final ChecksumIndexInput input = dir.openChecksumInput(fileName, context);\n    boolean success = false;\n    try {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6","77f264c55cbf75404f8601ae7290d69157273a56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77d177b70aefca41f3edc910b0a703c76283d8b6","date":1411650976,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["77f264c55cbf75404f8601ae7290d69157273a56","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["77f264c55cbf75404f8601ae7290d69157273a56"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["057a1793765d068ea9302f1a29e21734ee58d41e"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["46ff533a28b45377dffc601931e60e19492e6384"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["46ff533a28b45377dffc601931e60e19492e6384","77d177b70aefca41f3edc910b0a703c76283d8b6"],"46ff533a28b45377dffc601931e60e19492e6384":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"77f264c55cbf75404f8601ae7290d69157273a56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"057a1793765d068ea9302f1a29e21734ee58d41e":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","057a1793765d068ea9302f1a29e21734ee58d41e"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["46ff533a28b45377dffc601931e60e19492e6384"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77f264c55cbf75404f8601ae7290d69157273a56"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"77f264c55cbf75404f8601ae7290d69157273a56":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"46ff533a28b45377dffc601931e60e19492e6384":["77d177b70aefca41f3edc910b0a703c76283d8b6","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"057a1793765d068ea9302f1a29e21734ee58d41e":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}