{"path":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","commits":[{"id":"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2","date":1081470871,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","sourceNew":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2"],"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}