{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, null, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, null, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faf1236ae092482293a7e0659e347d172185ef6f","date":1430314113,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, null, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, null, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, null, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, null, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, null, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, null, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b22e5a20e6ecc2a2a411a4344a34d99a51f0362","date":1479850208,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      parser.setIsFilter(true);\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      parser.setIsFilter(true);\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1918d03541b875664e27eae44b6b157da044f0b8","date":1549745850,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    } else if (arg != null) {\n      // something lke json.facet.facet.query=2\n      throw err(\"Expected string/map for facet query, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      parser.setIsFilter(true);\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      parser.setIsFilter(true);\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetQueryParser[FacetRequest]#parse(Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FacetQuery parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    String qstring = null;\n    if (arg instanceof String) {\n      // just the field name...\n      qstring = (String)arg;\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      qstring = getString(m, \"q\", null);\n      if (qstring == null) {\n        qstring = getString(m, \"query\", null);\n      }\n\n      // OK to parse subs before we have parsed our own query?\n      // as long as subs don't need to know about it.\n      parseSubs( m.get(\"facet\") );\n    } else if (arg != null) {\n      // something lke json.facet.facet.query=2\n      throw err(\"Expected string/map for facet query, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n    }\n\n    // TODO: substats that are from defaults!!!\n\n    if (qstring != null) {\n      QParser parser = QParser.getParser(qstring, getSolrRequest());\n      parser.setIsFilter(true);\n      facet.q = parser.getQuery();\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["faf1236ae092482293a7e0659e347d172185ef6f"],"faf1236ae092482293a7e0659e347d172185ef6f":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"6b22e5a20e6ecc2a2a411a4344a34d99a51f0362":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["faf1236ae092482293a7e0659e347d172185ef6f","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["faf1236ae092482293a7e0659e347d172185ef6f","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"1918d03541b875664e27eae44b6b157da044f0b8":["6b22e5a20e6ecc2a2a411a4344a34d99a51f0362"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6b22e5a20e6ecc2a2a411a4344a34d99a51f0362"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["1918d03541b875664e27eae44b6b157da044f0b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["faf1236ae092482293a7e0659e347d172185ef6f","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"]},"commit2Childs":{"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"faf1236ae092482293a7e0659e347d172185ef6f":["cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"6b22e5a20e6ecc2a2a411a4344a34d99a51f0362":["1918d03541b875664e27eae44b6b157da044f0b8","727bb765ff2542275f6d31f67be18d7104bae148"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["6b22e5a20e6ecc2a2a411a4344a34d99a51f0362","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1918d03541b875664e27eae44b6b157da044f0b8":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["faf1236ae092482293a7e0659e347d172185ef6f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}