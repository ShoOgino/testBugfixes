{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f8b5ba78b252ff57082799d1b662ad3d677ecfc","date":1347893162,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://127.0.0.1:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http\" + (isSSLMode() ? \"s\" : \"\") + \"://127.0.0.1:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://127.0.0.1:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrServer solrServer = new HttpSolrServer(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http\" + (isSSLMode() ? \"s\" : \"\") + \"://127.0.0.1:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrServer solrServer = new HttpSolrServer(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n    solrServer.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrServer solrServer = new HttpSolrServer(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n    solrServer.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrServer solrServer = new HttpSolrServer(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n    solrServer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    try {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n    } finally {\n      solrClient.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n    solrServer.shutdown();\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b","b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d","2651a1ecbc1d5eb7d275d05442de237f2763b730","4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"));\n    try {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n    } finally {\n      solrClient.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    try {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n    } finally {\n      solrClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"));\n    try {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n    } finally {\n      solrClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    try (HttpSolrClient solrClient = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrClient.request(req);\n      ModifiableSolrParams qparams = new ModifiableSolrParams();\n      qparams.add(\"q\", \"*:*\");\n      QueryResponse qres = solrClient.query(qparams);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(2, results.getNumFound());\n      SolrDocument doc = results.get(0);\n      assertEquals(\"1\", doc.getFieldValue(\"id\"));\n      assertEquals(\"Hello C1\", ((List) doc.getFieldValue(\"desc\")).get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}