{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemFilterTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary, TestUtil.nextInt(random(), 1, 3)));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, DICTIONARY, TestUtil.nextInt(random(), 1, 3)));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemFilterTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary, TestUtil.nextInt(random(), 1, 3)));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, DICTIONARY, TestUtil.nextInt(random(), 1, 3)));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","date":1393724838,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary, TestUtil.nextInt(random(), 1, 3)));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n    analyzer.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n    analyzer.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary));\n      }  \n    };\n    checkRandomData(random(), analyzer, 200 * RANDOM_MULTIPLIER);\n    analyzer.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new HunspellStemFilter(tokenizer, dictionary));\n      }  \n    };\n    checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n    analyzer.close();\n  }\n\n","bugFix":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","a56958d7f71a28824f20031ffbb2e13502a0274e"],"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","71da933d30aea361ccc224d6544c451cbf49916d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}