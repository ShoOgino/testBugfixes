{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.pos = arc.posArcsStart - arc.arcIdx*arc.bytesPerArc;\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.pos = arc.posArcsStart - arc.arcIdx*arc.bytesPerArc;\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.pos = arc.posArcsStart - arc.arcIdx*arc.bytesPerArc;\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.pos = arc.posArcsStart - arc.arcIdx*arc.bytesPerArc;\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.pos = arc.posArcsStart - arc.arcIdx*arc.bytesPerArc;\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.pos = arc.posArcsStart - arc.arcIdx*arc.bytesPerArc;\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["60ba444201d2570214b6fcf1d15600dc1a01f548","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["60ba444201d2570214b6fcf1d15600dc1a01f548","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}