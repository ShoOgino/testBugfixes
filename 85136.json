{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseBucketSorts(String,Bucket[]).mjava","commits":[{"id":"011d43366b2da54d1652d93e7ec6412848eeb009","date":1541521420,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseBucketSorts(String,Bucket[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseBucketSorts(String).mjava","sourceNew":"  private FieldComparator[] parseBucketSorts(String bucketSortString, Bucket[] buckets) throws IOException {\n\n    String[] sorts = bucketSortString.split(\",\");\n    FieldComparator[] comps = new FieldComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      if(2 != spec.length){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression - bad bucketSort '%s'. Expected form 'field order'\",bucketSortString));\n      }\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n            \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    return comps;\n  }\n\n","sourceOld":"  private FieldComparator[] parseBucketSorts(String bucketSortString) throws IOException {\n\n    String[] sorts = bucketSortString.split(\",\");\n    FieldComparator[] comps = new FieldComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      if(2 != spec.length){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression - bad bucketSort '%s'. Expected form 'field order'\",bucketSortString));\n      }\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n            \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    return comps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseBucketSorts(String,Bucket[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseBucketSorts(String,Bucket[]).mjava","sourceNew":"  private FieldComparator[] parseBucketSorts(String bucketSortString, Bucket[] buckets) throws IOException {\n\n    String[] sorts = parseSorts(bucketSortString);\n\n    FieldComparator[] comps = new FieldComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String fieldName = null;\n      String order = null;\n\n      if(s.endsWith(\"asc\") || s.endsWith(\"ASC\")) {\n        order = \"asc\";\n        fieldName = s.substring(0, s.length()-3).trim().replace(\" \", \"\");\n      } else if(s.endsWith(\"desc\") || s.endsWith(\"DESC\")) {\n        order = \"desc\";\n        fieldName = s.substring(0, s.length()-4).trim().replace(\" \", \"\");\n      } else {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression - bad bucketSort '%s'.\",bucketSortString));\n      }\n            \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    return comps;\n  }\n\n","sourceOld":"  private FieldComparator[] parseBucketSorts(String bucketSortString, Bucket[] buckets) throws IOException {\n\n    String[] sorts = bucketSortString.split(\",\");\n    FieldComparator[] comps = new FieldComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      if(2 != spec.length){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression - bad bucketSort '%s'. Expected form 'field order'\",bucketSortString));\n      }\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n            \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    return comps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"011d43366b2da54d1652d93e7ec6412848eeb009":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["011d43366b2da54d1652d93e7ec6412848eeb009"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["570664407cd3123a8039f1b4f2f6c6693bdaee31"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["011d43366b2da54d1652d93e7ec6412848eeb009"],"011d43366b2da54d1652d93e7ec6412848eeb009":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}