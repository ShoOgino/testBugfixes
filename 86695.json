{"path":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#getLastPublishedState(String,String,Replica).mjava","commits":[{"id":"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","date":1446751515,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#getLastPublishedState(String,String,Replica).mjava","pathOld":"/dev/null","sourceNew":"  protected Replica.State getLastPublishedState(String collection, String slice, Replica replica) throws SolrServerException, IOException,\n  KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.STATUS.toString());\n    params.set(CoreAdminParams.CORE, replica.getStr(\"core\"));\n\n    SolrRequest<SimpleSolrResponse> req = new GenericSolrRequest(METHOD.GET, \"/admin/cores\", params);\n    NamedList resp = null;\n    try (HttpSolrClient hsc = new HttpSolrClient(baseUrl)) {\n       resp = hsc.request(req);\n    }\n\n    String lastPublished = (((NamedList<NamedList<String>>)resp.get(\"status\")).get(replica.getStr(\"core\"))).get(\"lastPublished\");\n    return Replica.State.getState(lastPublished);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#getLastPublishedState(String,String,Replica).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#getLastPublishedState(String,String,Replica).mjava","sourceNew":"  protected Replica.State getLastPublishedState(String collection, String slice, Replica replica) throws SolrServerException, IOException,\n  KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.STATUS.toString());\n    params.set(CoreAdminParams.CORE, replica.getStr(\"core\"));\n\n    SolrRequest<SimpleSolrResponse> req = new GenericSolrRequest(METHOD.GET, \"/admin/cores\", params);\n    NamedList resp = null;\n    try (HttpSolrClient hsc = getHttpSolrClient(baseUrl)) {\n       resp = hsc.request(req);\n    }\n\n    String lastPublished = (((NamedList<NamedList<String>>)resp.get(\"status\")).get(replica.getStr(\"core\"))).get(\"lastPublished\");\n    return Replica.State.getState(lastPublished);\n  }\n\n","sourceOld":"  protected Replica.State getLastPublishedState(String collection, String slice, Replica replica) throws SolrServerException, IOException,\n  KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.STATUS.toString());\n    params.set(CoreAdminParams.CORE, replica.getStr(\"core\"));\n\n    SolrRequest<SimpleSolrResponse> req = new GenericSolrRequest(METHOD.GET, \"/admin/cores\", params);\n    NamedList resp = null;\n    try (HttpSolrClient hsc = new HttpSolrClient(baseUrl)) {\n       resp = hsc.request(req);\n    }\n\n    String lastPublished = (((NamedList<NamedList<String>>)resp.get(\"status\")).get(replica.getStr(\"core\"))).get(\"lastPublished\");\n    return Replica.State.getState(lastPublished);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#getLastPublishedState(String,String,Replica).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#getLastPublishedState(String,String,Replica).mjava","sourceNew":"  protected Replica.State getLastPublishedState(String collection, String slice, Replica replica) throws SolrServerException, IOException,\n  KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.STATUS.toString());\n    params.set(CoreAdminParams.CORE, replica.getStr(\"core\"));\n\n    SolrRequest<SimpleSolrResponse> req = new GenericSolrRequest(METHOD.GET, \"/admin/cores\", params);\n    NamedList resp = null;\n    try (HttpSolrClient hsc = getHttpSolrClient(baseUrl)) {\n       resp = hsc.request(req);\n    }\n\n    String lastPublished = (((NamedList<NamedList<String>>)resp.get(\"status\")).get(replica.getStr(\"core\"))).get(\"lastPublished\");\n    return Replica.State.getState(lastPublished);\n  }\n\n","sourceOld":"  protected Replica.State getLastPublishedState(String collection, String slice, Replica replica) throws SolrServerException, IOException,\n  KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.STATUS.toString());\n    params.set(CoreAdminParams.CORE, replica.getStr(\"core\"));\n\n    SolrRequest<SimpleSolrResponse> req = new GenericSolrRequest(METHOD.GET, \"/admin/cores\", params);\n    NamedList resp = null;\n    try (HttpSolrClient hsc = new HttpSolrClient(baseUrl)) {\n       resp = hsc.request(req);\n    }\n\n    String lastPublished = (((NamedList<NamedList<String>>)resp.get(\"status\")).get(replica.getStr(\"core\"))).get(\"lastPublished\");\n    return Replica.State.getState(lastPublished);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667464d9fbdf240710796210f6fcf610b9fff5dc","date":1520242425,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#getLastPublishedState(String,String,Replica).mjava","sourceNew":null,"sourceOld":"  protected Replica.State getLastPublishedState(String collection, String slice, Replica replica) throws SolrServerException, IOException,\n  KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.STATUS.toString());\n    params.set(CoreAdminParams.CORE, replica.getStr(\"core\"));\n\n    SolrRequest<SimpleSolrResponse> req = new GenericSolrRequest(METHOD.GET, \"/admin/cores\", params);\n    NamedList resp = null;\n    try (HttpSolrClient hsc = getHttpSolrClient(baseUrl)) {\n       resp = hsc.request(req);\n    }\n\n    String lastPublished = (((NamedList<NamedList<String>>)resp.get(\"status\")).get(replica.getStr(\"core\"))).get(\"lastPublished\");\n    return Replica.State.getState(lastPublished);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"667464d9fbdf240710796210f6fcf610b9fff5dc":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["667464d9fbdf240710796210f6fcf610b9fff5dc"]},"commit2Childs":{"667464d9fbdf240710796210f6fcf610b9fff5dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["667464d9fbdf240710796210f6fcf610b9fff5dc"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}