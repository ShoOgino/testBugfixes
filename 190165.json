{"path":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","commits":[{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"    private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n    throws IOException\n    {\n      \n      if (dis instanceof OpenBitSet) {\n        // optimized case for OpenBitSets\n        switch (logic)\n        {\n            case OR:\n                result.or((OpenBitSet) dis);\n                break;\n            case AND:\n                result.and((OpenBitSet) dis);\n                break;\n            case ANDNOT:\n                result.andNot((OpenBitSet) dis);\n                break;\n            case XOR:\n                result.xor((OpenBitSet) dis);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      } else {\n        DocIdSetIterator disi = dis.iterator();      \n        switch (logic)\n        {\n            case OR:\n                result.inPlaceOr(disi);\n                break;\n            case AND:\n                result.inPlaceAnd(disi);\n                break;\n            case ANDNOT:\n                result.inPlaceNot(disi);\n                break;\n            case XOR:\n                result.inPlaceXor(disi);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d6c98c690b593cea727f68742684c979ead1a0a","date":1248688202,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","sourceNew":"    private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n    throws IOException {\n      \n      if (dis instanceof OpenBitSet) {\n        // optimized case for OpenBitSets\n        switch (logic) {\n            case OR:\n                result.or((OpenBitSet) dis);\n                break;\n            case AND:\n                result.and((OpenBitSet) dis);\n                break;\n            case ANDNOT:\n                result.andNot((OpenBitSet) dis);\n                break;\n            case XOR:\n                result.xor((OpenBitSet) dis);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      } else {\n        DocIdSetIterator disi;\n        if (dis == null) {\n          disi = EmptyDocIdSetIterator.getInstance();\n        } else {\n          disi = dis.iterator();\n          if (disi == null) {\n            disi = EmptyDocIdSetIterator.getInstance();            \n          }\n        }\n\n        switch (logic) {\n            case OR:\n                result.inPlaceOr(disi);\n                break;\n            case AND:\n                result.inPlaceAnd(disi);\n                break;\n            case ANDNOT:\n                result.inPlaceNot(disi);\n                break;\n            case XOR:\n                result.inPlaceXor(disi);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      }\n    }\n\n","sourceOld":"    private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n    throws IOException\n    {\n      \n      if (dis instanceof OpenBitSet) {\n        // optimized case for OpenBitSets\n        switch (logic)\n        {\n            case OR:\n                result.or((OpenBitSet) dis);\n                break;\n            case AND:\n                result.and((OpenBitSet) dis);\n                break;\n            case ANDNOT:\n                result.andNot((OpenBitSet) dis);\n                break;\n            case XOR:\n                result.xor((OpenBitSet) dis);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      } else {\n        DocIdSetIterator disi = dis.iterator();      \n        switch (logic)\n        {\n            case OR:\n                result.inPlaceOr(disi);\n                break;\n            case AND:\n                result.inPlaceAnd(disi);\n                break;\n            case ANDNOT:\n                result.inPlaceNot(disi);\n                break;\n            case XOR:\n                result.inPlaceXor(disi);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf6645926c5572261eb47ea234b7892fc1df074f","date":1248693156,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","sourceNew":"    private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n    throws IOException {\n      \n      if (dis instanceof OpenBitSet) {\n        // optimized case for OpenBitSets\n        switch (logic) {\n            case OR:\n                result.or((OpenBitSet) dis);\n                break;\n            case AND:\n                result.and((OpenBitSet) dis);\n                break;\n            case ANDNOT:\n                result.andNot((OpenBitSet) dis);\n                break;\n            case XOR:\n                result.xor((OpenBitSet) dis);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      } else {\n        DocIdSetIterator disi;\n        if (dis == null) {\n          disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          disi = dis.iterator();\n          if (disi == null) {\n            disi = DocIdSet.EMPTY_DOCIDSET.iterator();            \n          }\n        }\n\n        switch (logic) {\n            case OR:\n                result.inPlaceOr(disi);\n                break;\n            case AND:\n                result.inPlaceAnd(disi);\n                break;\n            case ANDNOT:\n                result.inPlaceNot(disi);\n                break;\n            case XOR:\n                result.inPlaceXor(disi);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      }\n    }\n\n","sourceOld":"    private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n    throws IOException {\n      \n      if (dis instanceof OpenBitSet) {\n        // optimized case for OpenBitSets\n        switch (logic) {\n            case OR:\n                result.or((OpenBitSet) dis);\n                break;\n            case AND:\n                result.and((OpenBitSet) dis);\n                break;\n            case ANDNOT:\n                result.andNot((OpenBitSet) dis);\n                break;\n            case XOR:\n                result.xor((OpenBitSet) dis);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      } else {\n        DocIdSetIterator disi;\n        if (dis == null) {\n          disi = EmptyDocIdSetIterator.getInstance();\n        } else {\n          disi = dis.iterator();\n          if (disi == null) {\n            disi = EmptyDocIdSetIterator.getInstance();            \n          }\n        }\n\n        switch (logic) {\n            case OR:\n                result.inPlaceOr(disi);\n                break;\n            case AND:\n                result.inPlaceAnd(disi);\n                break;\n            case ANDNOT:\n                result.inPlaceNot(disi);\n                break;\n            case XOR:\n                result.inPlaceXor(disi);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","sourceNew":"    private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n    throws IOException {\n      \n      if (dis instanceof OpenBitSet) {\n        // optimized case for OpenBitSets\n        switch (logic) {\n            case OR:\n                result.or((OpenBitSet) dis);\n                break;\n            case AND:\n                result.and((OpenBitSet) dis);\n                break;\n            case ANDNOT:\n                result.andNot((OpenBitSet) dis);\n                break;\n            case XOR:\n                result.xor((OpenBitSet) dis);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      } else {\n        DocIdSetIterator disi;\n        if (dis == null) {\n          disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          disi = dis.iterator();\n          if (disi == null) {\n            disi = DocIdSet.EMPTY_DOCIDSET.iterator();            \n          }\n        }\n\n        switch (logic) {\n            case OR:\n                result.inPlaceOr(disi);\n                break;\n            case AND:\n                result.inPlaceAnd(disi);\n                break;\n            case ANDNOT:\n                result.inPlaceNot(disi);\n                break;\n            case XOR:\n                result.inPlaceXor(disi);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      }\n    }\n\n","sourceOld":"    private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n    throws IOException {\n      \n      if (dis instanceof OpenBitSet) {\n        // optimized case for OpenBitSets\n        switch (logic) {\n            case OR:\n                result.or((OpenBitSet) dis);\n                break;\n            case AND:\n                result.and((OpenBitSet) dis);\n                break;\n            case ANDNOT:\n                result.andNot((OpenBitSet) dis);\n                break;\n            case XOR:\n                result.xor((OpenBitSet) dis);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      } else {\n        DocIdSetIterator disi;\n        if (dis == null) {\n          disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          disi = dis.iterator();\n          if (disi == null) {\n            disi = DocIdSet.EMPTY_DOCIDSET.iterator();            \n          }\n        }\n\n        switch (logic) {\n            case OR:\n                result.inPlaceOr(disi);\n                break;\n            case AND:\n                result.inPlaceAnd(disi);\n                break;\n            case ANDNOT:\n                result.inPlaceNot(disi);\n                break;\n            case XOR:\n                result.inPlaceXor(disi);\n                break;\n            default:\n                doChain(result, DEFAULT, dis);\n                break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cf6645926c5572261eb47ea234b7892fc1df074f"],"cf6645926c5572261eb47ea234b7892fc1df074f":["8d6c98c690b593cea727f68742684c979ead1a0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d6c98c690b593cea727f68742684c979ead1a0a":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf6645926c5572261eb47ea234b7892fc1df074f":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"8d6c98c690b593cea727f68742684c979ead1a0a":["cf6645926c5572261eb47ea234b7892fc1df074f"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["8d6c98c690b593cea727f68742684c979ead1a0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}