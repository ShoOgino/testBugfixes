{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRequestSortedMerger#sortBuckets().mjava","commits":[{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":1,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequestSortedMerger#sortBuckets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#sortBuckets().mjava","sourceNew":"  public void sortBuckets() {\n    sortedBuckets = new ArrayList<>( buckets.values() );\n\n    Comparator<FacetBucket> comparator = null;\n\n    final FacetRequest.SortDirection direction = freq.sortDirection;\n    final int sortMul = direction.getMultiplier();\n\n    if (\"count\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> {\n        int v = -Long.compare(o1.count, o2.count) * sortMul;\n        return v == 0 ? o1.bucketValue.compareTo(o2.bucketValue) : v;\n      };\n      Collections.sort(sortedBuckets, comparator);\n    } else if (\"index\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> -o1.bucketValue.compareTo(o2.bucketValue) * sortMul;\n      Collections.sort(sortedBuckets, comparator);\n    } else {\n      final String key = freq.sortVariable;\n\n      /**\n       final FacetSortableMerger[] arr = new FacetSortableMerger[buckets.size()];\n       final int[] index = new int[arr.length];\n       int start = 0;\n       int nullStart = index.length;\n       int i=0;\n       for (FacetBucket bucket : buckets.values()) {\n       FacetMerger merger = bucket.getExistingMerger(key);\n       if (merger == null) {\n       index[--nullStart] = i;\n       }\n       if (merger != null) {\n       arr[start] = (FacetSortableMerger)merger;\n       index[start] = i;\n       start++;\n       }\n       i++;\n       }\n\n       PrimUtils.sort(0, nullStart, index, new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n      return arr[index[a]].compareTo(arr[index[b]], direction);\n      }\n      });\n       **/\n\n\n      List<SortVal> lst = new ArrayList<>(buckets.size());\n      List<FacetBucket> nulls = new ArrayList<>(buckets.size()>>1);\n      for (int i=0; i<sortedBuckets.size(); i++) {\n        FacetBucket bucket = sortedBuckets.get(i);\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          nulls.add(bucket);\n        }\n        if (merger != null) {\n          SortVal sv = new SortVal();\n          sv.bucket = bucket;\n          sv.merger = (FacetSortableMerger)merger;\n          sv.direction = direction;\n          // sv.pos = i;  // if we need position in the future...\n          lst.add(sv);\n        }\n      }\n      Collections.sort(lst);\n      Collections.sort(nulls, (o1, o2) -> o1.bucketValue.compareTo(o2.bucketValue));\n\n      ArrayList<FacetBucket> out = new ArrayList<>(buckets.size());\n      for (SortVal sv : lst) {\n        out.add( sv.bucket );\n      }\n      out.addAll(nulls);\n      sortedBuckets = out;\n    }\n  }\n\n","sourceOld":"  public void sortBuckets() {\n    sortedBuckets = new ArrayList<>( buckets.values() );\n\n    Comparator<FacetBucket> comparator = null;\n\n    final FacetField.SortDirection direction = freq.sortDirection;\n    final int sortMul = direction.getMultiplier();\n\n    if (\"count\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> {\n        int v = -Long.compare(o1.count, o2.count) * sortMul;\n        return v == 0 ? o1.bucketValue.compareTo(o2.bucketValue) : v;\n      };\n      Collections.sort(sortedBuckets, comparator);\n    } else if (\"index\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> -o1.bucketValue.compareTo(o2.bucketValue) * sortMul;\n      Collections.sort(sortedBuckets, comparator);\n    } else {\n      final String key = freq.sortVariable;\n\n      /**\n      final FacetSortableMerger[] arr = new FacetSortableMerger[buckets.size()];\n      final int[] index = new int[arr.length];\n      int start = 0;\n      int nullStart = index.length;\n      int i=0;\n      for (FacetBucket bucket : buckets.values()) {\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          index[--nullStart] = i;\n        }\n        if (merger != null) {\n          arr[start] = (FacetSortableMerger)merger;\n          index[start] = i;\n          start++;\n        }\n        i++;\n      }\n\n      PrimUtils.sort(0, nullStart, index, new PrimUtils.IntComparator() {\n        @Override\n        public int compare(int a, int b) {\n          return arr[index[a]].compareTo(arr[index[b]], direction);\n        }\n      });\n      **/\n\n      // timsort may do better here given that the lists may be partially sorted.\n\n      List<SortVal> lst = new ArrayList<SortVal>(buckets.size());\n      List<FacetBucket> nulls = new ArrayList<FacetBucket>(buckets.size()>>1);\n      for (int i=0; i<sortedBuckets.size(); i++) {\n        FacetBucket bucket = sortedBuckets.get(i);\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          nulls.add(bucket);\n        }\n        if (merger != null) {\n          SortVal sv = new SortVal();\n          sv.bucket = bucket;\n          sv.merger = (FacetSortableMerger)merger;\n          sv.direction = direction;\n          // sv.pos = i;  // if we need position in the future...\n          lst.add(sv);\n        }\n      }\n      Collections.sort(lst);\n      Collections.sort(nulls, (o1, o2) -> o1.bucketValue.compareTo(o2.bucketValue));\n\n      ArrayList<FacetBucket> out = new ArrayList<>(buckets.size());\n      for (SortVal sv : lst) {\n        out.add( sv.bucket );\n      }\n      out.addAll(nulls);\n      sortedBuckets = out;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequestSortedMerger#sortBuckets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#sortBuckets().mjava","sourceNew":"  public void sortBuckets() {\n    sortedBuckets = new ArrayList<>( buckets.values() );\n\n    Comparator<FacetBucket> comparator = null;\n\n    final FacetRequest.SortDirection direction = freq.sortDirection;\n    final int sortMul = direction.getMultiplier();\n\n    if (\"count\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> {\n        int v = -Long.compare(o1.count, o2.count) * sortMul;\n        return v == 0 ? o1.bucketValue.compareTo(o2.bucketValue) : v;\n      };\n      Collections.sort(sortedBuckets, comparator);\n    } else if (\"index\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> -o1.bucketValue.compareTo(o2.bucketValue) * sortMul;\n      Collections.sort(sortedBuckets, comparator);\n    } else {\n      final String key = freq.sortVariable;\n\n      /**\n       final FacetSortableMerger[] arr = new FacetSortableMerger[buckets.size()];\n       final int[] index = new int[arr.length];\n       int start = 0;\n       int nullStart = index.length;\n       int i=0;\n       for (FacetBucket bucket : buckets.values()) {\n       FacetMerger merger = bucket.getExistingMerger(key);\n       if (merger == null) {\n       index[--nullStart] = i;\n       }\n       if (merger != null) {\n       arr[start] = (FacetSortableMerger)merger;\n       index[start] = i;\n       start++;\n       }\n       i++;\n       }\n\n       PrimUtils.sort(0, nullStart, index, new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n      return arr[index[a]].compareTo(arr[index[b]], direction);\n      }\n      });\n       **/\n\n\n      List<SortVal> lst = new ArrayList<>(buckets.size());\n      List<FacetBucket> nulls = new ArrayList<>(buckets.size()>>1);\n      for (int i=0; i<sortedBuckets.size(); i++) {\n        FacetBucket bucket = sortedBuckets.get(i);\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          nulls.add(bucket);\n        }\n        if (merger != null) {\n          SortVal sv = new SortVal();\n          sv.bucket = bucket;\n          sv.merger = (FacetSortableMerger)merger;\n          sv.direction = direction;\n          // sv.pos = i;  // if we need position in the future...\n          lst.add(sv);\n        }\n      }\n      Collections.sort(lst);\n      Collections.sort(nulls, (o1, o2) -> o1.bucketValue.compareTo(o2.bucketValue));\n\n      ArrayList<FacetBucket> out = new ArrayList<>(buckets.size());\n      for (SortVal sv : lst) {\n        out.add( sv.bucket );\n      }\n      out.addAll(nulls);\n      sortedBuckets = out;\n    }\n  }\n\n","sourceOld":"  public void sortBuckets() {\n    sortedBuckets = new ArrayList<>( buckets.values() );\n\n    Comparator<FacetBucket> comparator = null;\n\n    final FacetField.SortDirection direction = freq.sortDirection;\n    final int sortMul = direction.getMultiplier();\n\n    if (\"count\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> {\n        int v = -Long.compare(o1.count, o2.count) * sortMul;\n        return v == 0 ? o1.bucketValue.compareTo(o2.bucketValue) : v;\n      };\n      Collections.sort(sortedBuckets, comparator);\n    } else if (\"index\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> -o1.bucketValue.compareTo(o2.bucketValue) * sortMul;\n      Collections.sort(sortedBuckets, comparator);\n    } else {\n      final String key = freq.sortVariable;\n\n      /**\n      final FacetSortableMerger[] arr = new FacetSortableMerger[buckets.size()];\n      final int[] index = new int[arr.length];\n      int start = 0;\n      int nullStart = index.length;\n      int i=0;\n      for (FacetBucket bucket : buckets.values()) {\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          index[--nullStart] = i;\n        }\n        if (merger != null) {\n          arr[start] = (FacetSortableMerger)merger;\n          index[start] = i;\n          start++;\n        }\n        i++;\n      }\n\n      PrimUtils.sort(0, nullStart, index, new PrimUtils.IntComparator() {\n        @Override\n        public int compare(int a, int b) {\n          return arr[index[a]].compareTo(arr[index[b]], direction);\n        }\n      });\n      **/\n\n      // timsort may do better here given that the lists may be partially sorted.\n\n      List<SortVal> lst = new ArrayList<SortVal>(buckets.size());\n      List<FacetBucket> nulls = new ArrayList<FacetBucket>(buckets.size()>>1);\n      for (int i=0; i<sortedBuckets.size(); i++) {\n        FacetBucket bucket = sortedBuckets.get(i);\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          nulls.add(bucket);\n        }\n        if (merger != null) {\n          SortVal sv = new SortVal();\n          sv.bucket = bucket;\n          sv.merger = (FacetSortableMerger)merger;\n          sv.direction = direction;\n          // sv.pos = i;  // if we need position in the future...\n          lst.add(sv);\n        }\n      }\n      Collections.sort(lst);\n      Collections.sort(nulls, (o1, o2) -> o1.bucketValue.compareTo(o2.bucketValue));\n\n      ArrayList<FacetBucket> out = new ArrayList<>(buckets.size());\n      for (SortVal sv : lst) {\n        out.add( sv.bucket );\n      }\n      out.addAll(nulls);\n      sortedBuckets = out;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequestSortedMerger#sortBuckets().mjava","pathOld":"/dev/null","sourceNew":"  public void sortBuckets() {\n    sortedBuckets = new ArrayList<>( buckets.values() );\n\n    Comparator<FacetBucket> comparator = null;\n\n    final FacetRequest.SortDirection direction = freq.sortDirection;\n    final int sortMul = direction.getMultiplier();\n\n    if (\"count\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> {\n        int v = -Long.compare(o1.count, o2.count) * sortMul;\n        return v == 0 ? o1.bucketValue.compareTo(o2.bucketValue) : v;\n      };\n      Collections.sort(sortedBuckets, comparator);\n    } else if (\"index\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> -o1.bucketValue.compareTo(o2.bucketValue) * sortMul;\n      Collections.sort(sortedBuckets, comparator);\n    } else {\n      final String key = freq.sortVariable;\n\n      /**\n       final FacetSortableMerger[] arr = new FacetSortableMerger[buckets.size()];\n       final int[] index = new int[arr.length];\n       int start = 0;\n       int nullStart = index.length;\n       int i=0;\n       for (FacetBucket bucket : buckets.values()) {\n       FacetMerger merger = bucket.getExistingMerger(key);\n       if (merger == null) {\n       index[--nullStart] = i;\n       }\n       if (merger != null) {\n       arr[start] = (FacetSortableMerger)merger;\n       index[start] = i;\n       start++;\n       }\n       i++;\n       }\n\n       PrimUtils.sort(0, nullStart, index, new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n      return arr[index[a]].compareTo(arr[index[b]], direction);\n      }\n      });\n       **/\n\n\n      List<SortVal> lst = new ArrayList<>(buckets.size());\n      List<FacetBucket> nulls = new ArrayList<>(buckets.size()>>1);\n      for (int i=0; i<sortedBuckets.size(); i++) {\n        FacetBucket bucket = sortedBuckets.get(i);\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          nulls.add(bucket);\n        }\n        if (merger != null) {\n          SortVal sv = new SortVal();\n          sv.bucket = bucket;\n          sv.merger = (FacetSortableMerger)merger;\n          sv.direction = direction;\n          // sv.pos = i;  // if we need position in the future...\n          lst.add(sv);\n        }\n      }\n      Collections.sort(lst);\n      Collections.sort(nulls, (o1, o2) -> o1.bucketValue.compareTo(o2.bucketValue));\n\n      ArrayList<FacetBucket> out = new ArrayList<>(buckets.size());\n      for (SortVal sv : lst) {\n        out.add( sv.bucket );\n      }\n      out.addAll(nulls);\n      sortedBuckets = out;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequestSortedMerger#sortBuckets(FacetRequest.FacetSort).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequestSortedMerger#sortBuckets().mjava","sourceNew":"  public void sortBuckets(final FacetRequest.FacetSort sort) {\n    // NOTE: we *always* re-init from buckets, because it may have been modified post-refinement \n    sortedBuckets = new ArrayList<>( buckets.values() );\n\n    Comparator<FacetBucket> comparator = null;\n\n    final FacetRequest.SortDirection direction = sort.sortDirection;\n    final int sortMul = direction.getMultiplier();\n\n    if (\"count\".equals(sort.sortVariable)) {\n      comparator = (o1, o2) -> {\n        int v = -Long.compare(o1.count, o2.count) * sortMul;\n        return v == 0 ? o1.bucketValue.compareTo(o2.bucketValue) : v;\n      };\n      Collections.sort(sortedBuckets, comparator);\n    } else if (\"index\".equals(sort.sortVariable)) {\n      comparator = (o1, o2) -> -o1.bucketValue.compareTo(o2.bucketValue) * sortMul;\n      Collections.sort(sortedBuckets, comparator);\n    } else {\n      final String key = sort.sortVariable;\n\n      /**\n       final FacetSortableMerger[] arr = new FacetSortableMerger[buckets.size()];\n       final int[] index = new int[arr.length];\n       int start = 0;\n       int nullStart = index.length;\n       int i=0;\n       for (FacetBucket bucket : buckets.values()) {\n       FacetMerger merger = bucket.getExistingMerger(key);\n       if (merger == null) {\n       index[--nullStart] = i;\n       }\n       if (merger != null) {\n       arr[start] = (FacetSortableMerger)merger;\n       index[start] = i;\n       start++;\n       }\n       i++;\n       }\n\n       PrimUtils.sort(0, nullStart, index, new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n      return arr[index[a]].compareTo(arr[index[b]], direction);\n      }\n      });\n       **/\n\n\n      List<SortVal> lst = new ArrayList<>(buckets.size());\n      List<FacetBucket> nulls = new ArrayList<>(buckets.size()>>1);\n      for (int i=0; i<sortedBuckets.size(); i++) {\n        FacetBucket bucket = sortedBuckets.get(i);\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          nulls.add(bucket);\n        }\n        if (merger != null) {\n          SortVal sv = new SortVal();\n          sv.bucket = bucket;\n          sv.merger = (FacetSortableMerger)merger;\n          sv.direction = direction;\n          // sv.pos = i;  // if we need position in the future...\n          lst.add(sv);\n        }\n      }\n      Collections.sort(lst);\n      Collections.sort(nulls, (o1, o2) -> o1.bucketValue.compareTo(o2.bucketValue));\n\n      ArrayList<FacetBucket> out = new ArrayList<>(buckets.size());\n      for (SortVal sv : lst) {\n        out.add( sv.bucket );\n      }\n      out.addAll(nulls);\n      sortedBuckets = out;\n    }\n    assert null != sortedBuckets;\n  }\n\n","sourceOld":"  public void sortBuckets() {\n    sortedBuckets = new ArrayList<>( buckets.values() );\n\n    Comparator<FacetBucket> comparator = null;\n\n    final FacetRequest.SortDirection direction = freq.sortDirection;\n    final int sortMul = direction.getMultiplier();\n\n    if (\"count\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> {\n        int v = -Long.compare(o1.count, o2.count) * sortMul;\n        return v == 0 ? o1.bucketValue.compareTo(o2.bucketValue) : v;\n      };\n      Collections.sort(sortedBuckets, comparator);\n    } else if (\"index\".equals(freq.sortVariable)) {\n      comparator = (o1, o2) -> -o1.bucketValue.compareTo(o2.bucketValue) * sortMul;\n      Collections.sort(sortedBuckets, comparator);\n    } else {\n      final String key = freq.sortVariable;\n\n      /**\n       final FacetSortableMerger[] arr = new FacetSortableMerger[buckets.size()];\n       final int[] index = new int[arr.length];\n       int start = 0;\n       int nullStart = index.length;\n       int i=0;\n       for (FacetBucket bucket : buckets.values()) {\n       FacetMerger merger = bucket.getExistingMerger(key);\n       if (merger == null) {\n       index[--nullStart] = i;\n       }\n       if (merger != null) {\n       arr[start] = (FacetSortableMerger)merger;\n       index[start] = i;\n       start++;\n       }\n       i++;\n       }\n\n       PrimUtils.sort(0, nullStart, index, new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n      return arr[index[a]].compareTo(arr[index[b]], direction);\n      }\n      });\n       **/\n\n\n      List<SortVal> lst = new ArrayList<>(buckets.size());\n      List<FacetBucket> nulls = new ArrayList<>(buckets.size()>>1);\n      for (int i=0; i<sortedBuckets.size(); i++) {\n        FacetBucket bucket = sortedBuckets.get(i);\n        FacetMerger merger = bucket.getExistingMerger(key);\n        if (merger == null) {\n          nulls.add(bucket);\n        }\n        if (merger != null) {\n          SortVal sv = new SortVal();\n          sv.bucket = bucket;\n          sv.merger = (FacetSortableMerger)merger;\n          sv.direction = direction;\n          // sv.pos = i;  // if we need position in the future...\n          lst.add(sv);\n        }\n      }\n      Collections.sort(lst);\n      Collections.sort(nulls, (o1, o2) -> o1.bucketValue.compareTo(o2.bucketValue));\n\n      ArrayList<FacetBucket> out = new ArrayList<>(buckets.size());\n      for (SortVal sv : lst) {\n        out.add( sv.bucket );\n      }\n      out.addAll(nulls);\n      sortedBuckets = out;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1931d98b40b01d5075753b197c2461a5c2652689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1931d98b40b01d5075753b197c2461a5c2652689"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["94ce69d020f939568b84a1dbbfbd11bfd9907b73","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}