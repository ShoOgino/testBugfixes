{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseSorts(String).mjava","commits":[{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseSorts(String).mjava","pathOld":"/dev/null","sourceNew":"  private String[] parseSorts(String sortString) {\n    List<String> sorts = new ArrayList();\n    boolean inParam = false;\n    StringBuilder buff = new StringBuilder();\n    for(int i=0; i<sortString.length(); i++) {\n      char c = sortString.charAt(i);\n      if(c == '(') {\n        inParam=true;\n        buff.append(c);\n      } else if (c == ')') {\n        inParam = false;\n        buff.append(c);\n      } else if (c == ',' && !inParam) {\n        sorts.add(buff.toString().trim());\n        buff = new StringBuilder();\n      } else {\n        buff.append(c);\n      }\n    }\n\n    if(buff.length() > 0) {\n      sorts.add(buff.toString());\n    }\n\n    return sorts.toArray(new String[sorts.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseSorts(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#parseSorts(String).mjava","sourceNew":"  private String[] parseSorts(String sortString) {\n    List<String> sorts = new ArrayList<>();\n    boolean inParam = false;\n    StringBuilder buff = new StringBuilder();\n    for(int i=0; i<sortString.length(); i++) {\n      char c = sortString.charAt(i);\n      if(c == '(') {\n        inParam=true;\n        buff.append(c);\n      } else if (c == ')') {\n        inParam = false;\n        buff.append(c);\n      } else if (c == ',' && !inParam) {\n        sorts.add(buff.toString().trim());\n        buff = new StringBuilder();\n      } else {\n        buff.append(c);\n      }\n    }\n\n    if(buff.length() > 0) {\n      sorts.add(buff.toString());\n    }\n\n    return sorts.toArray(new String[sorts.size()]);\n  }\n\n","sourceOld":"  private String[] parseSorts(String sortString) {\n    List<String> sorts = new ArrayList();\n    boolean inParam = false;\n    StringBuilder buff = new StringBuilder();\n    for(int i=0; i<sortString.length(); i++) {\n      char c = sortString.charAt(i);\n      if(c == '(') {\n        inParam=true;\n        buff.append(c);\n      } else if (c == ')') {\n        inParam = false;\n        buff.append(c);\n      } else if (c == ',' && !inParam) {\n        sorts.add(buff.toString().trim());\n        buff = new StringBuilder();\n      } else {\n        buff.append(c);\n      }\n    }\n\n    if(buff.length() > 0) {\n      sorts.add(buff.toString());\n    }\n\n    return sorts.toArray(new String[sorts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}