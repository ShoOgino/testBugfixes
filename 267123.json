{"path":"src/test/org/apache/lucene/search/TestSort#assertSameValues(HashMap,HashMap).mjava","commits":[{"id":"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa","date":1080060596,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#assertSameValues(HashMap,HashMap).mjava","pathOld":"/dev/null","sourceNew":"\t// make sure all the values in the maps match\n\tprivate void assertSameValues (HashMap m1, HashMap m2) {\n\t\tint n = m1.size();\n\t\tint m = m2.size();\n\t\tassertEquals (n, m);\n\t\tIterator iter = m1.keySet().iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tObject key = iter.next();\n\t\t\tassertEquals (m1.get(key), m2.get(key));\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5457736ee10c96b4fcd88997461006c8585ac24","date":1131568124,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#assertSameValues(HashMap,HashMap).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertSameValues(HashMap,HashMap).mjava","sourceNew":"\t// make sure all the values in the maps match\n\tprivate void assertSameValues (HashMap m1, HashMap m2) {\n\t\tint n = m1.size();\n\t\tint m = m2.size();\n\t\tassertEquals (n, m);\n\t\tIterator iter = m1.keySet().iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tObject key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n\t\t}\n\t}\n\n","sourceOld":"\t// make sure all the values in the maps match\n\tprivate void assertSameValues (HashMap m1, HashMap m2) {\n\t\tint n = m1.size();\n\t\tint m = m2.size();\n\t\tassertEquals (n, m);\n\t\tIterator iter = m1.keySet().iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tObject key = iter.next();\n\t\t\tassertEquals (m1.get(key), m2.get(key));\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#assertSameValues(HashMap,HashMap).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertSameValues(HashMap,HashMap).mjava","sourceNew":"  // make sure all the values in the maps match\n  private void assertSameValues (HashMap m1, HashMap m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      Object key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","sourceOld":"\t// make sure all the values in the maps match\n\tprivate void assertSameValues (HashMap m1, HashMap m2) {\n\t\tint n = m1.size();\n\t\tint m = m2.size();\n\t\tassertEquals (n, m);\n\t\tIterator iter = m1.keySet().iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tObject key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#[K,V]_assertSameValues(HashMap[K,V],HashMap[K,V]).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertSameValues(HashMap,HashMap).mjava","sourceNew":"  // make sure all the values in the maps match\n  private <K, V> void assertSameValues (HashMap<K,V> m1, HashMap<K,V> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<K> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      K key = iter.next();\n      V o1 = m1.get(key);\n      V o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","sourceOld":"  // make sure all the values in the maps match\n  private void assertSameValues (HashMap m1, HashMap m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      Object key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f5457736ee10c96b4fcd88997461006c8585ac24":["0b1460ee2827b26dc3a41a6c403bb5872f87ddaa"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["f5457736ee10c96b4fcd88997461006c8585ac24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa":["f5457736ee10c96b4fcd88997461006c8585ac24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b1460ee2827b26dc3a41a6c403bb5872f87ddaa"],"f5457736ee10c96b4fcd88997461006c8585ac24":["63bc3238545c6012bd44f5d294077997f236bc4e"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63bc3238545c6012bd44f5d294077997f236bc4e":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}