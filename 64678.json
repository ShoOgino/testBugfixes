{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testFloats().mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testFloats().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloats() throws Exception {\n    float[] vals=new float[]{\n      Float.NEGATIVE_INFINITY, -2.3E25f, -1.0E15f, -1.0f, -1.0E-1f, -1.0E-2f, -0.0f, \n      +0.0f, 1.0E-2f, 1.0E-1f, 1.0f, 1.0E15f, 2.3E25f, Float.POSITIVE_INFINITY\n    };\n    int[] intVals=new int[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      intVals[i]=TrieUtils.floatToSortableInt(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Float.compare(vals[i], TrieUtils.sortableIntToFloat(intVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<intVals.length; i++) {\n      assertTrue( \"check sort order\", intVals[i-1] < intVals[i] );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testFloats().mjava","sourceNew":null,"sourceOld":"  public void testFloats() throws Exception {\n    float[] vals=new float[]{\n      Float.NEGATIVE_INFINITY, -2.3E25f, -1.0E15f, -1.0f, -1.0E-1f, -1.0E-2f, -0.0f, \n      +0.0f, 1.0E-2f, 1.0E-1f, 1.0f, 1.0E15f, 2.3E25f, Float.POSITIVE_INFINITY\n    };\n    int[] intVals=new int[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      intVals[i]=TrieUtils.floatToSortableInt(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Float.compare(vals[i], TrieUtils.sortableIntToFloat(intVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<intVals.length; i++) {\n      assertTrue( \"check sort order\", intVals[i-1] < intVals[i] );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}