{"path":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    try {\n      new FacetInterval(f, intervalStr);\n      fail(\"Expecting SyntaxError for interval String: \" + intervalStr);\n    } catch (SyntaxError e) {\n      assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n          e.getMessage(), e.getMessage().contains(errorMsg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e3055974cda209e4f95efadcd904f0ebf03ada","date":1406238198,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","sourceNew":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    try {\n      new FacetInterval(f, intervalStr, new ModifiableSolrParams());\n      fail(\"Expecting SyntaxError for interval String: \" + intervalStr);\n    } catch (SyntaxError e) {\n      assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n          e.getMessage(), e.getMessage().contains(errorMsg));\n    }\n  }\n\n","sourceOld":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    try {\n      new FacetInterval(f, intervalStr);\n      fail(\"Expecting SyntaxError for interval String: \" + intervalStr);\n    } catch (SyntaxError e) {\n      assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n          e.getMessage(), e.getMessage().contains(errorMsg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","sourceNew":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    SyntaxError e = expectThrows(SyntaxError.class,  () -> new FacetInterval(f, intervalStr, new ModifiableSolrParams()));\n    assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n        e.getMessage(), e.getMessage().contains(errorMsg));\n  }\n\n","sourceOld":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    try {\n      new FacetInterval(f, intervalStr, new ModifiableSolrParams());\n      fail(\"Expecting SyntaxError for interval String: \" + intervalStr);\n    } catch (SyntaxError e) {\n      assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n          e.getMessage(), e.getMessage().contains(errorMsg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","sourceNew":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    SyntaxError e = expectThrows(SyntaxError.class,  () -> new FacetInterval(f, intervalStr, new ModifiableSolrParams()));\n    assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n        e.getMessage(), e.getMessage().contains(errorMsg));\n  }\n\n","sourceOld":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    try {\n      new FacetInterval(f, intervalStr, new ModifiableSolrParams());\n      fail(\"Expecting SyntaxError for interval String: \" + intervalStr);\n    } catch (SyntaxError e) {\n      assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n          e.getMessage(), e.getMessage().contains(errorMsg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#assertBadInterval(String,String,String).mjava","sourceNew":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    SyntaxError e = expectThrows(SyntaxError.class,  () -> new FacetInterval(f, intervalStr, new ModifiableSolrParams()));\n    assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n        e.getMessage(), e.getMessage().contains(errorMsg));\n  }\n\n","sourceOld":"  private void assertBadInterval(String fieldName, String intervalStr, String errorMsg) {\n    SchemaField f = h.getCore().getLatestSchema().getField(fieldName);\n    try {\n      new FacetInterval(f, intervalStr, new ModifiableSolrParams());\n      fail(\"Expecting SyntaxError for interval String: \" + intervalStr);\n    } catch (SyntaxError e) {\n      assertTrue(\"Unexpected error message for interval String: \" + intervalStr + \": \" +\n          e.getMessage(), e.getMessage().contains(errorMsg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["a0e3055974cda209e4f95efadcd904f0ebf03ada"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e3055974cda209e4f95efadcd904f0ebf03ada","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"a0e3055974cda209e4f95efadcd904f0ebf03ada":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e3055974cda209e4f95efadcd904f0ebf03ada","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e3055974cda209e4f95efadcd904f0ebf03ada"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"a0e3055974cda209e4f95efadcd904f0ebf03ada":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}