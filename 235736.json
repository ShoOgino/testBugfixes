{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    // expected exception, array length differs\n    expectThrows(IllegalArgumentException.class, () -> {\n      MultiFieldQueryParser.parse(queries5, fields, new MockAnalyzer(random()));\n    });\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":["379db3ad24c4f0214f30a122265a6d6be003a99d","dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}