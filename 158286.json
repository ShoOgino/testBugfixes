{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e16ac84f9e5d560008fe1554462ff8b853b3d3c","date":1520142134,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","date":1532119025,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  // commented 20-July-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2d6b868457b26b5a2145b8441b1cfcfc0692b02","date":1534307099,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  // commented 20-July-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":"  @Test\n  // commented 20-July-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  // commented 20-July-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestSimTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":"  @Test\n  // commented 20-July-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    String nodeName = cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    cluster.simRemoveNode(nodeName, false);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    timeOut.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}