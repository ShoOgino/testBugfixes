{"path":"src/test/org/apache/solr/schema/BadIndexSchemaTest#testSevereErrorsForDuplicateNames().mjava","commits":[{"id":"aceda38d9d3f703668f1a4569473f90880ed3f1e","date":1178744011,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/BadIndexSchemaTest#testSevereErrorsForDuplicateNames().mjava","pathOld":"/dev/null","sourceNew":"  public void testSevereErrorsForDuplicateNames() \n  {\n    SolrCore core = SolrCore.getSolrCore();\n    IndexSchema schema = core.getSchema();\n\n    for( Throwable t : SolrConfig.severeErrors ) {\n      System.out.println( \"ERROR:\"+t.getMessage() );\n    }\n    \n    assertEquals( 3, SolrConfig.severeErrors.size() );\n\n    List<Throwable> err = new LinkedList<Throwable>();\n    err.addAll( SolrConfig.severeErrors );\n    \n    Throwable t = findErrorWithSubstring( err, \"*_twice\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"ftAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"fAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n\n    // make sure thats all of them\n    assertTrue( err.isEmpty() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/BadIndexSchemaTest#testSevereErrorsForDuplicateNames().mjava","pathOld":"src/test/org/apache/solr/schema/BadIndexSchemaTest#testSevereErrorsForDuplicateNames().mjava","sourceNew":"  public void testSevereErrorsForDuplicateNames() \n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n\n    for( Throwable t : SolrConfig.severeErrors ) {\n      System.out.println( \"ERROR:\"+t.getMessage() );\n    }\n    \n    assertEquals( 3, SolrConfig.severeErrors.size() );\n\n    List<Throwable> err = new LinkedList<Throwable>();\n    err.addAll( SolrConfig.severeErrors );\n    \n    Throwable t = findErrorWithSubstring( err, \"*_twice\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"ftAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"fAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n\n    // make sure thats all of them\n    assertTrue( err.isEmpty() );\n  }\n\n","sourceOld":"  public void testSevereErrorsForDuplicateNames() \n  {\n    SolrCore core = SolrCore.getSolrCore();\n    IndexSchema schema = core.getSchema();\n\n    for( Throwable t : SolrConfig.severeErrors ) {\n      System.out.println( \"ERROR:\"+t.getMessage() );\n    }\n    \n    assertEquals( 3, SolrConfig.severeErrors.size() );\n\n    List<Throwable> err = new LinkedList<Throwable>();\n    err.addAll( SolrConfig.severeErrors );\n    \n    Throwable t = findErrorWithSubstring( err, \"*_twice\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"ftAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"fAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n\n    // make sure thats all of them\n    assertTrue( err.isEmpty() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#testSevereErrorsForDuplicateNames().mjava","pathOld":"src/test/org/apache/solr/schema/BadIndexSchemaTest#testSevereErrorsForDuplicateNames().mjava","sourceNew":"  public void testSevereErrorsForDuplicateNames() \n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n\n    for( Throwable t : SolrConfig.severeErrors ) {\n      System.out.println( \"ERROR:\"+t.getMessage() );\n    }\n    \n    assertEquals( 3, SolrConfig.severeErrors.size() );\n\n    List<Throwable> err = new LinkedList<Throwable>();\n    err.addAll( SolrConfig.severeErrors );\n    \n    Throwable t = findErrorWithSubstring( err, \"*_twice\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"ftAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"fAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n\n    // make sure thats all of them\n    assertTrue( err.isEmpty() );\n  }\n\n","sourceOld":"  public void testSevereErrorsForDuplicateNames() \n  {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n\n    for( Throwable t : SolrConfig.severeErrors ) {\n      System.out.println( \"ERROR:\"+t.getMessage() );\n    }\n    \n    assertEquals( 3, SolrConfig.severeErrors.size() );\n\n    List<Throwable> err = new LinkedList<Throwable>();\n    err.addAll( SolrConfig.severeErrors );\n    \n    Throwable t = findErrorWithSubstring( err, \"*_twice\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"ftAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n    \n    t = findErrorWithSubstring( err, \"fAgain\" );\n    assertNotNull( t );\n    err.remove( t );\n\n    // make sure thats all of them\n    assertTrue( err.isEmpty() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aceda38d9d3f703668f1a4569473f90880ed3f1e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6d6338c87060be5f66757a94945975f3bbd377a9":["aceda38d9d3f703668f1a4569473f90880ed3f1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aceda38d9d3f703668f1a4569473f90880ed3f1e":["6d6338c87060be5f66757a94945975f3bbd377a9"],"6d6338c87060be5f66757a94945975f3bbd377a9":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["aceda38d9d3f703668f1a4569473f90880ed3f1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}