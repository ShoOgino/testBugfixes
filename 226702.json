{"path":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","commits":[{"id":"5676bf22fd531b9a2a3053047d0e0f922c1c53ff","date":1435097302,"type":0,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    rb.isDistrib = req.getParams().getBool(\"distrib\", req.getCore().getCoreDescriptor()\n        .getCoreContainer().isZooKeeperAware());\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    return shardHandler;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c","date":1456187117,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","sourceNew":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreDescriptor().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(\"distrib\", isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","sourceOld":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    rb.isDistrib = req.getParams().getBool(\"distrib\", req.getCore().getCoreDescriptor()\n        .getCoreContainer().isZooKeeperAware());\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    return shardHandler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","sourceNew":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreDescriptor().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(\"distrib\", isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","sourceOld":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    rb.isDistrib = req.getParams().getBool(\"distrib\", req.getCore().getCoreDescriptor()\n        .getCoreContainer().isZooKeeperAware());\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    return shardHandler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","sourceNew":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreDescriptor().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","sourceOld":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreDescriptor().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(\"distrib\", isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","sourceNew":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreDescriptor().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","sourceOld":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreDescriptor().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(\"distrib\", isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","sourceNew":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","sourceOld":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreDescriptor().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","sourceNew":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","sourceOld":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreDescriptor().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd22dcd3ba035a1626face7319c94be45ae07172","date":1527224634,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#getAndPrepShardHandler(SolrQueryRequest,ResponseBuilder).mjava","sourceNew":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if (isZkAware) {\n      String shardsTolerant = req.getParams().get(ShardParams.SHARDS_TOLERANT);\n      boolean requireZkConnected = shardsTolerant != null && shardsTolerant.equals(ShardParams.REQUIRE_ZK_CONNECTED);\n      ZkController zkController = cc.getZkController();\n      boolean zkConnected = zkController != null && ! zkController.getZkClient().getConnectionManager().isLikelyExpired();\n      if (requireZkConnected && false == zkConnected) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ZooKeeper is not connected\");\n      } else {\n        NamedList<Object> headers = rb.rsp.getResponseHeader();\n        if (headers != null) {\n          headers.add(\"zkConnected\", zkConnected);\n        }\n      }\n    }\n\n    return shardHandler;\n  }\n\n","sourceOld":"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {\n    ShardHandler shardHandler = null;\n\n    CoreContainer cc = req.getCore().getCoreContainer();\n    boolean isZkAware = cc.isZooKeeperAware();\n    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);\n    if (!rb.isDistrib) {\n      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\n      // search is distributed.\n      final String shards = req.getParams().get(ShardParams.SHARDS);\n      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));\n    }\n    \n    if (rb.isDistrib) {\n      shardHandler = shardHandlerFactory.getShardHandler();\n      shardHandler.prepDistributed(rb);\n      if (!rb.isDistrib) {\n        shardHandler = null; // request is not distributed after all and so the shard handler is not needed\n      }\n    }\n\n    if(isZkAware) {\n      ZkController zkController = cc.getZkController();\n      NamedList<Object> headers = rb.rsp.getResponseHeader();\n      if(headers != null) {\n        headers.add(\"zkConnected\", \n            zkController != null \n          ? !zkController.getZkClient().getConnectionManager().isLikelyExpired() \n          : false);\n      }\n      \n    }\n\n    return shardHandler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"bd22dcd3ba035a1626face7319c94be45ae07172":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5676bf22fd531b9a2a3053047d0e0f922c1c53ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"419a8f52c6635419beb951255cacbbb281044c57":["5676bf22fd531b9a2a3053047d0e0f922c1c53ff","e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c"],"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c":["5676bf22fd531b9a2a3053047d0e0f922c1c53ff"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["419a8f52c6635419beb951255cacbbb281044c57"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["01624b85de12fb02335810bdf325124e59040772"],"01624b85de12fb02335810bdf325124e59040772":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd22dcd3ba035a1626face7319c94be45ae07172"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bd22dcd3ba035a1626face7319c94be45ae07172":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5676bf22fd531b9a2a3053047d0e0f922c1c53ff"],"5676bf22fd531b9a2a3053047d0e0f922c1c53ff":["419a8f52c6635419beb951255cacbbb281044c57","e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c"],"419a8f52c6635419beb951255cacbbb281044c57":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c":["419a8f52c6635419beb951255cacbbb281044c57"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["bd22dcd3ba035a1626face7319c94be45ae07172"],"01624b85de12fb02335810bdf325124e59040772":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}