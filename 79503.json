{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#innerPurge(IOUtils.IOConsumer[FlushTicket]).mjava","commits":[{"id":"6b8498afacfc8322268ca0d659d274fcce08d557","date":1524577248,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#innerPurge(IOUtils.IOConsumer[FlushTicket]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#innerPurge(IndexWriter).mjava","sourceNew":"  private void innerPurge(IOUtils.IOConsumer<FlushTicket> consumer) throws IOException {\n    assert purgeLock.isHeldByCurrentThread();\n    while (true) {\n      final FlushTicket head;\n      final boolean canPublish;\n      synchronized (this) {\n        head = queue.peek();\n        canPublish = head != null && head.canPublish(); // do this synced \n      }\n      if (canPublish) {\n        try {\n          /*\n           * if we block on publish -> lock IW -> lock BufferedDeletes we don't block\n           * concurrent segment flushes just because they want to append to the queue.\n           * the downside is that we need to force a purge on fullFlush since there could\n           * be a ticket still in the queue. \n           */\n          consumer.accept(head);\n\n        } finally {\n          synchronized (this) {\n            // finally remove the published ticket from the queue\n            final FlushTicket poll = queue.poll();\n            decTickets();\n            // we hold the purgeLock so no other thread should have polled:\n            assert poll == head;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private int innerPurge(IndexWriter writer) throws IOException {\n    assert purgeLock.isHeldByCurrentThread();\n    int numPurged = 0;\n    while (true) {\n      final FlushTicket head;\n      final boolean canPublish;\n      synchronized (this) {\n        head = queue.peek();\n        canPublish = head != null && head.canPublish(); // do this synced \n      }\n      if (canPublish) {\n        numPurged++;\n        try {\n          /*\n           * if we block on publish -> lock IW -> lock BufferedDeletes we don't block\n           * concurrent segment flushes just because they want to append to the queue.\n           * the downside is that we need to force a purge on fullFlush since ther could\n           * be a ticket still in the queue. \n           */\n          head.publish(writer);\n          \n        } finally {\n          synchronized (this) {\n            // finally remove the published ticket from the queue\n            final FlushTicket poll = queue.poll();\n\n            // we hold the purgeLock so no other thread should have polled:\n            assert poll == head;\n            \n            ticketCount.decrementAndGet();\n            assert poll == head;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n    return numPurged;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b8498afacfc8322268ca0d659d274fcce08d557":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b8498afacfc8322268ca0d659d274fcce08d557"]},"commit2Childs":{"6b8498afacfc8322268ca0d659d274fcce08d557":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b8498afacfc8322268ca0d659d274fcce08d557"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}