{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#Lucene50SkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#Lucene50SkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Lucene50SkipReader(IndexInput skipStream, int maxSkipLevels, int blockSize, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, blockSize, 8);\n    this.blockSize = blockSize;\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#Lucene50SkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Lucene50SkipReader(IndexInput skipStream, int maxSkipLevels, int blockSize, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, blockSize, 8);\n    this.blockSize = blockSize;\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#Lucene50SkipReader(IndexInput,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#Lucene50SkipReader(IndexInput,int,int,boolean,boolean,boolean).mjava","sourceNew":"  public Lucene50SkipReader(IndexInput skipStream, int maxSkipLevels, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, BLOCK_SIZE, 8);\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","sourceOld":"  public Lucene50SkipReader(IndexInput skipStream, int maxSkipLevels, int blockSize, boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(skipStream, maxSkipLevels, blockSize, 8);\n    this.blockSize = blockSize;\n    docPointer = new long[maxSkipLevels];\n    if (hasPos) {\n      posPointer = new long[maxSkipLevels];\n      posBufferUpto = new int[maxSkipLevels];\n      if (hasPayloads) {\n        payloadByteUpto = new int[maxSkipLevels];\n      } else {\n        payloadByteUpto = null;\n      }\n      if (hasOffsets || hasPayloads) {\n        payPointer = new long[maxSkipLevels];\n      } else {\n        payPointer = null;\n      }\n    } else {\n      posPointer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}