{"path":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"359f2ae527cb0ed04141f8530a934deff2272901","date":1286201101,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t  // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n\t  if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n\t    String defLang = Locale.getDefault().getLanguage();\n\t    Assume.assumeTrue(!defLang.equals(\"tr\") && !defLang.equals(\"az\"));\n\t  }\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f","date":1287243791,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t  // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n\t  if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n\t    String defLang = Locale.getDefault().getLanguage();\n\t    assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n\t  }\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t  // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n\t  if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n\t    String defLang = Locale.getDefault().getLanguage();\n\t    Assume.assumeTrue(!defLang.equals(\"tr\") && !defLang.equals(\"az\"));\n\t  }\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t  // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n\t  if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n\t    String defLang = Locale.getDefault().getLanguage();\n\t    assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n\t  }\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t  // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n\t  if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n\t    String defLang = Locale.getDefault().getLanguage();\n\t    Assume.assumeTrue(!defLang.equals(\"tr\") && !defLang.equals(\"az\"));\n\t  }\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t  // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n\t  if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n\t    String defLang = Locale.getDefault().getLanguage();\n\t    assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n\t  }\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, null, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t  // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n\t  if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n\t    String defLang = Locale.getDefault().getLanguage();\n\t    assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n\t  }\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, null, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, null, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"359f2ae527cb0ed04141f8530a934deff2272901":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["359f2ae527cb0ed04141f8530a934deff2272901","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["359f2ae527cb0ed04141f8530a934deff2272901"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"359f2ae527cb0ed04141f8530a934deff2272901":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["359f2ae527cb0ed04141f8530a934deff2272901","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}