{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    StopFilter.setEnablePositionIncrementsDefault(true);\n    try {\n      StandardQueryParser qp = new StandardQueryParser();\n      qp.setAnalyzer(\n          new StopAnalyzer(new String[] { \"the\", \"in\", \"are\", \"this\" }));\n\n      qp.setEnablePositionIncrements(true);\n\n      String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n      // 0 2 5 7 8\n      int expectedPositions[] = { 1, 3, 4, 6, 9 };\n      PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n      // System.out.println(\"Query text: \"+qtxt);\n      // System.out.println(\"Result: \"+pq);\n      Term t[] = pq.getTerms();\n      int pos[] = pq.getPositions();\n      for (int i = 0; i < t.length; i++) {\n        // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n        assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n            expectedPositions[i], pos[i]);\n      }\n\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    StopFilter.setEnablePositionIncrementsDefault(true);\n    try {\n      OriginalQueryParserHelper qp = new OriginalQueryParserHelper();\n      qp.setAnalyzer(\n          new StopAnalyzer(new String[] { \"the\", \"in\", \"are\", \"this\" }));\n\n      qp.setEnablePositionIncrements(true);\n\n      String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n      // 0 2 5 7 8\n      int expectedPositions[] = { 1, 3, 4, 6, 9 };\n      PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n      // System.out.println(\"Query text: \"+qtxt);\n      // System.out.println(\"Result: \"+pq);\n      Term t[] = pq.getTerms();\n      int pos[] = pq.getPositions();\n      for (int i = 0; i < t.length; i++) {\n        // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n        assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n            expectedPositions[i], pos[i]);\n      }\n\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(StopFilter.makeStopSet(\"the\", \"in\", \"are\", \"this\" ), true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    StopFilter.setEnablePositionIncrementsDefault(true);\n    try {\n      StandardQueryParser qp = new StandardQueryParser();\n      qp.setAnalyzer(\n          new StopAnalyzer(new String[] { \"the\", \"in\", \"are\", \"this\" }));\n\n      qp.setEnablePositionIncrements(true);\n\n      String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n      // 0 2 5 7 8\n      int expectedPositions[] = { 1, 3, 4, 6, 9 };\n      PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n      // System.out.println(\"Query text: \"+qtxt);\n      // System.out.println(\"Result: \"+pq);\n      Term t[] = pq.getTerms();\n      int pos[] = pq.getPositions();\n      for (int i = 0; i < t.length; i++) {\n        // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n        assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n            expectedPositions[i], pos[i]);\n      }\n\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(\"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(StopFilter.makeStopSet(\"the\", \"in\", \"are\", \"this\" ), true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(Version.LUCENE_CURRENT, \"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(\"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(Version.LUCENE_CURRENT, \"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["e8a848e758754282137f42bf85793c278e250390"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1116b3450a9c1642c89445d131b37344055245":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}