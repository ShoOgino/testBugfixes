{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","commits":[{"id":"ac52b67f02dde8ba4b452266fdf8c0e15442c856","date":1510634873,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","pathOld":"/dev/null","sourceNew":"  public void testSyspropSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1',\" +\n        \"    'node2',\" +\n        \"    'node3'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1': {\" +\n        \"      'c1': {'s1': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}],\" +\n        \"             's2': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}]},\" +\n        \"    }\" +\n        \"  },\" +\n        \"    'nodeValues': {\" +\n        \"      'node1': {'cores': 2, 'freedisk': 334, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node2': {'cores': 2, 'freedisk': 749, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node3': {'cores': 0, 'freedisk': 262, 'sysprop.fs': 'ssd'}\" +\n        \"    }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      Utils.getObjectByPath(suggestion ,true, \"operation/move-replica/targetNode\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","sourceNew":"  public void testSyspropSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1',\" +\n        \"    'node2',\" +\n        \"    'node3'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1': {\" +\n        \"      'c1': {'s1': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}],\" +\n        \"             's2': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}]},\" +\n        \"    }\" +\n        \"  },\" +\n        \"    'nodeValues': {\" +\n        \"      'node1': {'cores': 2, 'freedisk': 334, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node2': {'cores': 2, 'freedisk': 749, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node3': {'cores': 0, 'freedisk': 262, 'sysprop.fs': 'ssd'}\" +\n        \"    }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      Utils.getObjectByPath(suggestion, true, \"operation/move-replica/targetNode\");\n    }\n  }\n\n","sourceOld":"  public void testSyspropSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1',\" +\n        \"    'node2',\" +\n        \"    'node3'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1': {\" +\n        \"      'c1': {'s1': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}],\" +\n        \"             's2': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}]},\" +\n        \"    }\" +\n        \"  },\" +\n        \"    'nodeValues': {\" +\n        \"      'node1': {'cores': 2, 'freedisk': 334, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node2': {'cores': 2, 'freedisk': 749, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node3': {'cores': 0, 'freedisk': 262, 'sysprop.fs': 'ssd'}\" +\n        \"    }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      Utils.getObjectByPath(suggestion ,true, \"operation/move-replica/targetNode\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","sourceNew":"  public void testSyspropSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1',\" +\n        \"    'node2',\" +\n        \"    'node3'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1': {\" +\n        \"      'c1': {'s1': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}],\" +\n        \"             's2': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}]},\" +\n        \"    }\" +\n        \"  },\" +\n        \"    'nodeValues': {\" +\n        \"      'node1': {'cores': 2, 'freedisk': 334, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node2': {'cores': 2, 'freedisk': 749, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node3': {'cores': 0, 'freedisk': 262, 'sysprop.fs': 'ssd'}\" +\n        \"    }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(\"expected 2 violations\", 2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      Utils.getObjectByPath(suggestion, true, \"operation/move-replica/targetNode\");\n    }\n  }\n\n","sourceOld":"  public void testSyspropSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1',\" +\n        \"    'node2',\" +\n        \"    'node3'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1': {\" +\n        \"      'c1': {'s1': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}],\" +\n        \"             's2': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}]},\" +\n        \"    }\" +\n        \"  },\" +\n        \"    'nodeValues': {\" +\n        \"      'node1': {'cores': 2, 'freedisk': 334, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node2': {'cores': 2, 'freedisk': 749, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node3': {'cores': 0, 'freedisk': 262, 'sysprop.fs': 'ssd'}\" +\n        \"    }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      Utils.getObjectByPath(suggestion, true, \"operation/move-replica/targetNode\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"986a3b20441337c17126faebcbab4e2248154bdf","date":1537886823,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","sourceNew":"  public void testSyspropSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1',\" +\n        \"    'node2',\" +\n        \"    'node3'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1': {\" +\n        \"      'c1': {'s1': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}],\" +\n        \"             's2': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}]},\" +\n        \"    }\" +\n        \"  },\" +\n        \"    'nodeValues': {\" +\n        \"      'node1': {'cores': 2, 'freedisk': 334, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node2': {'cores': 2, 'freedisk': 749, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node3': {'cores': 0, 'freedisk': 262, 'sysprop.fs': 'ssd'}\" +\n        \"    }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(\"expected 2 violations\", 2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      suggestion._get(\"operation/move-replica/targetNode\", null);\n    }\n  }\n\n","sourceOld":"  public void testSyspropSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1',\" +\n        \"    'node2',\" +\n        \"    'node3'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1': {\" +\n        \"      'c1': {'s1': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}],\" +\n        \"             's2': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}]},\" +\n        \"    }\" +\n        \"  },\" +\n        \"    'nodeValues': {\" +\n        \"      'node1': {'cores': 2, 'freedisk': 334, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node2': {'cores': 2, 'freedisk': 749, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node3': {'cores': 0, 'freedisk': 262, 'sysprop.fs': 'ssd'}\" +\n        \"    }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(\"expected 2 violations\", 2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      Utils.getObjectByPath(suggestion, true, \"operation/move-replica/targetNode\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSyspropSuggestions().mjava","sourceNew":"  public void testSyspropSuggestions1() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testSyspropSuggestions1.json\"))).getViolations();\n    assertEquals(\"expected 2 violations\", 2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testSyspropSuggestions1.json\")));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      suggestion._get(\"operation/move-replica/targetNode\", null);\n    }\n  }\n\n","sourceOld":"  public void testSyspropSuggestions() {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '1', shard:'#EACH', sysprop.fs : 'ssd'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1',\" +\n        \"    'node2',\" +\n        \"    'node3'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1': {\" +\n        \"      'c1': {'s1': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}],\" +\n        \"             's2': [{'r1': {'type': 'NRT'}, 'r2': {'type': 'NRT'}}]},\" +\n        \"    }\" +\n        \"  },\" +\n        \"    'nodeValues': {\" +\n        \"      'node1': {'cores': 2, 'freedisk': 334, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node2': {'cores': 2, 'freedisk': 749, 'sysprop.fs': 'slowdisk'},\" +\n        \"      'node3': {'cores': 0, 'freedisk': 262, 'sysprop.fs': 'ssd'}\" +\n        \"    }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(\"expected 2 violations\", 2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      suggestion._get(\"operation/move-replica/targetNode\", null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["ac52b67f02dde8ba4b452266fdf8c0e15442c856"],"ac52b67f02dde8ba4b452266fdf8c0e15442c856":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a27e78e3d29dee02bab19ded25336471e96882":["986a3b20441337c17126faebcbab4e2248154bdf"],"986a3b20441337c17126faebcbab4e2248154bdf":["16a22f8085bb46850c91784e94f7714345011404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f5a27e78e3d29dee02bab19ded25336471e96882"],"16a22f8085bb46850c91784e94f7714345011404":["9f0e33082a86447f4f2b59a1a5f69a310500276a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac52b67f02dde8ba4b452266fdf8c0e15442c856"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["16a22f8085bb46850c91784e94f7714345011404"],"ac52b67f02dde8ba4b452266fdf8c0e15442c856":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"f5a27e78e3d29dee02bab19ded25336471e96882":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"986a3b20441337c17126faebcbab4e2248154bdf":["f5a27e78e3d29dee02bab19ded25336471e96882"],"16a22f8085bb46850c91784e94f7714345011404":["986a3b20441337c17126faebcbab4e2248154bdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}