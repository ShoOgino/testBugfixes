{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#redistributeWeightsProportionalMinMax(List[Entry],int).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#redistributeWeightsProportionalMinMax(List[Entry],int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#redistributeWeightsProportionalMinMax(List[Entry],int).mjava","sourceNew":"  /**\n   *  Split [min, max] range into buckets, reassigning weights. Entries' weights are\n   *  remapped to [0, buckets] range (so, buckets + 1 buckets, actually).\n   */\n  private void redistributeWeightsProportionalMinMax(List<Entry> entries, int buckets) {\n    float min = entries.get(0).weight;\n    float max = min;\n    for (Entry e : entries) {\n      min = Math.min(e.weight, min);\n      max = Math.max(e.weight, max);\n    }\n  \n    final float range = max - min;\n    for (Entry e : entries) {\n      e.weight = (int) (buckets * ((e.weight - min) / range)); // int cast equiv. to floor()\n    }\n  }\n\n","sourceOld":"  /**\n   *  Split [min, max] range into buckets, reassigning weights. Entries' weights are\n   *  remapped to [0, buckets] range (so, buckets + 1 buckets, actually).\n   */\n  private void redistributeWeightsProportionalMinMax(List<Entry> entries, int buckets) {\n    float min = entries.get(0).weight;\n    float max = min;\n    for (Entry e : entries) {\n      min = Math.min(e.weight, min);\n      max = Math.max(e.weight, max);\n    }\n  \n    final float range = max - min;\n    for (Entry e : entries) {\n      e.weight = (int) (buckets * ((e.weight - min) / range)); // int cast equiv. to floor()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#redistributeWeightsProportionalMinMax(List[Entry],int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#redistributeWeightsProportionalMinMax(List[Entry],int).mjava","sourceNew":"  /**\n   *  Split [min, max] range into buckets, reassigning weights. Entries' weights are\n   *  remapped to [0, buckets] range (so, buckets + 1 buckets, actually).\n   */\n  private void redistributeWeightsProportionalMinMax(List<Entry> entries, int buckets) {\n    float min = entries.get(0).weight;\n    float max = min;\n    for (Entry e : entries) {\n      min = Math.min(e.weight, min);\n      max = Math.max(e.weight, max);\n    }\n  \n    final float range = max - min;\n    for (Entry e : entries) {\n      e.weight = (int) (buckets * ((e.weight - min) / range)); // int cast equiv. to floor()\n    }\n  }\n\n","sourceOld":"  /**\n   *  Split [min, max] range into buckets, reassigning weights. Entries' weights are\n   *  remapped to [0, buckets] range (so, buckets + 1 buckets, actually).\n   */\n  private void redistributeWeightsProportionalMinMax(List<Entry> entries, int buckets) {\n    float min = entries.get(0).weight;\n    float max = min;\n    for (Entry e : entries) {\n      min = Math.min(e.weight, min);\n      max = Math.max(e.weight, max);\n    }\n  \n    final float range = max - min;\n    for (Entry e : entries) {\n      e.weight = (int) (buckets * ((e.weight - min) / range)); // int cast equiv. to floor()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#redistributeWeightsProportionalMinMax(List[Entry],int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#redistributeWeightsProportionalMinMax(List[Entry],int).mjava","sourceNew":"  /**\n   *  Split [min, max] range into buckets, reassigning weights. Entries' weights are\n   *  remapped to [0, buckets] range (so, buckets + 1 buckets, actually).\n   */\n  private void redistributeWeightsProportionalMinMax(List<Entry> entries, int buckets) {\n    float min = entries.get(0).weight;\n    float max = min;\n    for (Entry e : entries) {\n      min = Math.min(e.weight, min);\n      max = Math.max(e.weight, max);\n    }\n  \n    final float range = max - min;\n    for (Entry e : entries) {\n      e.weight = (int) (buckets * ((e.weight - min) / range)); // int cast equiv. to floor()\n    }\n  }\n\n","sourceOld":"  /**\n   *  Split [min, max] range into buckets, reassigning weights. Entries' weights are\n   *  remapped to [0, buckets] range (so, buckets + 1 buckets, actually).\n   */\n  private void redistributeWeightsProportionalMinMax(List<Entry> entries, int buckets) {\n    float min = entries.get(0).weight;\n    float max = min;\n    for (Entry e : entries) {\n      min = Math.min(e.weight, min);\n      max = Math.max(e.weight, max);\n    }\n  \n    final float range = max - min;\n    for (Entry e : entries) {\n      e.weight = (int) (buckets * ((e.weight - min) / range)); // int cast equiv. to floor()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#redistributeWeightsProportionalMinMax(List[Entry],int).mjava","sourceNew":null,"sourceOld":"  /**\n   *  Split [min, max] range into buckets, reassigning weights. Entries' weights are\n   *  remapped to [0, buckets] range (so, buckets + 1 buckets, actually).\n   */\n  private void redistributeWeightsProportionalMinMax(List<Entry> entries, int buckets) {\n    float min = entries.get(0).weight;\n    float max = min;\n    for (Entry e : entries) {\n      min = Math.min(e.weight, min);\n      max = Math.max(e.weight, max);\n    }\n  \n    final float range = max - min;\n    for (Entry e : entries) {\n      e.weight = (int) (buckets * ((e.weight - min) / range)); // int cast equiv. to floor()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["7bf07f4ebadc7539de83a531e64678350d78ca26","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}