{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_numericJoin().mjava","commits":[{"id":"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7","date":1495529154,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_numericJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals_numericJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        boolean multiValued = random().nextBoolean();\n        String joinField = multiValued ? \"mvField\" : \"svField\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          if (multiValued) {\n            int numValues = 1 + random().nextInt(2);\n            for (int i = 0; i < numValues; i++) {\n              doc.add(new IntPoint(joinField, random().nextInt(13)));\n              doc.add(new SortedNumericDocValuesField(joinField, random().nextInt(13)));\n            }\n          } else {\n            doc.add(new IntPoint(joinField, random().nextInt(13)));\n            doc.add(new NumericDocValuesField(joinField, random().nextInt(13)));\n          }\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n              Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n              indexSearcher, scoreMode1);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode2)));\n\n          assertFalse(\"from fields (joinField != \\\"other_field\\\") but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, \"other_field\",\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n\n          assertFalse(\"from fields (\\\"other_field\\\" != joinField) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(\"other_field\", multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(\"other_field\", multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name6\")),\n                  indexSearcher, scoreMode1)));\n        }\n\n        for (int i = 0; i < 13; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          if (multiValued) {\n            int numValues = 1 + random().nextInt(2);\n            for (int j = 0; j < numValues; j++) {\n              doc.add(new SortedNumericDocValuesField(joinField, i));\n              doc.add(new IntPoint(joinField, i));\n            }\n          } else {\n            doc.add(new NumericDocValuesField(joinField, i));\n            doc.add(new IntPoint(joinField, i));\n          }\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because different index readers \",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["27493cdeb7ffd49e4369aac3a327e2d5d38cadc4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27493cdeb7ffd49e4369aac3a327e2d5d38cadc4","date":1495612236,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_numericJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_numericJoin().mjava","sourceNew":"  public void testEquals_numericJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        boolean multiValued = random().nextBoolean();\n        String joinField = multiValued ? \"mvField\" : \"svField\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          if (multiValued) {\n            int numValues = 1 + random().nextInt(2);\n            for (int i = 0; i < numValues; i++) {\n              doc.add(new IntPoint(joinField, random().nextInt(13)));\n              doc.add(new SortedNumericDocValuesField(joinField, random().nextInt(13)));\n            }\n          } else {\n            doc.add(new IntPoint(joinField, random().nextInt(13)));\n            doc.add(new NumericDocValuesField(joinField, random().nextInt(13)));\n          }\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n              Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n              indexSearcher, scoreMode1);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode2)));\n\n          assertFalse(\"from fields (joinField != \\\"other_field\\\") but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, \"other_field\",\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n\n          assertFalse(\"from fields (\\\"other_field\\\" != joinField) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(\"other_field\", multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(\"other_field\", multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name6\")),\n                  indexSearcher, scoreMode1)));\n        }\n\n        for (int i = 14; i < 26; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          if (multiValued) {\n            int numValues = 1 + random().nextInt(2);\n            for (int j = 0; j < numValues; j++) {\n              doc.add(new SortedNumericDocValuesField(joinField, i));\n              doc.add(new IntPoint(joinField, i));\n            }\n          } else {\n            doc.add(new NumericDocValuesField(joinField, i));\n            doc.add(new IntPoint(joinField, i));\n          }\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because new join values have been indexed\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testEquals_numericJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        boolean multiValued = random().nextBoolean();\n        String joinField = multiValued ? \"mvField\" : \"svField\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          if (multiValued) {\n            int numValues = 1 + random().nextInt(2);\n            for (int i = 0; i < numValues; i++) {\n              doc.add(new IntPoint(joinField, random().nextInt(13)));\n              doc.add(new SortedNumericDocValuesField(joinField, random().nextInt(13)));\n            }\n          } else {\n            doc.add(new IntPoint(joinField, random().nextInt(13)));\n            doc.add(new NumericDocValuesField(joinField, random().nextInt(13)));\n          }\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n              Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n              indexSearcher, scoreMode1);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode2)));\n\n          assertFalse(\"from fields (joinField != \\\"other_field\\\") but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, \"other_field\",\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n\n          assertFalse(\"from fields (\\\"other_field\\\" != joinField) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(\"other_field\", multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(\"other_field\", multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name6\")),\n                  indexSearcher, scoreMode1)));\n        }\n\n        for (int i = 0; i < 13; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          if (multiValued) {\n            int numValues = 1 + random().nextInt(2);\n            for (int j = 0; j < numValues; j++) {\n              doc.add(new SortedNumericDocValuesField(joinField, i));\n              doc.add(new IntPoint(joinField, i));\n            }\n          } else {\n            doc.add(new NumericDocValuesField(joinField, i));\n            doc.add(new IntPoint(joinField, i));\n          }\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because different index readers \",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n        }\n      }\n    }\n  }\n\n","bugFix":["00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_numericJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals_numericJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        boolean multiValued = random().nextBoolean();\n        String joinField = multiValued ? \"mvField\" : \"svField\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          if (multiValued) {\n            int numValues = 1 + random().nextInt(2);\n            for (int i = 0; i < numValues; i++) {\n              doc.add(new IntPoint(joinField, random().nextInt(13)));\n              doc.add(new SortedNumericDocValuesField(joinField, random().nextInt(13)));\n            }\n          } else {\n            doc.add(new IntPoint(joinField, random().nextInt(13)));\n            doc.add(new NumericDocValuesField(joinField, random().nextInt(13)));\n          }\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n              Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n              indexSearcher, scoreMode1);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode2)));\n\n          assertFalse(\"from fields (joinField != \\\"other_field\\\") but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, \"other_field\",\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n\n          assertFalse(\"from fields (\\\"other_field\\\" != joinField) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(\"other_field\", multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(\"other_field\", multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name6\")),\n                  indexSearcher, scoreMode1)));\n        }\n\n        for (int i = 14; i < 26; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          if (multiValued) {\n            int numValues = 1 + random().nextInt(2);\n            for (int j = 0; j < numValues; j++) {\n              doc.add(new SortedNumericDocValuesField(joinField, i));\n              doc.add(new IntPoint(joinField, i));\n            }\n          } else {\n            doc.add(new NumericDocValuesField(joinField, i));\n            doc.add(new IntPoint(joinField, i));\n          }\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because new join values have been indexed\",\n              x.equals(JoinUtil.createJoinQuery(joinField, multiValued, joinField,\n                  Integer.class, new TermQuery(new Term(\"name\", \"name5\")),\n                  indexSearcher, scoreMode1)));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27493cdeb7ffd49e4369aac3a327e2d5d38cadc4"],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27493cdeb7ffd49e4369aac3a327e2d5d38cadc4":["00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27493cdeb7ffd49e4369aac3a327e2d5d38cadc4"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["27493cdeb7ffd49e4369aac3a327e2d5d38cadc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"27493cdeb7ffd49e4369aac3a327e2d5d38cadc4":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}