{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      if (needsOffsets) {\n        // Not until we can index offsets...\n        return null;\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      if (needsOffsets) {\n        // Not until we can index offsets...\n        return null;\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e9e87a586e724774d060a39c60ed1178637952","date":1331555866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      boolean hasOffsets = field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads, hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads, hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads, hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      if (needsOffsets) {\n        // Not until we can index offsets...\n        return null;\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      boolean hasOffsets = field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads, hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads, hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads, hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      if (needsOffsets) {\n        // Not until we can index offsets...\n        return null;\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      boolean hasOffsets = field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads, hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads, hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads, hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      boolean hasOffsets = field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads, hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads, hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads, hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) {\n\n      boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (needsOffsets && !hasOffsets) {\n        return null; // not available\n      }\n      \n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.hasPayloads(), hasOffsets);\n        }\n      }\n      //System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["06e9e87a586e724774d060a39c60ed1178637952"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","06e9e87a586e724774d060a39c60ed1178637952"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["06e9e87a586e724774d060a39c60ed1178637952","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"06e9e87a586e724774d060a39c60ed1178637952":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","06e9e87a586e724774d060a39c60ed1178637952"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"06e9e87a586e724774d060a39c60ed1178637952":["76923f6a33f2c4bec7f584e3f251261afe7ea276","38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}