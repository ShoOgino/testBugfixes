{"path":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}