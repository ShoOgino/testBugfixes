{"path":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","commits":[{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","pathOld":"/dev/null","sourceNew":"  // inherit javadocs\n  public Comparable[] getCustom (IndexReader reader, String field, SortComparator comparator)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, comparator);\n    if (ret == null) {\n      final Comparable[] retArray = new Comparable[reader.maxDoc()];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n            Comparable termval = comparator.getComparable (term.text());\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = termval;\n            }\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n      }\n      store (reader, field, SortField.CUSTOM, retArray);\n      return retArray;\n    }\n    return (String[]) ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb0a33df60fa7347461fa05bb738d285e17ca2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8c5cd7bc0dd48a05a68b3ea9ff09567f27ce081","date":1096470416,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","sourceNew":"  // inherit javadocs\n  public Comparable[] getCustom (IndexReader reader, String field, SortComparator comparator)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, comparator);\n    if (ret == null) {\n      final Comparable[] retArray = new Comparable[reader.maxDoc()];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n            Comparable termval = comparator.getComparable (term.text());\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = termval;\n            }\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n      }\n      store (reader, field, SortField.CUSTOM, retArray);\n      return retArray;\n    }\n    return (Comparable[]) ret;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Comparable[] getCustom (IndexReader reader, String field, SortComparator comparator)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, comparator);\n    if (ret == null) {\n      final Comparable[] retArray = new Comparable[reader.maxDoc()];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n            Comparable termval = comparator.getComparable (term.text());\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = termval;\n            }\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n      }\n      store (reader, field, SortField.CUSTOM, retArray);\n      return retArray;\n    }\n    return (String[]) ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8577ca8c36e33220ee0ffdfbdd96f8b9c43f8aa","date":1117730920,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","sourceNew":"  // inherit javadocs\n  public Comparable[] getCustom (IndexReader reader, String field, SortComparator comparator)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, comparator);\n    if (ret == null) {\n      final Comparable[] retArray = new Comparable[reader.maxDoc()];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n            Comparable termval = comparator.getComparable (term.text());\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = termval;\n            }\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n      }\n      store (reader, field, comparator, retArray);\n      return retArray;\n    }\n    return (Comparable[]) ret;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Comparable[] getCustom (IndexReader reader, String field, SortComparator comparator)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, comparator);\n    if (ret == null) {\n      final Comparable[] retArray = new Comparable[reader.maxDoc()];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n            Comparable termval = comparator.getComparable (term.text());\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = termval;\n            }\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n      }\n      store (reader, field, SortField.CUSTOM, retArray);\n      return retArray;\n    }\n    return (Comparable[]) ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb0a33df60fa7347461fa05bb738d285e17ca2","date":1139867173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","sourceNew":"  // inherit javadocs\n  public Comparable[] getCustom (IndexReader reader, String field, SortComparator comparator)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, comparator);\n    if (ret == null) {\n      final Comparable[] retArray = new Comparable[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field, \"\"));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          Comparable termval = comparator.getComparable (term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      store (reader, field, comparator, retArray);\n      return retArray;\n    }\n    return (Comparable[]) ret;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Comparable[] getCustom (IndexReader reader, String field, SortComparator comparator)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, comparator);\n    if (ret == null) {\n      final Comparable[] retArray = new Comparable[reader.maxDoc()];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n            Comparable termval = comparator.getComparable (term.text());\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = termval;\n            }\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n      }\n      store (reader, field, comparator, retArray);\n      return retArray;\n    }\n    return (Comparable[]) ret;\n  }\n\n","bugFix":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e4e7cc130365302adc717b9353553a80f892b73","date":1164006604,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","sourceNew":"  // inherit javadocs\n  public Comparable[] getCustom(IndexReader reader, String field,\n      SortComparator comparator) throws IOException {\n    return (Comparable[]) customCache.get(reader, new Entry(field, comparator));\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Comparable[] getCustom (IndexReader reader, String field, SortComparator comparator)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, comparator);\n    if (ret == null) {\n      final Comparable[] retArray = new Comparable[reader.maxDoc()];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field, \"\"));\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n          Comparable termval = comparator.getComparable (term.text());\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = termval;\n          }\n        } while (termEnum.next());\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n      store (reader, field, comparator, retArray);\n      return retArray;\n    }\n    return (Comparable[]) ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65eb076d345a794256daba691a2b366657c807e8","date":1245771732,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","sourceNew":"  /** @deprecated */\n  public Comparable[] getCustom(IndexReader reader, String field,\n      SortComparator comparator) throws IOException {\n    return (Comparable[]) customCache.get(reader, new Entry(field, comparator));\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Comparable[] getCustom(IndexReader reader, String field,\n      SortComparator comparator) throws IOException {\n    return (Comparable[]) customCache.get(reader, new Entry(field, comparator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","sourceNew":"  /** @deprecated */\n  public Comparable[] getCustom(IndexReader reader, String field,\n      SortComparator comparator) throws IOException {\n    return (Comparable[]) ((Cache)caches.get(Comparable.class)).get(reader, new Entry(field, comparator));\n  }\n\n","sourceOld":"  /** @deprecated */\n  public Comparable[] getCustom(IndexReader reader, String field,\n      SortComparator comparator) throws IOException {\n    return (Comparable[]) customCache.get(reader, new Entry(field, comparator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getCustom(IndexReader,String,SortComparator).mjava","sourceNew":null,"sourceOld":"  /** @deprecated */\n  public Comparable[] getCustom(IndexReader reader, String field,\n      SortComparator comparator) throws IOException {\n    return (Comparable[]) ((Cache)caches.get(Comparable.class)).get(reader, new Entry(field, comparator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb0a33df60fa7347461fa05bb738d285e17ca2":["e8577ca8c36e33220ee0ffdfbdd96f8b9c43f8aa"],"65eb076d345a794256daba691a2b366657c807e8":["4e4e7cc130365302adc717b9353553a80f892b73"],"f8c5cd7bc0dd48a05a68b3ea9ff09567f27ce081":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e69f59b863731d864bf3047235e718f0f88f8841":["65eb076d345a794256daba691a2b366657c807e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e4e7cc130365302adc717b9353553a80f892b73":["0bdb0a33df60fa7347461fa05bb738d285e17ca2"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["e69f59b863731d864bf3047235e718f0f88f8841"],"e8577ca8c36e33220ee0ffdfbdd96f8b9c43f8aa":["f8c5cd7bc0dd48a05a68b3ea9ff09567f27ce081"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"0bdb0a33df60fa7347461fa05bb738d285e17ca2":["4e4e7cc130365302adc717b9353553a80f892b73"],"65eb076d345a794256daba691a2b366657c807e8":["e69f59b863731d864bf3047235e718f0f88f8841"],"f8c5cd7bc0dd48a05a68b3ea9ff09567f27ce081":["e8577ca8c36e33220ee0ffdfbdd96f8b9c43f8aa"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["f8c5cd7bc0dd48a05a68b3ea9ff09567f27ce081"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"e69f59b863731d864bf3047235e718f0f88f8841":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"4e4e7cc130365302adc717b9353553a80f892b73":["65eb076d345a794256daba691a2b366657c807e8"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e8577ca8c36e33220ee0ffdfbdd96f8b9c43f8aa":["0bdb0a33df60fa7347461fa05bb738d285e17ca2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}