{"path":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","commits":[{"id":"203bc84a5a9461a17a2a8e136f872bf4657aaee4","date":1176138824,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","pathOld":"/dev/null","sourceNew":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore,new SimpleAnalyzer(),true);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    LocateRegistry.createRegistry(1099);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost/Searchable\", impl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","sourceNew":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    LocateRegistry.createRegistry(1099);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost/Searchable\", impl);\n  }\n\n","sourceOld":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore,new SimpleAnalyzer(),true);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    LocateRegistry.createRegistry(1099);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","sourceNew":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    LocateRegistry.createRegistry(1099);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost/Searchable\", impl);\n  }\n\n","sourceOld":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    LocateRegistry.createRegistry(1099);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43878a362a964486db4847b275d1aa0adf646ad1","date":1244389641,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","sourceNew":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    port = _TestUtil.getRandomSocketPort();\n    LocateRegistry.createRegistry(port);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","sourceOld":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    LocateRegistry.createRegistry(1099);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#startServer().mjava","sourceNew":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    port = _TestUtil.getRandomSocketPort();\n    LocateRegistry.createRegistry(port);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","sourceOld":"  private static void startServer() throws Exception {\n    // construct an index\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"A\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    //Need a second document to search for\n    doc = new Document();\n    doc.add(new Field(\"test\", \"test text\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"type\", \"B\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"other\", \"other test text\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    // publish it\n    port = _TestUtil.getRandomSocketPort();\n    LocateRegistry.createRegistry(port);\n    Searchable local = new IndexSearcher(indexStore);\n    RemoteSearchable impl = new RemoteSearchable(local);\n    Naming.rebind(\"//localhost:\" + port + \"/Searchable\", impl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["43878a362a964486db4847b275d1aa0adf646ad1"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"43878a362a964486db4847b275d1aa0adf646ad1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["43878a362a964486db4847b275d1aa0adf646ad1"],"43878a362a964486db4847b275d1aa0adf646ad1":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}