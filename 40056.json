{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#rectContainsPoint(Rectangle,double,double).mjava","commits":[{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#rectContainsPoint(Rectangle,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  static final boolean rectContainsPoint(Rectangle rect, double pointLat, double pointLon) {\n    assert Double.isNaN(pointLat) == false;\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, -180.0, rect.maxLon)\n        || GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, 180.0);\n    }\n  }\n\n","sourceOld":"  static final boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    assert Double.isNaN(pointLat) == false;\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, -180.0, rect.maxLon)\n        || GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, 180.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38068a32aca0cc59645b1b249276f39e608d80bc","date":1460002083,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#rectContainsPoint(Rectangle,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#rectContainsPoint(Rectangle,double,double).mjava","sourceNew":"  static final boolean rectContainsPoint(Rectangle rect, double pointLat, double pointLon) {\n    assert Double.isNaN(pointLat) == false;\n\n    if (rect.minLon <= rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, -180.0, rect.maxLon)\n        || GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, 180.0);\n    }\n  }\n\n","sourceOld":"  static final boolean rectContainsPoint(Rectangle rect, double pointLat, double pointLon) {\n    assert Double.isNaN(pointLat) == false;\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, -180.0, rect.maxLon)\n        || GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, 180.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#rectContainsPoint(Rectangle,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#rectContainsPoint(Rectangle,double,double).mjava","sourceNew":"  static final boolean rectContainsPoint(Rectangle rect, double pointLat, double pointLon) {\n    assert Double.isNaN(pointLat) == false;\n    \n    if (pointLat < rect.minLat || pointLat > rect.maxLat) {\n      return false;\n    }\n\n    if (rect.minLon <= rect.maxLon) {\n      return pointLon >= rect.minLon && pointLon <= rect.maxLon;\n    } else {\n      // Rect crosses dateline:\n      return pointLon <= rect.maxLon || pointLon >= rect.minLon;\n    }\n  }\n\n","sourceOld":"  static final boolean rectContainsPoint(Rectangle rect, double pointLat, double pointLon) {\n    assert Double.isNaN(pointLat) == false;\n\n    if (rect.minLon <= rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, -180.0, rect.maxLon)\n        || GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, 180.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#rectContainsPoint(Rectangle,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#rectContainsPoint(Rectangle,double,double).mjava","sourceNew":"  static final boolean rectContainsPoint(Rectangle rect, double pointLat, double pointLon) {\n    assert Double.isNaN(pointLat) == false;\n    \n    if (pointLat < rect.minLat || pointLat > rect.maxLat) {\n      return false;\n    }\n\n    if (rect.minLon <= rect.maxLon) {\n      return pointLon >= rect.minLon && pointLon <= rect.maxLon;\n    } else {\n      // Rect crosses dateline:\n      return pointLon <= rect.maxLon || pointLon >= rect.minLon;\n    }\n  }\n\n","sourceOld":"  static final boolean rectContainsPoint(Rectangle rect, double pointLat, double pointLon) {\n    assert Double.isNaN(pointLat) == false;\n\n    if (rect.minLon <= rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, -180.0, rect.maxLon)\n        || GeoRelationUtils.pointInRectPrecise(pointLat, pointLon, rect.minLat, rect.maxLat, rect.minLon, 180.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38068a32aca0cc59645b1b249276f39e608d80bc":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["38068a32aca0cc59645b1b249276f39e608d80bc"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["38068a32aca0cc59645b1b249276f39e608d80bc","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8cb57c50beb99a1245256e866350af8e5ea1f36"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"38068a32aca0cc59645b1b249276f39e608d80bc":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["38068a32aca0cc59645b1b249276f39e608d80bc"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}