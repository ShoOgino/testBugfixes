{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","commits":[{"id":"5c9480bf8e52feb02af9b7fa13bf50929da7900b","date":1477527580,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cd481faf1bd54c80b8e91402d2f7a0aa580fb99","date":1506186199,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","sourceNew":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8557552f7ab8e381c4d1a941a269e14f11e779d","date":1506320429,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","sourceNew":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","sourceNew":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","sourceNew":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b8557552f7ab8e381c4d1a941a269e14f11e779d":["5c9480bf8e52feb02af9b7fa13bf50929da7900b","2cd481faf1bd54c80b8e91402d2f7a0aa580fb99"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["5c9480bf8e52feb02af9b7fa13bf50929da7900b","b8557552f7ab8e381c4d1a941a269e14f11e779d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"2cd481faf1bd54c80b8e91402d2f7a0aa580fb99":["5c9480bf8e52feb02af9b7fa13bf50929da7900b"]},"commit2Childs":{"b8557552f7ab8e381c4d1a941a269e14f11e779d":["6240b74b884c5587f2a4062dd27d6c32bf228889","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["b8557552f7ab8e381c4d1a941a269e14f11e779d","6240b74b884c5587f2a4062dd27d6c32bf228889","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","2cd481faf1bd54c80b8e91402d2f7a0aa580fb99"],"2cd481faf1bd54c80b8e91402d2f7a0aa580fb99":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}