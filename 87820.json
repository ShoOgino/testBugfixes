{"path":"backwards/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      PhraseScorer scorer = (PhraseScorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq = (d == doc) ? scorer.currentFreq() : 0.0f;\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      PhraseScorer scorer = (PhraseScorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq = (d == doc) ? scorer.currentFreq() : 0.0f;\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      PhraseScorer scorer = (PhraseScorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq = (d == doc) ? scorer.currentFreq() : 0.0f;\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}