{"path":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","pathOld":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","sourceNew":"  protected void testDocumentTypesInternal(String[] files, Map<String,Integer> expectedRecords) throws Exception {\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","sourceOld":"  protected void testDocumentTypesInternal(String[] files, Map<String,Integer> expectedRecords) throws Exception {\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  protected void testDocumentTypesInternal(String[] files, Map<String,Integer> expectedRecords) throws Exception {\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96fdd7189254bc9698a673fdf4e2b0e97e993ede","date":1387480427,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","sourceNew":"  protected void testDocumentTypesInternal(\n      String[] files, \n      Map<String,Integer> expectedRecords, \n      Map<String, Map<String, Object>> expectedRecordContents) throws Exception {\n    \n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        collector.reset();\n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n        Map<String, Object> expectedContents = expectedRecordContents.get(file);\n        if (expectedContents != null) {\n          Record actual = collector.getFirstRecord();\n          for (Map.Entry<String, Object> entry : expectedContents.entrySet()) {\n            if (entry.getValue() == NON_EMPTY_FIELD) {\n              assertNotNull(entry.getKey());\n              assertTrue(actual.getFirstValue(entry.getKey()).toString().length() > 0);\n            } else if (entry.getValue() == null) {\n              assertEquals(\"key:\" + entry.getKey(), 0, actual.get(entry.getKey()).size());\n            } else {\n              assertEquals(\"key:\" + entry.getKey(), Arrays.asList(entry.getValue()), actual.get(entry.getKey()));\n            }\n          }\n        }\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","sourceOld":"  protected void testDocumentTypesInternal(String[] files, Map<String,Integer> expectedRecords) throws Exception {\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96fdd7189254bc9698a673fdf4e2b0e97e993ede"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}