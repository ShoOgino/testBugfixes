{"path":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"796d3633cb23320001cb91b7036b0621b009f6f0","date":1323995113,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}name:dave\", \n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\", \n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\", \n                 \"qq\",\"{!dismax qf=name}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s defType=dismax}dave\", \n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":["140c5f0a5d4f742f5ad240e4fde6e486b2608d0f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b793d2dfdc7c26ed5089e407c7008fb2aed99a7","date":1328133727,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}name:dave\", \n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\", \n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\", \n                 \"qq\",\"{!dismax qf=name}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s defType=dismax}dave\", \n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\", \"fq\", \"name:john\")\n             ,\"/response=={'numFound':1,'start':0,'docs':[{'id':'1'}]}\"\n            );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}name:dave\", \n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\", \n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\", \n                 \"qq\",\"{!dismax qf=name}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s defType=dismax}dave\", \n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n  }\n\n","bugFix":null,"bugIntro":["140c5f0a5d4f742f5ad240e4fde6e486b2608d0f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"140c5f0a5d4f742f5ad240e4fde6e486b2608d0f","date":1433368077,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    ModifiableSolrParams p = params(\"sort\",\"id asc\");\n\n    // test debugging\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(p, \"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(p, \"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(p, \"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(p, \"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s}name:dave\",\n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\",\n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\",\n                 \"qq\",\"{!dismax qf=name}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s defType=dismax}dave\",\n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(p, \"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\", \"fq\", \"name:john\")\n             ,\"/response=={'numFound':1,'start':0,'docs':[{'id':'1'}]}\"\n            );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}name:dave\", \n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\", \n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\", \n                 \"qq\",\"{!dismax qf=name}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s defType=dismax}dave\", \n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\", \"fq\", \"name:john\")\n             ,\"/response=={'numFound':1,'start':0,'docs':[{'id':'1'}]}\"\n            );\n\n  }\n\n","bugFix":["796d3633cb23320001cb91b7036b0621b009f6f0","f8f944ac3fe3f9d40d825177507fb381d2b106b3","6b793d2dfdc7c26ed5089e407c7008fb2aed99a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b987bcc75aaccfc3495fcc98472a4402cae7d1","date":1580487661,"type":4,"author":"Jason Gerlowski","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    ModifiableSolrParams p = params(\"sort\",\"id asc\");\n\n    // test debugging\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(p, \"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(p, \"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(p, \"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(p, \"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n    \n    // expected outcome for a sub query matching dave joined against departments\n    final String davesDepartments = \n      \"/response=={'numFound':2,'start':0,'docs':[{'id':'10'},{'id':'13'}]}\";\n\n    // straight forward query\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s}name:dave\",\n                 \"fl\",\"id\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\",\n                 \"qq\",\"{!dismax}dave\",\n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // variable deref for sub-query parsing w/localparams\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s v=$qq}\",\n                 \"qq\",\"{!dismax qf=name}dave\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // defType local param to control sub-query parsing\n    assertJQ(req(p, \"q\",\"{!join from=dept_s to=dept_id_s defType=dismax}dave\",\n                 \"qf\",\"name\",\n                 \"fl\",\"id\", \n                 \"debugQuery\",\"true\"),\n             davesDepartments);\n\n    // find people that develop stuff - but limit via filter query to a name of \"john\"\n    // this tests filters being pushed down to queries (SOLR-3062)\n    assertJQ(req(p, \"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\", \"fq\", \"name:john\")\n             ,\"/response=={'numFound':1,'start':0,'docs':[{'id':'1'}]}\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"796d3633cb23320001cb91b7036b0621b009f6f0":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b793d2dfdc7c26ed5089e407c7008fb2aed99a7":["796d3633cb23320001cb91b7036b0621b009f6f0"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140c5f0a5d4f742f5ad240e4fde6e486b2608d0f":["6b793d2dfdc7c26ed5089e407c7008fb2aed99a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83b987bcc75aaccfc3495fcc98472a4402cae7d1"],"83b987bcc75aaccfc3495fcc98472a4402cae7d1":["140c5f0a5d4f742f5ad240e4fde6e486b2608d0f"]},"commit2Childs":{"796d3633cb23320001cb91b7036b0621b009f6f0":["6b793d2dfdc7c26ed5089e407c7008fb2aed99a7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["796d3633cb23320001cb91b7036b0621b009f6f0"],"6b793d2dfdc7c26ed5089e407c7008fb2aed99a7":["140c5f0a5d4f742f5ad240e4fde6e486b2608d0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"140c5f0a5d4f742f5ad240e4fde6e486b2608d0f":["83b987bcc75aaccfc3495fcc98472a4402cae7d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"83b987bcc75aaccfc3495fcc98472a4402cae7d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}