{"path":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","commits":[{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(String).mjava","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        Terms terms = MultiFields.getTerms(reader, currentTerm.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seek(term) == TermsEnum.SeekStatus.FOUND) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(String term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        Terms terms = MultiFields.getTerms(reader, currentTerm.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seek(new BytesRef(term)) == TermsEnum.SeekStatus.FOUND) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        Terms terms = MultiFields.getTerms(reader, currentTerm.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seek(term) == TermsEnum.SeekStatus.FOUND) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seek(term) == TermsEnum.SeekStatus.FOUND) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        Terms terms = MultiFields.getTerms(reader, currentTerm.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seek(term) == TermsEnum.SeekStatus.FOUND) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seek(term) == TermsEnum.SeekStatus.FOUND) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        Terms terms = MultiFields.getTerms(reader, currentTerm.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seek(term) == TermsEnum.SeekStatus.FOUND) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        Terms terms = MultiFields.getTerms(reader, currentTerm.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seek(term) == TermsEnum.SeekStatus.FOUND) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(BytesRef).mjava","sourceNew":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(BytesRef term) {\n      int result = 1;\n      try {\n        Terms terms = MultiFields.getTerms(reader, field);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term, true)) {\n            result = termsEnum.docFreq();\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"c26f00b574427b55127e869b935845554afde1fa":["fd9cc9d77712aba3662f24632df7539ab75e3667","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"2553b00f699380c64959ccb27991289aae87be2e":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","5f4e87790277826a2aea119328600dfb07761f32","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}