{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#testReaderResponse().mjava","commits":[{"id":"3c35962275b74caeb54617344cc56e1d66ba8b56","date":1391598206,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#testReaderResponse().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse response from java.io.Reader.\n   * @throws Exception\n   */\n  @Test\n  public void testReaderResponse() throws Exception {\n    NoOpResponseParser parser = new NoOpResponseParser();\n    try (final InputStream is = getResponse()) {\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, \"UTF-8\");\n      NamedList<Object> response = parser.processResponse(in);\n      assertNotNull(response.get(\"response\"));\n      String expectedResponse = IOUtils.toString(getResponse(), \"UTF-8\");\n      assertEquals(expectedResponse, response.get(\"response\"));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cece00cbf0af9717bc05c48b7a632b81ff7d8fe","date":1391601577,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#testReaderResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#testReaderResponse().mjava","sourceNew":"  /**\n   * Parse response from java.io.Reader.\n   */\n  @Test\n  public void testReaderResponse() throws Exception {\n    NoOpResponseParser parser = new NoOpResponseParser();\n    try (final InputStream is = getResponse()) {\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, \"UTF-8\");\n      NamedList<Object> response = parser.processResponse(in);\n      assertNotNull(response.get(\"response\"));\n      String expectedResponse = IOUtils.toString(getResponse(), \"UTF-8\");\n      assertEquals(expectedResponse, response.get(\"response\"));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse response from java.io.Reader.\n   * @throws Exception\n   */\n  @Test\n  public void testReaderResponse() throws Exception {\n    NoOpResponseParser parser = new NoOpResponseParser();\n    try (final InputStream is = getResponse()) {\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, \"UTF-8\");\n      NamedList<Object> response = parser.processResponse(in);\n      assertNotNull(response.get(\"response\"));\n      String expectedResponse = IOUtils.toString(getResponse(), \"UTF-8\");\n      assertEquals(expectedResponse, response.get(\"response\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#testReaderResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#testReaderResponse().mjava","sourceNew":"  /**\n   * Parse response from java.io.Reader.\n   */\n  @Test\n  public void testReaderResponse() throws Exception {\n    NoOpResponseParser parser = new NoOpResponseParser();\n    try (final InputStream is = getResponse()) {\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      assertNotNull(response.get(\"response\"));\n      String expectedResponse = IOUtils.toString(getResponse(), \"UTF-8\");\n      assertEquals(expectedResponse, response.get(\"response\"));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse response from java.io.Reader.\n   */\n  @Test\n  public void testReaderResponse() throws Exception {\n    NoOpResponseParser parser = new NoOpResponseParser();\n    try (final InputStream is = getResponse()) {\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, \"UTF-8\");\n      NamedList<Object> response = parser.processResponse(in);\n      assertNotNull(response.get(\"response\"));\n      String expectedResponse = IOUtils.toString(getResponse(), \"UTF-8\");\n      assertEquals(expectedResponse, response.get(\"response\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#testReaderResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#testReaderResponse().mjava","sourceNew":"  /**\n   * Parse response from java.io.Reader.\n   */\n  @Test\n  public void testReaderResponse() throws Exception {\n    NoOpResponseParser parser = new NoOpResponseParser();\n    try (final InputStream is = getResponse()) {\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      assertNotNull(response.get(\"response\"));\n      String expectedResponse = IOUtils.toString(getResponse(), \"UTF-8\");\n      assertEquals(expectedResponse, response.get(\"response\"));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse response from java.io.Reader.\n   */\n  @Test\n  public void testReaderResponse() throws Exception {\n    NoOpResponseParser parser = new NoOpResponseParser();\n    try (final InputStream is = getResponse()) {\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, \"UTF-8\");\n      NamedList<Object> response = parser.processResponse(in);\n      assertNotNull(response.get(\"response\"));\n      String expectedResponse = IOUtils.toString(getResponse(), \"UTF-8\");\n      assertEquals(expectedResponse, response.get(\"response\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["9cece00cbf0af9717bc05c48b7a632b81ff7d8fe","9d3d365762604952e436b51980101dfc84cc1b3e"],"9cece00cbf0af9717bc05c48b7a632b81ff7d8fe":["3c35962275b74caeb54617344cc56e1d66ba8b56"],"9d3d365762604952e436b51980101dfc84cc1b3e":["9cece00cbf0af9717bc05c48b7a632b81ff7d8fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c35962275b74caeb54617344cc56e1d66ba8b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d3d365762604952e436b51980101dfc84cc1b3e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"9cece00cbf0af9717bc05c48b7a632b81ff7d8fe":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c35962275b74caeb54617344cc56e1d66ba8b56"],"3c35962275b74caeb54617344cc56e1d66ba8b56":["9cece00cbf0af9717bc05c48b7a632b81ff7d8fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}