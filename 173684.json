{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","commits":[{"id":"b8b4dc0cb506204097b6e34b962947988b60e5d0","date":1342976066,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","pathOld":"/dev/null","sourceNew":"  public SolrCmdDistributor(int numHosts) {\n\n    BoundedExecutor executor = null;\n    synchronized (SolrCmdDistributor.class) {\n      if (commExecutor == null || commExecutor.getMaximumPoolSize() != numHosts) {\n        // we don't shutdown the previous because all it's threads will die\n        int maxPoolSize = Math.max(8, (numHosts-1) * 8);\n        commExecutor = new BoundedExecutor(0, maxPoolSize, 5,\n            TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(maxPoolSize * 2),\n            new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n      }\n      executor = commExecutor;\n    }\n    \n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","pathOld":"/dev/null","sourceNew":"  public SolrCmdDistributor(int numHosts) {\n\n    BoundedExecutor executor = null;\n    synchronized (SolrCmdDistributor.class) {\n      if (commExecutor == null || commExecutor.getMaximumPoolSize() != numHosts) {\n        // we don't shutdown the previous because all it's threads will die\n        int maxPoolSize = Math.max(8, (numHosts-1) * 8);\n        commExecutor = new BoundedExecutor(0, maxPoolSize, 5,\n            TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(maxPoolSize * 2),\n            new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n      }\n      executor = commExecutor;\n    }\n    \n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","pathOld":"/dev/null","sourceNew":"  public SolrCmdDistributor(int numHosts) {\n\n    BoundedExecutor executor = null;\n    synchronized (SolrCmdDistributor.class) {\n      if (commExecutor == null || commExecutor.getMaximumPoolSize() != numHosts) {\n        // we don't shutdown the previous because all it's threads will die\n        int maxPoolSize = Math.max(8, (numHosts-1) * 8);\n        commExecutor = new BoundedExecutor(0, maxPoolSize, 5,\n            TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(maxPoolSize * 2),\n            new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n      }\n      executor = commExecutor;\n    }\n    \n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82c24640e6ecba75f717cf7af96903ab8e4530ef","date":1343944730,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","sourceNew":"  public SolrCmdDistributor(int numHosts) {\n    int maxPoolSize = Math.max(8, (numHosts-1) * 8);\n    BoundedExecutor executor = null;\n    synchronized (SolrCmdDistributor.class) {\n      if (semaphore == null) {\n        semaphore = new AdjustableSemaphore(maxPoolSize);\n      }\n      \n      if (maxPoolSize != semaphore.getMaxPermits()) {\n        // raise the permits to match maxPoolSize\n        semaphore.setMaxPermits(maxPoolSize);\n      }\n      \n      if (commExecutor == null || commExecutor.getMaximumPoolSize() != maxPoolSize) {\n        // we don't shutdown the previous because all it's threads will die\n        commExecutor = new BoundedExecutor(0, maxPoolSize, 5,\n            TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n      }\n      executor = commExecutor;\n    }\n    \n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","sourceOld":"  public SolrCmdDistributor(int numHosts) {\n\n    BoundedExecutor executor = null;\n    synchronized (SolrCmdDistributor.class) {\n      if (commExecutor == null || commExecutor.getMaximumPoolSize() != numHosts) {\n        // we don't shutdown the previous because all it's threads will die\n        int maxPoolSize = Math.max(8, (numHosts-1) * 8);\n        commExecutor = new BoundedExecutor(0, maxPoolSize, 5,\n            TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(maxPoolSize * 2),\n            new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n      }\n      executor = commExecutor;\n    }\n    \n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f14e0a52009bb009afae8a8de1b084d4cd2434b7","date":1343952118,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","sourceNew":"  public SolrCmdDistributor(int numHosts) {\n    int maxPermits = Math.max(8, (numHosts - 1) * 8);\n    \n    // limits how many tasks can actually execute at once\n    if (maxPermits != semaphore.getMaxPermits()) {\n      semaphore.setMaxPermits(maxPermits);\n    }\n\n    completionService = new ExecutorCompletionService<Request>(commExecutor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","sourceOld":"  public SolrCmdDistributor(int numHosts) {\n    int maxPoolSize = Math.max(8, (numHosts-1) * 8);\n    BoundedExecutor executor = null;\n    synchronized (SolrCmdDistributor.class) {\n      if (semaphore == null) {\n        semaphore = new AdjustableSemaphore(maxPoolSize);\n      }\n      \n      if (maxPoolSize != semaphore.getMaxPermits()) {\n        // raise the permits to match maxPoolSize\n        semaphore.setMaxPermits(maxPoolSize);\n      }\n      \n      if (commExecutor == null || commExecutor.getMaximumPoolSize() != maxPoolSize) {\n        // we don't shutdown the previous because all it's threads will die\n        commExecutor = new BoundedExecutor(0, maxPoolSize, 5,\n            TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n      }\n      executor = commExecutor;\n    }\n    \n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","sourceNew":"  public SolrCmdDistributor(int numHosts) {\n    int maxPermits = Math.max(8, (numHosts - 1) * 8);\n    \n    // limits how many tasks can actually execute at once\n    if (maxPermits != semaphore.getMaxPermits()) {\n      semaphore.setMaxPermits(maxPermits);\n    }\n\n    completionService = new ExecutorCompletionService<Request>(commExecutor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","sourceOld":"  public SolrCmdDistributor(int numHosts) {\n\n    BoundedExecutor executor = null;\n    synchronized (SolrCmdDistributor.class) {\n      if (commExecutor == null || commExecutor.getMaximumPoolSize() != numHosts) {\n        // we don't shutdown the previous because all it's threads will die\n        int maxPoolSize = Math.max(8, (numHosts-1) * 8);\n        commExecutor = new BoundedExecutor(0, maxPoolSize, 5,\n            TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(maxPoolSize * 2),\n            new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n      }\n      executor = commExecutor;\n    }\n    \n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","sourceNew":"  public SolrCmdDistributor(int numHosts) {\n    int maxPermits = Math.max(8, (numHosts - 1) * 8);\n    \n    // limits how many tasks can actually execute at once\n    if (maxPermits != semaphore.getMaxPermits()) {\n      semaphore.setMaxPermits(maxPermits);\n    }\n\n    completionService = new ExecutorCompletionService<Request>(commExecutor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","sourceOld":"  public SolrCmdDistributor(int numHosts) {\n\n    BoundedExecutor executor = null;\n    synchronized (SolrCmdDistributor.class) {\n      if (commExecutor == null || commExecutor.getMaximumPoolSize() != numHosts) {\n        // we don't shutdown the previous because all it's threads will die\n        int maxPoolSize = Math.max(8, (numHosts-1) * 8);\n        commExecutor = new BoundedExecutor(0, maxPoolSize, 5,\n            TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(maxPoolSize * 2),\n            new DefaultSolrThreadFactory(\"cmdDistribExecutor\"));\n      }\n      executor = commExecutor;\n    }\n    \n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int,ThreadPoolExecutor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#SolrCmdDistributor(int).mjava","sourceNew":"  public SolrCmdDistributor(int numHosts, ThreadPoolExecutor executor) {\n    int maxPermits = Math.max(8, (numHosts - 1) * 8);\n    \n    // limits how many tasks can actually execute at once\n    if (maxPermits != semaphore.getMaxPermits()) {\n      semaphore.setMaxPermits(maxPermits);\n    }\n\n    completionService = new ExecutorCompletionService<Request>(executor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","sourceOld":"  public SolrCmdDistributor(int numHosts) {\n    int maxPermits = Math.max(8, (numHosts - 1) * 8);\n    \n    // limits how many tasks can actually execute at once\n    if (maxPermits != semaphore.getMaxPermits()) {\n      semaphore.setMaxPermits(maxPermits);\n    }\n\n    completionService = new ExecutorCompletionService<Request>(commExecutor);\n    pending = new HashSet<Future<Request>>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["f14e0a52009bb009afae8a8de1b084d4cd2434b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","f14e0a52009bb009afae8a8de1b084d4cd2434b7"],"f14e0a52009bb009afae8a8de1b084d4cd2434b7":["82c24640e6ecba75f717cf7af96903ab8e4530ef"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"82c24640e6ecba75f717cf7af96903ab8e4530ef":["b8b4dc0cb506204097b6e34b962947988b60e5d0"],"b8b4dc0cb506204097b6e34b962947988b60e5d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","f14e0a52009bb009afae8a8de1b084d4cd2434b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f14e0a52009bb009afae8a8de1b084d4cd2434b7":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"b8b4dc0cb506204097b6e34b962947988b60e5d0":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","82c24640e6ecba75f717cf7af96903ab8e4530ef"],"82c24640e6ecba75f717cf7af96903ab8e4530ef":["f14e0a52009bb009afae8a8de1b084d4cd2434b7"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}