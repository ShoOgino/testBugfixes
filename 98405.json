{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#nextNonLeaf().mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"/dev/null","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.setLength(prefix + suffix);\n    ste.term.grow(ste.term.length());\n    suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"/dev/null","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.setLength(prefix + suffix);\n    ste.term.grow(ste.term.length());\n    suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#nextNonLeaf().mjava","sourceNew":null,"sourceOld":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.setLength(prefix + suffix);\n    ste.term.grow(ste.term.length());\n    suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}