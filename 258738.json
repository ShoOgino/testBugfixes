{"path":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"/dev/null","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}