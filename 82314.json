{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic Token next() {\n\t\t\tif (matcher == null) return null;\n\t\t\t\n\t\t\twhile (true) { // loop takes care of leading and trailing boundary cases\n\t\t\t\tint start = pos;\n\t\t\t\tint end;\n\t\t\t\tboolean isMatch = matcher.find();\n\t\t\t\tif (isMatch) {\n\t\t\t\t\tend = matcher.start();\n\t\t\t\t\tpos = matcher.end();\n\t\t\t\t} else { \n\t\t\t\t\tend = str.length();\n\t\t\t\t\tmatcher = null; // we're finished\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (start != end) { // non-empty match (header/trailer)\n\t\t\t\t\tString text = str.substring(start, end);\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\n\t\t\t\t\treturn new Token(text, start, end);\n\t\t\t\t}\n\t\t\t\tif (!isMatch) return null;\n\t\t\t}\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","sourceNew":"\t\tpublic Token next() {\r\n\t\t\tif (matcher == null) return null;\r\n\t\t\t\r\n\t\t\twhile (true) { // loop takes care of leading and trailing boundary cases\r\n\t\t\t\tint start = pos;\r\n\t\t\t\tint end;\r\n\t\t\t\tboolean isMatch = matcher.find();\r\n\t\t\t\tif (isMatch) {\r\n\t\t\t\t\tend = matcher.start();\r\n\t\t\t\t\tpos = matcher.end();\r\n\t\t\t\t} else { \r\n\t\t\t\t\tend = str.length();\r\n\t\t\t\t\tmatcher = null; // we're finished\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (start != end) { // non-empty match (header/trailer)\r\n\t\t\t\t\tString text = str.substring(start, end);\r\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\r\n\t\t\t\t\treturn new Token(text, start, end);\r\n\t\t\t\t}\r\n\t\t\t\tif (!isMatch) return null;\r\n\t\t\t}\r\n\t\t}\r\n\n","sourceOld":"\t\tpublic Token next() {\n\t\t\tif (matcher == null) return null;\n\t\t\t\n\t\t\twhile (true) { // loop takes care of leading and trailing boundary cases\n\t\t\t\tint start = pos;\n\t\t\t\tint end;\n\t\t\t\tboolean isMatch = matcher.find();\n\t\t\t\tif (isMatch) {\n\t\t\t\t\tend = matcher.start();\n\t\t\t\t\tpos = matcher.end();\n\t\t\t\t} else { \n\t\t\t\t\tend = str.length();\n\t\t\t\t\tmatcher = null; // we're finished\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (start != end) { // non-empty match (header/trailer)\n\t\t\t\t\tString text = str.substring(start, end);\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\n\t\t\t\t\treturn new Token(text, start, end);\n\t\t\t\t}\n\t\t\t\tif (!isMatch) return null;\n\t\t\t}\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a","date":1133587576,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","sourceNew":null,"sourceOld":"\t\tpublic Token next() {\r\n\t\t\tif (matcher == null) return null;\r\n\t\t\t\r\n\t\t\twhile (true) { // loop takes care of leading and trailing boundary cases\r\n\t\t\t\tint start = pos;\r\n\t\t\t\tint end;\r\n\t\t\t\tboolean isMatch = matcher.find();\r\n\t\t\t\tif (isMatch) {\r\n\t\t\t\t\tend = matcher.start();\r\n\t\t\t\t\tpos = matcher.end();\r\n\t\t\t\t} else { \r\n\t\t\t\t\tend = str.length();\r\n\t\t\t\t\tmatcher = null; // we're finished\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (start != end) { // non-empty match (header/trailer)\r\n\t\t\t\t\tString text = str.substring(start, end);\r\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\r\n\t\t\t\t\treturn new Token(text, start, end);\r\n\t\t\t\t}\r\n\t\t\t\tif (!isMatch) return null;\r\n\t\t\t}\r\n\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e","date":1133587670,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic Token next() {\n\t\t\tif (matcher == null) return null;\n\t\t\t\n\t\t\twhile (true) { // loop takes care of leading and trailing boundary cases\n\t\t\t\tint start = pos;\n\t\t\t\tint end;\n\t\t\t\tboolean isMatch = matcher.find();\n\t\t\t\tif (isMatch) {\n\t\t\t\t\tend = matcher.start();\n\t\t\t\t\tpos = matcher.end();\n\t\t\t\t} else { \n\t\t\t\t\tend = str.length();\n\t\t\t\t\tmatcher = null; // we're finished\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (start != end) { // non-empty match (header/trailer)\n\t\t\t\t\tString text = str.substring(start, end);\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\n\t\t\t\t\treturn new Token(text, start, end);\n\t\t\t\t}\n\t\t\t\tif (!isMatch) return null;\n\t\t\t}\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","sourceNew":"    public Token next() {\n      if (matcher == null) return null;\n      \n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          return new Token(text, start, end);\n        }\n        if (!isMatch) return null;\n      }\n    }\n\n","sourceOld":"\t\tpublic Token next() {\n\t\t\tif (matcher == null) return null;\n\t\t\t\n\t\t\twhile (true) { // loop takes care of leading and trailing boundary cases\n\t\t\t\tint start = pos;\n\t\t\t\tint end;\n\t\t\t\tboolean isMatch = matcher.find();\n\t\t\t\tif (isMatch) {\n\t\t\t\t\tend = matcher.start();\n\t\t\t\t\tpos = matcher.end();\n\t\t\t\t} else { \n\t\t\t\t\tend = str.length();\n\t\t\t\t\tmatcher = null; // we're finished\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (start != end) { // non-empty match (header/trailer)\n\t\t\t\t\tString text = str.substring(start, end);\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\n\t\t\t\t\treturn new Token(text, start, end);\n\t\t\t\t}\n\t\t\t\tif (!isMatch) return null;\n\t\t\t}\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next(Token).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","sourceNew":"    public Token next(final Token reusableToken) {\n      assert reusableToken != null;\n      if (matcher == null) return null;\n      \n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          return reusableToken.reinit(text, start, end);\n        }\n        if (!isMatch) return null;\n      }\n    }\n\n","sourceOld":"    public Token next() {\n      if (matcher == null) return null;\n      \n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          return new Token(text, start, end);\n        }\n        if (!isMatch) return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e":["2542e236e1661f6d0e8e4aa8f09dd1495e58e35a"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["29bb5af2486a9a013c0a0daffdb51dce2a3adb8e"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a":["29bb5af2486a9a013c0a0daffdb51dce2a3adb8e"],"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["2542e236e1661f6d0e8e4aa8f09dd1495e58e35a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}