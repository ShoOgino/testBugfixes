{"path":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","commits":[{"id":"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","date":1460654262,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.info(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    createSchemaWatcher();\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.info(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.info(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.info(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbf14a58688f4f8d0fa6375733fbe8cfed9aac43","date":1498572460,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        // The watcher is still registered with Zookeeper, and holds a\n        // reference to the schema reader, which indirectly references the\n        // SolrCore and would prevent it from being garbage collected.\n        schemaWatcher.discardReaderReference();\n      }\n    });\n\n    this.schemaWatcher = createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        // The watcher is still registered with Zookeeper, and holds a\n        // reference to the schema reader, which indirectly references the\n        // SolrCore and would prevent it from being garbage collected.\n        schemaWatcher.discardReaderReference();\n      }\n    });\n\n    this.schemaWatcher = createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        // The watcher is still registered with Zookeeper, and holds a\n        // reference to the schema reader, which indirectly references the\n        // SolrCore and would prevent it from being garbage collected.\n        schemaWatcher.discardReaderReference();\n      }\n    });\n\n    this.schemaWatcher = createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          ZkIndexSchemaReader.this.isRemoved = true;\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#ZkIndexSchemaReader(ManagedIndexSchemaFactory,SolrCore).mjava","sourceNew":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core {} is shutting down.\", core.getName());\n          }\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        // The watcher is still registered with Zookeeper, and holds a\n        // reference to the schema reader, which indirectly references the\n        // SolrCore and would prevent it from being garbage collected.\n        schemaWatcher.discardReaderReference();\n      }\n    });\n\n    this.schemaWatcher = createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","sourceOld":"  public ZkIndexSchemaReader(ManagedIndexSchemaFactory managedIndexSchemaFactory, SolrCore solrCore) {\n    this.managedIndexSchemaFactory = managedIndexSchemaFactory;\n    ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)managedIndexSchemaFactory.getResourceLoader();\n    this.zkClient = zkLoader.getZkController().getZkClient();\n    this.managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedIndexSchemaFactory.getManagedSchemaResourceName();\n    this.uniqueCoreId = solrCore.getName()+\":\"+solrCore.getStartNanoTime();\n\n    // register a CloseHook for the core this reader is linked to, so that we can de-register the listener\n    solrCore.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        CoreContainer cc = core.getCoreContainer();\n        if (cc.isZooKeeperAware()) {\n          log.debug(\"Removing ZkIndexSchemaReader OnReconnect listener as core \"+core.getName()+\" is shutting down.\");\n          cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        // The watcher is still registered with Zookeeper, and holds a\n        // reference to the schema reader, which indirectly references the\n        // SolrCore and would prevent it from being garbage collected.\n        schemaWatcher.discardReaderReference();\n      }\n    });\n\n    this.schemaWatcher = createSchemaWatcher();\n\n    zkLoader.getZkController().addOnReconnectListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dbf14a58688f4f8d0fa6375733fbe8cfed9aac43":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","dbf14a58688f4f8d0fa6375733fbe8cfed9aac43"],"98f11c416d30e556e0004a9a84960702d12d35b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","dbf14a58688f4f8d0fa6375733fbe8cfed9aac43"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["98f11c416d30e556e0004a9a84960702d12d35b1"],"dbf14a58688f4f8d0fa6375733fbe8cfed9aac43":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["0d62172dd2fc1195c7e475550ac394a9948a18ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["dbf14a58688f4f8d0fa6375733fbe8cfed9aac43","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["9df8125ba9193a2e2e285ed92157810b1952a244"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}