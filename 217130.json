{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode) {\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode) {\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode) {\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d","date":1559804329,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node,Polygon).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node).mjava","sourceNew":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode, Polygon hole) {\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode, hole);\n\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","sourceOld":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode) {\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","bugFix":null,"bugIntro":["9ebcaa353d633ad1f42e11b495fa6e35efe711f7"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3154b8a89750f531ca89c2fc8d7dc22a6ee5739d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}