{"path":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == 7); //this is 7 b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    OutputStream output = dir.createFile(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      \n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      \n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == 7); //this is 7 b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      \n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      \n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == 7); //this is 7 b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    OutputStream output = dir.createFile(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      \n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      \n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74bc2c68d78d1e868b9a1aa031180660cb42176e","date":1097423912,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == 7); //this is 7 b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      \n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      \n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == 7); //this is 7 b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      \n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      \n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["67006a60923e2124212d3baa0d29b444bcbd8373"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2785c615142cd1dcec85d0854bf9c3776918e79","date":1103468329,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == 6); //this is 6 b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      \n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      \n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == 7); //this is 7 b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      \n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      \n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d189bc0061161fcd0242e1056416ace0bd3a4da7","date":1130650929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == 6); //this is 6 b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      \n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      \n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":["74bc2c68d78d1e868b9a1aa031180660cb42176e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a2785c615142cd1dcec85d0854bf9c3776918e79":["74bc2c68d78d1e868b9a1aa031180660cb42176e"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"67006a60923e2124212d3baa0d29b444bcbd8373":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["a2785c615142cd1dcec85d0854bf9c3776918e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["67006a60923e2124212d3baa0d29b444bcbd8373"],"74bc2c68d78d1e868b9a1aa031180660cb42176e":["dda77265180d41bf85c84c995e25eda7b8e1b74d"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"a2785c615142cd1dcec85d0854bf9c3776918e79":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["74bc2c68d78d1e868b9a1aa031180660cb42176e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"67006a60923e2124212d3baa0d29b444bcbd8373":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["67006a60923e2124212d3baa0d29b444bcbd8373"],"74bc2c68d78d1e868b9a1aa031180660cb42176e":["a2785c615142cd1dcec85d0854bf9c3776918e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}