{"path":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[][],byte[][]).mjava","commits":[{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[][],byte[][]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newMultiRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Create a range query for n-dimensional binary values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null, if {@code upperValue} is null, \n   *                                  or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, byte[][] lowerValue, byte[][] upperValue) {\n    return new PointRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for binary values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, byte[][] lowerValue, boolean[] lowerInclusive, byte[][] upperValue, boolean[] upperInclusive) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, lowerValue, lowerInclusive, upperValue, upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[][],byte[][]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newMultiRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Create a range query for n-dimensional binary values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null, if {@code upperValue} is null, \n   *                                  or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, byte[][] lowerValue, byte[][] upperValue) {\n    return new PointRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for binary values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, byte[][] lowerValue, boolean[] lowerInclusive, byte[][] upperValue, boolean[] upperInclusive) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, lowerValue, lowerInclusive, upperValue, upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[][],byte[][]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newMultiRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Create a range query for n-dimensional binary values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null, if {@code upperValue} is null, \n   *                                  or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, byte[][] lowerValue, byte[][] upperValue) {\n    return new PointRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for binary values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, byte[][] lowerValue, boolean[] lowerInclusive, byte[][] upperValue, boolean[] upperInclusive) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, lowerValue, lowerInclusive, upperValue, upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[][],byte[][]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[][],byte[][]).mjava","sourceNew":"  /** \n   * Create a range query for n-dimensional binary values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null, if {@code upperValue} is null, \n   *                                  or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, byte[][] lowerValue, byte[][] upperValue) {\n    return new PointRangeQuery(field, pack(lowerValue).bytes, pack(upperValue).bytes, lowerValue.length) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for n-dimensional binary values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null, if {@code upperValue} is null, \n   *                                  or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, byte[][] lowerValue, byte[][] upperValue) {\n    return new PointRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":["1800b996d8677670482a071dcb7a48b08c423ace"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c422e924212367b334b4938f1fd3e44438e88c40"],"606ea169579957651185909e7264798e99e714f9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c422e924212367b334b4938f1fd3e44438e88c40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["606ea169579957651185909e7264798e99e714f9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["606ea169579957651185909e7264798e99e714f9"],"606ea169579957651185909e7264798e99e714f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}