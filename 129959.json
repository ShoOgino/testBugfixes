{"path":"lucene/src/java/org/apache/lucene/util/PriorityQueue#PriorityQueue(int,boolean).mjava","commits":[{"id":"1da2c39cf47fc10dc839d8c37890a2b009081e76","date":1299662336,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PriorityQueue#PriorityQueue(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PriorityQueue#initialize(int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public PriorityQueue(int maxSize, boolean prepopulate) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    if (prepopulate) {\n      // If sentinel objects are supported, populate the queue with them\n      T sentinel = getSentinelObject();\n      if (sentinel != null) {\n        heap[1] = sentinel;\n        for (int i = 2; i < heap.length; i++) {\n          heap[i] = getSentinelObject();\n        }\n        size = maxSize;\n      }\n    }\n  }\n\n","sourceOld":"  /** Subclass constructors must call this. */\n  @SuppressWarnings(\"unchecked\")\n  protected final void initialize(int maxSize) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    // If sentinel objects are supported, populate the queue with them\n    T sentinel = getSentinelObject();\n    if (sentinel != null) {\n      heap[1] = sentinel;\n      for (int i = 2; i < heap.length; i++) {\n        heap[i] = getSentinelObject();\n      }\n      size = maxSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PriorityQueue#PriorityQueue(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public PriorityQueue(int maxSize, boolean prepopulate) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    if (prepopulate) {\n      // If sentinel objects are supported, populate the queue with them\n      T sentinel = getSentinelObject();\n      if (sentinel != null) {\n        heap[1] = sentinel;\n        for (int i = 2; i < heap.length; i++) {\n          heap[i] = getSentinelObject();\n        }\n        size = maxSize;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PriorityQueue#PriorityQueue(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public PriorityQueue(int maxSize, boolean prepopulate) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    if (prepopulate) {\n      // If sentinel objects are supported, populate the queue with them\n      T sentinel = getSentinelObject();\n      if (sentinel != null) {\n        heap[1] = sentinel;\n        for (int i = 2; i < heap.length; i++) {\n          heap[i] = getSentinelObject();\n        }\n        size = maxSize;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#PriorityQueue(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PriorityQueue#PriorityQueue(int,boolean).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public PriorityQueue(int maxSize, boolean prepopulate) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    if (prepopulate) {\n      // If sentinel objects are supported, populate the queue with them\n      T sentinel = getSentinelObject();\n      if (sentinel != null) {\n        heap[1] = sentinel;\n        for (int i = 2; i < heap.length; i++) {\n          heap[i] = getSentinelObject();\n        }\n        size = maxSize;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public PriorityQueue(int maxSize, boolean prepopulate) {\n    size = 0;\n    int heapSize;\n    if (0 == maxSize)\n      // We allocate 1 extra to avoid if statement in top()\n      heapSize = 2;\n    else {\n      if (maxSize == Integer.MAX_VALUE) {\n        // Don't wrap heapSize to -1, in this case, which\n        // causes a confusing NegativeArraySizeException.\n        // Note that very likely this will simply then hit\n        // an OOME, but at least that's more indicative to\n        // caller that this values is too big.  We don't +1\n        // in this case, but it's very unlikely in practice\n        // one will actually insert this many objects into\n        // the PQ:\n        heapSize = Integer.MAX_VALUE;\n      } else {\n        // NOTE: we add +1 because all access to heap is\n        // 1-based not 0-based.  heap[0] is unused.\n        heapSize = maxSize + 1;\n      }\n    }\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n    this.maxSize = maxSize;\n    \n    if (prepopulate) {\n      // If sentinel objects are supported, populate the queue with them\n      T sentinel = getSentinelObject();\n      if (sentinel != null) {\n        heap[1] = sentinel;\n        for (int i = 2; i < heap.length; i++) {\n          heap[i] = getSentinelObject();\n        }\n        size = maxSize;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da2c39cf47fc10dc839d8c37890a2b009081e76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1da2c39cf47fc10dc839d8c37890a2b009081e76"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1da2c39cf47fc10dc839d8c37890a2b009081e76"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1da2c39cf47fc10dc839d8c37890a2b009081e76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"1da2c39cf47fc10dc839d8c37890a2b009081e76":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da2c39cf47fc10dc839d8c37890a2b009081e76","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}