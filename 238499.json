{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testTheTestRandomRefineParam().mjava","commits":[{"id":"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf","date":1507135648,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testTheTestRandomRefineParam().mjava","pathOld":"/dev/null","sourceNew":"  public void testTheTestRandomRefineParam() {\n    // sanity check that randomRefineParam never violates isRefinementNeeded\n    // (should be imposisble ... unless someone changes/breaks the randomization logic in the future)\n    final int numIters = atLeast(100);\n    for (int iter = 0; iter < numIters; iter++) {\n      final Integer limit = TermFacet.randomLimitParam(random());\n      final Integer overrequest = TermFacet.randomOverrequestParam(random());\n      final Boolean refine = TermFacet.randomRefineParam(random(), limit, overrequest);\n      if (TermFacet.isRefinementNeeded(limit, overrequest)) {\n        assertEquals(\"limit: \" + limit + \", overrequest: \" + overrequest + \", refine: \" + refine,\n                     Boolean.TRUE, refine);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7859b8e6a469429413db808a609e8468be14c03","date":1507222263,"type":0,"author":"tballison","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testTheTestRandomRefineParam().mjava","pathOld":"/dev/null","sourceNew":"  public void testTheTestRandomRefineParam() {\n    // sanity check that randomRefineParam never violates isRefinementNeeded\n    // (should be imposisble ... unless someone changes/breaks the randomization logic in the future)\n    final int numIters = atLeast(100);\n    for (int iter = 0; iter < numIters; iter++) {\n      final Integer limit = TermFacet.randomLimitParam(random());\n      final Integer overrequest = TermFacet.randomOverrequestParam(random());\n      final Boolean refine = TermFacet.randomRefineParam(random(), limit, overrequest);\n      if (TermFacet.isRefinementNeeded(limit, overrequest)) {\n        assertEquals(\"limit: \" + limit + \", overrequest: \" + overrequest + \", refine: \" + refine,\n                     Boolean.TRUE, refine);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#testTheTestRandomRefineParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testTheTestRandomRefineParam().mjava","sourceNew":"  public void testTheTestRandomRefineParam() {\n    // sanity check that randomRefineParam never violates isRefinementNeeded\n    // (should be imposisble ... unless someone changes/breaks the randomization logic in the future)\n    final int numIters = atLeast(100);\n    for (int iter = 0; iter < numIters; iter++) {\n      final Integer limit = TermFacet.randomLimitParam(random());\n      final Integer overrequest = TermFacet.randomOverrequestParam(random());\n      final Boolean refine = TermFacet.randomRefineParam(random(), limit, overrequest);\n      if (TermFacet.isRefinementNeeded(limit, overrequest)) {\n        assertEquals(\"limit: \" + limit + \", overrequest: \" + overrequest + \", refine: \" + refine,\n                     Boolean.TRUE, refine);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTheTestRandomRefineParam() {\n    // sanity check that randomRefineParam never violates isRefinementNeeded\n    // (should be imposisble ... unless someone changes/breaks the randomization logic in the future)\n    final int numIters = atLeast(100);\n    for (int iter = 0; iter < numIters; iter++) {\n      final Integer limit = TermFacet.randomLimitParam(random());\n      final Integer overrequest = TermFacet.randomOverrequestParam(random());\n      final Boolean refine = TermFacet.randomRefineParam(random(), limit, overrequest);\n      if (TermFacet.isRefinementNeeded(limit, overrequest)) {\n        assertEquals(\"limit: \" + limit + \", overrequest: \" + overrequest + \", refine: \" + refine,\n                     Boolean.TRUE, refine);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7859b8e6a469429413db808a609e8468be14c03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"d7859b8e6a469429413db808a609e8468be14c03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7859b8e6a469429413db808a609e8468be14c03","20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf":["d7859b8e6a469429413db808a609e8468be14c03","92910727264a23a47b7a6c94b0f75d655537b9ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d7859b8e6a469429413db808a609e8468be14c03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}