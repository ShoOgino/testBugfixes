{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"6e8e258b654b0b6794c9f4a980fdd9a1de6f10e0","date":1273267272,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new LowerCaseFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new LowerCaseFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new LowerCaseFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new LowerCaseFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"084fdd13d6d1f99f4e0450c02324720dfd2ba294","date":1291085087,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new LowerCaseFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f1fd760e2a7a87de661158ca069c8dacab8360","date":1313992891,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter},\n   *         {@link StopFilter}, {@link KeywordMarkerFilter}\n   *         if a stem exclusion set is provided and {@link IndonesianStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f49143da0a5d278a72f741432047fcfa6da996e"],"683d3f90dda2bbb999c3ce855706d74563a53680":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"084fdd13d6d1f99f4e0450c02324720dfd2ba294":["683d3f90dda2bbb999c3ce855706d74563a53680"],"6e8e258b654b0b6794c9f4a980fdd9a1de6f10e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["b8f1fd760e2a7a87de661158ca069c8dacab8360"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","084fdd13d6d1f99f4e0450c02324720dfd2ba294"],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["084fdd13d6d1f99f4e0450c02324720dfd2ba294"],"3bb13258feba31ab676502787ab2e1779f129b7a":["683d3f90dda2bbb999c3ce855706d74563a53680","084fdd13d6d1f99f4e0450c02324720dfd2ba294"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["6e8e258b654b0b6794c9f4a980fdd9a1de6f10e0"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"683d3f90dda2bbb999c3ce855706d74563a53680":["084fdd13d6d1f99f4e0450c02324720dfd2ba294","3bb13258feba31ab676502787ab2e1779f129b7a"],"084fdd13d6d1f99f4e0450c02324720dfd2ba294":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b8f1fd760e2a7a87de661158ca069c8dacab8360","3bb13258feba31ab676502787ab2e1779f129b7a"],"6e8e258b654b0b6794c9f4a980fdd9a1de6f10e0":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e8e258b654b0b6794c9f4a980fdd9a1de6f10e0"],"2f49143da0a5d278a72f741432047fcfa6da996e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["2f49143da0a5d278a72f741432047fcfa6da996e"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}