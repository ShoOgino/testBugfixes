{"path":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","commits":[{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1;\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new Iterator<BytesRef>() {\n                                    int ordUpto;\n                                    BytesRef scratch = new BytesRef();\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return ordUpto < valueCount;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public BytesRef next() {\n                                      hash.get(sortedValues[ordUpto], scratch);\n                                      ordUpto++;\n                                      return scratch;\n                                    }\n                                  };\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new Iterator<Number>() {\n                                    int docUpto;\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return docUpto < maxDoc;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public Number next() {\n                                      int ord;\n                                      if (docUpto < bufferedDocCount) {\n                                        ord = pending[docUpto];\n                                      } else {\n                                        ord = emptyOrd;\n                                      }\n                                      docUpto++;\n                                      // TODO: make reusable Number\n                                      return ordMap[ord];\n                                    }\n                                  };\n                                }\n                              });\n    \n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    // nocommit\n    //reset();\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1;\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new Iterator<BytesRef>() {\n                                    int ordUpto;\n                                    BytesRef scratch = new BytesRef();\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return ordUpto < valueCount;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public BytesRef next() {\n                                      hash.get(sortedValues[ordUpto], scratch);\n                                      ordUpto++;\n                                      return scratch;\n                                    }\n                                  };\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new Iterator<Number>() {\n                                    int docUpto;\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return docUpto < maxDoc;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public Number next() {\n                                      int ord;\n                                      if (docUpto < bufferedDocCount) {\n                                        ord = pending[docUpto];\n                                      } else {\n                                        ord = emptyOrd;\n                                      }\n                                      docUpto++;\n                                      // nocommit make\n                                      // resuable Number?\n                                      return ordMap[ord];\n                                    }\n                                  };\n                                }\n                              });\n    \n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217deea97c6f9889ae5841798ceb2d62a98bee16","date":1359314941,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1;\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new Iterator<BytesRef>() {\n                                    int ordUpto;\n                                    BytesRef scratch = new BytesRef();\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return ordUpto < valueCount;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public BytesRef next() {\n                                      hash.get(sortedValues[ordUpto], scratch);\n                                      ordUpto++;\n                                      return scratch;\n                                    }\n                                  };\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new Iterator<Number>() {\n                                    int docUpto;\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return docUpto < maxDoc;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public Number next() {\n                                      int ord;\n                                      if (docUpto < bufferedDocCount) {\n                                        ord = pending[docUpto];\n                                      } else {\n                                        ord = emptyOrd;\n                                      }\n                                      docUpto++;\n                                      // TODO: make reusable Number\n                                      return ordMap[ord];\n                                    }\n                                  };\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1;\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new Iterator<BytesRef>() {\n                                    int ordUpto;\n                                    BytesRef scratch = new BytesRef();\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return ordUpto < valueCount;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public BytesRef next() {\n                                      hash.get(sortedValues[ordUpto], scratch);\n                                      ordUpto++;\n                                      return scratch;\n                                    }\n                                  };\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new Iterator<Number>() {\n                                    int docUpto;\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return docUpto < maxDoc;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public Number next() {\n                                      int ord;\n                                      if (docUpto < bufferedDocCount) {\n                                        ord = pending[docUpto];\n                                      } else {\n                                        ord = emptyOrd;\n                                      }\n                                      docUpto++;\n                                      // TODO: make reusable Number\n                                      return ordMap[ord];\n                                    }\n                                  };\n                                }\n                              });\n    \n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    // nocommit\n    //reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75a2078fb7a7fce496e15f7a7ea829a778def1a5","date":1359508846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1; // nocommit: HUH? how can this possibly work?\n    }\n\n    final int valueCount = hash.size();\n\n    // nocommit: account for both sortedValues and ordMap as-we-go...\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, bufferedDocCount, maxDoc, emptyOrd);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1;\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new Iterator<BytesRef>() {\n                                    int ordUpto;\n                                    BytesRef scratch = new BytesRef();\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return ordUpto < valueCount;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public BytesRef next() {\n                                      hash.get(sortedValues[ordUpto], scratch);\n                                      ordUpto++;\n                                      return scratch;\n                                    }\n                                  };\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new Iterator<Number>() {\n                                    int docUpto;\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return docUpto < maxDoc;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public Number next() {\n                                      int ord;\n                                      if (docUpto < bufferedDocCount) {\n                                        ord = pending[docUpto];\n                                      } else {\n                                        ord = emptyOrd;\n                                      }\n                                      docUpto++;\n                                      // TODO: make reusable Number\n                                      return ordMap[ord];\n                                    }\n                                  };\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d805367d8ca5fa9d4d9037076fd87698b9080f53","date":1359549977,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pending.size() < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1; // nocommit: HUH? how can this possibly work?\n    }\n\n    final int valueCount = hash.size();\n\n    // nocommit: account for both sortedValues and ordMap as-we-go...\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, emptyOrd);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1; // nocommit: HUH? how can this possibly work?\n    }\n\n    final int valueCount = hash.size();\n\n    // nocommit: account for both sortedValues and ordMap as-we-go...\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, bufferedDocCount, maxDoc, emptyOrd);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eeb17a2bb36160ebf1f228be37f19a8b332f059","date":1359555682,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pending.size() < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1; // nocommit: HUH? how can this possibly work?\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, emptyOrd);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pending.size() < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1; // nocommit: HUH? how can this possibly work?\n    }\n\n    final int valueCount = hash.size();\n\n    // nocommit: account for both sortedValues and ordMap as-we-go...\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, emptyOrd);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"347468aed01d5da96b445857cdf4cf76ca891e27","date":1359590738,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pending.size() < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1; // nocommit: HUH? how can this possibly work?\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, emptyOrd);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc);\n                                }\n                              });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55536992cfc5c87d8b7196c556d1b458afe1f840","date":1362267535,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91","date":1456586780,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, maxDoc, ords, sortedValues, ordMap, nonEmptyCount);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, maxDoc, ords, sortedValues, ordMap, nonEmptyCount);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5844844466689b1121b12ccb467623f894eb269d","date":1475600453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, maxDoc, ords, sortedValues, ordMap, nonEmptyCount);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n\n    assert pending.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxDoc, ords);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField.iterator());\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField.iterator());\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final int[] sortedValues;\n    final int[] ordMap;\n    if (finalOrds == null) {\n      sortedValues = hash.sort();\n      ords = pending.build();\n      ordMap = new int[valueCount];\n      for (int ord = 0; ord < valueCount; ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      sortedValues = finalSortedValues;\n      ords = finalOrds;\n      ordMap = finalOrdMap;\n    }\n\n    final int[] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  final SortedDocValues buf =\n                                      new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField.iterator());\n                                  if (sorted == null) {\n                                   return buf;\n                                  }\n                                  return new SortingLeafReader.SortingSortedDocValues(buf, sorted);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField.iterator());\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedField(fieldInfo,\n                              new EmptyDocValuesProducer() {\n                                @Override\n                                public SortedDocValues getSorted(FieldInfo fieldInfoIn) {\n                                  if (fieldInfoIn != fieldInfo) {\n                                    throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                  }\n                                  return new BufferedSortedDocValues(hash, valueCount, ords, sortedValues, ordMap, docsWithField.iterator());\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d805367d8ca5fa9d4d9037076fd87698b9080f53":["75a2078fb7a7fce496e15f7a7ea829a778def1a5"],"af2638813028b254a88b418ebeafb541afb49653":["b0267c69e2456a3477a1ad785723f2135da3117e","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"5844844466689b1121b12ccb467623f894eb269d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b0267c69e2456a3477a1ad785723f2135da3117e":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"6eeb17a2bb36160ebf1f228be37f19a8b332f059":["d805367d8ca5fa9d4d9037076fd87698b9080f53"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","5844844466689b1121b12ccb467623f894eb269d"],"347468aed01d5da96b445857cdf4cf76ca891e27":["6eeb17a2bb36160ebf1f228be37f19a8b332f059"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"217deea97c6f9889ae5841798ceb2d62a98bee16":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","347468aed01d5da96b445857cdf4cf76ca891e27"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b06445ae1731e049327712db0454e5643ca9b7fe":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["af2638813028b254a88b418ebeafb541afb49653","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["af2638813028b254a88b418ebeafb541afb49653"],"ceec64003e8cc400e862d44c8589a41570432ab9":["5844844466689b1121b12ccb467623f894eb269d"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["ceec64003e8cc400e862d44c8589a41570432ab9"],"75a2078fb7a7fce496e15f7a7ea829a778def1a5":["217deea97c6f9889ae5841798ceb2d62a98bee16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["55536992cfc5c87d8b7196c556d1b458afe1f840"],"55536992cfc5c87d8b7196c556d1b458afe1f840":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d805367d8ca5fa9d4d9037076fd87698b9080f53":["6eeb17a2bb36160ebf1f228be37f19a8b332f059"],"af2638813028b254a88b418ebeafb541afb49653":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"b0267c69e2456a3477a1ad785723f2135da3117e":["af2638813028b254a88b418ebeafb541afb49653","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"5844844466689b1121b12ccb467623f894eb269d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"6eeb17a2bb36160ebf1f228be37f19a8b332f059":["347468aed01d5da96b445857cdf4cf76ca891e27"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"347468aed01d5da96b445857cdf4cf76ca891e27":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"217deea97c6f9889ae5841798ceb2d62a98bee16":["75a2078fb7a7fce496e15f7a7ea829a778def1a5"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["55536992cfc5c87d8b7196c556d1b458afe1f840"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["217deea97c6f9889ae5841798ceb2d62a98bee16"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["af2638813028b254a88b418ebeafb541afb49653"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5844844466689b1121b12ccb467623f894eb269d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"75a2078fb7a7fce496e15f7a7ea829a778def1a5":["d805367d8ca5fa9d4d9037076fd87698b9080f53"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55536992cfc5c87d8b7196c556d1b458afe1f840":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}