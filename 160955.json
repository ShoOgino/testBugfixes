{"path":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":null,"sourceOld":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48ed0466fe2d4f8ba58a47caef1174d9e856d13","date":1293745585,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["afeb033b2bd36d8ce9d82142b197da4dde13068b","e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"e48ed0466fe2d4f8ba58a47caef1174d9e856d13":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["afeb033b2bd36d8ce9d82142b197da4dde13068b","e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"e48ed0466fe2d4f8ba58a47caef1174d9e856d13":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["70ad682703b8585f5d0a637efec044d57ec05efb","e48ed0466fe2d4f8ba58a47caef1174d9e856d13","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}