{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeMaxNumSegments2().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeMaxNumSegments2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void xxxtestOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void xxxtestOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}