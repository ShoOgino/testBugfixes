{"path":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}