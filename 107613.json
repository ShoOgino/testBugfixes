{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(Type,int).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}