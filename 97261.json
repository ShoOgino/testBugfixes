{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"Integer.valueOf(0x\"+Integer.toHexString(min>>>shift)+\"),Integer.valueOf(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"Integer.valueOf(0x\"+Integer.toHexString(min>>>shift)+\"),Integer.valueOf(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","sourceNew":null,"sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"Integer.valueOf(0x\"+Integer.toHexString(min>>>shift)+\"),Integer.valueOf(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}