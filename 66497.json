{"path":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/NamedList#getAll(String).mjava","sourceNew":"  /**\n   * Gets the values for the the specified name\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Gets the values for the the specified name\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/NamedList#getAll(String).mjava","sourceNew":"  /**\n   * Gets the values for the the specified name\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Gets the values for the the specified name\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/NamedList#getAll(String).mjava","sourceNew":"  /**\n   * Gets the values for the the specified name\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Gets the values for the the specified name\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09cb84e8f7cc3f05b42efa917e6377e8909c74b5","date":1369035595,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","sourceNew":"  /**\n   * Gets the values for the the specified name\n   *\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Gets the values for the the specified name\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","sourceNew":"  /**\n   * Gets the values for the the specified name\n   *\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Gets the values for the the specified name\n   *\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<T>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3aa429fcc68e0937a220895ff4d7bfcac5b022eb","date":1584973494,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","sourceNew":"  /**\n   * Gets the values for the the specified name\n   *\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (Objects.equals(name, n)) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Gets the values for the the specified name\n   *\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (name==n || (name!=null && name.equals(n))) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3570e776df3671c1bce4f54b07bf03ca5a2c23de","date":1593033351,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#getAll(String).mjava","sourceNew":"  /**\n   * Gets the values for the specified name\n   *\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (Objects.equals(name, n)) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Gets the values for the the specified name\n   *\n   * @param name Name\n   * @return List of values\n   */\n  public List<T> getAll(String name) {\n    List<T> result = new ArrayList<>();\n    int sz = size();\n    for (int i = 0; i < sz; i++) {\n      String n = getName(i);\n      if (Objects.equals(name, n)) {\n        result.add(getVal(i));\n      }\n    }\n    return result;\n  }\n\n","bugFix":["016943a189bc11c4c0c7a13a441682947bd4185a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3aa429fcc68e0937a220895ff4d7bfcac5b022eb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["09cb84e8f7cc3f05b42efa917e6377e8909c74b5"],"3570e776df3671c1bce4f54b07bf03ca5a2c23de":["3aa429fcc68e0937a220895ff4d7bfcac5b022eb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3570e776df3671c1bce4f54b07bf03ca5a2c23de"],"09cb84e8f7cc3f05b42efa917e6377e8909c74b5":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3aa429fcc68e0937a220895ff4d7bfcac5b022eb":["3570e776df3671c1bce4f54b07bf03ca5a2c23de"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3aa429fcc68e0937a220895ff4d7bfcac5b022eb"],"3570e776df3671c1bce4f54b07bf03ca5a2c23de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["09cb84e8f7cc3f05b42efa917e6377e8909c74b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"09cb84e8f7cc3f05b42efa917e6377e8909c74b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}