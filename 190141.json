{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","sourceNew":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> activeCollectionSlices = clusterState.getActiveSlices(collection);\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> collectionSlices = clusterState.getSlices(collection);\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getSlicesForCollections(ClusterState clusterState,\n      Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> activeCollectionSlices = clusterState.getActiveSlices(collection);\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> collectionSlices = clusterState.getSlices(collection);\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","sourceNew":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> activeCollectionSlices = entry.getValue().getActiveSlices();\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> collectionSlices = entry.getValue().getSlices();\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> activeCollectionSlices = clusterState.getActiveSlices(collection);\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> collectionSlices = clusterState.getSlices(collection);\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","sourceNew":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> activeCollectionSlices = entry.getValue().getActiveSlices();\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> collectionSlices = entry.getValue().getSlices();\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> activeCollectionSlices = clusterState.getActiveSlices(collection);\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> collectionSlices = clusterState.getSlices(collection);\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","sourceNew":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> activeCollectionSlices = entry.getValue().getActiveSlices();\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> collectionSlices = entry.getValue().getSlices();\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> activeCollectionSlices = clusterState.getActiveSlices(collection);\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> collectionSlices = clusterState.getSlices(collection);\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","sourceNew":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> activeCollectionSlices = entry.getValue().getActiveSlices();\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> collectionSlices = entry.getValue().getSlices();\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> activeCollectionSlices = clusterState.getActiveSlices(collection);\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (String collection : clusterState.getCollections()) {\n        final Collection<Slice> collectionSlices = clusterState.getSlices(collection);\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","sourceNew":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Slice[] activeCollectionSlices = entry.getValue().getActiveSlicesArr();\n        for (Slice s : activeCollectionSlices) {\n          slices.add(s);\n        }\n      }\n    } else {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> collectionSlices = entry.getValue().getSlices();\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> activeCollectionSlices = entry.getValue().getActiveSlices();\n        if (activeCollectionSlices != null) {\n          slices.addAll(activeCollectionSlices);\n        }\n      }\n    } else {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> collectionSlices = entry.getValue().getSlices();\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["79411f20952f22cd9b944ff6f25f051554ff8e53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79411f20952f22cd9b944ff6f25f051554ff8e53","date":1601389092,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getSlicesForCollections(ClusterState,Collection[Slice],boolean).mjava","sourceNew":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Slice[] activeCollectionSlices = entry.getValue().getActiveSlicesArr();\n        if (activeCollectionSlices != null) {\n          Collections.addAll(slices, activeCollectionSlices);\n        }\n      }\n    } else {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> collectionSlices = entry.getValue().getSlices();\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getSlicesForCollections(ClusterState clusterState,\n                                       Collection<Slice> slices, boolean activeSlices) {\n    if (activeSlices) {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Slice[] activeCollectionSlices = entry.getValue().getActiveSlicesArr();\n        for (Slice s : activeCollectionSlices) {\n          slices.add(s);\n        }\n      }\n    } else {\n      for (Map.Entry<String, DocCollection> entry : clusterState.getCollectionsMap().entrySet()) {\n        final Collection<Slice> collectionSlices = entry.getValue().getSlices();\n        if (collectionSlices != null) {\n          slices.addAll(collectionSlices);\n        }\n      }\n    }\n  }\n\n","bugFix":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a760e2135dfe20a04dea360873d4de1c6a0280bb","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["a760e2135dfe20a04dea360873d4de1c6a0280bb","73450c0955930295d34703e7ddbfc6973b7a121a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a760e2135dfe20a04dea360873d4de1c6a0280bb","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79411f20952f22cd9b944ff6f25f051554ff8e53":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["79411f20952f22cd9b944ff6f25f051554ff8e53"]},"commit2Childs":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["79411f20952f22cd9b944ff6f25f051554ff8e53"],"73450c0955930295d34703e7ddbfc6973b7a121a":["c84df91ca6a2e8d6f26f185663112546a27f6b45","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"79411f20952f22cd9b944ff6f25f051554ff8e53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}