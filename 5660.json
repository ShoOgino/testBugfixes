{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable[Object],R-extends-Comparable[Object]]_createDistinctCountCollector(FirstPassGroupingCollector[T],String).mjava","commits":[{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable[Object],R-extends-Comparable[Object]]_createDistinctCountCollector(FirstPassGroupingCollector[T],String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable<Object>, R extends Comparable<Object>> DistinctValuesCollector<T, R> createDistinctCountCollector(FirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                                         String countField) throws IOException {\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    GroupSelector<T> selector = firstPassGroupingCollector.getGroupSelector();\n    if (ValueSourceGroupSelector.class.isAssignableFrom(selector.getClass())) {\n      GroupSelector gs = new ValueSourceGroupSelector(new BytesRefFieldSource(countField), new HashMap<>());\n      return new DistinctValuesCollector<>(selector, searchGroups, gs);\n    } else {\n      GroupSelector ts = new TermGroupSelector(countField);\n      return new DistinctValuesCollector<>(selector, searchGroups, ts);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable[Object],R-extends-Comparable[Object]]_createDistinctCountCollector(FirstPassGroupingCollector[T],String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable<Object>, R extends Comparable<Object>> DistinctValuesCollector<T, R> createDistinctCountCollector(FirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                                         String countField) throws IOException {\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    GroupSelector<T> selector = firstPassGroupingCollector.getGroupSelector();\n    if (ValueSourceGroupSelector.class.isAssignableFrom(selector.getClass())) {\n      GroupSelector gs = new ValueSourceGroupSelector(new BytesRefFieldSource(countField), new HashMap<>());\n      return new DistinctValuesCollector<>(selector, searchGroups, gs);\n    } else {\n      GroupSelector ts = new TermGroupSelector(countField);\n      return new DistinctValuesCollector<>(selector, searchGroups, ts);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable[Object],R-extends-Comparable[Object]]_createDistinctCountCollector(FirstPassGroupingCollector[T],String).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T-extends-Comparable[Object],R-extends-Comparable[Object]]_createDistinctCountCollector(FirstPassGroupingCollector[T],String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable<Object>, R extends Comparable<Object>> DistinctValuesCollector<T, R> createDistinctCountCollector(FirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                                         String countField) throws IOException {\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0);\n    GroupSelector<T> selector = firstPassGroupingCollector.getGroupSelector();\n    if (ValueSourceGroupSelector.class.isAssignableFrom(selector.getClass())) {\n      GroupSelector gs = new ValueSourceGroupSelector(new BytesRefFieldSource(countField), new HashMap<>());\n      return new DistinctValuesCollector<>(selector, searchGroups, gs);\n    } else {\n      GroupSelector ts = new TermGroupSelector(countField);\n      return new DistinctValuesCollector<>(selector, searchGroups, ts);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T extends Comparable<Object>, R extends Comparable<Object>> DistinctValuesCollector<T, R> createDistinctCountCollector(FirstPassGroupingCollector<T> firstPassGroupingCollector,\n                                                                                         String countField) throws IOException {\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(0, false);\n    GroupSelector<T> selector = firstPassGroupingCollector.getGroupSelector();\n    if (ValueSourceGroupSelector.class.isAssignableFrom(selector.getClass())) {\n      GroupSelector gs = new ValueSourceGroupSelector(new BytesRefFieldSource(countField), new HashMap<>());\n      return new DistinctValuesCollector<>(selector, searchGroups, gs);\n    } else {\n      GroupSelector ts = new TermGroupSelector(countField);\n      return new DistinctValuesCollector<>(selector, searchGroups, ts);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04c370507e5521b2eb998530736f1c19b851ed5a"],"7ae958a739da1866696f442384393ba2f13e33e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"04c370507e5521b2eb998530736f1c19b851ed5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ae958a739da1866696f442384393ba2f13e33e5":["04c370507e5521b2eb998530736f1c19b851ed5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}