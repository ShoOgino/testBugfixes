{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (!hasMerged && size != -1) {\n          datOut.writeInt(size);\n        }\n\n        if (liveDocs == null && tryBulkMerge(readerIn)) {\n          FixedStraightReader reader = (FixedStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < docBase) {\n            fill(datOut, docBase);\n            lastDocID = docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        hasMerged = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (!hasMerged && size != -1) {\n          datOut.writeInt(size);\n        }\n\n        if (liveDocs == null && tryBulkMerge(readerIn)) {\n          FixedStraightReader reader = (FixedStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < docBase) {\n            fill(datOut, docBase);\n            lastDocID = docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        hasMerged = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (!hasMerged && size != -1) {\n          datOut.writeInt(size);\n        }\n\n        if (liveDocs == null && tryBulkMerge(readerIn)) {\n          FixedStraightReader reader = (FixedStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < docBase) {\n            fill(datOut, docBase);\n            lastDocID = docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        hasMerged = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (!hasMerged && size != -1) {\n          datOut.writeInt(size);\n        }\n\n        if (liveDocs == null && tryBulkMerge(readerIn)) {\n          FixedStraightReader reader = (FixedStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < docBase) {\n            fill(datOut, docBase);\n            lastDocID = docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        hasMerged = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}