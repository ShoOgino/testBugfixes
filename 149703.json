{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","pathOld":"/dev/null","sourceNew":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"1\"));\n    assertU(commit());\n    long v1 = getVer(req(\"q\",\"id:1\"));\n    long v1a = getVer(req(\"q\",\"id:2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(commit());\n    long v2 = getVer(req(\"q\",\"id:1\"));\n\n    assert(v2 > v1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + v2 + \",\" + v1a + \"]\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","pathOld":"/dev/null","sourceNew":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"1\"));\n    assertU(commit());\n    long v1 = getVer(req(\"q\",\"id:1\"));\n    long v1a = getVer(req(\"q\",\"id:2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(commit());\n    long v2 = getVer(req(\"q\",\"id:1\"));\n\n    assert(v2 > v1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + v2 + \",\" + v1a + \"]\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","pathOld":"/dev/null","sourceNew":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"1\"));\n    assertU(commit());\n    long v1 = getVer(req(\"q\",\"id:1\"));\n    long v1a = getVer(req(\"q\",\"id:2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(commit());\n    long v2 = getVer(req(\"q\",\"id:1\"));\n\n    assert(v2 > v1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + v2 + \",\" + v1a + \"]\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2","date":1329660825,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","sourceNew":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"D2\", \"val_i\",\"1\"));\n    assertU(commit());\n    long v1 = getVer(req(\"q\",\"id:D1\"));\n    long v1a = getVer(req(\"q\",\"id:D2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",\"2\"));\n    assertU(commit());\n    long v2 = getVer(req(\"q\",\"id:D1\"));\n\n    assert(v2 > v1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + v2 + \",\" + v1a + \"]\"\n    );\n\n  }\n\n","sourceOld":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"1\"));\n    assertU(commit());\n    long v1 = getVer(req(\"q\",\"id:1\"));\n    long v1a = getVer(req(\"q\",\"id:2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(commit());\n    long v2 = getVer(req(\"q\",\"id:1\"));\n\n    assert(v2 > v1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + v2 + \",\" + v1a + \"]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9efcb86f82b536ffcefcc27adbfa39b603342af1","date":1492147023,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","sourceNew":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    String v1 = getNextVersion();\n    String v2 = getNextVersion();\n    \n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",v1));\n    assertU(adoc(\"id\",\"D2\", \"val_i\",v1));\n    assertU(commit());\n    long D1Version1 = getVer(req(\"q\",\"id:D1\"));\n    long D2Version1 = getVer(req(\"q\",\"id:D2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",v2));\n    assertU(commit());\n    long D1Version2 = getVer(req(\"q\",\"id:D1\"));\n\n    assert(D1Version2 > D1Version1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + D1Version2 + \",\" + D2Version1 + \"]\"\n    );\n\n  }\n\n","sourceOld":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"D2\", \"val_i\",\"1\"));\n    assertU(commit());\n    long v1 = getVer(req(\"q\",\"id:D1\"));\n    long v1a = getVer(req(\"q\",\"id:D2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",\"2\"));\n    assertU(commit());\n    long v2 = getVer(req(\"q\",\"id:D1\"));\n\n    assert(v2 > v1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + v2 + \",\" + v1a + \"]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testVersionsOnRestart().mjava","sourceNew":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    String v1 = getNextVersion();\n    String v2 = getNextVersion();\n    \n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",v1));\n    assertU(adoc(\"id\",\"D2\", \"val_i\",v1));\n    assertU(commit());\n    long D1Version1 = getVer(req(\"q\",\"id:D1\"));\n    long D2Version1 = getVer(req(\"q\",\"id:D2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",v2));\n    assertU(commit());\n    long D1Version2 = getVer(req(\"q\",\"id:D1\"));\n\n    assert(D1Version2 > D1Version1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + D1Version2 + \",\" + D2Version1 + \"]\"\n    );\n\n  }\n\n","sourceOld":"  // make sure that on a restart, versions don't start too low\n  @Test\n  public void testVersionsOnRestart() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"D2\", \"val_i\",\"1\"));\n    assertU(commit());\n    long v1 = getVer(req(\"q\",\"id:D1\"));\n    long v1a = getVer(req(\"q\",\"id:D2\"));\n\n    h.close();\n    createCore();\n\n    assertU(adoc(\"id\",\"D1\", \"val_i\",\"2\"));\n    assertU(commit());\n    long v2 = getVer(req(\"q\",\"id:D1\"));\n\n    assert(v2 > v1);\n\n    assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n        ,\"/versions==[\" + v2 + \",\" + v1a + \"]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9efcb86f82b536ffcefcc27adbfa39b603342af1":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9efcb86f82b536ffcefcc27adbfa39b603342af1"]},"commit2Childs":{"9efcb86f82b536ffcefcc27adbfa39b603342af1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["9efcb86f82b536ffcefcc27adbfa39b603342af1","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}