{"path":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","commits":[{"id":"bdac0dff04219451c7511d62225080a93a0181ea","date":1451212020,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","pathOld":"/dev/null","sourceNew":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","sourceNew":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","sourceOld":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","sourceNew":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","sourceOld":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","sourceNew":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","sourceOld":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","sourceNew":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map m = (Map) Utils.fromJSONString(response);\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","sourceOld":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored2#testSchemaAPI().mjava","sourceNew":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) Utils.fromJSONString(response);\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","sourceOld":"  public void testSchemaAPI() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map m = (Map) Utils.fromJSONString(response);\n    assertNull(response, m.get(\"errors\"));\n\n    // default value of useDocValuesAsStored\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n    assertNull(m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=true\n    m = TestBulkSchemaAPI.getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // useDocValuesAsStored=false\n    m = TestBulkSchemaAPI.getObj(harness,\"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Index documents to check the effect\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a1,a2,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=a3\",\n        \"/response/docs==[{'a3':'3'}]\");\n\n    // this will return a3 because it is explicitly requested even if '*' is specified\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*,a3\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]\");\n\n    // this will not return a3 because the glob 'a*' will match only stored + useDocValuesAsStored=true fields\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=id,a*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]\");\n    \n    // Test replace-field\n    // Explicitly set useDocValuesAsStored to false\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':false,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.FALSE, m.get(\"useDocValuesAsStored\"));\n\n    // Explicitly set useDocValuesAsStored to true\n    payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':false,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 doesn't exist any more\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    // add a field which is stored as well as docvalues\n    payload = \"{          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'useDocValuesAsStored':true,\\n\" +\n        \"                       'docValues':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       }}\";\n    response = harness.post(\"/schema\", json(payload));\n    m = TestBulkSchemaAPI.getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not found\", m);\n    assertEquals(Boolean.TRUE, m.get(\"useDocValuesAsStored\"));\n\n    assertU(adoc(\"id\", \"myid1\", \"a1\", \"1\", \"a2\", \"2\", \"a3\", \"3\", \"a4\", \"4\"));\n    assertU(commit());\n\n    RestTestBase.assertJQ(\"/select?q=id:myid*&fl=*\",\n        \"/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["bdac0dff04219451c7511d62225080a93a0181ea","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["bdac0dff04219451c7511d62225080a93a0181ea","ac1e7fa558287a811ea07634d815ee7b1c541284"],"bdac0dff04219451c7511d62225080a93a0181ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["bdac0dff04219451c7511d62225080a93a0181ea"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdac0dff04219451c7511d62225080a93a0181ea"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"bdac0dff04219451c7511d62225080a93a0181ea":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}