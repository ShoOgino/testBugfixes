{"path":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}