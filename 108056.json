{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector#collect(int).mjava","commits":[{"id":"4e622d1d7e4496e3a8c1709c84e5be91ced69889","date":1311534411,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GH groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector#collect(int).mjava","sourceNew":"  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GH groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GH groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4e622d1d7e4496e3a8c1709c84e5be91ced69889"],"4e622d1d7e4496e3a8c1709c84e5be91ced69889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e622d1d7e4496e3a8c1709c84e5be91ced69889":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e622d1d7e4496e3a8c1709c84e5be91ced69889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}