{"path":"src/test/org/apache/solr/search/DocSetPerf#generate(int,int).mjava","commits":[{"id":"d8a96a486e2153573397d8df6d7e1aa6997a93a0","date":1149990497,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/DocSetPerf#generate(int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet[DocSetPerf]#generate(int,int).mjava","sourceNew":"  static void generate(int maxSize, int bitsToSet) {\n    bs = new OpenBitSet(maxSize);\n    ids = new int[bitsToSet];\n    int count=0;\n    if (maxSize>0) {\n      for (int i=0; i<bitsToSet; i++) {\n        int id=rand.nextInt(maxSize);\n        if (!bs.get(id)) {\n          bs.fastSet(id);\n          ids[count++]=id;\n        }\n      }\n    }\n    bds = new BitDocSet(bs,bitsToSet);\n    hds = new HashDocSet(ids,0,count);\n  }\n\n","sourceOld":"  static void generate(int maxSize, int bitsToSet) {\n    bs = new OpenBitSet(maxSize);\n    ids = new int[bitsToSet];\n    int count=0;\n    if (maxSize>0) {\n      for (int i=0; i<bitsToSet; i++) {\n        int id=rand.nextInt(maxSize);\n        if (!bs.get(id)) {\n          bs.fastSet(id);\n          ids[count++]=id;\n        }\n      }\n    }\n    bds = new BitDocSet(bs,bitsToSet);\n    hds = new HashDocSet(ids,0,count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/DocSetPerf#generate(int,int).mjava","pathOld":"src/test/org/apache/solr/search/DocSetPerf#generate(int,int).mjava","sourceNew":"  static void generate(int maxSize, int bitsToSet) {\n    bs = new OpenBitSet(maxSize);\n    ids = new int[bitsToSet];\n    int count=0;\n    if (maxSize>0) {\n      for (int i=0; i<bitsToSet; i++) {\n        int id=rand.nextInt(maxSize);\n        if (!bs.get(id)) {\n          bs.fastSet(id);\n          ids[count++]=id;\n        }\n      }\n    }\n    bds = new BitDocSet(bs,bitsToSet);\n    hds = new HashDocSet(ids,0,count);\n  }\n\n","sourceOld":"  static void generate(int maxSize, int bitsToSet) {\n    bs = new OpenBitSet(maxSize);\n    ids = new int[bitsToSet];\n    int count=0;\n    if (maxSize>0) {\n      for (int i=0; i<bitsToSet; i++) {\n        int id=rand.nextInt(maxSize);\n        if (!bs.get(id)) {\n          bs.fastSet(id);\n          ids[count++]=id;\n        }\n      }\n    }\n    bds = new BitDocSet(bs,bitsToSet);\n    hds = new HashDocSet(ids,0,count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d8a96a486e2153573397d8df6d7e1aa6997a93a0"],"d8a96a486e2153573397d8df6d7e1aa6997a93a0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d8a96a486e2153573397d8df6d7e1aa6997a93a0"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d8a96a486e2153573397d8df6d7e1aa6997a93a0":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}