{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"    protected List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","sourceOld":"    protected List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"    protected List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","sourceOld":"    protected List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"/dev/null","sourceNew":"    protected List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00aca69329b84bc12b5a402a8745f8e4db7b7d40","date":1506911750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"    List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences,rows);\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","sourceOld":"    protected List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"    List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences,rows);\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","sourceOld":"    protected List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"    List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences,rows);\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","sourceOld":"    protected List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":null,"sourceOld":"    List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n      setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences,rows);\n      List<Violation> errors = new ArrayList<>();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          List<Violation> errs = clause.test(rows);\n          if (!errs.isEmpty()) {\n            errors.addAll(errs);\n          }\n        }\n      }\n      return errors;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","00aca69329b84bc12b5a402a8745f8e4db7b7d40"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00aca69329b84bc12b5a402a8745f8e4db7b7d40":["98f11c416d30e556e0004a9a84960702d12d35b1"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"00aca69329b84bc12b5a402a8745f8e4db7b7d40":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["00aca69329b84bc12b5a402a8745f8e4db7b7d40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}