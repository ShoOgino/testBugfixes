{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#write(Fields,NormsProducer).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#write(Fields,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields, NormsProducer norms) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n            \n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen, norms);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n            \n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#write(Fields,NormsProducer).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Fields fields, NormsProducer norms) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n            \n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen, norms);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#write(Fields,NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Fields fields, NormsProducer norms) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n            \n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen, norms);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06ab276a5660cb79daae8c5ede063531c700a03a"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"06ab276a5660cb79daae8c5ede063531c700a03a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}