{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","commits":[{"id":"ae25747f561c2392e8a9046cfa4e5a836d14949c","date":1310502947,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","sourceNew":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), IOContext.DEFAULT);\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","sourceNew":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f89b4cb5c62a814bf32e0d7d50c6f9ba4fe2e14a","date":1323050816,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","sourceNew":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (si.hasDeletions()) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","sourceNew":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (si.hasDeletions()) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","sourceNew":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (si.hasDeletions()) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d9cdceb051035b069ec36719809d0cd837777b","date":1323905856,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","sourceNew":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (si.hasDeletions()) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else {\n      assert si.getDelCount() == 0;\n    }\n    // we need a key reflecting actual deletes (if existent or not):\n    combinedCoreAndDeletesKey = new Object();\n  }\n\n","sourceOld":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (si.hasDeletions()) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","sourceNew":null,"sourceOld":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (si.hasDeletions()) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else {\n      assert si.getDelCount() == 0;\n    }\n    // we need a key reflecting actual deletes (if existent or not):\n    combinedCoreAndDeletesKey = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["ae25747f561c2392e8a9046cfa4e5a836d14949c"],"ae25747f561c2392e8a9046cfa4e5a836d14949c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","f89b4cb5c62a814bf32e0d7d50c6f9ba4fe2e14a"],"f89b4cb5c62a814bf32e0d7d50c6f9ba4fe2e14a":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["b7d9cdceb051035b069ec36719809d0cd837777b"],"b7d9cdceb051035b069ec36719809d0cd837777b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","f89b4cb5c62a814bf32e0d7d50c6f9ba4fe2e14a"],"ae25747f561c2392e8a9046cfa4e5a836d14949c":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae25747f561c2392e8a9046cfa4e5a836d14949c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","b7d9cdceb051035b069ec36719809d0cd837777b"],"f89b4cb5c62a814bf32e0d7d50c6f9ba4fe2e14a":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7d9cdceb051035b069ec36719809d0cd837777b":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}