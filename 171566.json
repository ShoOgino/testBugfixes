{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public String getShardId(String baseUrl, String coreName) {\n    // System.out.println(\"###### getShardId(\" + baseUrl + \",\" + coreName + \") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public String getShardId(String baseUrl, String coreName) {\n    // System.out.println(\"###### getShardId(\" + baseUrl + \",\" + coreName + \") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceca2bff80f22f2c69257979e86498558a4c2691","date":1393261456,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","sourceNew":"  public String getShardId(String nodeName, String coreName) {\n    // System.out.println(\"###### getShardId(\" + baseUrl + \",\" + coreName + \") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public String getShardId(String baseUrl, String coreName) {\n    // System.out.println(\"###### getShardId(\" + baseUrl + \",\" + coreName + \") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","sourceNew":"  public String getShardId(String nodeName, String coreName) {\n    // System.out.println(\"###### getShardId(\" + baseUrl + \",\" + coreName + \") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public String getShardId(String baseUrl, String coreName) {\n    // System.out.println(\"###### getShardId(\" + baseUrl + \",\" + coreName + \") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String).mjava","sourceNew":"  public String getShardId(String nodeName, String coreName) {\n    return getShardId(null, nodeName, coreName);\n  }\n\n","sourceOld":"  public String getShardId(String nodeName, String coreName) {\n    // System.out.println(\"###### getShardId(\" + baseUrl + \",\" + coreName + \") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ceca2bff80f22f2c69257979e86498558a4c2691":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["ceca2bff80f22f2c69257979e86498558a4c2691"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["849494cf2f3a96af5c8c84995108ddd8456fcd04","ceca2bff80f22f2c69257979e86498558a4c2691"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ceca2bff80f22f2c69257979e86498558a4c2691","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ceca2bff80f22f2c69257979e86498558a4c2691":["0622fbd990643ae4cacb693db6a0c82cf8916ae2","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}