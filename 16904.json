{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","commits":[{"id":"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652","date":1332881914,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      CloudState cloudState = zkController.getCloudState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = cloudState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(\"shards.qt\",\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"shards.qt\",\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce","76b65cf789129cacd84e977b8f1538aec29e0281"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      CloudState cloudState = zkController.getCloudState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = cloudState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      CloudState cloudState = zkController.getCloudState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = cloudState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(\"shards.qt\",\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"shards.qt\",\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":["76b65cf789129cacd84e977b8f1538aec29e0281"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      CloudState cloudState = zkController.getCloudState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = cloudState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      CloudState cloudState = zkController.getCloudState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = cloudState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      CloudState cloudState = zkController.getCloudState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = cloudState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbb99676a68bd056726c87b20f1854ee4d740a29","date":1346421532,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        int hash = Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        int hash = Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      SchemaField sf = rb.req.getSchema().getUniqueKeyField();\n\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        BytesRef br = new BytesRef();\n        sf.getType().readableToIndexed(id, br);\n        int hash = Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5950eb64b8186de9916cbfc47470784523079a","date":1355004015,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        int hash = Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":["747dd71fefcbc7142661c25334b74c518fef4d81","4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n\n      ClusterState clusterState = zkController.getClusterState();\n      \n      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        int hash = Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n        String shard = clusterState.getShard(hash,  collection);\n\n        List<String> idsForShard = shardToId.get(shard);\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          shardToId.put(shard, idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<String>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<String, List<String>>();\n      for (String id : allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<String>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":["0f5950eb64b8186de9916cbfc47470784523079a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce","date":1468951909,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(reqIds.allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0f5950eb64b8186de9916cbfc47470784523079a","0c197a6fac0ddfa4c18b4683b906f7e31e4c6652"],"bugIntro":["76b65cf789129cacd84e977b8f1538aec29e0281"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76b65cf789129cacd84e977b8f1538aec29e0281","date":1470165799,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(reqIds.allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":["1bea3922196318026c4274f2013416acb60c691e","4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce","0c197a6fac0ddfa4c18b4683b906f7e31e4c6652"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(reqIds.allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    String id1[] = params.getParams(\"id\");\n    String ids[] = params.getParams(\"ids\");\n\n    if (id1 == null && ids == null) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    List<String> allIds = new ArrayList<>();\n    if (id1 != null) {\n      for (String s : id1) {\n        allIds.add(s);\n      }\n    }\n    if (ids != null) {\n      for (String s : ids) {\n        allIds.addAll( StrUtils.splitSmart(s, \",\", true) );\n      }\n    }\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(\"shards\") == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n        String shardIdList = StrUtils.join(entry.getValue(), ',');\n\n        ShardRequest sreq = new ShardRequest();\n\n        sreq.purpose = 1;\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        sreq.params = new ModifiableSolrParams();\n        sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n        sreq.params.set(\"distrib\",false);\n        sreq.params.set(\"ids\", shardIdList);\n\n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      String shardIdList = StrUtils.join(allIds, ',');\n      ShardRequest sreq = new ShardRequest();\n\n      sreq.purpose = 1;\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      // TODO: how to avoid hardcoding this and hit the same handler?\n      sreq.params.set(\"distrib\",false);\n      sreq.params.set(\"ids\", shardIdList);\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createSubRequests(ResponseBuilder).mjava","sourceNew":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(params.get(ShardParams._ROUTE_, id), null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  public int createSubRequests(ResponseBuilder rb) throws IOException {\n    \n    final IdsRequsted reqIds = IdsRequsted.parseParams(rb.req);\n    if (reqIds.allIds.isEmpty()) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    SolrParams params = rb.req.getParams();\n\n    // TODO: handle collection=...?\n\n    ZkController zkController = rb.req.getCore().getCoreContainer().getZkController();\n\n    // if shards=... then use that\n    if (zkController != null && params.get(ShardParams.SHARDS) == null) {\n      CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();\n\n      String collection = cloudDescriptor.getCollectionName();\n      ClusterState clusterState = zkController.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n\n      Map<String, List<String>> sliceToId = new HashMap<>();\n      for (String id : reqIds.allIds) {\n        Slice slice = coll.getRouter().getTargetSlice(id, null, null, params, coll);\n\n        List<String> idsForShard = sliceToId.get(slice.getName());\n        if (idsForShard == null) {\n          idsForShard = new ArrayList<>(2);\n          sliceToId.put(slice.getName(), idsForShard);\n        }\n        idsForShard.add(id);\n      }\n\n      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {\n        String shard = entry.getKey();\n\n        ShardRequest sreq = createShardRequest(rb, entry.getValue());\n        // sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...\n        sreq.shards = sliceToShards(rb, collection, shard);\n        sreq.actualShards = sreq.shards;\n        \n        rb.addRequest(this, sreq);\n      }      \n    } else {\n      ShardRequest sreq = createShardRequest(rb, reqIds.allIds);\n      sreq.shards = null;  // ALL\n      sreq.actualShards = sreq.shards;\n\n      rb.addRequest(this, sreq);\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["76b65cf789129cacd84e977b8f1538aec29e0281"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f5950eb64b8186de9916cbfc47470784523079a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fbb99676a68bd056726c87b20f1854ee4d740a29","0f5950eb64b8186de9916cbfc47470784523079a"],"0f5950eb64b8186de9916cbfc47470784523079a":["fbb99676a68bd056726c87b20f1854ee4d740a29"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["1bea3922196318026c4274f2013416acb60c691e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"747dd71fefcbc7142661c25334b74c518fef4d81":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1bea3922196318026c4274f2013416acb60c691e":["0c197a6fac0ddfa4c18b4683b906f7e31e4c6652"],"07749612bed4eb54dd05255c1434c301133310c1":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["76b65cf789129cacd84e977b8f1538aec29e0281"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["747dd71fefcbc7142661c25334b74c518fef4d81","76b65cf789129cacd84e977b8f1538aec29e0281"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["1bea3922196318026c4274f2013416acb60c691e"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fbb99676a68bd056726c87b20f1854ee4d740a29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["1bea3922196318026c4274f2013416acb60c691e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce":["747dd71fefcbc7142661c25334b74c518fef4d81"],"fbb99676a68bd056726c87b20f1854ee4d740a29":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce","76b65cf789129cacd84e977b8f1538aec29e0281"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07749612bed4eb54dd05255c1434c301133310c1"],"76b65cf789129cacd84e977b8f1538aec29e0281":["4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["747dd71fefcbc7142661c25334b74c518fef4d81"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"0f5950eb64b8186de9916cbfc47470784523079a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"1bea3922196318026c4274f2013416acb60c691e":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"747dd71fefcbc7142661c25334b74c518fef4d81":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce"],"07749612bed4eb54dd05255c1434c301133310c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["07749612bed4eb54dd05255c1434c301133310c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","fbb99676a68bd056726c87b20f1854ee4d740a29"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c197a6fac0ddfa4c18b4683b906f7e31e4c6652"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"0c197a6fac0ddfa4c18b4683b906f7e31e4c6652":["1bea3922196318026c4274f2013416acb60c691e"],"4c58bab35e821e15dc6b8669d2f15c2e3cc6d9ce":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","76b65cf789129cacd84e977b8f1538aec29e0281"],"fbb99676a68bd056726c87b20f1854ee4d740a29":["407687e67faf6e1f02a211ca078d8e3eed631027","0f5950eb64b8186de9916cbfc47470784523079a","d0d1f90e969803cc84174589b5e4a39b7935fecd"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"76b65cf789129cacd84e977b8f1538aec29e0281":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d0d1f90e969803cc84174589b5e4a39b7935fecd","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}