{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","commits":[{"id":"a761b207f161726214a84533bf56a78f6c21ff56","date":1354384027,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState).mjava","sourceNew":"    SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(SegmentReadState state) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, \"dat\"), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"    SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ba81908bd58bd5079d89f3dafc90bce86fa08a6","date":1354575765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32fb848e256860b63adc9c2b068f386032c77b67","date":1357587205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","sourceOld":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","sourceOld":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed9002c5afac843c7f2d04d88e74b40d627e1af","date":1357602069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","sourceOld":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValuesType dvType = ext.equals(\"slen\") ? DocValuesType.NUMERIC : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (dvType == DocValuesType.NUMERIC) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (dvType == DocValuesType.BINARY) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (dvType == DocValuesType.SORTED) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","sourceOld":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValues.Type dvType = ext.equals(\"slen\") ? DocValues.Type.FIXED_INTS_8 : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValuesType dvType = ext.equals(\"slen\") ? DocValuesType.NUMERIC : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (dvType == DocValuesType.NUMERIC) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (dvType == DocValuesType.BINARY) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (dvType == DocValuesType.SORTED) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","sourceOld":"    public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        //System.out.println(\"  field=\" + fieldName);\n\n        // nocommit hack hack hack!!:\n        DocValuesType dvType = ext.equals(\"slen\") ? DocValuesType.NUMERIC : fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (dvType == DocValuesType.NUMERIC) {\n          readLine();\n          assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (dvType == DocValuesType.BINARY) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (dvType == DocValuesType.SORTED) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n\n      // We should only be called from above if at least one\n      // field has DVs:\n      assert !fields.isEmpty();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a761b207f161726214a84533bf56a78f6c21ff56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ba81908bd58bd5079d89f3dafc90bce86fa08a6":["55eeb2534cd53d2a985669829df942468ebf5314"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["32fb848e256860b63adc9c2b068f386032c77b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"32fb848e256860b63adc9c2b068f386032c77b67":["4ba81908bd58bd5079d89f3dafc90bce86fa08a6"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"55eeb2534cd53d2a985669829df942468ebf5314":["a761b207f161726214a84533bf56a78f6c21ff56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a761b207f161726214a84533bf56a78f6c21ff56":["55eeb2534cd53d2a985669829df942468ebf5314"],"4ba81908bd58bd5079d89f3dafc90bce86fa08a6":["32fb848e256860b63adc9c2b068f386032c77b67"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a761b207f161726214a84533bf56a78f6c21ff56","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"32fb848e256860b63adc9c2b068f386032c77b67":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"55eeb2534cd53d2a985669829df942468ebf5314":["4ba81908bd58bd5079d89f3dafc90bce86fa08a6"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}