{"path":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#waitForQueueToDrain(int).mjava","commits":[{"id":"144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8","date":1554812752,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#waitForQueueToDrain(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Blocks until the async event queue is drained\n   * @param timeoutSeconds number of seconds to wait for queue to drain\n   */\n  protected void waitForQueueToDrain(int timeoutSeconds) {\n    if (async && executorService != null) {\n      int timeSlept = 0;\n      while (!queue.isEmpty() && timeSlept < timeoutSeconds) {\n        try {\n          log.info(\"Async auditlogger queue still has {} elements, sleeping to let it drain...\", queue.size());\n          Thread.sleep(1000);\n          timeSlept ++;\n        } catch (InterruptedException ignored) {}\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4212f4601c03a66e0b324597a3bfe0f51b9f5b65","date":1556832376,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#waitForQueueToDrain(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#waitForQueueToDrain(int).mjava","sourceNew":"  /**\n   * Blocks until the async event queue is drained\n   * @param timeoutSeconds number of seconds to wait for queue to drain\n   */\n  protected void waitForQueueToDrain(int timeoutSeconds) {\n    if (async && executorService != null) {\n      int timeSlept = 0;\n      while ((!queue.isEmpty() || auditsInFlight.get() > 0) && timeSlept < timeoutSeconds) {\n        try {\n          log.info(\"Async auditlogger queue still has {} elements and {} audits in-flight, sleeping to drain...\", queue.size(), auditsInFlight.get());\n          Thread.sleep(1000);\n          timeSlept ++;\n        } catch (InterruptedException ignored) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Blocks until the async event queue is drained\n   * @param timeoutSeconds number of seconds to wait for queue to drain\n   */\n  protected void waitForQueueToDrain(int timeoutSeconds) {\n    if (async && executorService != null) {\n      int timeSlept = 0;\n      while (!queue.isEmpty() && timeSlept < timeoutSeconds) {\n        try {\n          log.info(\"Async auditlogger queue still has {} elements, sleeping to let it drain...\", queue.size());\n          Thread.sleep(1000);\n          timeSlept ++;\n        } catch (InterruptedException ignored) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#waitForQueueToDrain(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#waitForQueueToDrain(int).mjava","sourceNew":"  /**\n   * Blocks until the async event queue is drained\n   * @param timeoutSeconds number of seconds to wait for queue to drain\n   */\n  protected void waitForQueueToDrain(int timeoutSeconds) {\n    if (async && executorService != null) {\n      int timeSlept = 0;\n      while ((!queue.isEmpty() || auditsInFlight.get() > 0) && timeSlept < timeoutSeconds) {\n        try {\n          if (log.isInfoEnabled()) {\n            log.info(\"Async auditlogger queue still has {} elements and {} audits in-flight, sleeping to drain...\", queue.size(), auditsInFlight.get());\n          }\n          Thread.sleep(1000);\n          timeSlept ++;\n        } catch (InterruptedException ignored) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Blocks until the async event queue is drained\n   * @param timeoutSeconds number of seconds to wait for queue to drain\n   */\n  protected void waitForQueueToDrain(int timeoutSeconds) {\n    if (async && executorService != null) {\n      int timeSlept = 0;\n      while ((!queue.isEmpty() || auditsInFlight.get() > 0) && timeSlept < timeoutSeconds) {\n        try {\n          log.info(\"Async auditlogger queue still has {} elements and {} audits in-flight, sleeping to drain...\", queue.size(), auditsInFlight.get());\n          Thread.sleep(1000);\n          timeSlept ++;\n        } catch (InterruptedException ignored) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["4212f4601c03a66e0b324597a3bfe0f51b9f5b65"],"4212f4601c03a66e0b324597a3bfe0f51b9f5b65":["144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4212f4601c03a66e0b324597a3bfe0f51b9f5b65":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8"],"144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8":["4212f4601c03a66e0b324597a3bfe0f51b9f5b65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}