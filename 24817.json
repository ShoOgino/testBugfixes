{"path":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T extends Comparable<T>> void distributeAndFind(List<T> list, int[] percentiles, int beginIdx, int endIdx) {\n    if (endIdx < beginIdx) {\n      return;\n    }\n    int middleIdxb = beginIdx;\n    int middleIdxe = beginIdx;\n    int begin = (beginIdx == 0) ? -1 : percentiles[beginIdx - 1];\n    int end = (endIdx == percentiles.length - 1) ? list.size() : percentiles[endIdx + 1];\n    double middle = (begin + end) / 2.0;\n    for (int i = beginIdx; i <= endIdx; i++) {\n      double value = Math.abs(percentiles[i] - middle) - Math.abs(percentiles[middleIdxb] - middle);\n      if (percentiles[i] == percentiles[middleIdxb]) {\n        middleIdxe = i;\n      } else if (value < 0) {\n        middleIdxb = i;\n        do {\n          middleIdxe = i;\n          i++;\n        } while (i <= endIdx && percentiles[middleIdxb] == percentiles[i]);\n        break;\n      }\n    }\n\n    int middlePlace = percentiles[middleIdxb];\n    int beginPlace = begin + 1;\n    int endPlace = end - 1;\n\n    select(list, middlePlace, beginPlace, endPlace);\n    distributeAndFind(list, percentiles, beginIdx, middleIdxb - 1);\n    distributeAndFind(list, percentiles, middleIdxe + 1, endIdx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T extends Comparable<T>> void distributeAndFind(List<T> list, int[] percentiles, int beginIdx, int endIdx) {\n    if (endIdx < beginIdx) {\n      return;\n    }\n    int middleIdxb = beginIdx;\n    int middleIdxe = beginIdx;\n    int begin = (beginIdx == 0) ? -1 : percentiles[beginIdx - 1];\n    int end = (endIdx == percentiles.length - 1) ? list.size() : percentiles[endIdx + 1];\n    double middle = (begin + end) / 2.0;\n    for (int i = beginIdx; i <= endIdx; i++) {\n      double value = Math.abs(percentiles[i] - middle) - Math.abs(percentiles[middleIdxb] - middle);\n      if (percentiles[i] == percentiles[middleIdxb]) {\n        middleIdxe = i;\n      } else if (value < 0) {\n        middleIdxb = i;\n        do {\n          middleIdxe = i;\n          i++;\n        } while (i <= endIdx && percentiles[middleIdxb] == percentiles[i]);\n        break;\n      }\n    }\n\n    int middlePlace = percentiles[middleIdxb];\n    int beginPlace = begin + 1;\n    int endPlace = end - 1;\n\n    select(list, middlePlace, beginPlace, endPlace);\n    distributeAndFind(list, percentiles, beginIdx, middleIdxb - 1);\n    distributeAndFind(list, percentiles, middleIdxe + 1, endIdx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_distributeAndFind(List[T],int[],int,int).mjava","sourceNew":"  private static <T extends Comparable<T>> void distributeAndFind(List<T> list, int[] percentiles, int beginIdx, int endIdx) {\n    if (endIdx < beginIdx) {\n      return;\n    }\n    int middleIdxb = beginIdx;\n    int middleIdxe = beginIdx;\n    int begin = (beginIdx == 0) ? -1 : percentiles[beginIdx - 1];\n    int end = (endIdx == percentiles.length - 1) ? list.size() : percentiles[endIdx + 1];\n    double middle = (begin + end) / 2.0;\n    for (int i = beginIdx; i <= endIdx; i++) {\n      double value = Math.abs(percentiles[i] - middle) - Math.abs(percentiles[middleIdxb] - middle);\n      if (percentiles[i] == percentiles[middleIdxb]) {\n        middleIdxe = i;\n      } else if (value < 0) {\n        middleIdxb = i;\n        do {\n          middleIdxe = i;\n          i++;\n        } while (i <= endIdx && percentiles[middleIdxb] == percentiles[i]);\n        break;\n      }\n    }\n\n    int middlePlace = percentiles[middleIdxb];\n    int beginPlace = begin + 1;\n    int endPlace = end - 1;\n\n    select(list, middlePlace, beginPlace, endPlace);\n    distributeAndFind(list, percentiles, beginIdx, middleIdxb - 1);\n    distributeAndFind(list, percentiles, middleIdxe + 1, endIdx);\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> void distributeAndFind(List<T> list, int[] percentiles, int beginIdx, int endIdx) {\n    if (endIdx < beginIdx) {\n      return;\n    }\n    int middleIdxb = beginIdx;\n    int middleIdxe = beginIdx;\n    int begin = (beginIdx == 0) ? -1 : percentiles[beginIdx - 1];\n    int end = (endIdx == percentiles.length - 1) ? list.size() : percentiles[endIdx + 1];\n    double middle = (begin + end) / 2.0;\n    for (int i = beginIdx; i <= endIdx; i++) {\n      double value = Math.abs(percentiles[i] - middle) - Math.abs(percentiles[middleIdxb] - middle);\n      if (percentiles[i] == percentiles[middleIdxb]) {\n        middleIdxe = i;\n      } else if (value < 0) {\n        middleIdxb = i;\n        do {\n          middleIdxe = i;\n          i++;\n        } while (i <= endIdx && percentiles[middleIdxb] == percentiles[i]);\n        break;\n      }\n    }\n\n    int middlePlace = percentiles[middleIdxb];\n    int beginPlace = begin + 1;\n    int endPlace = end - 1;\n\n    select(list, middlePlace, beginPlace, endPlace);\n    distributeAndFind(list, percentiles, beginIdx, middleIdxb - 1);\n    distributeAndFind(list, percentiles, middleIdxe + 1, endIdx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["ff403346522eaa9de75403763e297e83a3ea585c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}