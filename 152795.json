{"path":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2CharFilter#recordOffsetDiff(int,int).mjava","commits":[{"id":"837108f624718d0896bef7acd0150b66ebd816db","date":1395274740,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2CharFilter#recordOffsetDiff(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void recordOffsetDiff(int inputLength, int outputLength) {\n    if (inputLength == outputLength) {\n      charCount += outputLength;\n      return;\n    }\n    final int diff = inputLength - outputLength;\n    final int cumuDiff = getLastCumulativeDiff();\n    if (diff < 0) {\n      for (int i = 1;  i <= -diff; ++i) {\n        addOffCorrectMap(charCount + i, cumuDiff - i);\n      }\n    } else {\n      addOffCorrectMap(charCount + Math.min(1, outputLength), cumuDiff + diff);\n    }\n    charCount += outputLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf40a0c528dd989af66570df91053d324a80561b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf40a0c528dd989af66570df91053d324a80561b","date":1395666571,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2CharFilter#recordOffsetDiff(int,int).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2CharFilter#recordOffsetDiff(int,int).mjava","sourceNew":"  private void recordOffsetDiff(int inputLength, int outputLength) {\n    if (inputLength == outputLength) {\n      charCount += outputLength;\n      return;\n    }\n    final int diff = inputLength - outputLength;\n    final int cumuDiff = getLastCumulativeDiff();\n    if (diff < 0) {\n      for (int i = 1;  i <= -diff; ++i) {\n        addOffCorrectMap(charCount + i, cumuDiff - i);\n      }\n    } else {\n      addOffCorrectMap(charCount + outputLength, cumuDiff + diff);\n    }\n    charCount += outputLength;\n  }\n\n","sourceOld":"  private void recordOffsetDiff(int inputLength, int outputLength) {\n    if (inputLength == outputLength) {\n      charCount += outputLength;\n      return;\n    }\n    final int diff = inputLength - outputLength;\n    final int cumuDiff = getLastCumulativeDiff();\n    if (diff < 0) {\n      for (int i = 1;  i <= -diff; ++i) {\n        addOffCorrectMap(charCount + i, cumuDiff - i);\n      }\n    } else {\n      addOffCorrectMap(charCount + Math.min(1, outputLength), cumuDiff + diff);\n    }\n    charCount += outputLength;\n  }\n\n","bugFix":["837108f624718d0896bef7acd0150b66ebd816db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"837108f624718d0896bef7acd0150b66ebd816db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf40a0c528dd989af66570df91053d324a80561b":["837108f624718d0896bef7acd0150b66ebd816db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf40a0c528dd989af66570df91053d324a80561b"]},"commit2Childs":{"837108f624718d0896bef7acd0150b66ebd816db":["bf40a0c528dd989af66570df91053d324a80561b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["837108f624718d0896bef7acd0150b66ebd816db"],"bf40a0c528dd989af66570df91053d324a80561b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}