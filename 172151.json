{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#add(BytesRef,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#add(BytesRef,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#add(BytesRef,int).mjava","sourceNew":"  /**\n   * Appends a single suggestion and its weight to the internal buffers.\n   * \n   * @param utf8\n   *          The suggestion (utf8 representation) to be added. The content is\n   *          copied and the object can be reused.\n   * @param bucket\n   *          The bucket to place this suggestion in. Must be non-negative and\n   *          smaller than the number of buckets passed in the constructor.\n   *          Higher numbers indicate suggestions that should be presented\n   *          before suggestions placed in smaller buckets.\n   */\n  public void add(BytesRef utf8, int bucket) throws IOException {\n    if (bucket < 0 || bucket >= buckets) {\n      throw new IllegalArgumentException(\n          \"Bucket outside of the allowed range [0, \" + buckets + \"): \" + bucket);\n    }\n    \n    if (scratch.bytes.length < utf8.length + 1) {\n      scratch.grow(utf8.length + 10);\n    }\n    \n    scratch.length = 1;\n    scratch.bytes[0] = (byte) bucket;\n    scratch.append(utf8);\n    sorter.add(scratch);\n  }\n\n","sourceOld":"  /**\n   * Appends a single suggestion and its weight to the internal buffers.\n   * \n   * @param utf8\n   *          The suggestion (utf8 representation) to be added. The content is\n   *          copied and the object can be reused.\n   * @param bucket\n   *          The bucket to place this suggestion in. Must be non-negative and\n   *          smaller than the number of buckets passed in the constructor.\n   *          Higher numbers indicate suggestions that should be presented\n   *          before suggestions placed in smaller buckets.\n   */\n  public void add(BytesRef utf8, int bucket) throws IOException {\n    if (bucket < 0 || bucket >= buckets) {\n      throw new IllegalArgumentException(\n          \"Bucket outside of the allowed range [0, \" + buckets + \"): \" + bucket);\n    }\n    \n    if (scratch.bytes.length < utf8.length + 1) {\n      scratch.grow(utf8.length + 10);\n    }\n    \n    scratch.length = 1;\n    scratch.bytes[0] = (byte) bucket;\n    scratch.append(utf8);\n    sorter.add(scratch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#add(BytesRef,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#add(BytesRef,int).mjava","sourceNew":"  /**\n   * Appends a single suggestion and its weight to the internal buffers.\n   * \n   * @param utf8\n   *          The suggestion (utf8 representation) to be added. The content is\n   *          copied and the object can be reused.\n   * @param bucket\n   *          The bucket to place this suggestion in. Must be non-negative and\n   *          smaller than the number of buckets passed in the constructor.\n   *          Higher numbers indicate suggestions that should be presented\n   *          before suggestions placed in smaller buckets.\n   */\n  public void add(BytesRef utf8, int bucket) throws IOException {\n    if (bucket < 0 || bucket >= buckets) {\n      throw new IllegalArgumentException(\n          \"Bucket outside of the allowed range [0, \" + buckets + \"): \" + bucket);\n    }\n    \n    scratch.grow(utf8.length + 10);\n    scratch.clear();\n    scratch.append((byte) bucket);\n    scratch.append(utf8);\n    sorter.add(scratch.get());\n  }\n\n","sourceOld":"  /**\n   * Appends a single suggestion and its weight to the internal buffers.\n   * \n   * @param utf8\n   *          The suggestion (utf8 representation) to be added. The content is\n   *          copied and the object can be reused.\n   * @param bucket\n   *          The bucket to place this suggestion in. Must be non-negative and\n   *          smaller than the number of buckets passed in the constructor.\n   *          Higher numbers indicate suggestions that should be presented\n   *          before suggestions placed in smaller buckets.\n   */\n  public void add(BytesRef utf8, int bucket) throws IOException {\n    if (bucket < 0 || bucket >= buckets) {\n      throw new IllegalArgumentException(\n          \"Bucket outside of the allowed range [0, \" + buckets + \"): \" + bucket);\n    }\n    \n    if (scratch.bytes.length < utf8.length + 1) {\n      scratch.grow(utf8.length + 10);\n    }\n    \n    scratch.length = 1;\n    scratch.bytes[0] = (byte) bucket;\n    scratch.append(utf8);\n    sorter.add(scratch);\n  }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}