{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e2b30bfb739689d33532e6b7d2d39582bd89a3a","date":1432237721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.terms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4383b91725e5b335d0a9d5f24b122b813dddd0cc","date":1442106431,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    ReentrantLock lock = queue.globalBufferLock;\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.terms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.terms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws Exception {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    ReentrantLock lock = queue.globalBufferLock;\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.deleteTerms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    ReentrantLock lock = queue.globalBufferLock;\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.terms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws Exception {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    ReentrantLock lock = queue.globalBufferLock;\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.deleteTerms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    ReentrantLock lock = queue.globalBufferLock;\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.terms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws Exception {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    ReentrantLock lock = queue.globalBufferLock;\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.deleteTerms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    ReentrantLock lock = queue.globalBufferLock;\n    lock.lock();\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.terms.size());\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["4383b91725e5b335d0a9d5f24b122b813dddd0cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4383b91725e5b335d0a9d5f24b122b813dddd0cc":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["4383b91725e5b335d0a9d5f24b122b813dddd0cc","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["4383b91725e5b335d0a9d5f24b122b813dddd0cc","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["4383b91725e5b335d0a9d5f24b122b813dddd0cc"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4383b91725e5b335d0a9d5f24b122b813dddd0cc":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}