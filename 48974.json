{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","sourceNew":"  protected Report reportSumByPrefixRound(List<TaskStats> taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefixRound(List<TaskStats> taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","sourceNew":"  protected Report reportSumByPrefixRound(List<TaskStats> taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefixRound(List<TaskStats> taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}