{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","sourceNew":"    private final void maybeSeek() throws IOException {\n      if (seekPending) {\n        if (pendingFP != lastBlockFP) {\n          // need new block\n          in.seek(pendingFP);\n          blockReader.seek(pendingFP);\n          lastBlockFP = pendingFP;\n          blockSize = blockReader.readBlock();\n        }\n        upto = pendingUpto;\n\n        // TODO: if we were more clever when writing the\n        // index, such that a seek point wouldn't be written\n        // until the int encoder \"committed\", we could avoid\n        // this (likely minor) inefficiency:\n\n        // This is necessary for int encoders that are\n        // non-causal, ie must see future int values to\n        // encode the current ones.\n        while(upto >= blockSize) {\n          upto -= blockSize;\n          lastBlockFP = in.getFilePointer();\n          blockSize = blockReader.readBlock();\n        }\n        seekPending = false;\n      }\n    }\n\n","sourceOld":"    private final void maybeSeek() throws IOException {\n      if (seekPending) {\n        if (pendingFP != lastBlockFP) {\n          // need new block\n          in.seek(pendingFP);\n          blockReader.seek(pendingFP);\n          lastBlockFP = pendingFP;\n          blockSize = blockReader.readBlock();\n        }\n        upto = pendingUpto;\n\n        // TODO: if we were more clever when writing the\n        // index, such that a seek point wouldn't be written\n        // until the int encoder \"committed\", we could avoid\n        // this (likely minor) inefficiency:\n\n        // This is necessary for int encoders that are\n        // non-causal, ie must see future int values to\n        // encode the current ones.\n        while(upto >= blockSize) {\n          upto -= blockSize;\n          lastBlockFP = in.getFilePointer();\n          blockSize = blockReader.readBlock();\n        }\n        seekPending = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","sourceNew":null,"sourceOld":"    private final void maybeSeek() throws IOException {\n      if (seekPending) {\n        if (pendingFP != lastBlockFP) {\n          // need new block\n          in.seek(pendingFP);\n          blockReader.seek(pendingFP);\n          lastBlockFP = pendingFP;\n          blockSize = blockReader.readBlock();\n        }\n        upto = pendingUpto;\n\n        // TODO: if we were more clever when writing the\n        // index, such that a seek point wouldn't be written\n        // until the int encoder \"committed\", we could avoid\n        // this (likely minor) inefficiency:\n\n        // This is necessary for int encoders that are\n        // non-causal, ie must see future int values to\n        // encode the current ones.\n        while(upto >= blockSize) {\n          upto -= blockSize;\n          lastBlockFP = in.getFilePointer();\n          blockSize = blockReader.readBlock();\n        }\n        seekPending = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","sourceNew":null,"sourceOld":"    private final void maybeSeek() throws IOException {\n      if (seekPending) {\n        if (pendingFP != lastBlockFP) {\n          // need new block\n          in.seek(pendingFP);\n          blockReader.seek(pendingFP);\n          lastBlockFP = pendingFP;\n          blockSize = blockReader.readBlock();\n        }\n        upto = pendingUpto;\n\n        // TODO: if we were more clever when writing the\n        // index, such that a seek point wouldn't be written\n        // until the int encoder \"committed\", we could avoid\n        // this (likely minor) inefficiency:\n\n        // This is necessary for int encoders that are\n        // non-causal, ie must see future int values to\n        // encode the current ones.\n        while(upto >= blockSize) {\n          upto -= blockSize;\n          lastBlockFP = in.getFilePointer();\n          blockSize = blockReader.readBlock();\n        }\n        seekPending = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}