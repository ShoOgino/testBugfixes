{"path":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#diskIoCheckWithoutNativeIo(File).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#diskIoCheckWithoutNativeIo(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to perform some disk IO by writing to the given file\n   * without using Native IO.\n   *\n   * @param file file to check\n   * @throws IOException if there was a non-retriable error.\n   */\n  private static void diskIoCheckWithoutNativeIo(File file)\n      throws IOException {\n    FileOutputStream fos = null;\n\n    try {\n      final FileIoProvider provider = fileIoProvider.get();\n      fos = provider.get(file);\n      provider.write(fos, new byte[1]);\n      fos.getFD().sync();\n      fos.close();\n      fos = null;\n      if (!file.delete() && file.exists()) {\n        throw new IOException(\"Failed to delete \" + file);\n      }\n      file = null;\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, fos);\n      FileUtils.deleteQuietly(file);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#diskIoCheckWithoutNativeIo(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to perform some disk IO by writing to the given file\n   * without using Native IO.\n   *\n   * @param file file to check\n   * @throws IOException if there was a non-retriable error.\n   */\n  private static void diskIoCheckWithoutNativeIo(File file)\n      throws IOException {\n    FileOutputStream fos = null;\n\n    try {\n      final FileIoProvider provider = fileIoProvider.get();\n      fos = provider.get(file);\n      provider.write(fos, new byte[1]);\n      fos.getFD().sync();\n      fos.close();\n      fos = null;\n      if (!file.delete() && file.exists()) {\n        throw new IOException(\"Failed to delete \" + file);\n      }\n      file = null;\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, fos);\n      FileUtils.deleteQuietly(file);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#diskIoCheckWithoutNativeIo(File).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#diskIoCheckWithoutNativeIo(File).mjava","sourceNew":"  /**\n   * Try to perform some disk IO by writing to the given file\n   * without using Native IO.\n   *\n   * @param file file to check\n   * @throws IOException if there was a non-retriable error.\n   */\n  private static void diskIoCheckWithoutNativeIo(File file)\n      throws IOException {\n    FileOutputStream fos = null;\n\n    try {\n      final FileIoProvider provider = fileIoProvider.get();\n      fos = provider.get(file);\n      provider.write(fos, new byte[1]);\n      fos.getFD().sync();\n      fos.close();\n      fos = null;\n      if (!file.delete() && file.exists()) {\n        throw new IOException(\"Failed to delete \" + file);\n      }\n      file = null;\n    } finally {\n      IOUtils.cleanupWithLogger(log, fos);\n      FileUtils.deleteQuietly(file);\n    }\n  }\n\n","sourceOld":"  /**\n   * Try to perform some disk IO by writing to the given file\n   * without using Native IO.\n   *\n   * @param file file to check\n   * @throws IOException if there was a non-retriable error.\n   */\n  private static void diskIoCheckWithoutNativeIo(File file)\n      throws IOException {\n    FileOutputStream fos = null;\n\n    try {\n      final FileIoProvider provider = fileIoProvider.get();\n      fos = provider.get(file);\n      provider.write(fos, new byte[1]);\n      fos.getFD().sync();\n      fos.close();\n      fos = null;\n      if (!file.delete() && file.exists()) {\n        throw new IOException(\"Failed to delete \" + file);\n      }\n      file = null;\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, fos);\n      FileUtils.deleteQuietly(file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}