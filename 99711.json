{"path":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#createScoredDocIDsSubset(ScoredDocIDs,int[]).mjava","commits":[{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#createScoredDocIDsSubset(ScoredDocIDs,int[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIDsSubset(ScoredDocIDs,int[]).mjava","sourceNew":"  /**\n   * Create a subset of an existing ScoredDocIDs object.\n   * \n   * @param allDocIds orginal set\n   * @param sampleSet Doc Ids of the subset.\n   */\n  public static final ScoredDocIDs createScoredDocIDsSubset(final ScoredDocIDs allDocIds,\n      final int[] sampleSet) throws IOException {\n\n    // sort so that we can scan docs in order\n    final int[] docids = sampleSet;\n    Arrays.sort(docids);\n    final float[] scores = new float[docids.length];\n    // fetch scores and compute size\n    ScoredDocIDsIterator it = allDocIds.iterator();\n    int n = 0;\n    while (it.next() && n < docids.length) {\n      int doc = it.getDocID();\n      if (doc == docids[n]) {\n        scores[n] = it.getScore();\n        ++n;\n      }\n    }\n    final int size = n;\n\n    return new ScoredDocIDs() {\n\n      @Override\n      public DocIdSet getDocIDs() {\n        return new DocIdSet() {\n\n          @Override\n          public boolean isCacheable() { return true; }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              private int next = -1;\n\n              @Override\n              public int advance(int target) {\n                while (next < size && docids[next++] < target) {\n                }\n                return next == size ? NO_MORE_DOCS : docids[next];\n              }\n\n              @Override\n              public int docID() {\n                return docids[next];\n              }\n\n              @Override\n              public int nextDoc() {\n                if (++next >= size) {\n                  return NO_MORE_DOCS;\n                }\n                return docids[next];\n              }\n\n              @Override\n              public long cost() {\n                return size;\n              }\n            };\n          }\n        };\n      }\n\n      @Override\n      public ScoredDocIDsIterator iterator() {\n        return new ScoredDocIDsIterator() {\n\n          int next = -1;\n\n          @Override\n          public boolean next() { return ++next < size; }\n\n          @Override\n          public float getScore() { return scores[next]; }\n\n          @Override\n          public int getDocID() { return docids[next]; }\n        };\n      }\n\n      @Override\n      public int size() { return size; }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a subset of an existing ScoredDocIDs object.\n   * \n   * @param allDocIds orginal set\n   * @param sampleSet Doc Ids of the subset.\n   */\n  public static final ScoredDocIDs createScoredDocIDsSubset(final ScoredDocIDs allDocIds,\n      final int[] sampleSet) throws IOException {\n\n    // sort so that we can scan docs in order\n    final int[] docids = sampleSet;\n    Arrays.sort(docids);\n    final float[] scores = new float[docids.length];\n    // fetch scores and compute size\n    ScoredDocIDsIterator it = allDocIds.iterator();\n    int n = 0;\n    while (it.next() && n < docids.length) {\n      int doc = it.getDocID();\n      if (doc == docids[n]) {\n        scores[n] = it.getScore();\n        ++n;\n      }\n    }\n    final int size = n;\n\n    return new ScoredDocIDs() {\n\n      @Override\n      public DocIdSet getDocIDs() {\n        return new DocIdSet() {\n\n          @Override\n          public boolean isCacheable() { return true; }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              private int next = -1;\n\n              @Override\n              public int advance(int target) {\n                while (next < size && docids[next++] < target) {\n                }\n                return next == size ? NO_MORE_DOCS : docids[next];\n              }\n\n              @Override\n              public int docID() {\n                return docids[next];\n              }\n\n              @Override\n              public int nextDoc() {\n                if (++next >= size) {\n                  return NO_MORE_DOCS;\n                }\n                return docids[next];\n              }\n\n              @Override\n              public long cost() {\n                return size;\n              }\n            };\n          }\n        };\n      }\n\n      @Override\n      public ScoredDocIDsIterator iterator() {\n        return new ScoredDocIDsIterator() {\n\n          int next = -1;\n\n          @Override\n          public boolean next() { return ++next < size; }\n\n          @Override\n          public float getScore() { return scores[next]; }\n\n          @Override\n          public int getDocID() { return docids[next]; }\n        };\n      }\n\n      @Override\n      public int size() { return size; }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#createScoredDocIDsSubset(ScoredDocIDs,int[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIDsSubset(ScoredDocIDs,int[]).mjava","sourceNew":"  /**\n   * Create a subset of an existing ScoredDocIDs object.\n   * \n   * @param allDocIds orginal set\n   * @param sampleSet Doc Ids of the subset.\n   */\n  public static final ScoredDocIDs createScoredDocIDsSubset(final ScoredDocIDs allDocIds,\n      final int[] sampleSet) throws IOException {\n\n    // sort so that we can scan docs in order\n    final int[] docids = sampleSet;\n    Arrays.sort(docids);\n    final float[] scores = new float[docids.length];\n    // fetch scores and compute size\n    ScoredDocIDsIterator it = allDocIds.iterator();\n    int n = 0;\n    while (it.next() && n < docids.length) {\n      int doc = it.getDocID();\n      if (doc == docids[n]) {\n        scores[n] = it.getScore();\n        ++n;\n      }\n    }\n    final int size = n;\n\n    return new ScoredDocIDs() {\n\n      @Override\n      public DocIdSet getDocIDs() {\n        return new DocIdSet() {\n\n          @Override\n          public boolean isCacheable() { return true; }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              private int next = -1;\n\n              @Override\n              public int advance(int target) {\n                while (next < size && docids[next++] < target) {\n                }\n                return next == size ? NO_MORE_DOCS : docids[next];\n              }\n\n              @Override\n              public int docID() {\n                return docids[next];\n              }\n\n              @Override\n              public int nextDoc() {\n                if (++next >= size) {\n                  return NO_MORE_DOCS;\n                }\n                return docids[next];\n              }\n\n              @Override\n              public long cost() {\n                return size;\n              }\n            };\n          }\n        };\n      }\n\n      @Override\n      public ScoredDocIDsIterator iterator() {\n        return new ScoredDocIDsIterator() {\n\n          int next = -1;\n\n          @Override\n          public boolean next() { return ++next < size; }\n\n          @Override\n          public float getScore() { return scores[next]; }\n\n          @Override\n          public int getDocID() { return docids[next]; }\n        };\n      }\n\n      @Override\n      public int size() { return size; }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a subset of an existing ScoredDocIDs object.\n   * \n   * @param allDocIds orginal set\n   * @param sampleSet Doc Ids of the subset.\n   */\n  public static final ScoredDocIDs createScoredDocIDsSubset(final ScoredDocIDs allDocIds,\n      final int[] sampleSet) throws IOException {\n\n    // sort so that we can scan docs in order\n    final int[] docids = sampleSet;\n    Arrays.sort(docids);\n    final float[] scores = new float[docids.length];\n    // fetch scores and compute size\n    ScoredDocIDsIterator it = allDocIds.iterator();\n    int n = 0;\n    while (it.next() && n < docids.length) {\n      int doc = it.getDocID();\n      if (doc == docids[n]) {\n        scores[n] = it.getScore();\n        ++n;\n      }\n    }\n    final int size = n;\n\n    return new ScoredDocIDs() {\n\n      @Override\n      public DocIdSet getDocIDs() {\n        return new DocIdSet() {\n\n          @Override\n          public boolean isCacheable() { return true; }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              private int next = -1;\n\n              @Override\n              public int advance(int target) {\n                while (next < size && docids[next++] < target) {\n                }\n                return next == size ? NO_MORE_DOCS : docids[next];\n              }\n\n              @Override\n              public int docID() {\n                return docids[next];\n              }\n\n              @Override\n              public int nextDoc() {\n                if (++next >= size) {\n                  return NO_MORE_DOCS;\n                }\n                return docids[next];\n              }\n\n              @Override\n              public long cost() {\n                return size;\n              }\n            };\n          }\n        };\n      }\n\n      @Override\n      public ScoredDocIDsIterator iterator() {\n        return new ScoredDocIDsIterator() {\n\n          int next = -1;\n\n          @Override\n          public boolean next() { return ++next < size; }\n\n          @Override\n          public float getScore() { return scores[next]; }\n\n          @Override\n          public int getDocID() { return docids[next]; }\n        };\n      }\n\n      @Override\n      public int size() { return size; }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#createScoredDocIDsSubset(ScoredDocIDs,int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a subset of an existing ScoredDocIDs object.\n   * \n   * @param allDocIds orginal set\n   * @param sampleSet Doc Ids of the subset.\n   */\n  public static final ScoredDocIDs createScoredDocIDsSubset(final ScoredDocIDs allDocIds,\n      final int[] sampleSet) throws IOException {\n\n    // sort so that we can scan docs in order\n    final int[] docids = sampleSet;\n    Arrays.sort(docids);\n    final float[] scores = new float[docids.length];\n    // fetch scores and compute size\n    ScoredDocIDsIterator it = allDocIds.iterator();\n    int n = 0;\n    while (it.next() && n < docids.length) {\n      int doc = it.getDocID();\n      if (doc == docids[n]) {\n        scores[n] = it.getScore();\n        ++n;\n      }\n    }\n    final int size = n;\n\n    return new ScoredDocIDs() {\n\n      @Override\n      public DocIdSet getDocIDs() {\n        return new DocIdSet() {\n\n          @Override\n          public boolean isCacheable() { return true; }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              private int next = -1;\n\n              @Override\n              public int advance(int target) {\n                while (next < size && docids[next++] < target) {\n                }\n                return next == size ? NO_MORE_DOCS : docids[next];\n              }\n\n              @Override\n              public int docID() {\n                return docids[next];\n              }\n\n              @Override\n              public int nextDoc() {\n                if (++next >= size) {\n                  return NO_MORE_DOCS;\n                }\n                return docids[next];\n              }\n\n              @Override\n              public long cost() {\n                return size;\n              }\n            };\n          }\n        };\n      }\n\n      @Override\n      public ScoredDocIDsIterator iterator() {\n        return new ScoredDocIDsIterator() {\n\n          int next = -1;\n\n          @Override\n          public boolean next() { return ++next < size; }\n\n          @Override\n          public float getScore() { return scores[next]; }\n\n          @Override\n          public int getDocID() { return docids[next]; }\n        };\n      }\n\n      @Override\n      public int size() { return size; }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#createScoredDocIDsSubset(ScoredDocIDs,int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a subset of an existing ScoredDocIDs object.\n   * \n   * @param allDocIds orginal set\n   * @param sampleSet Doc Ids of the subset.\n   */\n  public static final ScoredDocIDs createScoredDocIDsSubset(final ScoredDocIDs allDocIds,\n      final int[] sampleSet) throws IOException {\n\n    // sort so that we can scan docs in order\n    final int[] docids = sampleSet;\n    Arrays.sort(docids);\n    final float[] scores = new float[docids.length];\n    // fetch scores and compute size\n    ScoredDocIDsIterator it = allDocIds.iterator();\n    int n = 0;\n    while (it.next() && n < docids.length) {\n      int doc = it.getDocID();\n      if (doc == docids[n]) {\n        scores[n] = it.getScore();\n        ++n;\n      }\n    }\n    final int size = n;\n\n    return new ScoredDocIDs() {\n\n      @Override\n      public DocIdSet getDocIDs() {\n        return new DocIdSet() {\n\n          @Override\n          public boolean isCacheable() { return true; }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              private int next = -1;\n\n              @Override\n              public int advance(int target) {\n                while (next < size && docids[next++] < target) {\n                }\n                return next == size ? NO_MORE_DOCS : docids[next];\n              }\n\n              @Override\n              public int docID() {\n                return docids[next];\n              }\n\n              @Override\n              public int nextDoc() {\n                if (++next >= size) {\n                  return NO_MORE_DOCS;\n                }\n                return docids[next];\n              }\n\n              @Override\n              public long cost() {\n                return size;\n              }\n            };\n          }\n        };\n      }\n\n      @Override\n      public ScoredDocIDsIterator iterator() {\n        return new ScoredDocIDsIterator() {\n\n          int next = -1;\n\n          @Override\n          public boolean next() { return ++next < size; }\n\n          @Override\n          public float getScore() { return scores[next]; }\n\n          @Override\n          public int getDocID() { return docids[next]; }\n        };\n      }\n\n      @Override\n      public int size() { return size; }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}