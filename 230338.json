{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e38f40562eb7c165ae08ab2367a031883138354","date":1340287338,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      updateStallState();\n      assert assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":["18e20fa02735869173a20f36b8bfb855be5e5a13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      updateStallState();\n      assert assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18e20fa02735869173a20f36b8bfb855be5e5a13","date":1353071141,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      updateStallState();\n      assert assertMemory();\n    }\n  }\n\n","bugFix":["32f306edd62f81390a6e263e8b913f089f3e98a1","5e38f40562eb7c165ae08ab2367a031883138354"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      updateStallState();\n      assert assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122251c49e5a9fa95f056ea257ae3ab452099fc7","date":1464820065,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n        flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n        flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n        flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n        flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n        flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4be95c403f45330d2a078afc9b6fab4515c8ce","date":1512064647,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      return checkout(perThread, false);\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n        flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      return checkout(perThread, false);\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n        flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(DocumentsWriterPerThread perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.isFlushPending()) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.isFlushPending() && perThread.bytesUsed() > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      return checkout(perThread, false);\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread, boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      return checkout(perThread, false);\n    } finally {\n      boolean stalled = updateStallState();\n      assert assertNumDocsSinceStalled(stalled) && assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"5e38f40562eb7c165ae08ab2367a031883138354":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"407687e67faf6e1f02a211ca078d8e3eed631027":["5e38f40562eb7c165ae08ab2367a031883138354","18e20fa02735869173a20f36b8bfb855be5e5a13"],"6483e4260c08168709c02238ae083a51519a28dd":["18e20fa02735869173a20f36b8bfb855be5e5a13","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"191128ac5b85671b1671e2c857437694283b6ebf":["18e20fa02735869173a20f36b8bfb855be5e5a13","6483e4260c08168709c02238ae083a51519a28dd"],"ad4be95c403f45330d2a078afc9b6fab4515c8ce":["191128ac5b85671b1671e2c857437694283b6ebf"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["f492fe129985750df09c8dac738aecc503158bb3","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["18e20fa02735869173a20f36b8bfb855be5e5a13","191128ac5b85671b1671e2c857437694283b6ebf"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["191128ac5b85671b1671e2c857437694283b6ebf","ad4be95c403f45330d2a078afc9b6fab4515c8ce"],"18e20fa02735869173a20f36b8bfb855be5e5a13":["5e38f40562eb7c165ae08ab2367a031883138354"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5e38f40562eb7c165ae08ab2367a031883138354"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["18e20fa02735869173a20f36b8bfb855be5e5a13"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["f492fe129985750df09c8dac738aecc503158bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e38f40562eb7c165ae08ab2367a031883138354":["407687e67faf6e1f02a211ca078d8e3eed631027","18e20fa02735869173a20f36b8bfb855be5e5a13","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5e38f40562eb7c165ae08ab2367a031883138354","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["ad4be95c403f45330d2a078afc9b6fab4515c8ce","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1aad05eeff7818b0833c02ac6b743aa72054963b"],"ad4be95c403f45330d2a078afc9b6fab4515c8ce":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1aad05eeff7818b0833c02ac6b743aa72054963b":["264935965977b4a9e2f3920420647072c9c49176"],"18e20fa02735869173a20f36b8bfb855be5e5a13":["407687e67faf6e1f02a211ca078d8e3eed631027","6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}