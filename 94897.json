{"path":"lucene/core/src/java/org/apache/lucene/document/XYPointInGeometryQuery#getIntersectVisitor(DocIdSetBuilder,Component2D).mjava","commits":[{"id":"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04","date":1582280790,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/XYPointInGeometryQuery#getIntersectVisitor(DocIdSetBuilder,Component2D).mjava","pathOld":"/dev/null","sourceNew":"  private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result, Component2D tree) {\n    return new IntersectVisitor() {\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            double x = XYEncodingUtils.decode(packedValue, 0);\n            double y = XYEncodingUtils.decode(packedValue, Integer.BYTES);\n            if (tree.contains(x, y)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            double x = XYEncodingUtils.decode(packedValue, 0);\n            double y = XYEncodingUtils.decode(packedValue, Integer.BYTES);\n            if (tree.contains(x, y)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            double cellMinX = XYEncodingUtils.decode(minPackedValue, 0);\n            double cellMinY = XYEncodingUtils.decode(minPackedValue, Integer.BYTES);\n            double cellMaxX = XYEncodingUtils.decode(maxPackedValue, 0);\n            double cellMaxY = XYEncodingUtils.decode(maxPackedValue, Integer.BYTES);\n            return tree.relate(cellMinX, cellMaxX, cellMinY, cellMaxY);\n          }\n        };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}