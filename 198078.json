{"path":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(SlowCompositeReaderWrapper.wrap(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(SlowCompositeReaderWrapper.wrap(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe7983d6bf72dab9492a1bb04070f4b986bcc247","date":1329829429,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // TODO: wrap in a better way\n        writer.addIndexes(newSearcher(open).getIndexReader());\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(SlowCompositeReaderWrapper.wrap(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6c939a28130e1107d4e349d6c10d1a92c489662","date":1330299480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(IndexReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // TODO: wrap in a better way\n        writer.addIndexes(newSearcher(open).getIndexReader());\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(IndexReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(SlowCompositeReaderWrapper.wrap(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(IndexReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(IndexReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(IndexReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    Type[] sourceType = new Type[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, sourceType, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, sourceType, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values, sourceType);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    Type[] sourceType = new Type[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, sourceType, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, sourceType, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values, sourceType);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    Type[] sourceType = new Type[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, sourceType, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, sourceType, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values, sourceType);\n    dir.close();\n  }\n\n","bugFix":["ff266254aa2c0b84006f8f3088ee25337661554d","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    Type[] sourceType = new Type[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, sourceType, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, sourceType, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values, sourceType);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    Type[] sourceType = new Type[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, sourceType, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, sourceType, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values, sourceType);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":null,"sourceOld":"  private void runTest(EnumSet<Type> types, TestType type) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    Type[] sourceType = new Type[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, sourceType, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, sourceType, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values, sourceType);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":null,"sourceOld":"  private void runTest(EnumSet<Type> types, TestType type) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    Type[] sourceType = new Type[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random()), values, sourceType, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random()), values, sourceType, num_1, num_2);\n    writer.commit();\n    \n    if (random().nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      index(writer_2,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = maybeWrapReader(DirectoryReader.open(dir_2));\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random()), values, sourceType, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values, sourceType);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d6c939a28130e1107d4e349d6c10d1a92c489662"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"fe7983d6bf72dab9492a1bb04070f4b986bcc247":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","6e2893fd5349134af382d33ccc3d84840394c6c1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["fe7983d6bf72dab9492a1bb04070f4b986bcc247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6e2893fd5349134af382d33ccc3d84840394c6c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe7983d6bf72dab9492a1bb04070f4b986bcc247"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe7983d6bf72dab9492a1bb04070f4b986bcc247":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["6e2893fd5349134af382d33ccc3d84840394c6c1","d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}