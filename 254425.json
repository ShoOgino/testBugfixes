{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","commits":[{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eacdba691ec9e0ff24c589e65a852b9915265e6","date":1508917488,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(() -> {\n              keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n              return null;\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n\n      CreateMode mode = CreateMode.PERSISTENT;\n      if (i == paths.length - 1) {\n        mode = createMode;\n        bytes = data;\n        if (!retryOnConnLoss) retry = false;\n      }\n      try {\n        if (retry) {\n          final CreateMode finalMode = mode;\n          final byte[] finalBytes = bytes;\n          zkCmdExecutor.retryOperation(() -> {\n            keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n            return null;\n          });\n        } else {\n          keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n        }\n      } catch (NoAuthException e) {\n        // in auth cases, we may not have permission for an earlier part of a path, which is fine\n        if (i == paths.length - 1 || !exists(currentPath, retryOnConnLoss)) {\n \n          throw e;\n        }\n      } catch (NodeExistsException e) {\n\n        if (!failOnExists && i == paths.length - 1) {\n          // TODO: version ? for now, don't worry about race\n          setData(currentPath, data, -1, retryOnConnLoss);\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n          return;\n        }\n\n        // ignore unless it's the last node in the path\n        if (i == paths.length - 1) {\n          throw e;\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(() -> {\n              keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n              return null;\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":["1eacdba691ec9e0ff24c589e65a852b9915265e6","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n\n      CreateMode mode = CreateMode.PERSISTENT;\n      if (i == paths.length - 1) {\n        mode = createMode;\n        bytes = data;\n        if (!retryOnConnLoss) retry = false;\n      }\n      try {\n        if (retry) {\n          final CreateMode finalMode = mode;\n          final byte[] finalBytes = bytes;\n          zkCmdExecutor.retryOperation(() -> {\n            keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n            return null;\n          });\n        } else {\n          keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n        }\n      } catch (NoAuthException e) {\n        // in auth cases, we may not have permission for an earlier part of a path, which is fine\n        if (i == paths.length - 1 || !exists(currentPath, retryOnConnLoss)) {\n\n          throw e;\n        }\n      } catch (NodeExistsException e) {\n\n        if (!failOnExists && i == paths.length - 1) {\n          // TODO: version ? for now, don't worry about race\n          setData(currentPath, data, -1, retryOnConnLoss);\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n          return;\n        }\n\n        // ignore unless it's the last node in the path\n        if (i == paths.length - 1) {\n          throw e;\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n\n      CreateMode mode = CreateMode.PERSISTENT;\n      if (i == paths.length - 1) {\n        mode = createMode;\n        bytes = data;\n        if (!retryOnConnLoss) retry = false;\n      }\n      try {\n        if (retry) {\n          final CreateMode finalMode = mode;\n          final byte[] finalBytes = bytes;\n          zkCmdExecutor.retryOperation(() -> {\n            keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n            return null;\n          });\n        } else {\n          keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n        }\n      } catch (NoAuthException e) {\n        // in auth cases, we may not have permission for an earlier part of a path, which is fine\n        if (i == paths.length - 1 || !exists(currentPath, retryOnConnLoss)) {\n \n          throw e;\n        }\n      } catch (NodeExistsException e) {\n\n        if (!failOnExists && i == paths.length - 1) {\n          // TODO: version ? for now, don't worry about race\n          setData(currentPath, data, -1, retryOnConnLoss);\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n          return;\n        }\n\n        // ignore unless it's the last node in the path\n        if (i == paths.length - 1) {\n          throw e;\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\").append(pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n\n      CreateMode mode = CreateMode.PERSISTENT;\n      if (i == paths.length - 1) {\n        mode = createMode;\n        bytes = data;\n        if (!retryOnConnLoss) retry = false;\n      }\n      try {\n        if (retry) {\n          final CreateMode finalMode = mode;\n          final byte[] finalBytes = bytes;\n          zkCmdExecutor.retryOperation(() -> {\n            keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n            return null;\n          });\n        } else {\n          keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n        }\n      } catch (NoAuthException e) {\n        // in auth cases, we may not have permission for an earlier part of a path, which is fine\n        if (i == paths.length - 1 || !exists(currentPath, retryOnConnLoss)) {\n\n          throw e;\n        }\n      } catch (NodeExistsException e) {\n\n        if (!failOnExists && i == paths.length - 1) {\n          // TODO: version ? for now, don't worry about race\n          setData(currentPath, data, -1, retryOnConnLoss);\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n          return;\n        }\n\n        // ignore unless it's the last node in the path\n        if (i == paths.length - 1) {\n          throw e;\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * skipPathParts will force the call to fail if the first skipPathParts do not exist already.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss, int skipPathParts) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      if (i < skipPathParts) {\n        continue;\n      }\n      byte[] bytes = null;\n      final String currentPath = sbPath.toString();\n\n      CreateMode mode = CreateMode.PERSISTENT;\n      if (i == paths.length - 1) {\n        mode = createMode;\n        bytes = data;\n        if (!retryOnConnLoss) retry = false;\n      }\n      try {\n        if (retry) {\n          final CreateMode finalMode = mode;\n          final byte[] finalBytes = bytes;\n          zkCmdExecutor.retryOperation(() -> {\n            keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n            return null;\n          });\n        } else {\n          keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n        }\n      } catch (NoAuthException e) {\n        // in auth cases, we may not have permission for an earlier part of a path, which is fine\n        if (i == paths.length - 1 || !exists(currentPath, retryOnConnLoss)) {\n\n          throw e;\n        }\n      } catch (NodeExistsException e) {\n\n        if (!failOnExists && i == paths.length - 1) {\n          // TODO: version ? for now, don't worry about race\n          setData(currentPath, data, -1, retryOnConnLoss);\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n          return;\n        }\n\n        // ignore unless it's the last node in the path\n        if (i == paths.length - 1) {\n          throw e;\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1eacdba691ec9e0ff24c589e65a852b9915265e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["1eacdba691ec9e0ff24c589e65a852b9915265e6","9856095f7afb5a607bf5e65077615ed91273508c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["2ffe681f212e5073c69955b4ad22946794c84940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}