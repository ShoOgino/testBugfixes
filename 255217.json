{"path":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LATEST, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        Path file = Paths.get(args[i]);\n        if (!Files.isDirectory(file)) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(file);\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    Path out = Paths.get(outDir);\n    Files.createDirectories(out);\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(out.resolve(\"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LATEST, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LATEST, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        Path file = Paths.get(args[i]);\n        if (!Files.isDirectory(file)) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(file);\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    Path out = Paths.get(outDir);\n    Files.createDirectories(out);\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(out.resolve(\"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        Path file = Paths.get(args[i]);\n        if (!Files.isDirectory(file)) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(file);\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    Path out = Paths.get(outDir);\n    Files.createDirectories(out);\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(out.resolve(\"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LATEST, input, dirs, seq);\n  }\n\n","bugFix":["057a1793765d068ea9302f1a29e21734ee58d41e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["057a1793765d068ea9302f1a29e21734ee58d41e"],"057a1793765d068ea9302f1a29e21734ee58d41e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["505bff044e47a553f461b6f4484d1d08faf4ac85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["057a1793765d068ea9302f1a29e21734ee58d41e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"057a1793765d068ea9302f1a29e21734ee58d41e":["f4abec28b874149a7223e32cc7a01704c27790de"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}