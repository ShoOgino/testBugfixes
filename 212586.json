{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","pathOld":"/dev/null","sourceNew":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    DocsEnum docsEnum = termsEnum.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","sourceNew":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    DocsEnum docsEnum = termsEnum.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","sourceNew":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","sourceNew":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","sourceNew":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, PostingsEnum.NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testDidntWantFreqsButAskedAnyway().mjava","sourceNew":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, PostingsEnum.NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDidntWantFreqsButAskedAnyway() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, PostingsEnum.NONE);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}