{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (setPending && !perThread.flushPending) {\n      setFlushPending(perThread);\n    }\n    if (perThread.flushPending) {\n      // we are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.perThreadBytes; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            numFlushing++;\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (fullFlush)\n      return null;\n    return internalTryCheckOutForFlush(perThread, setPending);\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (setPending && !perThread.flushPending) {\n      setFlushPending(perThread);\n    }\n    if (perThread.flushPending) {\n      // we are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.perThreadBytes; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            numFlushing++;\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (fullFlush) {\n      return null;\n    }\n    return internalTryCheckOutForFlush(perThread, setPending);\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (fullFlush)\n      return null;\n    return internalTryCheckOutForFlush(perThread, setPending);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (fullFlush) {\n      return null;\n    }\n    return internalTryCheckOutForFlush(perThread, setPending);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (fullFlush) {\n      return null;\n    }\n    return internalTryCheckOutForFlush(perThread, setPending);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ab0e311d00c794eac70d67151d50cbb45ff810b","date":1304664391,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread) {\n    if (fullFlush) {\n      return null;\n    }\n    return internalTryCheckOutForFlush(perThread);\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (fullFlush) {\n      return null;\n    }\n    return internalTryCheckOutForFlush(perThread, setPending);\n  }\n\n","bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1","32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#tryCheckoutForFlush(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread) {\n    if (fullFlush) {\n      return null;\n    }\n    return internalTryCheckOutForFlush(perThread);\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread tryCheckoutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (fullFlush) {\n      return null;\n    }\n    return internalTryCheckOutForFlush(perThread, setPending);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f4cae61e16730201371ab7e9912721c19324e7"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"f6f4cae61e16730201371ab7e9912721c19324e7":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ab0e311d00c794eac70d67151d50cbb45ff810b"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["f6f4cae61e16730201371ab7e9912721c19324e7"],"f6f4cae61e16730201371ab7e9912721c19324e7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}