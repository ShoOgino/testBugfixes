{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","commits":[{"id":"cea5f7a2e31566bda38c740c37affa52b0e9c46e","date":1323436632,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValuedFields() {\n    String[][][] docs = new String[1][2][2];\n    String[][] doc = new String[][] { {\"id\", \"1\"}, {\"multi\", \"multi1\"},\n        {\"multi\", \"multi2\"}, {\"multi\", \"multi3\"}};\n    docs[0] = doc;\n    \n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    \n    Map<String,Object> next = processor.nextRow();\n    assertNotNull(next);\n    assertEquals(doc[0][1], next.get(doc[0][0]));\n    \n    String[] multiValued = {\"multi1\", \"multi2\", \"multi3\"};\n    assertEquals(Arrays.asList(multiValued), next.get(doc[1][0]));\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValuedFields() {\n    String[][][] docs = new String[1][2][2];\n    String[][] doc = new String[][] { {\"id\", \"1\"}, {\"multi\", \"multi1\"},\n        {\"multi\", \"multi2\"}, {\"multi\", \"multi3\"}};\n    docs[0] = doc;\n    \n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    \n    Map<String,Object> next = processor.nextRow();\n    assertNotNull(next);\n    assertEquals(doc[0][1], next.get(doc[0][0]));\n    \n    String[] multiValued = {\"multi1\", \"multi2\", \"multi3\"};\n    assertEquals(Arrays.asList(multiValued), next.get(doc[1][0]));\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8","date":1324129595,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","sourceNew":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<Doc>();\n    List<FldType> types = new ArrayList<FldType>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    Map<String, Object> next = processor.nextRow();\n    assertNotNull(next);\n\n    @SuppressWarnings(\"unchecked\")\n    List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n    assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n    assertEquals(testDoc.getValues(\"description\"), multiField);\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n  }\n\n","sourceOld":"  public void testMultiValuedFields() {\n    String[][][] docs = new String[1][2][2];\n    String[][] doc = new String[][] { {\"id\", \"1\"}, {\"multi\", \"multi1\"},\n        {\"multi\", \"multi2\"}, {\"multi\", \"multi3\"}};\n    docs[0] = doc;\n    \n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    \n    Map<String,Object> next = processor.nextRow();\n    assertNotNull(next);\n    assertEquals(doc[0][1], next.get(doc[0][0]));\n    \n    String[] multiValued = {\"multi1\", \"multi2\", \"multi3\"};\n    assertEquals(Arrays.asList(multiValued), next.get(doc[1][0]));\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n    \n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","sourceNew":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<>();\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    Map<String, Object> next = processor.nextRow();\n    assertNotNull(next);\n\n    @SuppressWarnings(\"unchecked\")\n    List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n    assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n    assertEquals(testDoc.getValues(\"description\"), multiField);\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n  }\n\n","sourceOld":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<Doc>();\n    List<FldType> types = new ArrayList<FldType>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    Map<String, Object> next = processor.nextRow();\n    assertNotNull(next);\n\n    @SuppressWarnings(\"unchecked\")\n    List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n    assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n    assertEquals(testDoc.getValues(\"description\"), multiField);\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ae7b4adfa274da5f5fdc865e127928b25e5e929","date":1417607786,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","sourceNew":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<>();\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n    Map<String, Object> next = processor.nextRow();\n    assertNotNull(next);\n\n    @SuppressWarnings(\"unchecked\")\n    List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n    assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n    assertEquals(testDoc.getValues(\"description\"), multiField);\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n  }\n\n","sourceOld":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<>();\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    Map<String, Object> next = processor.nextRow();\n    assertNotNull(next);\n\n    @SuppressWarnings(\"unchecked\")\n    List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n    assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n    assertEquals(testDoc.getValues(\"description\"), multiField);\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","sourceNew":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<>();\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n    try {\n      Map<String, Object> next = processor.nextRow();\n      assertNotNull(next);\n  \n      @SuppressWarnings(\"unchecked\")\n      List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n      assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n      assertEquals(testDoc.getValues(\"description\"), multiField);\n      assertEquals(1, processor.getQueryCount());\n      assertNull(processor.nextRow());\n    } finally {\n      processor.destroy();\n    }\n  }\n\n","sourceOld":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<>();\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n    Map<String, Object> next = processor.nextRow();\n    assertNotNull(next);\n\n    @SuppressWarnings(\"unchecked\")\n    List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n    assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n    assertEquals(testDoc.getValues(\"description\"), multiField);\n    assertEquals(1, processor.getQueryCount());\n    assertNull(processor.nextRow());\n  }\n\n","bugFix":["cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8","cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","sourceNew":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<>();\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n    try {\n      Map<String, Object> next = processor.nextRow();\n      assertNotNull(next);\n  \n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n      assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n      assertEquals(testDoc.getValues(\"description\"), multiField);\n      assertEquals(1, processor.getQueryCount());\n      assertNull(processor.nextRow());\n    } finally {\n      processor.destroy();\n    }\n  }\n\n","sourceOld":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<>();\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n    try {\n      Map<String, Object> next = processor.nextRow();\n      assertNotNull(next);\n  \n      @SuppressWarnings(\"unchecked\")\n      List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n      assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n      assertEquals(testDoc.getValues(\"description\"), multiField);\n      assertEquals(1, processor.getQueryCount());\n      assertNull(processor.nextRow());\n    } finally {\n      processor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testMultiValuedFields().mjava","sourceNew":null,"sourceOld":"  public void testMultiValuedFields() {\n    List<Doc> docs = new ArrayList<>();\n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(ID, ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"description\", new IRange(3, 3), new SVal('a', 'c', 1, 1)));\n    Doc testDoc = createDoc(types);\n    docs.add(testDoc);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n    try {\n      Map<String, Object> next = processor.nextRow();\n      assertNotNull(next);\n  \n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Comparable> multiField = (List<Comparable>) next.get(\"description\");\n      assertEquals(testDoc.getValues(\"description\").size(), multiField.size());\n      assertEquals(testDoc.getValues(\"description\"), multiField);\n      assertEquals(1, processor.getQueryCount());\n      assertNull(processor.nextRow());\n    } finally {\n      processor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8":["cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}