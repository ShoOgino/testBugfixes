{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","commits":[{"id":"8293bb9f086fce9590482de97de6eac8381ae15a","date":1432275970,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    super.configure(httpClient, config);\n\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        httpClient.getAuthSchemes().register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false));\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, useJaasCreds);\n\n        httpClient.addRequestInterceptor(bufferedEntityInterceptor);\n      } else {\n        httpClient.getCredentialsProvider().clear();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bed69539094d32ae1a547f25e6bef5e6bc2ded2e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bed69539094d32ae1a547f25e6bef5e6bc2ded2e","date":1440633764,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    super.configure(httpClient, config);\n\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n        AuthSchemeRegistry registry = new AuthSchemeRegistry();\n        registry.register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false));\n        httpClient.setAuthSchemes(registry);\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, useJaasCreds);\n\n        httpClient.addRequestInterceptor(bufferedEntityInterceptor);\n      } else {\n        httpClient.getCredentialsProvider().clear();\n      }\n    }\n  }\n\n","sourceOld":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    super.configure(httpClient, config);\n\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        httpClient.getAuthSchemes().register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false));\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, useJaasCreds);\n\n        httpClient.addRequestInterceptor(bufferedEntityInterceptor);\n      } else {\n        httpClient.getCredentialsProvider().clear();\n      }\n    }\n  }\n\n","bugFix":["8293bb9f086fce9590482de97de6eac8381ae15a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d8478e1507f625c01f80a2f9f6dccd426a95708","date":1449667316,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    super.configure(httpClient, config);\n\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n        AuthSchemeRegistry registry = new AuthSchemeRegistry();\n        registry.register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false));\n        httpClient.setAuthSchemes(registry);\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n        httpClient.getCookieSpecs().register(cookieFactory.POLICY_NAME, cookieFactory);\n        httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, cookieFactory.POLICY_NAME);\n        \n        httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, useJaasCreds);\n\n        httpClient.addRequestInterceptor(bufferedEntityInterceptor);\n      } else {\n        httpClient.getCredentialsProvider().clear();\n      }\n    }\n  }\n\n","sourceOld":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    super.configure(httpClient, config);\n\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n        AuthSchemeRegistry registry = new AuthSchemeRegistry();\n        registry.register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false));\n        httpClient.setAuthSchemes(registry);\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, useJaasCreds);\n\n        httpClient.addRequestInterceptor(bufferedEntityInterceptor);\n      } else {\n        httpClient.getCredentialsProvider().clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n                .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))                \n                .build();\n            return authProviders;\n          }\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(new CookieSpecRegistryProvider() {\n          @Override\n          public Lookup<CookieSpecProvider> getCookieSpecRegistry() {\n            SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n            Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n                .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n            return cookieRegistry;\n          }\n        });\n        \n        builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n            return credentialsProvider;\n          }\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","sourceOld":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    super.configure(httpClient, config);\n\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n        AuthSchemeRegistry registry = new AuthSchemeRegistry();\n        registry.register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false));\n        httpClient.setAuthSchemes(registry);\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n        httpClient.getCookieSpecs().register(cookieFactory.POLICY_NAME, cookieFactory);\n        httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, cookieFactory.POLICY_NAME);\n        \n        httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, useJaasCreds);\n\n        httpClient.addRequestInterceptor(bufferedEntityInterceptor);\n      } else {\n        httpClient.getCredentialsProvider().clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bed69539094d32ae1a547f25e6bef5e6bc2ded2e":["8293bb9f086fce9590482de97de6eac8381ae15a"],"859081acf00749f5dd462772c571d611d4a4d2db":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8293bb9f086fce9590482de97de6eac8381ae15a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d8478e1507f625c01f80a2f9f6dccd426a95708":["bed69539094d32ae1a547f25e6bef5e6bc2ded2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"bed69539094d32ae1a547f25e6bef5e6bc2ded2e":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8293bb9f086fce9590482de97de6eac8381ae15a"],"8293bb9f086fce9590482de97de6eac8381ae15a":["bed69539094d32ae1a547f25e6bef5e6bc2ded2e"],"5d8478e1507f625c01f80a2f9f6dccd426a95708":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}