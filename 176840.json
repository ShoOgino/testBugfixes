{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,Collection[BulkScorer],int,boolean).mjava","commits":[{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,Collection[BulkScorer],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,boolean,int,Collection[BulkScorer],int,boolean).mjava","sourceNew":"  BooleanScorer(BooleanWeight weight, Collection<BulkScorer> scorers, int minShouldMatch, boolean needsScores) {\n    if (minShouldMatch < 1 || minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be within 1..num_scorers. Got \" + minShouldMatch);\n    }\n    if (scorers.size() <= 1) {\n      throw new IllegalArgumentException(\"This scorer can only be used with two scorers or more, got \" + scorers.size());\n    }\n    for (int i = 0; i < buckets.length; i++) {\n      buckets[i] = new Bucket();\n    }\n    this.leads = new BulkScorerAndDoc[scorers.size()];\n    this.head = new HeadPriorityQueue(scorers.size() - minShouldMatch + 1);\n    this.tail = new TailPriorityQueue(minShouldMatch - 1);\n    this.minShouldMatch = minShouldMatch;\n    for (BulkScorer scorer : scorers) {\n      if (needsScores == false) {\n        // OrCollector calls score() all the time so we have to explicitly\n        // disable scoring in order to avoid decoding useless norms\n        scorer = BooleanWeight.disableScoring(scorer);\n      }\n      final BulkScorerAndDoc evicted = tail.insertWithOverflow(new BulkScorerAndDoc(scorer));\n      if (evicted != null) {\n        head.add(evicted);\n      }\n    }\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":"  BooleanScorer(BooleanWeight weight, boolean disableCoord, int maxCoord, Collection<BulkScorer> scorers, int minShouldMatch, boolean needsScores) {\n    if (minShouldMatch < 1 || minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be within 1..num_scorers. Got \" + minShouldMatch);\n    }\n    if (scorers.size() <= 1) {\n      throw new IllegalArgumentException(\"This scorer can only be used with two scorers or more, got \" + scorers.size());\n    }\n    for (int i = 0; i < buckets.length; i++) {\n      buckets[i] = new Bucket();\n    }\n    this.leads = new BulkScorerAndDoc[scorers.size()];\n    this.head = new HeadPriorityQueue(scorers.size() - minShouldMatch + 1);\n    this.tail = new TailPriorityQueue(minShouldMatch - 1);\n    this.minShouldMatch = minShouldMatch;\n    for (BulkScorer scorer : scorers) {\n      if (needsScores == false) {\n        // OrCollector calls score() all the time so we have to explicitly\n        // disable scoring in order to avoid decoding useless norms\n        scorer = BooleanWeight.disableScoring(scorer);\n      }\n      final BulkScorerAndDoc evicted = tail.insertWithOverflow(new BulkScorerAndDoc(scorer));\n      if (evicted != null) {\n        head.add(evicted);\n      }\n    }\n    this.cost = cost(scorers, minShouldMatch);\n\n    coordFactors = new float[scorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : weight.coord(i, maxCoord);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,Collection[BulkScorer],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  BooleanScorer(BooleanWeight weight, Collection<BulkScorer> scorers, int minShouldMatch, boolean needsScores) {\n    if (minShouldMatch < 1 || minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be within 1..num_scorers. Got \" + minShouldMatch);\n    }\n    if (scorers.size() <= 1) {\n      throw new IllegalArgumentException(\"This scorer can only be used with two scorers or more, got \" + scorers.size());\n    }\n    for (int i = 0; i < buckets.length; i++) {\n      buckets[i] = new Bucket();\n    }\n    this.leads = new BulkScorerAndDoc[scorers.size()];\n    this.head = new HeadPriorityQueue(scorers.size() - minShouldMatch + 1);\n    this.tail = new TailPriorityQueue(minShouldMatch - 1);\n    this.minShouldMatch = minShouldMatch;\n    for (BulkScorer scorer : scorers) {\n      if (needsScores == false) {\n        // OrCollector calls score() all the time so we have to explicitly\n        // disable scoring in order to avoid decoding useless norms\n        scorer = BooleanWeight.disableScoring(scorer);\n      }\n      final BulkScorerAndDoc evicted = tail.insertWithOverflow(new BulkScorerAndDoc(scorer));\n      if (evicted != null) {\n        head.add(evicted);\n      }\n    }\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}