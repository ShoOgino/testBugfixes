{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#crosses(double,double,double,double).mjava","commits":[{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#crosses(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesPoly(double,double,double,double,double[],double[]).mjava","sourceNew":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly.\n   */\n  public boolean crosses(double minLat, double maxLat, final double minLon, final double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return false;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return true;\n    }\n    // if we cross any hole, we cross\n    for (Polygon hole : holes) {\n      if (hole.crosses(minLat, maxLat, minLon, maxLon)) {\n        return true;\n      }\n    }\n\n    /*\n     * Accurately compute (within restrictions of cartesian decimal degrees) whether a rectangle crosses a polygon\n     */\n    final double[][] bbox = new double[][] { {minLon, minLat}, {maxLon, minLat}, {maxLon, maxLat}, {minLon, maxLat}, {minLon, minLat} };\n    final int polyLength = polyLons.length-1;\n    double d, s, t, a1, b1, c1, a2, b2, c2;\n    double x00, y00, x01, y01, x10, y10, x11, y11;\n\n    // computes the intersection point between each bbox edge and the polygon edge\n    for (short b=0; b<4; ++b) {\n      a1 = bbox[b+1][1]-bbox[b][1];\n      b1 = bbox[b][0]-bbox[b+1][0];\n      c1 = a1*bbox[b+1][0] + b1*bbox[b+1][1];\n      for (int p=0; p<polyLength; ++p) {\n        a2 = polyLats[p+1]-polyLats[p];\n        b2 = polyLons[p]-polyLons[p+1];\n        // compute determinant\n        d = a1*b2 - a2*b1;\n        if (d != 0) {\n          // lines are not parallel, check intersecting points\n          c2 = a2*polyLons[p+1] + b2*polyLats[p+1];\n          s = (1/d)*(b2*c1 - b1*c2);\n          t = (1/d)*(a1*c2 - a2*c1);\n          x00 = Math.min(bbox[b][0], bbox[b+1][0]) - GeoEncodingUtils.TOLERANCE;\n          x01 = Math.max(bbox[b][0], bbox[b+1][0]) + GeoEncodingUtils.TOLERANCE;\n          y00 = Math.min(bbox[b][1], bbox[b+1][1]) - GeoEncodingUtils.TOLERANCE;\n          y01 = Math.max(bbox[b][1], bbox[b+1][1]) + GeoEncodingUtils.TOLERANCE;\n          x10 = Math.min(polyLons[p], polyLons[p+1]) - GeoEncodingUtils.TOLERANCE;\n          x11 = Math.max(polyLons[p], polyLons[p+1]) + GeoEncodingUtils.TOLERANCE;\n          y10 = Math.min(polyLats[p], polyLats[p+1]) - GeoEncodingUtils.TOLERANCE;\n          y11 = Math.max(polyLats[p], polyLats[p+1]) + GeoEncodingUtils.TOLERANCE;\n          // check whether the intersection point is touching one of the line segments\n          boolean touching = ((x00 == s && y00 == t) || (x01 == s && y01 == t))\n              || ((x10 == s && y10 == t) || (x11 == s && y11 == t));\n          // if line segments are not touching and the intersection point is within the range of either segment\n          if (!(touching || x00 > s || x01 < s || y00 > t || y01 < t || x10 > s || x11 < s || y10 > t || y11 < t)) {\n            return true;\n          }\n        }\n      } // for each poly edge\n    } // for each bbox edge\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Accurately compute (within restrictions of cartesian decimal degrees) whether a rectangle crosses a polygon\n   */\n  private static boolean rectCrossesPoly(final double rMinLat, final double rMaxLat,\n                                         final double rMinLon, final double rMaxLon,\n                                         final double[] shapeLats, final double[] shapeLons) {\n    final double[][] bbox = new double[][] { {rMinLon, rMinLat}, {rMaxLon, rMinLat}, {rMaxLon, rMaxLat}, {rMinLon, rMaxLat}, {rMinLon, rMinLat} };\n    final int polyLength = shapeLons.length-1;\n    double d, s, t, a1, b1, c1, a2, b2, c2;\n    double x00, y00, x01, y01, x10, y10, x11, y11;\n\n    // computes the intersection point between each bbox edge and the polygon edge\n    for (short b=0; b<4; ++b) {\n      a1 = bbox[b+1][1]-bbox[b][1];\n      b1 = bbox[b][0]-bbox[b+1][0];\n      c1 = a1*bbox[b+1][0] + b1*bbox[b+1][1];\n      for (int p=0; p<polyLength; ++p) {\n        a2 = shapeLats[p+1]-shapeLats[p];\n        b2 = shapeLons[p]-shapeLons[p+1];\n        // compute determinant\n        d = a1*b2 - a2*b1;\n        if (d != 0) {\n          // lines are not parallel, check intersecting points\n          c2 = a2*shapeLons[p+1] + b2*shapeLats[p+1];\n          s = (1/d)*(b2*c1 - b1*c2);\n          t = (1/d)*(a1*c2 - a2*c1);\n          x00 = StrictMath.min(bbox[b][0], bbox[b+1][0]) - GeoEncodingUtils.TOLERANCE;\n          x01 = StrictMath.max(bbox[b][0], bbox[b+1][0]) + GeoEncodingUtils.TOLERANCE;\n          y00 = StrictMath.min(bbox[b][1], bbox[b+1][1]) - GeoEncodingUtils.TOLERANCE;\n          y01 = StrictMath.max(bbox[b][1], bbox[b+1][1]) + GeoEncodingUtils.TOLERANCE;\n          x10 = StrictMath.min(shapeLons[p], shapeLons[p+1]) - GeoEncodingUtils.TOLERANCE;\n          x11 = StrictMath.max(shapeLons[p], shapeLons[p+1]) + GeoEncodingUtils.TOLERANCE;\n          y10 = StrictMath.min(shapeLats[p], shapeLats[p+1]) - GeoEncodingUtils.TOLERANCE;\n          y11 = StrictMath.max(shapeLats[p], shapeLats[p+1]) + GeoEncodingUtils.TOLERANCE;\n          // check whether the intersection point is touching one of the line segments\n          boolean touching = ((x00 == s && y00 == t) || (x01 == s && y01 == t))\n              || ((x10 == s && y10 == t) || (x11 == s && y11 == t));\n          // if line segments are not touching and the intersection point is within the range of either segment\n          if (!(touching || x00 > s || x01 < s || y00 > t || y01 < t || x10 > s || x11 < s || y10 > t || y11 < t)) {\n            return true;\n          }\n        }\n      } // for each poly edge\n    } // for each bbox edge\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#crosses(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#crosses(double,double,double,double).mjava","sourceNew":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly.\n   */\n  public boolean crosses(double minLat, double maxLat, final double minLon, final double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return false;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return true;\n    }\n    // if we cross any hole, we cross\n    for (Polygon hole : holes) {\n      if (hole.crosses(minLat, maxLat, minLon, maxLon)) {\n        return true;\n      }\n    }\n\n    /*\n     * Accurately compute (within restrictions of cartesian decimal degrees) whether a rectangle crosses a polygon\n     */\n    final double[][] bbox = new double[][] { {minLon, minLat}, {maxLon, minLat}, {maxLon, maxLat}, {minLon, maxLat}, {minLon, minLat} };\n    final int polyLength = polyLons.length-1;\n    double d, s, t, a1, b1, c1, a2, b2, c2;\n    double x00, y00, x01, y01, x10, y10, x11, y11;\n\n    // computes the intersection point between each bbox edge and the polygon edge\n    for (short b=0; b<4; ++b) {\n      a1 = bbox[b+1][1]-bbox[b][1];\n      b1 = bbox[b][0]-bbox[b+1][0];\n      c1 = a1*bbox[b+1][0] + b1*bbox[b+1][1];\n      for (int p=0; p<polyLength; ++p) {\n        a2 = polyLats[p+1]-polyLats[p];\n        b2 = polyLons[p]-polyLons[p+1];\n        // compute determinant\n        d = a1*b2 - a2*b1;\n        if (d != 0) {\n          // lines are not parallel, check intersecting points\n          c2 = a2*polyLons[p+1] + b2*polyLats[p+1];\n          s = (1/d)*(b2*c1 - b1*c2);\n          t = (1/d)*(a1*c2 - a2*c1);\n          // todo TOLERANCE SHOULD MATCH EVERYWHERE this is currently blocked by LUCENE-7165\n          x00 = Math.min(bbox[b][0], bbox[b+1][0]) - ENCODING_TOLERANCE;\n          x01 = Math.max(bbox[b][0], bbox[b+1][0]) + ENCODING_TOLERANCE;\n          y00 = Math.min(bbox[b][1], bbox[b+1][1]) - ENCODING_TOLERANCE;\n          y01 = Math.max(bbox[b][1], bbox[b+1][1]) + ENCODING_TOLERANCE;\n          x10 = Math.min(polyLons[p], polyLons[p+1]) - ENCODING_TOLERANCE;\n          x11 = Math.max(polyLons[p], polyLons[p+1]) + ENCODING_TOLERANCE;\n          y10 = Math.min(polyLats[p], polyLats[p+1]) - ENCODING_TOLERANCE;\n          y11 = Math.max(polyLats[p], polyLats[p+1]) + ENCODING_TOLERANCE;\n          // check whether the intersection point is touching one of the line segments\n          boolean touching = ((x00 == s && y00 == t) || (x01 == s && y01 == t))\n              || ((x10 == s && y10 == t) || (x11 == s && y11 == t));\n          // if line segments are not touching and the intersection point is within the range of either segment\n          if (!(touching || x00 > s || x01 < s || y00 > t || y01 < t || x10 > s || x11 < s || y10 > t || y11 < t)) {\n            return true;\n          }\n        }\n      } // for each poly edge\n    } // for each bbox edge\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly.\n   */\n  public boolean crosses(double minLat, double maxLat, final double minLon, final double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return false;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return true;\n    }\n    // if we cross any hole, we cross\n    for (Polygon hole : holes) {\n      if (hole.crosses(minLat, maxLat, minLon, maxLon)) {\n        return true;\n      }\n    }\n\n    /*\n     * Accurately compute (within restrictions of cartesian decimal degrees) whether a rectangle crosses a polygon\n     */\n    final double[][] bbox = new double[][] { {minLon, minLat}, {maxLon, minLat}, {maxLon, maxLat}, {minLon, maxLat}, {minLon, minLat} };\n    final int polyLength = polyLons.length-1;\n    double d, s, t, a1, b1, c1, a2, b2, c2;\n    double x00, y00, x01, y01, x10, y10, x11, y11;\n\n    // computes the intersection point between each bbox edge and the polygon edge\n    for (short b=0; b<4; ++b) {\n      a1 = bbox[b+1][1]-bbox[b][1];\n      b1 = bbox[b][0]-bbox[b+1][0];\n      c1 = a1*bbox[b+1][0] + b1*bbox[b+1][1];\n      for (int p=0; p<polyLength; ++p) {\n        a2 = polyLats[p+1]-polyLats[p];\n        b2 = polyLons[p]-polyLons[p+1];\n        // compute determinant\n        d = a1*b2 - a2*b1;\n        if (d != 0) {\n          // lines are not parallel, check intersecting points\n          c2 = a2*polyLons[p+1] + b2*polyLats[p+1];\n          s = (1/d)*(b2*c1 - b1*c2);\n          t = (1/d)*(a1*c2 - a2*c1);\n          x00 = Math.min(bbox[b][0], bbox[b+1][0]) - GeoEncodingUtils.TOLERANCE;\n          x01 = Math.max(bbox[b][0], bbox[b+1][0]) + GeoEncodingUtils.TOLERANCE;\n          y00 = Math.min(bbox[b][1], bbox[b+1][1]) - GeoEncodingUtils.TOLERANCE;\n          y01 = Math.max(bbox[b][1], bbox[b+1][1]) + GeoEncodingUtils.TOLERANCE;\n          x10 = Math.min(polyLons[p], polyLons[p+1]) - GeoEncodingUtils.TOLERANCE;\n          x11 = Math.max(polyLons[p], polyLons[p+1]) + GeoEncodingUtils.TOLERANCE;\n          y10 = Math.min(polyLats[p], polyLats[p+1]) - GeoEncodingUtils.TOLERANCE;\n          y11 = Math.max(polyLats[p], polyLats[p+1]) + GeoEncodingUtils.TOLERANCE;\n          // check whether the intersection point is touching one of the line segments\n          boolean touching = ((x00 == s && y00 == t) || (x01 == s && y01 == t))\n              || ((x10 == s && y10 == t) || (x11 == s && y11 == t));\n          // if line segments are not touching and the intersection point is within the range of either segment\n          if (!(touching || x00 > s || x01 < s || y00 > t || y01 < t || x10 > s || x11 < s || y10 > t || y11 < t)) {\n            return true;\n          }\n        }\n      } // for each poly edge\n    } // for each bbox edge\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}