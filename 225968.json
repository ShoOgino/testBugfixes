{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,float).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,float).mjava","sourceNew":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, float, float)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(Explanation, BasicStats, int, float, float)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, float docLen) {\n    Explanation result = new Explanation(); \n    result.setValue(score(stats, freq.getValue(), docLen));\n    result.setDescription(\"score(\" + getClass().getSimpleName() +\n        \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\");\n    result.addDetail(freq);\n    \n    explain(result, stats, doc, freq.getValue(), docLen);\n    \n    return result;\n  }\n\n","sourceOld":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, float, float)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(Explanation, BasicStats, int, float, float)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, float docLen) {\n    Explanation result = new Explanation(); \n    result.setValue(score(stats, freq.getValue(), docLen));\n    result.setDescription(\"score(\" + getClass().getSimpleName() +\n        \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\");\n    result.addDetail(freq);\n    \n    explain(result, stats, doc, freq.getValue(), docLen);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,float).mjava","sourceNew":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, float, float)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, float, float)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, float docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue(), docLen);\n    \n    return Explanation.match(\n        score(stats, freq.getValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","sourceOld":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, float, float)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(Explanation, BasicStats, int, float, float)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, float docLen) {\n    Explanation result = new Explanation(); \n    result.setValue(score(stats, freq.getValue(), docLen));\n    result.setDescription(\"score(\" + getClass().getSimpleName() +\n        \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\");\n    result.addDetail(freq);\n    \n    explain(result, stats, doc, freq.getValue(), docLen);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,float).mjava","sourceNew":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, double, double)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, double, double)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, double docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue(), docLen);\n    \n    return Explanation.match(\n        (float) score(stats, freq.getValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","sourceOld":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, float, float)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, float, float)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, float docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue(), docLen);\n    \n    return Explanation.match(\n        score(stats, freq.getValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"]},"commit2Childs":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}