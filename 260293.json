{"path":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n      String val1 = String.valueOf(10 * i + 1);\n      payload = payload.replace(\"CACHEVAL1\", val1);\n      String val2 = String.valueOf(10 * i + 2);\n      payload = payload.replace(\"CACHEVAL2\", val2);\n      String val3 = String.valueOf(10 * i + 3);\n      payload = payload.replace(\"CACHEVAL3\", val3);\n\n      String response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      //get another node\n      RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      long startTime = System.nanoTime();\n      boolean success = false;\n      long maxTimeoutSeconds = 10;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(\"/config/overlay?wt=json\", harness);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {} , iteration: {} response {} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {}, actual {}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {}, actual {}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {}, actual {}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n      String val1 = String.valueOf(10 * i + 1);\n      payload = payload.replace(\"CACHEVAL1\", val1);\n      String val2 = String.valueOf(10 * i + 2);\n      payload = payload.replace(\"CACHEVAL2\", val2);\n      String val3 = String.valueOf(10 * i + 3);\n      payload = payload.replace(\"CACHEVAL3\", val3);\n\n      String response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      //get another node\n      RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      long startTime = System.nanoTime();\n      boolean success = false;\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(\"/config/overlay?wt=json\", harness);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n      String val1 = String.valueOf(10 * i + 1);\n      payload = payload.replace(\"CACHEVAL1\", val1);\n      String val2 = String.valueOf(10 * i + 2);\n      payload = payload.replace(\"CACHEVAL2\", val2);\n      String val3 = String.valueOf(10 * i + 3);\n      payload = payload.replace(\"CACHEVAL3\", val3);\n\n      String response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      //get another node\n      RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      long startTime = System.nanoTime();\n      boolean success = false;\n      long maxTimeoutSeconds = 10;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(\"/config/overlay?wt=json\", harness);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {} , iteration: {} response {} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {}, actual {}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {}, actual {}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {}, actual {}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34c11fd9f773e32b1947b701fa3eea16fcabe9e0","date":1416618826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n      String val1 = String.valueOf(10 * i + 1);\n      payload = payload.replace(\"CACHEVAL1\", val1);\n      String val2 = String.valueOf(10 * i + 2);\n      payload = payload.replace(\"CACHEVAL2\", val2);\n      String val3 = String.valueOf(10 * i + 3);\n      payload = payload.replace(\"CACHEVAL3\", val3);\n\n      String response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\");\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n      String val1 = String.valueOf(10 * i + 1);\n      payload = payload.replace(\"CACHEVAL1\", val1);\n      String val2 = String.valueOf(10 * i + 2);\n      payload = payload.replace(\"CACHEVAL2\", val2);\n      String val3 = String.valueOf(10 * i + 3);\n      payload = payload.replace(\"CACHEVAL3\", val3);\n\n      String response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      //get another node\n      RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      long startTime = System.nanoTime();\n      boolean success = false;\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(\"/config/overlay?wt=json\", harness);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n      String val1 = String.valueOf(10 * i + 1);\n      payload = payload.replace(\"CACHEVAL1\", val1);\n      String val2 = String.valueOf(10 * i + 2);\n      payload = payload.replace(\"CACHEVAL2\", val2);\n      String val3 = String.valueOf(10 * i + 3);\n      payload = payload.replace(\"CACHEVAL3\", val3);\n\n      String response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n      String val1 = String.valueOf(10 * i + 1);\n      payload = payload.replace(\"CACHEVAL1\", val1);\n      String val2 = String.valueOf(10 * i + 2);\n      payload = payload.replace(\"CACHEVAL2\", val2);\n      String val3 = String.valueOf(10 * i + 3);\n      payload = payload.replace(\"CACHEVAL3\", val3);\n\n      String response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\");\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n      String val1 = String.valueOf(10 * i + 1);\n      payload = payload.replace(\"CACHEVAL1\", val1);\n      String val2 = String.valueOf(10 * i + 2);\n      payload = payload.replace(\"CACHEVAL2\", val2);\n      String val3 = String.valueOf(10 * i + 3);\n      payload = payload.replace(\"CACHEVAL3\", val3);\n\n      String response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(MessageFormat.format( \"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(MessageFormat.format(\"'size' property not set, expected = {0}, actual {1}\", val1,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(MessageFormat.format(\"'initialSize' property not set, expected = {0}, actual {1}\", val2,o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(MessageFormat.format(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3,o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay?wt=json\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5331c9bfb89f82059e196c689d5c881791a8ad6","date":1534751756,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size() - 1);\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size());\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o)) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o)) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o)) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size() - 1);\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        MapWriter respMap = getAsMap(url + \"/config/overlay\", cloudClient);\n        MapWriter m = (MapWriter) respMap._get(\"overlay/props\", null);\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = m._get(asList(\"query\", cacheName, \"size\"), null);\n        if(!val1.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = m._get(asList(\"query\", cacheName, \"initialSize\"), null);\n        if(!val2.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = m._get(asList(\"query\", cacheName, \"autowarmCount\"), null);\n        if(!val3.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size() - 1);\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        Map respMap = getAsMap(url+\"/config/overlay\", cloudClient);\n        Map m = (Map) respMap.get(\"overlay\");\n        if(m!= null) m = (Map) m.get(\"props\");\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = getObjectByPath(m, true, asList(\"query\", cacheName, \"size\"));\n        if(!val1.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"initialSize\"));\n        if(!val2.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = getObjectByPath(m, true, asList(\"query\", cacheName, \"autowarmCount\"));\n        if(!val3.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) Utils.fromJSONString(response);\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size() - 1);\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        MapWriter respMap = getAsMap(url + \"/config/overlay\", cloudClient);\n        MapWriter m = (MapWriter) respMap._get(\"overlay/props\", null);\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = m._get(asList(\"query\", cacheName, \"size\"), null);\n        if(!val1.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = m._get(asList(\"query\", cacheName, \"initialSize\"), null);\n        if(!val2.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = m._get(asList(\"query\", cacheName, \"autowarmCount\"), null);\n        if(!val3.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) getVal(new JSONParser(new StringReader(response)));\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size() - 1);\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        MapWriter respMap = getAsMap(url + \"/config/overlay\", cloudClient);\n        MapWriter m = (MapWriter) respMap._get(\"overlay/props\", null);\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = m._get(asList(\"query\", cacheName, \"size\"), null);\n        if(!val1.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = m._get(asList(\"query\", cacheName, \"initialSize\"), null);\n        if(!val2.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = m._get(asList(\"query\", cacheName, \"autowarmCount\"), null);\n        if(!val3.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#invokeBulkCall(String,List[String],Map).mjava","sourceNew":"  private void invokeBulkCall(String  cacheName, List<String> errs,\n                              @SuppressWarnings({\"rawtypes\"})Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      @SuppressWarnings({\"rawtypes\"})\n      Map map = (Map) Utils.fromJSONString(response);\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size() - 1);\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        MapWriter respMap = getAsMap(url + \"/config/overlay\", cloudClient);\n        MapWriter m = (MapWriter) respMap._get(\"overlay/props\", null);\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = m._get(asList(\"query\", cacheName, \"size\"), null);\n        if(!val1.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = m._get(asList(\"query\", cacheName, \"initialSize\"), null);\n        if(!val2.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = m._get(asList(\"query\", cacheName, \"autowarmCount\"), null);\n        if(!val3.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  private void invokeBulkCall(String  cacheName, List<String> errs, Map val) throws Exception {\n\n    String payload = \"{\" +\n        \"'set-property' : {'query.CACHENAME.size':'CACHEVAL1',\" +\n        \"                  'query.CACHENAME.initialSize':'CACHEVAL2'},\" +\n        \"'set-property': {'query.CACHENAME.autowarmCount' : 'CACHEVAL3'}\" +\n        \"}\";\n\n    Set<String> errmessages = new HashSet<>();\n    for(int i =1;i<2;i++){//make it  ahigher number\n      RestTestHarness publisher = randomRestTestHarness(r);\n      String response;\n      String val1;\n      String val2;\n      String val3;\n      try {\n        payload = payload.replaceAll(\"CACHENAME\" , cacheName);\n        val1 = String.valueOf(10 * i + 1);\n        payload = payload.replace(\"CACHEVAL1\", val1);\n        val2 = String.valueOf(10 * i + 2);\n        payload = payload.replace(\"CACHEVAL2\", val2);\n        val3 = String.valueOf(10 * i + 3);\n        payload = payload.replace(\"CACHEVAL3\", val3);\n  \n        response = publisher.post(\"/config\", SolrTestCaseJ4.json(payload));\n      } finally {\n        publisher.close();\n      }\n      \n      Map map = (Map) Utils.fromJSONString(response);\n      Object errors = map.get(\"errors\");\n      if(errors!= null){\n        errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n        return;\n      }\n\n      DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n      List<String> urls = new ArrayList<>();\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas())\n          urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n      }\n\n\n      //get another node\n      String url = urls.get(urls.size() - 1);\n\n      long startTime = System.nanoTime();\n      long maxTimeoutSeconds = 20;\n      while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n        Thread.sleep(100);\n        errmessages.clear();\n        MapWriter respMap = getAsMap(url + \"/config/overlay\", cloudClient);\n        MapWriter m = (MapWriter) respMap._get(\"overlay/props\", null);\n        if(m == null) {\n          errmessages.add(StrUtils.formatString(\"overlay does not exist for cache: {0} , iteration: {1} response {2} \", cacheName, i, respMap.toString()));\n          continue;\n        }\n\n\n        Object o = m._get(asList(\"query\", cacheName, \"size\"), null);\n        if(!val1.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'size' property not set, expected = {0}, actual {1}\", val1, o));\n\n        o = m._get(asList(\"query\", cacheName, \"initialSize\"), null);\n        if(!val2.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'initialSize' property not set, expected = {0}, actual {1}\", val2, o));\n\n        o = m._get(asList(\"query\", cacheName, \"autowarmCount\"), null);\n        if(!val3.equals(o.toString())) errmessages.add(StrUtils.formatString(\"'autowarmCount' property not set, expected = {0}, actual {1}\", val3, o));\n        if(errmessages.isEmpty()) break;\n      }\n      if(!errmessages.isEmpty()) {\n        errs.addAll(errmessages);\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"b5331c9bfb89f82059e196c689d5c881791a8ad6":["0853c291617e0f9d0474b720bf609eb350e9225c"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"34c11fd9f773e32b1947b701fa3eea16fcabe9e0":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["b693a83132c9e45afcd564fd65a25b60ed80388b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["b5331c9bfb89f82059e196c689d5c881791a8ad6"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"a52341299179de5479672f7cf518bf4b173f34b3":["b693a83132c9e45afcd564fd65a25b60ed80388b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0853c291617e0f9d0474b720bf609eb350e9225c":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["34c11fd9f773e32b1947b701fa3eea16fcabe9e0"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["b693a83132c9e45afcd564fd65a25b60ed80388b"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["34c11fd9f773e32b1947b701fa3eea16fcabe9e0"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"b5331c9bfb89f82059e196c689d5c881791a8ad6":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"34c11fd9f773e32b1947b701fa3eea16fcabe9e0":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"0853c291617e0f9d0474b720bf609eb350e9225c":["b5331c9bfb89f82059e196c689d5c881791a8ad6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["b693a83132c9e45afcd564fd65a25b60ed80388b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}