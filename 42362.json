{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testPositionIncrement().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testPositionIncrement().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5629050969c1e696c5dc14e8639f3e733e8e33c"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}