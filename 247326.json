{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","sourceNew":"  /**\n   * Return the internal {@link CharType} constant of a given character. \n   * @param ch input character\n   * @return constant from {@link CharType} describing the character type.\n   * \n   * @see CharType\n   */\n  public static int getCharType(char ch) {\n    // Most (but not all!) of these are Han Ideographic Characters\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // Punctuation Marks\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // Full-Width range\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","sourceOld":"  /**\n   * Return the internal {@link CharType} constant of a given character. \n   * @param ch input character\n   * @return constant from {@link CharType} describing the character type.\n   * \n   * @see CharType\n   */\n  public static int getCharType(char ch) {\n    // Most (but not all!) of these are Han Ideographic Characters\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // Punctuation Marks\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // Full-Width range\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#getCharType(char).mjava","sourceNew":"  /**\n   * Return the internal {@link CharType} constant of a given character. \n   * @param ch input character\n   * @return constant from {@link CharType} describing the character type.\n   * \n   * @see CharType\n   */\n  public static int getCharType(char ch) {\n    // Most (but not all!) of these are Han Ideographic Characters\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // Punctuation Marks\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // Full-Width range\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","sourceOld":"  /**\n   * Return the internal {@link CharType} constant of a given character. \n   * @param ch input character\n   * @return constant from {@link CharType} describing the character type.\n   * \n   * @see CharType\n   */\n  public static int getCharType(char ch) {\n    // Most (but not all!) of these are Han Ideographic Characters\n    if (ch >= 0x4E00 && ch <= 0x9FA5)\n      return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))\n      return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)\n      return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '　')\n      return CharType.SPACE_LIKE;\n    // Punctuation Marks\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)\n        || (ch >= 0x3001 && ch <= 0x301E))\n      return CharType.DELIMITER;\n\n    // Full-Width range\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))\n      return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)\n      return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)\n      return CharType.DELIMITER;\n    return CharType.OTHER;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}