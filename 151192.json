{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","pathOld":"/dev/null","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (metrics == null || metrics.isEmpty()) {\n          return Collections.emptyList();\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n        return metrics.keySet();\n      }\n\n      @Override\n      public String getName() {\n        return scope;\n      }\n\n      @Override\n      public String getVersion() {\n        return \"0.0\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return category;\n      }\n\n      @Override\n      public String getSource() {\n        return null;\n      }\n\n      @Override\n      public URL[] getDocs() {\n        return new URL[0];\n      }\n\n      @Override\n      public NamedList getStatistics() {\n        return null;\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","pathOld":"/dev/null","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (metrics == null || metrics.isEmpty()) {\n          return Collections.emptyList();\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n        return metrics.keySet();\n      }\n\n      @Override\n      public String getName() {\n        return scope;\n      }\n\n      @Override\n      public String getVersion() {\n        return \"0.0\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return category;\n      }\n\n      @Override\n      public String getSource() {\n        return null;\n      }\n\n      @Override\n      public URL[] getDocs() {\n        return new URL[0];\n      }\n\n      @Override\n      public NamedList getStatistics() {\n        return null;\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d646b44d1d17a867bcd0e7a07b11c4837b169366","date":1483540291,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (metrics == null || metrics.isEmpty()) {\n          return Collections.emptyList();\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n        return metrics.keySet();\n      }\n\n      @Override\n      public String getName() {\n        return scope;\n      }\n\n      @Override\n      public String getVersion() {\n        return \"0.0\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return category;\n      }\n\n      @Override\n      public String getSource() {\n        return null;\n      }\n\n      @Override\n      public URL[] getDocs() {\n        return new URL[0];\n      }\n\n      @Override\n      public NamedList getStatistics() {\n        return null;\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (metrics == null || metrics.isEmpty()) {\n          return Collections.emptyList();\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n        return metrics.keySet();\n      }\n\n      @Override\n      public String getName() {\n        return scope;\n      }\n\n      @Override\n      public String getVersion() {\n        return \"0.0\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return category;\n      }\n\n      @Override\n      public String getSource() {\n        return null;\n      }\n\n      @Override\n      public URL[] getDocs() {\n        return new URL[0];\n      }\n\n      @Override\n      public NamedList getStatistics() {\n        return null;\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoBean.Category,String,Map[String,Counter]).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","sourceNew":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(null, registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricTestUtils#getProducerOf(SolrMetricManager,SolrInfoMBean.Category,String,Map[String,Counter]).mjava","sourceNew":null,"sourceOld":"  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {\n    return new SolrMetricProducer() {\n      @Override\n      public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n        if (category == null) {\n          throw new IllegalArgumentException(\"null category\");\n        }\n        if (metrics == null || metrics.isEmpty()) {\n          return;\n        }\n        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n          manager.counter(registry, entry.getKey(), category.toString(), scope);\n        }\n      }\n\n      @Override\n      public String toString() {\n        return \"SolrMetricProducer.of{\" +\n            \"\\ncategory=\" + category +\n            \"\\nscope=\" + scope +\n            \"\\nmetrics=\" + metrics +\n            \"\\n}\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}