{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer).mjava","commits":[{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client )  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numReplicas = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client )  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numReplicas = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client)  throws SolrServerException, IOException{\n    createCollection(collectionInfos, collectionName, collectionProps, client, null);\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client )  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numReplicas = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n\n  }\n\n","bugFix":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8f0529666139e562ee655d544b667bfedab70c7","date":1394717900,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client)  throws SolrServerException, IOException{\n    return createCollection(collectionInfos, collectionName, collectionProps, client, null);\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client)  throws SolrServerException, IOException{\n    createCollection(collectionInfos, collectionName, collectionProps, client, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrClient client)  throws SolrServerException, IOException{\n    return createCollection(collectionInfos, collectionName, collectionProps, client, null);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client)  throws SolrServerException, IOException{\n    return createCollection(collectionInfos, collectionName, collectionProps, client, null);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eeda7e62e149f90eee8895af874c74efa7d4852"],"e8f0529666139e562ee655d544b667bfedab70c7":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["e8f0529666139e562ee655d544b667bfedab70c7"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["1eeda7e62e149f90eee8895af874c74efa7d4852"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"e8f0529666139e562ee655d544b667bfedab70c7":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["e8f0529666139e562ee655d544b667bfedab70c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}