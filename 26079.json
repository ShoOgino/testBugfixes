{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["f8615860cb50aefb8eebca1d1b3893dbe21cf126","6616b1fd222bb5a60f7f7856ace312252bc97890"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["f8615860cb50aefb8eebca1d1b3893dbe21cf126","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}