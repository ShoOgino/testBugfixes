{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, getQuery(\"\\\"1 2\\\"\",qp));\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, getQuery(\"\\\"1 2\\\"\",qp));\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, getQuery(\"\\\"1 2\\\"\",qp));\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, getQuery(\"\\\"1 2\\\"\",qp));\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toLightAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toLightAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery.Builder phraseQuery = new PhraseQuery.Builder();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery.build(), getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp\n        = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery.Builder phraseQuery = new PhraseQuery.Builder();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery.build(), getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery.Builder phraseQuery = new PhraseQuery.Builder();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery.build(), getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp\n        = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery.Builder phraseQuery = new PhraseQuery.Builder();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery.build(), getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n\n    qp = getParserConfig(\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList));\n    qp.setEnablePositionIncrements(true);\n\n    PhraseQuery.Builder phraseQuery = new PhraseQuery.Builder();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery.build(), getQuery(\"\\\"1 stop 2\\\"\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e9e1499c5d26c936238506df90a3c02c76707722","138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","eafa8c5eabc3dacd34680054e6a33bda024080ac","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"e9e1499c5d26c936238506df90a3c02c76707722":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["e9e1499c5d26c936238506df90a3c02c76707722","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}