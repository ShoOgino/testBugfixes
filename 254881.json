{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene410DocValuesFormat.VERSION_START,\n                                      Lucene410DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      sortedNumerics = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      CodecUtil.checkFooter(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene410DocValuesFormat.VERSION_START,\n                                      Lucene410DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      sortedNumerics = new HashMap<>();\n      numFields = readFields(in, state.fieldInfos);\n\n      CodecUtil.checkFooter(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene410DocValuesFormat.VERSION_START,\n                                      Lucene410DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      sortedNumerics = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      CodecUtil.checkFooter(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene410DocValuesFormat.VERSION_START,\n                                      Lucene410DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      sortedNumerics = new HashMap<>();\n      numFields = readFields(in, state.fieldInfos);\n\n      CodecUtil.checkFooter(in);\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene410DocValuesFormat.VERSION_START,\n                                      Lucene410DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      sortedNumerics = new HashMap<>();\n      numFields = readFields(in, state.fieldInfos);\n\n      CodecUtil.checkFooter(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene410DocValuesFormat.VERSION_START,\n                                      Lucene410DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      sortedNumerics = new HashMap<>();\n      numFields = readFields(in, state.fieldInfos);\n\n      CodecUtil.checkFooter(in);\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    merging = false;\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    merging = false;\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    merging = false;\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    merging = false;\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#Lucene410DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    merging = false;\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  Lucene410DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    merging = false;\n    \n    int version = -1;\n    int numFields = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, \n                                        Lucene410DocValuesFormat.VERSION_START,\n                                        Lucene410DocValuesFormat.VERSION_CURRENT);\n        numFields = readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n    \n    this.numFields = numFields;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene410DocValuesFormat.VERSION_START,\n                                                 Lucene410DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \", data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bc8f80fee115148a0e4a0574560be06b494de821":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"9bb9a29a5e71a90295f175df8919802993142c9a":["500867f0f15393f6b2c38c3366e414fccba04ed6","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["bc8f80fee115148a0e4a0574560be06b494de821"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}