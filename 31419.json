{"path":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return getExactQuery(field, externalVal);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["92f8ab19a30ff70981e43b8cc78069cb0941476e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return getExactQuery(field, externalVal);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19284d685ce334cd95ff0ace2793842f84bf7383","date":1487788272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getExactQuery(field, externalVal);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, externalVal, externalVal, true, true);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getExactQuery(field, externalVal);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return getExactQuery(field, externalVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92f8ab19a30ff70981e43b8cc78069cb0941476e","date":1497374252,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getExactQuery(field, externalVal);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, externalVal, externalVal, true, true);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getExactQuery(field, externalVal);\n    } \n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getExactQuery(field, externalVal);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, externalVal, externalVal, true, true);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getExactQuery(field, externalVal);\n    }\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getExactQuery(field, externalVal);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, externalVal, externalVal, true, true);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getExactQuery(field, externalVal);\n    } \n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getExactQuery(field, externalVal);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, externalVal, externalVal, true, true);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getExactQuery(field, externalVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getExactQuery(field, externalVal);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, externalVal, externalVal, true, true);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getExactQuery(field, externalVal);\n    } \n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    if (!field.indexed() && field.hasDocValues()) {\n      // currently implemented as singleton range\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getExactQuery(field, externalVal);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, externalVal, externalVal, true, true);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getExactQuery(field, externalVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19284d685ce334cd95ff0ace2793842f84bf7383":["46dc9ac8b3e748407baaef82453138ff3974480c"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["19284d685ce334cd95ff0ace2793842f84bf7383"],"28288370235ed02234a64753cdbf0c6ec096304a":["19284d685ce334cd95ff0ace2793842f84bf7383","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["19284d685ce334cd95ff0ace2793842f84bf7383","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"19284d685ce334cd95ff0ace2793842f84bf7383":["92f8ab19a30ff70981e43b8cc78069cb0941476e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"46dc9ac8b3e748407baaef82453138ff3974480c":["19284d685ce334cd95ff0ace2793842f84bf7383","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}