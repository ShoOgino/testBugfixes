{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07132423639577d6f68cebbec9c83599d5d5a3a","date":1419020622,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        // System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms longsSize=\" + field.longsSize);\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.bytes.length);\n        out.writeBytes(field.rootCode.bytes.bytes, field.rootCode.bytes.offset, field.rootCode.bytes.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      out.writeLong(dirStart);    \n      CodecUtil.writeFooter(out);\n      indexOut.writeLong(indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b07132423639577d6f68cebbec9c83599d5d5a3a":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"b07132423639577d6f68cebbec9c83599d5d5a3a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}