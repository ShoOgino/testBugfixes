{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      Explanation result = new ComplexExplanation\n        (true, sc, \"FunctionQuery(\" + func + \"), product of:\");\n\n      result.addDetail(vals.explain(doc));\n      result.addDetail(new Explanation(getBoost(), \"boost\"));\n      result.addDetail(new Explanation(weight.queryNorm,\"queryNorm\"));\n      return result;\n    }\n\n","sourceOld":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      Explanation result = new ComplexExplanation\n        (true, sc, \"FunctionQuery(\" + func + \"), product of:\");\n\n      result.addDetail(vals.explain(doc));\n      result.addDetail(new Explanation(getBoost(), \"boost\"));\n      result.addDetail(new Explanation(weight.queryNorm,\"queryNorm\"));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(getBoost(), \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      Explanation result = new ComplexExplanation\n        (true, sc, \"FunctionQuery(\" + func + \"), product of:\");\n\n      result.addDetail(vals.explain(doc));\n      result.addDetail(new Explanation(getBoost(), \"boost\"));\n      result.addDetail(new Explanation(weight.queryNorm,\"queryNorm\"));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","sourceNew":"    public Explanation explain(int doc, float queryNorm) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(queryNorm, \"boost\"),\n          Explanation.match(weight.queryNorm = 1f, \"queryNorm\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(getBoost(), \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f","date":1461156732,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int,float).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc, float queryNorm) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(queryNorm, \"boost\"),\n          Explanation.match(weight.queryNorm = 1f, \"queryNorm\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int,float).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc, float queryNorm) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(queryNorm, \"boost\"),\n          Explanation.match(weight.queryNorm = 1f, \"queryNorm\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      float sc = boost * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      float sc = boost * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      Explanation expl = vals.explain(doc);\n      if (expl.getValue() < 0) {\n        expl = Explanation.match(0, \"truncated score, max of:\", Explanation.match(0f, \"minimum score\"), expl);\n      } else if (Float.isNaN(expl.getValue())) {\n        expl = Explanation.match(0, \"score, computed as (score == NaN ? 0 : score) since NaN is an illegal score from:\", expl);\n      }\n\n      return Explanation.match(boost * expl.getValue(), \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc) throws IOException {\n      float sc = boost * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      Explanation expl = vals.explain(doc);\n      if (expl.getValue().floatValue() < 0) {\n        expl = Explanation.match(0, \"truncated score, max of:\", Explanation.match(0f, \"minimum score\"), expl);\n      } else if (Float.isNaN(expl.getValue().floatValue())) {\n        expl = Explanation.match(0, \"score, computed as (score == NaN ? 0 : score) since NaN is an illegal score from:\", expl);\n      }\n\n      return Explanation.match(boost * expl.getValue().floatValue(), \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc) throws IOException {\n      Explanation expl = vals.explain(doc);\n      if (expl.getValue() < 0) {\n        expl = Explanation.match(0, \"truncated score, max of:\", Explanation.match(0f, \"minimum score\"), expl);\n      } else if (Float.isNaN(expl.getValue())) {\n        expl = Explanation.match(0, \"score, computed as (score == NaN ? 0 : score) since NaN is an illegal score from:\", expl);\n      }\n\n      return Explanation.match(boost * expl.getValue(), \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["2dfdf766e55e943d942055d7de53c7ad6bc45283","4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9b701e0fcef214f86bab1daf107adce0b0131212"],"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9b701e0fcef214f86bab1daf107adce0b0131212","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["9b701e0fcef214f86bab1daf107adce0b0131212","4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}