{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","commits":[{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","sourceNew":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","sourceNew":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","sourceNew":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testLegacyDoubleMissing().mjava","sourceNew":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type legacy double with a missing value */\n  public void testLegacyDoubleMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.LEGACY_DOUBLE));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // null treated as a 0\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}