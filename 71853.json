{"path":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/ext/RomanianStemmer#r_step_0().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/ext/RomanianStemmer#r_step_0().mjava","pathOld":"contrib/analyzers/common/src/java/org/tartarus/snowball/ext/RomanianStemmer#r_step_0().mjava","sourceNew":"        private boolean r_step_0() {\n            int among_var;\n            int v_1;\n            // (, line 72\n            // [, line 73\n            ket = cursor;\n            // substring, line 73\n            among_var = find_among_b(a_1, 16);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 73\n            bra = cursor;\n            // call R1, line 73\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 75\n                    // delete, line 75\n                    slice_del();\n                    break;\n                case 2:\n                    // (, line 77\n                    // <-, line 77\n                    slice_from(\"a\");\n                    break;\n                case 3:\n                    // (, line 79\n                    // <-, line 79\n                    slice_from(\"e\");\n                    break;\n                case 4:\n                    // (, line 81\n                    // <-, line 81\n                    slice_from(\"i\");\n                    break;\n                case 5:\n                    // (, line 83\n                    // not, line 83\n                    {\n                        v_1 = limit - cursor;\n                        lab0: do {\n                            // literal, line 83\n                            if (!(eq_s_b(2, \"ab\")))\n                            {\n                                break lab0;\n                            }\n                            return false;\n                        } while (false);\n                        cursor = limit - v_1;\n                    }\n                    // <-, line 83\n                    slice_from(\"i\");\n                    break;\n                case 6:\n                    // (, line 85\n                    // <-, line 85\n                    slice_from(\"at\");\n                    break;\n                case 7:\n                    // (, line 87\n                    // <-, line 87\n                    slice_from(\"a\\u0163i\");\n                    break;\n            }\n            return true;\n        }\n\n","sourceOld":"        private boolean r_step_0() {\n            int among_var;\n            int v_1;\n            // (, line 72\n            // [, line 73\n            ket = cursor;\n            // substring, line 73\n            among_var = find_among_b(a_1, 16);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 73\n            bra = cursor;\n            // call R1, line 73\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 75\n                    // delete, line 75\n                    slice_del();\n                    break;\n                case 2:\n                    // (, line 77\n                    // <-, line 77\n                    slice_from(\"a\");\n                    break;\n                case 3:\n                    // (, line 79\n                    // <-, line 79\n                    slice_from(\"e\");\n                    break;\n                case 4:\n                    // (, line 81\n                    // <-, line 81\n                    slice_from(\"i\");\n                    break;\n                case 5:\n                    // (, line 83\n                    // not, line 83\n                    {\n                        v_1 = limit - cursor;\n                        lab0: do {\n                            // literal, line 83\n                            if (!(eq_s_b(2, \"ab\")))\n                            {\n                                break lab0;\n                            }\n                            return false;\n                        } while (false);\n                        cursor = limit - v_1;\n                    }\n                    // <-, line 83\n                    slice_from(\"i\");\n                    break;\n                case 6:\n                    // (, line 85\n                    // <-, line 85\n                    slice_from(\"at\");\n                    break;\n                case 7:\n                    // (, line 87\n                    // <-, line 87\n                    slice_from(\"a\\u0163i\");\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/tartarus/snowball/ext/RomanianStemmer#r_step_0().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/ext/RomanianStemmer#r_step_0().mjava","sourceNew":"        private boolean r_step_0() {\n            int among_var;\n            int v_1;\n            // (, line 72\n            // [, line 73\n            ket = cursor;\n            // substring, line 73\n            among_var = find_among_b(a_1, 16);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 73\n            bra = cursor;\n            // call R1, line 73\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 75\n                    // delete, line 75\n                    slice_del();\n                    break;\n                case 2:\n                    // (, line 77\n                    // <-, line 77\n                    slice_from(\"a\");\n                    break;\n                case 3:\n                    // (, line 79\n                    // <-, line 79\n                    slice_from(\"e\");\n                    break;\n                case 4:\n                    // (, line 81\n                    // <-, line 81\n                    slice_from(\"i\");\n                    break;\n                case 5:\n                    // (, line 83\n                    // not, line 83\n                    {\n                        v_1 = limit - cursor;\n                        lab0: do {\n                            // literal, line 83\n                            if (!(eq_s_b(2, \"ab\")))\n                            {\n                                break lab0;\n                            }\n                            return false;\n                        } while (false);\n                        cursor = limit - v_1;\n                    }\n                    // <-, line 83\n                    slice_from(\"i\");\n                    break;\n                case 6:\n                    // (, line 85\n                    // <-, line 85\n                    slice_from(\"at\");\n                    break;\n                case 7:\n                    // (, line 87\n                    // <-, line 87\n                    slice_from(\"a\\u0163i\");\n                    break;\n            }\n            return true;\n        }\n\n","sourceOld":"        private boolean r_step_0() {\n            int among_var;\n            int v_1;\n            // (, line 72\n            // [, line 73\n            ket = cursor;\n            // substring, line 73\n            among_var = find_among_b(a_1, 16);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 73\n            bra = cursor;\n            // call R1, line 73\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 75\n                    // delete, line 75\n                    slice_del();\n                    break;\n                case 2:\n                    // (, line 77\n                    // <-, line 77\n                    slice_from(\"a\");\n                    break;\n                case 3:\n                    // (, line 79\n                    // <-, line 79\n                    slice_from(\"e\");\n                    break;\n                case 4:\n                    // (, line 81\n                    // <-, line 81\n                    slice_from(\"i\");\n                    break;\n                case 5:\n                    // (, line 83\n                    // not, line 83\n                    {\n                        v_1 = limit - cursor;\n                        lab0: do {\n                            // literal, line 83\n                            if (!(eq_s_b(2, \"ab\")))\n                            {\n                                break lab0;\n                            }\n                            return false;\n                        } while (false);\n                        cursor = limit - v_1;\n                    }\n                    // <-, line 83\n                    slice_from(\"i\");\n                    break;\n                case 6:\n                    // (, line 85\n                    // <-, line 85\n                    slice_from(\"at\");\n                    break;\n                case 7:\n                    // (, line 87\n                    // <-, line 87\n                    slice_from(\"a\\u0163i\");\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}