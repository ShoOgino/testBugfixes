{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","sourceNew":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","sourceNew":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","sourceNew":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","sourceNew":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        Terms terms = fieldsEnum.terms();\n        if (terms == null) {\n          continue;\n        }\n        TermsEnum termsEnum = terms.iterator(null);\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","date":1322229341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","sourceNew":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        Terms terms = fieldsEnum.terms();\n        if (terms == null) {\n          continue;\n        }\n        TermsEnum termsEnum = terms.iterator(null);\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          UnicodeUtil.UTF8toUTF16(text, spare);\n          String t = spare.toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        Terms terms = fieldsEnum.terms();\n        if (terms == null) {\n          continue;\n        }\n        TermsEnum termsEnum = terms.iterator(null);\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          String t = text.utf8ToChars(spare).toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getTopTerms(IndexReader,Set[String],int,Set[String]).mjava","sourceNew":null,"sourceOld":"  private static Map<String,TopTermQueue> getTopTerms( IndexReader reader, Set<String> fields, int numTerms, Set<String> junkWords ) throws Exception \n  {\n    Map<String,TopTermQueue> info = new HashMap<String, TopTermQueue>();\n    final CharsRef spare = new CharsRef();\n    Fields fieldsC = MultiFields.getFields(reader);\n    if (fieldsC != null) {\n      FieldsEnum fieldsEnum = fieldsC.iterator();\n      String field;\n      while((field = fieldsEnum.next()) != null) {\n\n        Terms terms = fieldsEnum.terms();\n        if (terms == null) {\n          continue;\n        }\n        TermsEnum termsEnum = terms.iterator(null);\n        BytesRef text;\n        while((text = termsEnum.next()) != null) {\n          UnicodeUtil.UTF8toUTF16(text, spare);\n          String t = spare.toString();\n  \n          // Compute distinct terms for every field\n          TopTermQueue tiq = info.get( field );\n          if( tiq == null ) {\n            tiq = new TopTermQueue( numTerms+1 );\n            info.put( field, tiq );\n          }\n\n          tiq.distinctTerms++;\n          tiq.histogram.add( termsEnum.docFreq() );  // add the term to the histogram\n        \n          // Only save the distinct terms for fields we worry about\n          if (fields != null && fields.size() > 0) {\n            if( !fields.contains( field ) ) {\n              continue;\n            }\n          }\n          if( junkWords != null && junkWords.contains( t ) ) {\n            continue;\n          }\n        \n          if( termsEnum.docFreq() > tiq.minFreq ) {\n            tiq.add(new TopTermQueue.TermInfo(new Term(field, t), termsEnum.docFreq()));\n            if (tiq.size() > numTerms) { // if tiq full\n              tiq.pop(); // remove lowest in tiq\n              tiq.minFreq = ((TopTermQueue.TermInfo)tiq.top()).docFreq; // reset minFreq\n            }\n          }\n        }\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["3cc749c053615f5871f3b95715fe292f34e70a53"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"]},"commit2Childs":{"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3cc749c053615f5871f3b95715fe292f34e70a53":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}