{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bae0bbf5dfabb3daa76f77f636f38310a28de18a","date":1456970732,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e697e346b573b1b58353f45be00090a4f2de91e7","date":1457002125,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"414425421ced68c7064f08c9da6a2c95399226d9","date":1460921822,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a194542b1c5c677348d17a32265a1ad342f3caa0","date":1461081975,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ac273b4e4637e6dd8cf5f2d90a474f897884d7","date":1505963386,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoPolygon shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoPolygon shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85da33268a9a33d1a1dc71ad826ff61037f42cbf","date":1513200768,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/ShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new AbstractRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Shape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(maxRadius -20) + 20;\n        final Circle pointZone = ctx.getShapeFactory().circle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          ShapeFactory.PolygonBuilder builder = ctx.getShapeFactory().polygon();\n          for (int i = 0; i < vertexCount; i++) {\n            final Point point = randomPointIn(pointZone);\n            builder.pointXY(point.getX(), point.getY());\n          }\n          try {\n            return builder.build();\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Shape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          try {\n            final GeoPolygon shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["112d77ac8d3e10a362516ad834c9a11d35c94234"],"85da33268a9a33d1a1dc71ad826ff61037f42cbf":["57ac273b4e4637e6dd8cf5f2d90a474f897884d7"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a194542b1c5c677348d17a32265a1ad342f3caa0","57ac273b4e4637e6dd8cf5f2d90a474f897884d7"],"57ac273b4e4637e6dd8cf5f2d90a474f897884d7":["a194542b1c5c677348d17a32265a1ad342f3caa0"],"414425421ced68c7064f08c9da6a2c95399226d9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e697e346b573b1b58353f45be00090a4f2de91e7":["112d77ac8d3e10a362516ad834c9a11d35c94234","bae0bbf5dfabb3daa76f77f636f38310a28de18a"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","e697e346b573b1b58353f45be00090a4f2de91e7"],"a194542b1c5c677348d17a32265a1ad342f3caa0":["414425421ced68c7064f08c9da6a2c95399226d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85da33268a9a33d1a1dc71ad826ff61037f42cbf"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["e697e346b573b1b58353f45be00090a4f2de91e7"],"85da33268a9a33d1a1dc71ad826ff61037f42cbf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"57ac273b4e4637e6dd8cf5f2d90a474f897884d7":["85da33268a9a33d1a1dc71ad826ff61037f42cbf","6240b74b884c5587f2a4062dd27d6c32bf228889"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"414425421ced68c7064f08c9da6a2c95399226d9":["a194542b1c5c677348d17a32265a1ad342f3caa0"],"e697e346b573b1b58353f45be00090a4f2de91e7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653","bae0bbf5dfabb3daa76f77f636f38310a28de18a","e697e346b573b1b58353f45be00090a4f2de91e7"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["414425421ced68c7064f08c9da6a2c95399226d9"],"a194542b1c5c677348d17a32265a1ad342f3caa0":["6240b74b884c5587f2a4062dd27d6c32bf228889","57ac273b4e4637e6dd8cf5f2d90a474f897884d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}