{"path":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int,int).mjava","commits":[{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Enables points indexing with selectable dimension indexing.\n   */\n  public void setDimensions(int dataDimensionCount, int indexDimensionCount, int dimensionNumBytes) {\n    if (dataDimensionCount < 0) {\n      throw new IllegalArgumentException(\"dataDimensionCount must be >= 0; got \" + dataDimensionCount);\n    }\n    if (dataDimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dataDimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dataDimensionCount);\n    }\n    if (indexDimensionCount < 0) {\n      throw new IllegalArgumentException(\"indexDimensionCount must be >= 0; got \" + indexDimensionCount);\n    }\n    if (indexDimensionCount > dataDimensionCount) {\n      throw new IllegalArgumentException(\"indexDimensionCount must be <= dataDimensionCount: \" + dataDimensionCount + \"; got \" + indexDimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionNumBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dataDimensionCount == 0) {\n      if (indexDimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dataDimensionCount is 0, indexDimensionCount must be 0; got \" + indexDimensionCount);\n      }\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dataDimensionCount is 0, dimensionNumBytes must be 0; got \" + dimensionNumBytes);\n      }\n    } else if (indexDimensionCount == 0) {\n      throw new IllegalArgumentException(\"when dataDimensionCount is > 0, indexDimensionCount must be > 0; got \" + indexDimensionCount);\n    } else if (dimensionNumBytes == 0) {\n      if (dataDimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dataDimensionCount must be 0; got \" + dataDimensionCount);\n      }\n    }\n\n    this.dataDimensionCount = dataDimensionCount;\n    this.indexDimensionCount = indexDimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int,int).mjava","sourceNew":"  /**\n   * Enables points indexing with selectable dimension indexing.\n   */\n  public void setDimensions(int dimensionCount, int indexDimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dimensionCount);\n    }\n    if (indexDimensionCount < 0) {\n      throw new IllegalArgumentException(\"indexDimensionCount must be >= 0; got \" + indexDimensionCount);\n    }\n    if (indexDimensionCount > dimensionCount) {\n      throw new IllegalArgumentException(\"indexDimensionCount must be <= dimensionCount: \" + dimensionCount + \"; got \" + indexDimensionCount);\n    }\n    if (indexDimensionCount > PointValues.MAX_INDEX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"indexDimensionCount must be <= \" + PointValues.MAX_INDEX_DIMENSIONS + \"; got \" + indexDimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionNumBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (indexDimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0, indexDimensionCount must be 0; got \" + indexDimensionCount);\n      }\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must be 0; got \" + dimensionNumBytes);\n      }\n    } else if (indexDimensionCount == 0) {\n      throw new IllegalArgumentException(\"when dimensionCount is > 0, indexDimensionCount must be > 0; got \" + indexDimensionCount);\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must be 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.indexDimensionCount = indexDimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","sourceOld":"  /**\n   * Enables points indexing with selectable dimension indexing.\n   */\n  public void setDimensions(int dataDimensionCount, int indexDimensionCount, int dimensionNumBytes) {\n    if (dataDimensionCount < 0) {\n      throw new IllegalArgumentException(\"dataDimensionCount must be >= 0; got \" + dataDimensionCount);\n    }\n    if (dataDimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dataDimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dataDimensionCount);\n    }\n    if (indexDimensionCount < 0) {\n      throw new IllegalArgumentException(\"indexDimensionCount must be >= 0; got \" + indexDimensionCount);\n    }\n    if (indexDimensionCount > dataDimensionCount) {\n      throw new IllegalArgumentException(\"indexDimensionCount must be <= dataDimensionCount: \" + dataDimensionCount + \"; got \" + indexDimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionNumBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dataDimensionCount == 0) {\n      if (indexDimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dataDimensionCount is 0, indexDimensionCount must be 0; got \" + indexDimensionCount);\n      }\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dataDimensionCount is 0, dimensionNumBytes must be 0; got \" + dimensionNumBytes);\n      }\n    } else if (indexDimensionCount == 0) {\n      throw new IllegalArgumentException(\"when dataDimensionCount is > 0, indexDimensionCount must be > 0; got \" + indexDimensionCount);\n    } else if (dimensionNumBytes == 0) {\n      if (dataDimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dataDimensionCount must be 0; got \" + dataDimensionCount);\n      }\n    }\n\n    this.dataDimensionCount = dataDimensionCount;\n    this.indexDimensionCount = indexDimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6652c943595e92c187ee904c382863013eae28f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}