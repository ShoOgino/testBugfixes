{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","commits":[{"id":"e784d2742d5536b6fceba16c6d032d4b2e38e320","date":1349724693,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex().mjava","sourceNew":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.equals(END)) {\n      readLine();\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets[upto] = in.getFilePointer();\n        upto++;\n      }\n    }\n    assert upto == offsets.length;\n  }\n\n","sourceOld":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex() throws IOException {\n    offsets = new ArrayList<Long>();\n    while (!scratch.equals(END)) {\n      readLine();\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets.add(in.getFilePointer());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","sourceNew":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(in);\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.equals(END)) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets[upto] = input.getFilePointer();\n        upto++;\n      }\n    }\n    SimpleTextUtil.checkFooter(input, CHECKSUM);\n    assert upto == offsets.length;\n  }\n\n","sourceOld":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.equals(END)) {\n      readLine();\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets[upto] = in.getFilePointer();\n        upto++;\n      }\n    }\n    assert upto == offsets.length;\n  }\n\n","bugFix":null,"bugIntro":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","sourceNew":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(in);\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.equals(END)) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets[upto] = input.getFilePointer();\n        upto++;\n      }\n    }\n    SimpleTextUtil.checkFooter(input, CHECKSUM);\n    assert upto == offsets.length;\n  }\n\n","sourceOld":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.equals(END)) {\n      readLine();\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets[upto] = in.getFilePointer();\n        upto++;\n      }\n    }\n    assert upto == offsets.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caf65fa364fcf8ea8ef1032c1247622933af3b04","date":1397057745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","sourceNew":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(in);\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.equals(END)) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets[upto] = input.getFilePointer();\n        upto++;\n      }\n    }\n    SimpleTextUtil.checkFooter(input);\n    assert upto == offsets.length;\n  }\n\n","sourceOld":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(in);\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.equals(END)) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets[upto] = input.getFilePointer();\n        upto++;\n      }\n    }\n    SimpleTextUtil.checkFooter(input, CHECKSUM);\n    assert upto == offsets.length;\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readIndex(int).mjava","sourceNew":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(in);\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.get().equals(END)) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (StringHelper.startsWith(scratch.get(), DOC)) {\n        offsets[upto] = input.getFilePointer();\n        upto++;\n      }\n    }\n    SimpleTextUtil.checkFooter(input);\n    assert upto == offsets.length;\n  }\n\n","sourceOld":"  // we don't actually write a .fdx-like index, instead we read the \n  // stored fields file in entirety up-front and save the offsets \n  // so we can seek to the documents later.\n  private void readIndex(int size) throws IOException {\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(in);\n    offsets = new long[size];\n    int upto = 0;\n    while (!scratch.equals(END)) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (StringHelper.startsWith(scratch, DOC)) {\n        offsets[upto] = input.getFilePointer();\n        upto++;\n      }\n    }\n    SimpleTextUtil.checkFooter(input);\n    assert upto == offsets.length;\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8","61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e784d2742d5536b6fceba16c6d032d4b2e38e320":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["e784d2742d5536b6fceba16c6d032d4b2e38e320","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["e784d2742d5536b6fceba16c6d032d4b2e38e320"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"e784d2742d5536b6fceba16c6d032d4b2e38e320":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","caf65fa364fcf8ea8ef1032c1247622933af3b04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e784d2742d5536b6fceba16c6d032d4b2e38e320"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}