{"path":"lucene/src/test-framework/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        return w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        return w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5f712c454f847e3896fde721cea1fac5de2313f","date":1321541123,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        return w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5f712c454f847e3896fde721cea1fac5de2313f":["7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a5f712c454f847e3896fde721cea1fac5de2313f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a5f712c454f847e3896fde721cea1fac5de2313f"],"a5f712c454f847e3896fde721cea1fac5de2313f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}