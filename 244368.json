{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","commits":[{"id":"ae3be3418aea9954be27a83315087f67c0c2201e","date":1361023362,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pendingOff == MAX_PENDING_COUNT) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      if (deltas[valuesOff] != null) {\n        deltasBytes += deltas[valuesOff].ramBytesUsed();\n      }\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pendingOff == MAX_PENDING_COUNT) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      if (deltas[valuesOff] != null) {\n        deltasBytes += deltas[valuesOff].ramBytesUsed();\n      }\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22344cc5c695683a5a6cecff291f840d71c20d25","date":1370561415,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","sourceNew":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pendingOff == pending.length) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      if (deltas[valuesOff] != null) {\n        deltasBytes += deltas[valuesOff].ramBytesUsed();\n      }\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","sourceOld":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pendingOff == MAX_PENDING_COUNT) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      if (deltas[valuesOff] != null) {\n        deltasBytes += deltas[valuesOff].ramBytesUsed();\n      }\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","date":1373959221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","sourceNew":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pending == null) {\n      throw new IllegalStateException(\"This buffer is frozen\");\n    }\n    if (pendingOff == pending.length) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      deltasBytes += deltas[valuesOff].ramBytesUsed();\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","sourceOld":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pendingOff == pending.length) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      if (deltas[valuesOff] != null) {\n        deltasBytes += deltas[valuesOff].ramBytesUsed();\n      }\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","sourceNew":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pending == null) {\n      throw new IllegalStateException(\"This buffer is frozen\");\n    }\n    if (pendingOff == pending.length) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      deltasBytes += deltas[valuesOff].ramBytesUsed();\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","sourceOld":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pendingOff == pending.length) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      if (deltas[valuesOff] != null) {\n        deltasBytes += deltas[valuesOff].ramBytesUsed();\n      }\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","sourceNew":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pending == null) {\n      throw new IllegalStateException(\"This buffer is frozen\");\n    }\n    if (pendingOff == pending.length) {\n      // check size\n      if (values.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      valuesBytes += values[valuesOff].ramBytesUsed();\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","sourceOld":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pending == null) {\n      throw new IllegalStateException(\"This buffer is frozen\");\n    }\n    if (pendingOff == pending.length) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      deltasBytes += deltas[valuesOff].ramBytesUsed();\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","sourceNew":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pending == null) {\n      throw new IllegalStateException(\"This buffer is frozen\");\n    }\n    if (pendingOff == pending.length) {\n      // check size\n      if (values.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      valuesBytes += values[valuesOff].ramBytesUsed();\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","sourceOld":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pending == null) {\n      throw new IllegalStateException(\"This buffer is frozen\");\n    }\n    if (pendingOff == pending.length) {\n      // check size\n      if (deltas.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      deltasBytes += deltas[valuesOff].ramBytesUsed();\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer#add(long).mjava","sourceNew":null,"sourceOld":"  /** Append a value to this buffer. */\n  public final void add(long l) {\n    if (pending == null) {\n      throw new IllegalStateException(\"This buffer is frozen\");\n    }\n    if (pendingOff == pending.length) {\n      // check size\n      if (values.length == valuesOff) {\n        final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n        grow(newLength);\n      }\n      packPendingValues();\n      valuesBytes += values[valuesOff].ramBytesUsed();\n      ++valuesOff;\n      // reset pending buffer\n      pendingOff = 0;\n    }\n    pending[pendingOff++] = l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["22344cc5c695683a5a6cecff291f840d71c20d25"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["22344cc5c695683a5a6cecff291f840d71c20d25","3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"22344cc5c695683a5a6cecff291f840d71c20d25":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae3be3418aea9954be27a83315087f67c0c2201e"],"ae3be3418aea9954be27a83315087f67c0c2201e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["cb240aebd5a347d79f642127ad9255dd9a979f06"]},"commit2Childs":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cb240aebd5a347d79f642127ad9255dd9a979f06"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","ae3be3418aea9954be27a83315087f67c0c2201e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"22344cc5c695683a5a6cecff291f840d71c20d25":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["22344cc5c695683a5a6cecff291f840d71c20d25"],"ae3be3418aea9954be27a83315087f67c0c2201e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}