{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoDocIdSet#makeDisi(int[]).mjava","commits":[{"id":"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c","date":1373406544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoDocIdSet#makeDisi(int[]).mjava","pathOld":"/dev/null","sourceNew":"  private static DocIdSetIterator makeDisi(final int[] docIds) {\n    class IntArrayDisi extends DocIdSetIterator {\n      int i = 0;\n      int docId = -1;\n\n      @Override\n      public int docID() {\n        return docId;\n      }\n\n      @Override\n      public int nextDoc() {\n        if (i >= docIds.length) {\n          docId = NO_MORE_DOCS;\n          return docId;\n        }\n        if (docIds[i] < docId) { // Elias-Fano sequence should be non decreasing.\n          // The non decreasing condition for Elias-Fano is weaker than normal increasing for DocIdSetIterator\n          throw new AssertionError(\"docIds[] out of order\");\n        }\n        docId = docIds[i++]; // increase i to just after current\n        return docId;\n      }\n\n      @Override\n      public int advance(int target) {\n        // ( ((i == 0) and (docId == -1)) or\n        //   ((i > 0) and (docIds.length > 0) and (i <= docIds.length) and (docId == docIds[i-1])) )\n\n        // The behavior of this method is undefined when called with target ≤ current, or after the iterator has exhausted.\n        // Both cases may result in unpredicted behavior, and may throw an assertion error or an IOOBE here.\n        // So when nextDoc() or advance() were called earlier, the target should be bigger than current docId:\n        assert (docId == -1) || (docId < target);\n\n\n        // Do a binary search for the index j for which:\n        // ((j >= i)\n        //  and ((j < docIds.length) implies (docIds[j] >= target))\n        //  and ((j >= 1) implies (docIds[j-1] < target)) )\n        int j = docIds.length;\n        while (i < j) {\n          // ((0 <= i) and (i < j) and (j <= docIds.length)) so (docIds.length > 0)\n          int m = i + (j - i) / 2; // (i <= m) and (m < j); avoid overflow for (i + j)\n          if (docIds[m] < target) {\n            i = m + 1; // (docIds[i-1] <  target) and (i <= j)\n          } else {\n            j = m; //     (docIds[j] >= target)   and (i <= j)\n          }\n        } // (i == j)\n        docId = (i >= docIds.length)\n            ? NO_MORE_DOCS // exhausted\n                : docIds[i++]; // increase i to just after current\n        return docId;\n      }\n\n      @Override\n      public long cost() {\n        return docIds.length;\n      }\n    };\n    return new IntArrayDisi();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7581da3051efe8071ae92ac7eca27a270bc4611e","date":1373613227,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoDocIdSet#makeDisi(int[]).mjava","sourceNew":null,"sourceOld":"  private static DocIdSetIterator makeDisi(final int[] docIds) {\n    class IntArrayDisi extends DocIdSetIterator {\n      int i = 0;\n      int docId = -1;\n\n      @Override\n      public int docID() {\n        return docId;\n      }\n\n      @Override\n      public int nextDoc() {\n        if (i >= docIds.length) {\n          docId = NO_MORE_DOCS;\n          return docId;\n        }\n        if (docIds[i] < docId) { // Elias-Fano sequence should be non decreasing.\n          // The non decreasing condition for Elias-Fano is weaker than normal increasing for DocIdSetIterator\n          throw new AssertionError(\"docIds[] out of order\");\n        }\n        docId = docIds[i++]; // increase i to just after current\n        return docId;\n      }\n\n      @Override\n      public int advance(int target) {\n        // ( ((i == 0) and (docId == -1)) or\n        //   ((i > 0) and (docIds.length > 0) and (i <= docIds.length) and (docId == docIds[i-1])) )\n\n        // The behavior of this method is undefined when called with target ≤ current, or after the iterator has exhausted.\n        // Both cases may result in unpredicted behavior, and may throw an assertion error or an IOOBE here.\n        // So when nextDoc() or advance() were called earlier, the target should be bigger than current docId:\n        assert (docId == -1) || (docId < target);\n\n\n        // Do a binary search for the index j for which:\n        // ((j >= i)\n        //  and ((j < docIds.length) implies (docIds[j] >= target))\n        //  and ((j >= 1) implies (docIds[j-1] < target)) )\n        int j = docIds.length;\n        while (i < j) {\n          // ((0 <= i) and (i < j) and (j <= docIds.length)) so (docIds.length > 0)\n          int m = i + (j - i) / 2; // (i <= m) and (m < j); avoid overflow for (i + j)\n          if (docIds[m] < target) {\n            i = m + 1; // (docIds[i-1] <  target) and (i <= j)\n          } else {\n            j = m; //     (docIds[j] >= target)   and (i <= j)\n          }\n        } // (i == j)\n        docId = (i >= docIds.length)\n            ? NO_MORE_DOCS // exhausted\n                : docIds[i++]; // increase i to just after current\n        return docId;\n      }\n\n      @Override\n      public long cost() {\n        return docIds.length;\n      }\n    };\n    return new IntArrayDisi();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7581da3051efe8071ae92ac7eca27a270bc4611e":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7581da3051efe8071ae92ac7eca27a270bc4611e"]},"commit2Childs":{"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["7581da3051efe8071ae92ac7eca27a270bc4611e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}