{"path":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee","date":1421799060,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(new File(storeDir, factory.storeFileName())));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8b3e188d0bac874c98205d981a03ddeab0f3f2a","date":1421917333,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else {\n        // attempt reload of the stored lookup\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46a552067d28b0dd9e5716bc043c22ccf0fc044","date":1422225644,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1635ba58109b4c7c7da50f4dad433333258904","date":1444503719,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /** \n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n    \n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a40a791b48a42c737b66b146819214d90770e38c","date":1471978955,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    log.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    log.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          LOG.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      LOG.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    LOG.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    log.info(\"init: {}\", config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", LOOKUP_IMPL, lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", DICTIONARY_IMPL, dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    log.info(\"Dictionary loaded with params: {}\", config);\n\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    log.info(\"init: \" + config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No \" + LOOKUP_IMPL + \" parameter was provided falling back to \" + lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No \" + DICTIONARY_IMPL + \" parameter was provided falling back to \" + dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    log.info(\"Dictionary loaded with params: \" + config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    log.info(\"init: {}\", config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", LOOKUP_IMPL, lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"attempt reload of the stored lookup from file {}\", getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", DICTIONARY_IMPL, dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    log.info(\"Dictionary loaded with params: {}\", config);\n\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    log.info(\"init: {}\", config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", LOOKUP_IMPL, lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"attempt reload of the stored lookup from file \" + getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", DICTIONARY_IMPL, dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    log.info(\"Dictionary loaded with params: {}\", config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#init(NamedList[#],SolrCore).mjava","sourceNew":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  @SuppressWarnings({\"unchecked\"})\n  public String init(NamedList<?> config, SolrCore core) {\n    log.info(\"init: {}\", config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", LOOKUP_IMPL, lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"attempt reload of the stored lookup from file {}\", getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", DICTIONARY_IMPL, dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    log.info(\"Dictionary loaded with params: {}\", config);\n\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Uses the <code>config</code> and the <code>core</code> to initialize the underlying \n   * Lucene suggester\n   * */\n  public String init(NamedList<?> config, SolrCore core) {\n    log.info(\"init: {}\", config);\n    \n    // read the config\n    name = config.get(NAME) != null ? (String) config.get(NAME)\n        : DEFAULT_DICT_NAME;\n    sourceLocation = (String) config.get(LOCATION);\n    lookupImpl = (String) config.get(LOOKUP_IMPL);\n    dictionaryImpl = (String) config.get(DICTIONARY_IMPL);\n    String store = (String)config.get(STORE_DIR);\n\n    if (lookupImpl == null) {\n      lookupImpl = LookupFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", LOOKUP_IMPL, lookupImpl);\n    }\n\n    contextFilterQueryAnalyzer = new TokenizerChain(new StandardTokenizerFactory(Collections.EMPTY_MAP), null);\n\n    // initialize appropriate lookup instance\n    factory = core.getResourceLoader().newInstance(lookupImpl, LookupFactory.class);\n    lookup = factory.create(config, core);\n    \n    if (lookup != null && lookup instanceof Closeable) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            log.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    // if store directory is provided make it or load up the lookup with its content\n    if (store != null && !store.isEmpty()) {\n      storeDir = new File(store);\n      if (!storeDir.isAbsolute()) {\n        storeDir = new File(core.getDataDir() + File.separator + storeDir);\n      }\n      if (!storeDir.exists()) {\n        storeDir.mkdirs();\n      } else if (getStoreFile().exists()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"attempt reload of the stored lookup from file {}\", getStoreFile());\n        }\n        try {\n          lookup.load(new FileInputStream(getStoreFile()));\n        } catch (IOException e) {\n          log.warn(\"Loading stored lookup data failed, possibly not cached yet\");\n        }\n      }\n    }\n    \n    // dictionary configuration\n    if (dictionaryImpl == null) {\n      dictionaryImpl = (sourceLocation == null) ? DictionaryFactory.DEFAULT_INDEX_BASED_DICT : \n        DictionaryFactory.DEFAULT_FILE_BASED_DICT;\n      log.info(\"No {} parameter was provided falling back to {}\", DICTIONARY_IMPL, dictionaryImpl);\n    }\n\n    dictionaryFactory = core.getResourceLoader().newInstance(dictionaryImpl, DictionaryFactory.class);\n    dictionaryFactory.setParams(config);\n    log.info(\"Dictionary loaded with params: {}\", config);\n\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8b3e188d0bac874c98205d981a03ddeab0f3f2a":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["c8b3e188d0bac874c98205d981a03ddeab0f3f2a"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a40a791b48a42c737b66b146819214d90770e38c":["de1635ba58109b4c7c7da50f4dad433333258904"],"b7605579001505896d48b07160075a5c8b8e128e":["7f2e96099703c24c0c63d27806ba7020626b649b","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["de1635ba58109b4c7c7da50f4dad433333258904","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["7f2e96099703c24c0c63d27806ba7020626b649b"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"de1635ba58109b4c7c7da50f4dad433333258904":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f2e96099703c24c0c63d27806ba7020626b649b"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["de1635ba58109b4c7c7da50f4dad433333258904","a40a791b48a42c737b66b146819214d90770e38c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"c8b3e188d0bac874c98205d981a03ddeab0f3f2a":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["de1635ba58109b4c7c7da50f4dad433333258904"],"575e66bd4b2349209027f6801184da7fc3cba13f":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a40a791b48a42c737b66b146819214d90770e38c":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"b7605579001505896d48b07160075a5c8b8e128e":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["c8b3e188d0bac874c98205d981a03ddeab0f3f2a"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"de1635ba58109b4c7c7da50f4dad433333258904":["a40a791b48a42c737b66b146819214d90770e38c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"7f2e96099703c24c0c63d27806ba7020626b649b":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}