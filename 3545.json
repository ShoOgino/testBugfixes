{"path":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","commits":[{"id":"0b631a3d48258df52a36daa975d3f8deee09b75d","date":1438887563,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    String jsonRules= \"{\" +\n        \"  user-role : {\" +\n        \"    steve: [dev,user],\" +\n        \"    tim: [dev,admin],\" +\n        \"    joe: [user],\" +\n        \"    noble:[dev,user]\" +\n        \"  },\" +\n        \"  permissions : {\" +\n        \"    schema-edit :{\" +\n        \"      role:admin\" +\n        \"    },\" +\n        \"    collection-admin-read :{\" +\n        \"      role:null\" +\n        \"    },\" +\n        \"    collection-admin-edit :{\" +\n        \"      role:admin\" +\n        \"    },\" +\n        \"    mycoll_update: {\" +\n        \"      collection:mycoll,\" +\n        \"      path:'/update/*',\" +\n        \"      role:[dev,admin]\" +\n        \"    }}}\" ;\n    Map initConfig = (Map) Utils.fromJSON(jsonRules.getBytes(StandardCharsets.UTF_8));\n\n    RuleBasedAuthorizationPlugin plugin= new RuleBasedAuthorizationPlugin();\n    plugin.init(initConfig);\n\n    Map<String, Object> values = Utils.makeMap(\n        \"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", Collections.singletonList(new AuthorizationContext.CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    AuthorizationContext context = new MockAuthorizationContext(values);\n\n    AuthorizationResponse authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK, authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"httpMethod\",\"GET\");\n    values.put(\"resource\",\"/schema\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema/fields\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema\");\n    values.put(\"httpMethod\",\"POST\");\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"resource\",\"/admin/collections\");\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"LIST\")));\n    values.put(\"httpMethod\",\"GET\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"CREATE\")));\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS, authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609b959cb2dad7c9d9b3237fa2b806629e9206d","date":1439303330,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    String jsonRules= \"{\" +\n        \"  user-role : {\" +\n        \"    steve: [dev,user],\" +\n        \"    tim: [dev,admin],\" +\n        \"    joe: [user],\" +\n        \"    noble:[dev,user]\" +\n        \"  },\" +\n        \"  permissions : [\" +\n        \"    {name:'schema-edit',\" +\n        \"     role:admin},\" +\n        \"    {name:'collection-admin-read',\" +\n        \"    role:null},\" +\n        \"    {name:collection-admin-edit ,\" +\n        \"    role:admin},\" +\n        \"    {name:mycoll_update,\" +\n        \"      collection:mycoll,\" +\n        \"      path:'/update/*',\" +\n        \"      role:[dev,admin]\" +\n        \"    }]}\" ;\n    Map initConfig = (Map) Utils.fromJSON(jsonRules.getBytes(StandardCharsets.UTF_8));\n\n    RuleBasedAuthorizationPlugin plugin= new RuleBasedAuthorizationPlugin();\n    plugin.init(initConfig);\n\n    Map<String, Object> values = Utils.makeMap(\n        \"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", Collections.singletonList(new AuthorizationContext.CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    AuthorizationContext context = new MockAuthorizationContext(values);\n\n    AuthorizationResponse authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK, authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"httpMethod\",\"GET\");\n    values.put(\"resource\",\"/schema\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema/fields\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema\");\n    values.put(\"httpMethod\",\"POST\");\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"resource\",\"/admin/collections\");\n    values.put(\"collectionRequests\",new ArrayList<>());\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"LIST\")));\n    values.put(\"httpMethod\",\"GET\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"CREATE\")));\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS, authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    String jsonRules= \"{\" +\n        \"  user-role : {\" +\n        \"    steve: [dev,user],\" +\n        \"    tim: [dev,admin],\" +\n        \"    joe: [user],\" +\n        \"    noble:[dev,user]\" +\n        \"  },\" +\n        \"  permissions : {\" +\n        \"    schema-edit :{\" +\n        \"      role:admin\" +\n        \"    },\" +\n        \"    collection-admin-read :{\" +\n        \"      role:null\" +\n        \"    },\" +\n        \"    collection-admin-edit :{\" +\n        \"      role:admin\" +\n        \"    },\" +\n        \"    mycoll_update: {\" +\n        \"      collection:mycoll,\" +\n        \"      path:'/update/*',\" +\n        \"      role:[dev,admin]\" +\n        \"    }}}\" ;\n    Map initConfig = (Map) Utils.fromJSON(jsonRules.getBytes(StandardCharsets.UTF_8));\n\n    RuleBasedAuthorizationPlugin plugin= new RuleBasedAuthorizationPlugin();\n    plugin.init(initConfig);\n\n    Map<String, Object> values = Utils.makeMap(\n        \"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", Collections.singletonList(new AuthorizationContext.CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    AuthorizationContext context = new MockAuthorizationContext(values);\n\n    AuthorizationResponse authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK, authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"httpMethod\",\"GET\");\n    values.put(\"resource\",\"/schema\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema/fields\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema\");\n    values.put(\"httpMethod\",\"POST\");\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"resource\",\"/admin/collections\");\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"LIST\")));\n    values.put(\"httpMethod\",\"GET\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"CREATE\")));\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS, authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n\n  }\n\n","bugFix":null,"bugIntro":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76","date":1441196471,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    String jsonRules= \"{\" +\n        \"  user-role : {\" +\n        \"    steve: [dev,user],\" +\n        \"    tim: [dev,admin],\" +\n        \"    joe: [user],\" +\n        \"    noble:[dev,user]\" +\n        \"  },\" +\n        \"  permissions : [\" +\n        \"    {name:'schema-edit',\" +\n        \"     role:admin},\" +\n        \"    {name:'collection-admin-read',\" +\n        \"    role:null},\" +\n        \"    {name:collection-admin-edit ,\" +\n        \"    role:admin},\" +\n        \"    {name:mycoll_update,\" +\n        \"      collection:mycoll,\" +\n        \"      path:'/update/*',\" +\n        \"      role:[dev,admin]\" +\n        \"    }]}\" ;\n    Map initConfig = (Map) Utils.fromJSON(jsonRules.getBytes(StandardCharsets.UTF_8));\n\n    RuleBasedAuthorizationPlugin plugin= new RuleBasedAuthorizationPlugin();\n    plugin.init(initConfig);\n\n    Map<String, Object> values = Utils.makeMap(\n        \"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", Collections.singletonList(new AuthorizationContext.CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    AuthorizationContext context = new MockAuthorizationContext(values);\n\n    AuthorizationResponse authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK, authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"httpMethod\",\"GET\");\n    values.put(\"resource\",\"/schema\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema/fields\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema\");\n    values.put(\"httpMethod\",\"POST\");\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"resource\",\"/admin/collections\");\n    values.put(\"requestType\", AuthorizationContext.RequestType.ADMIN);\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"LIST\")));\n    values.put(\"httpMethod\",\"GET\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"CREATE\")));\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS, authResp.statusCode);\n\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"RELOAD\")));\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS, authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    String jsonRules= \"{\" +\n        \"  user-role : {\" +\n        \"    steve: [dev,user],\" +\n        \"    tim: [dev,admin],\" +\n        \"    joe: [user],\" +\n        \"    noble:[dev,user]\" +\n        \"  },\" +\n        \"  permissions : [\" +\n        \"    {name:'schema-edit',\" +\n        \"     role:admin},\" +\n        \"    {name:'collection-admin-read',\" +\n        \"    role:null},\" +\n        \"    {name:collection-admin-edit ,\" +\n        \"    role:admin},\" +\n        \"    {name:mycoll_update,\" +\n        \"      collection:mycoll,\" +\n        \"      path:'/update/*',\" +\n        \"      role:[dev,admin]\" +\n        \"    }]}\" ;\n    Map initConfig = (Map) Utils.fromJSON(jsonRules.getBytes(StandardCharsets.UTF_8));\n\n    RuleBasedAuthorizationPlugin plugin= new RuleBasedAuthorizationPlugin();\n    plugin.init(initConfig);\n\n    Map<String, Object> values = Utils.makeMap(\n        \"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", Collections.singletonList(new AuthorizationContext.CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    AuthorizationContext context = new MockAuthorizationContext(values);\n\n    AuthorizationResponse authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK, authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"httpMethod\",\"GET\");\n    values.put(\"resource\",\"/schema\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema/fields\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema\");\n    values.put(\"httpMethod\",\"POST\");\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"resource\",\"/admin/collections\");\n    values.put(\"collectionRequests\",new ArrayList<>());\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"LIST\")));\n    values.put(\"httpMethod\",\"GET\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"CREATE\")));\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS, authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n\n  }\n\n","bugFix":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b64593b2f4a8223c433f1da7f63c43dc2049e5d1","date":1450206051,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"httpMethod\", \"POST\")\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"httpMethod\", \"POST\" )\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    String jsonRules= \"{\" +\n        \"  user-role : {\" +\n        \"    steve: [dev,user],\" +\n        \"    tim: [dev,admin],\" +\n        \"    joe: [user],\" +\n        \"    noble:[dev,user]\" +\n        \"  },\" +\n        \"  permissions : [\" +\n        \"    {name:'schema-edit',\" +\n        \"     role:admin},\" +\n        \"    {name:'collection-admin-read',\" +\n        \"    role:null},\" +\n        \"    {name:collection-admin-edit ,\" +\n        \"    role:admin},\" +\n        \"    {name:mycoll_update,\" +\n        \"      collection:mycoll,\" +\n        \"      path:'/update/*',\" +\n        \"      role:[dev,admin]\" +\n        \"    }]}\" ;\n    Map initConfig = (Map) Utils.fromJSON(jsonRules.getBytes(StandardCharsets.UTF_8));\n\n    RuleBasedAuthorizationPlugin plugin= new RuleBasedAuthorizationPlugin();\n    plugin.init(initConfig);\n\n    Map<String, Object> values = Utils.makeMap(\n        \"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", Collections.singletonList(new AuthorizationContext.CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    AuthorizationContext context = new MockAuthorizationContext(values);\n\n    AuthorizationResponse authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK, authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"httpMethod\",\"GET\");\n    values.put(\"resource\",\"/schema\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema/fields\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"resource\",\"/schema\");\n    values.put(\"httpMethod\",\"POST\");\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"resource\",\"/admin/collections\");\n    values.put(\"requestType\", AuthorizationContext.RequestType.ADMIN);\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"LIST\")));\n    values.put(\"httpMethod\",\"GET\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.remove(\"userPrincipal\");\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"CREATE\")));\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS, authResp.statusCode);\n\n    values.put(\"params\", new MapSolrParams(Collections.singletonMap(\"action\", \"RELOAD\")));\n    authResp = plugin.authorize(context);\n    assertEquals(PROMPT_FOR_CREDENTIALS, authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"somebody\"));\n    authResp = plugin.authorize(context);\n    assertEquals(FORBIDDEN,authResp.statusCode);\n\n    values.put(\"userPrincipal\", new BasicUserPrincipal(\"tim\"));\n    authResp = plugin.authorize(context);\n    assertEquals(STATUS_OK,authResp.statusCode);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38670fe54ff76ff2732ce6ed9d48b220c93b1dbe","date":1450360183,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\" )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\")\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\" )\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\")\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\" )\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"httpMethod\", \"POST\")\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"httpMethod\", \"POST\" )\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239a1d4a10c03638628b6aa312f3c64ed9db72d2","date":1450681874,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\" )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\")\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\" )\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\")\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\" )\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\" )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\")\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\" )\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\")\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\" )\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85784a21c6101aadd8d5b3d9dfed51279fbd43d9","date":1458237890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\" )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\")\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\" )\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\")\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\")\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\" )\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9ec10ba0eb28a276751618d07e002582d26f17","date":1461678863,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", \"/replication\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebd6b7b6f5196cb5defe92032d6cc2147690954f","date":1462271185,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    List permissions = (List) rules.get(\"permissions\");\n    permissions.remove(permissions.size() -1);//remove the 'all' permission\n    permissions.add(makeMap(\"name\", \"test-params\", \"role\", \"admin\", \"path\", \"/x\", \"params\",\n        makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\"))));\n    this.permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6548a35b9da836a0b749064ee61085bd7cd80ffb","date":1462272361,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    List permissions = (List) rules.get(\"permissions\");\n    permissions.remove(permissions.size() -1);//remove the 'all' permission\n    permissions.add(makeMap(\"name\", \"test-params\", \"role\", \"admin\", \"path\", \"/x\", \"params\",\n        makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\"))));\n    this.permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    List permissions = (List) rules.get(\"permissions\");\n    permissions.remove(permissions.size() -1);//remove the 'all' permission\n    permissions.add(makeMap(\"name\", \"test-params\", \"role\", \"admin\", \"path\", \"/x\", \"params\",\n        makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\"))));\n    this.permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64525b2d504de9b9de3ad1e045d6413868907459","date":1489032702,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    List permissions = (List) rules.get(\"permissions\");\n    permissions.remove(permissions.size() -1);//remove the 'all' permission\n    permissions.add(makeMap(\"name\", \"test-params\", \"role\", \"admin\", \"path\", \"/x\", \"params\",\n        makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\"))));\n    this.permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/update\",\n        \"userPrincipal\", \"solr\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new UpdateRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN, (Map<String, Object>) Utils.fromJSONString( \"{user-role:{\" +\n        \"      admin:[admin_role],\" +\n        \"      update:[update_role],\" +\n        \"      solr:[read_role]},\" +\n        \"    permissions:[\" +\n        \"      {name:update, role:[admin_role,update_role]},\" +\n        \"      {name:read, role:[admin_role,update_role,read_role]}\" +\n        \"]}\"));\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    List permissions = (List) rules.get(\"permissions\");\n    permissions.remove(permissions.size() -1);//remove the 'all' permission\n    permissions.add(makeMap(\"name\", \"test-params\", \"role\", \"admin\", \"path\", \"/x\", \"params\",\n        makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\"))));\n    this.permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4","date":1553913192,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  public void testBasicPermissions() {\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    List permissions = (List) rules.get(\"permissions\");\n    permissions.remove(permissions.size() -1);//remove the 'all' permission\n    permissions.add(makeMap(\"name\", \"test-params\", \"role\", \"admin\", \"path\", \"/x\", \"params\",\n        makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\"))));\n    this.permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/update\",\n        \"userPrincipal\", \"solr\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new UpdateRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN, (Map<String, Object>) Utils.fromJSONString( \"{user-role:{\" +\n        \"      admin:[admin_role],\" +\n        \"      update:[update_role],\" +\n        \"      solr:[read_role]},\" +\n        \"    permissions:[\" +\n        \"      {name:update, role:[admin_role,update_role]},\" +\n        \"      {name:read, role:[admin_role,update_role,read_role]}\" +\n        \"]}\"));\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    int STATUS_OK = 200;\n    int FORBIDDEN = 403;\n    int PROMPT_FOR_CREDENTIALS = 401;\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    List permissions = (List) rules.get(\"permissions\");\n    permissions.remove(permissions.size() -1);//remove the 'all' permission\n    permissions.add(makeMap(\"name\", \"test-params\", \"role\", \"admin\", \"path\", \"/x\", \"params\",\n        makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\"))));\n    this.permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/update\",\n        \"userPrincipal\", \"solr\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new UpdateRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN, (Map<String, Object>) Utils.fromJSONString( \"{user-role:{\" +\n        \"      admin:[admin_role],\" +\n        \"      update:[update_role],\" +\n        \"      solr:[read_role]},\" +\n        \"    permissions:[\" +\n        \"      {name:update, role:[admin_role,update_role]},\" +\n        \"      {name:read, role:[admin_role,update_role,read_role]}\" +\n        \"]}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testBasicPermissions().mjava","sourceNew":"  @Test\n  public void testBasicPermissions() {\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n    setUserRole(\"cio\", \"su\");\n    addPermission(\"all\", \"su\");\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    resetPermissionsAndRoles();\n    addPermission(\"core-admin-edit\", \"su\");\n    addPermission(\"core-admin-read\", \"user\");\n    setUserRole(\"cio\", \"su\");\n    addPermission(\"all\", \"su\");\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK);\n\n    resetPermissionsAndRoles();\n    addPermission(\"test-params\", \"admin\", \"/x\", makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\")));\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n\n    Map<String, Object> customRules = (Map<String, Object>) Utils.fromJSONString(\n        \"{permissions:[\" +\n        \"      {name:update, role:[admin_role,update_role]},\" +\n        \"      {name:read, role:[admin_role,update_role,read_role]}\" +\n        \"]}\");\n\n    clearUserRoles();\n    setUserRole(\"admin\", \"admin_role\");\n    setUserRole(\"update\", \"update_role\");\n    setUserRole(\"solr\", \"read_role\");\n\n    checkRules(makeMap(\"resource\", \"/update\",\n        \"userPrincipal\", \"solr\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new UpdateRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN, customRules);\n  }\n\n","sourceOld":"  public void testBasicPermissions() {\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"unknownuser\",\n        \"collectionRequests\", \"freeforall\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , STATUS_OK);\n\n\n    checkRules(makeMap(\"resource\", \"/update/json/docs\",\n        \"httpMethod\", \"POST\",\n        \"collectionRequests\", \"mycoll\",\n        \"handler\", new UpdateRequestHandler())\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler()\n    )\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema/fields\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SchemaHandler())\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/schema\",\n        \"userPrincipal\", \"somebody\",\n        \"collectionRequests\", \"mycoll\",\n        \"httpMethod\", \"POST\",\n        \"handler\", new SchemaHandler())\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"httpMethod\", \"GET\",\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"LIST\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"RELOAD\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"somebody\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/select\",\n        \"httpMethod\", \"GET\",\n        \"handler\", new SearchHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")),\n        \"userPrincipal\", \"joe\")\n        , FORBIDDEN);\n\n\n    Map rules = (Map) Utils.fromJSONString(permissions);\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"tim\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , FORBIDDEN, rules);\n\n    checkRules(makeMap(\"resource\", ReplicationHandler.PATH,\n        \"httpMethod\", \"POST\",\n        \"userPrincipal\", \"cio\",\n        \"handler\", new ReplicationHandler(),\n        \"collectionRequests\", singletonList(new CollectionRequest(\"mycoll\")) )\n        , STATUS_OK, rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/collections\",\n        \"userPrincipal\", \"tim\",\n        \"requestType\", AuthorizationContext.RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CollectionsHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , STATUS_OK, rules);\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-edit\", \"role\", \"su\"));\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"core-admin-read\", \"role\", \"user\"));\n    ((Map)rules.get(\"user-role\")).put(\"cio\",\"su\");\n    ((List)rules.get(\"permissions\")).add( makeMap(\"name\", \"all\", \"role\", \"su\"));\n    permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        , FORBIDDEN);\n\n  checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"STATUS\")))\n        , STATUS_OK);\n\n    checkRules(makeMap(\"resource\", \"/admin/cores\",\n        \"userPrincipal\", \"cio\",\n        \"requestType\", RequestType.ADMIN,\n        \"collectionRequests\", null,\n        \"handler\", new CoreAdminHandler(null),\n        \"params\", new MapSolrParams(singletonMap(\"action\", \"CREATE\")))\n        ,STATUS_OK );\n\n    rules = (Map) Utils.fromJSONString(permissions);\n    List permissions = (List) rules.get(\"permissions\");\n    permissions.remove(permissions.size() -1);//remove the 'all' permission\n    permissions.add(makeMap(\"name\", \"test-params\", \"role\", \"admin\", \"path\", \"/x\", \"params\",\n        makeMap(\"key\", Arrays.asList(\"REGEX:(?i)val1\", \"VAL2\"))));\n    this.permissions = Utils.toJSONString(rules);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", null,\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , PROMPT_FOR_CREDENTIALS);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val1\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"Val2\")))\n        , STATUS_OK);\n    checkRules(makeMap(\"resource\", \"/x\",\n        \"userPrincipal\", \"joe\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new DumpRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN);\n\n    checkRules(makeMap(\"resource\", \"/update\",\n        \"userPrincipal\", \"solr\",\n        \"requestType\", RequestType.UNKNOWN,\n        \"collectionRequests\", \"go\",\n        \"handler\", new UpdateRequestHandler(),\n        \"params\", new MapSolrParams(singletonMap(\"key\", \"VAL2\")))\n        , FORBIDDEN, (Map<String, Object>) Utils.fromJSONString( \"{user-role:{\" +\n        \"      admin:[admin_role],\" +\n        \"      update:[update_role],\" +\n        \"      solr:[read_role]},\" +\n        \"    permissions:[\" +\n        \"      {name:update, role:[admin_role,update_role]},\" +\n        \"      {name:read, role:[admin_role,update_role,read_role]}\" +\n        \"]}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["239a1d4a10c03638628b6aa312f3c64ed9db72d2"],"38670fe54ff76ff2732ce6ed9d48b220c93b1dbe":["b64593b2f4a8223c433f1da7f63c43dc2049e5d1"],"b64593b2f4a8223c433f1da7f63c43dc2049e5d1":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"ebd6b7b6f5196cb5defe92032d6cc2147690954f":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"0b631a3d48258df52a36daa975d3f8deee09b75d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["71475d88ea48a7d9a847f209667255318b3ea4c7","6548a35b9da836a0b749064ee61085bd7cd80ffb"],"8076096f334b0665d0a69a63ee98ac09baad402b":["3c3d917afd3dc4e90156e2d8720b5d468e2c5af4"],"4a9ec10ba0eb28a276751618d07e002582d26f17":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["0b631a3d48258df52a36daa975d3f8deee09b75d"],"6548a35b9da836a0b749064ee61085bd7cd80ffb":["71475d88ea48a7d9a847f209667255318b3ea4c7","ebd6b7b6f5196cb5defe92032d6cc2147690954f"],"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4":["64525b2d504de9b9de3ad1e045d6413868907459"],"64525b2d504de9b9de3ad1e045d6413868907459":["6548a35b9da836a0b749064ee61085bd7cd80ffb"],"239a1d4a10c03638628b6aa312f3c64ed9db72d2":["38670fe54ff76ff2732ce6ed9d48b220c93b1dbe"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["4a9ec10ba0eb28a276751618d07e002582d26f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76":["b64593b2f4a8223c433f1da7f63c43dc2049e5d1"],"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["4a9ec10ba0eb28a276751618d07e002582d26f17"],"38670fe54ff76ff2732ce6ed9d48b220c93b1dbe":["239a1d4a10c03638628b6aa312f3c64ed9db72d2"],"b64593b2f4a8223c433f1da7f63c43dc2049e5d1":["38670fe54ff76ff2732ce6ed9d48b220c93b1dbe"],"ebd6b7b6f5196cb5defe92032d6cc2147690954f":["6548a35b9da836a0b749064ee61085bd7cd80ffb"],"0b631a3d48258df52a36daa975d3f8deee09b75d":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"55b50463286869f584cf849d1587a0fcd54d1dfa":[],"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a9ec10ba0eb28a276751618d07e002582d26f17":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b631a3d48258df52a36daa975d3f8deee09b75d"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"6548a35b9da836a0b749064ee61085bd7cd80ffb":["55b50463286869f584cf849d1587a0fcd54d1dfa","64525b2d504de9b9de3ad1e045d6413868907459"],"3c3d917afd3dc4e90156e2d8720b5d468e2c5af4":["8076096f334b0665d0a69a63ee98ac09baad402b"],"64525b2d504de9b9de3ad1e045d6413868907459":["3c3d917afd3dc4e90156e2d8720b5d468e2c5af4"],"239a1d4a10c03638628b6aa312f3c64ed9db72d2":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["ebd6b7b6f5196cb5defe92032d6cc2147690954f","55b50463286869f584cf849d1587a0fcd54d1dfa","6548a35b9da836a0b749064ee61085bd7cd80ffb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55b50463286869f584cf849d1587a0fcd54d1dfa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}