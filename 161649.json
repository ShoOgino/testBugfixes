{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#finish().mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"/dev/null","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"/dev/null","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#finish().mjava","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+config.bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9","9856095f7afb5a607bf5e65077615ed91273508c"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}