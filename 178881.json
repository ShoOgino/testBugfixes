{"path":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","pathOld":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbf497fc92342be81ff184a144dfa7c96264116b","date":1275079529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getCoreCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDescendentReaderKeys(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDescendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getCoreCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getCoreCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDescendentReaderKeys(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDescendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getCoreCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getCoreCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List<Object> getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getCoreCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["cbf497fc92342be81ff184a144dfa7c96264116b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["cbf497fc92342be81ff184a144dfa7c96264116b","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["cbf497fc92342be81ff184a144dfa7c96264116b","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cbf497fc92342be81ff184a144dfa7c96264116b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cbf497fc92342be81ff184a144dfa7c96264116b":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cbf497fc92342be81ff184a144dfa7c96264116b"]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}