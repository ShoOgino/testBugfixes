{"path":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testMinShingleSizeAndTokenSeparator().mjava","commits":[{"id":"ee5b8559ba3f6a871258786b73945f7665846a5d","date":1270184453,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testMinShingleSizeAndTokenSeparator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test with higher min (and max) shingle size \n   * and with a non-default token separator\n   */\n  public void testMinShingleSizeAndTokenSeparator() throws Exception {\n    Reader reader = new StringReader(\"this is a test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minShingleSize\", \"3\");\n    args.put(\"maxShingleSize\", \"4\");\n    args.put(\"tokenSeparator\", \"=BLAH=\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, \n        new String[] { \"this\", \"this=BLAH=is=BLAH=a\", \n        \"this=BLAH=is=BLAH=a=BLAH=test\", \"is\", \n        \"is=BLAH=a=BLAH=test\", \"a\", \"test\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testMinShingleSizeAndTokenSeparator().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testMinShingleSizeAndTokenSeparator().mjava","sourceNew":"  /**\n   * Test with higher min (and max) shingle size \n   * and with a non-default token separator\n   */\n  public void testMinShingleSizeAndTokenSeparator() throws Exception {\n    Reader reader = new StringReader(\"this is a test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minShingleSize\", \"3\");\n    args.put(\"maxShingleSize\", \"4\");\n    args.put(\"tokenSeparator\", \"=BLAH=\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, \n        new String[] { \"this\", \"this=BLAH=is=BLAH=a\", \n        \"this=BLAH=is=BLAH=a=BLAH=test\", \"is\", \n        \"is=BLAH=a=BLAH=test\", \"a\", \"test\" });\n  }\n\n","sourceOld":"  /**\n   * Test with higher min (and max) shingle size \n   * and with a non-default token separator\n   */\n  public void testMinShingleSizeAndTokenSeparator() throws Exception {\n    Reader reader = new StringReader(\"this is a test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minShingleSize\", \"3\");\n    args.put(\"maxShingleSize\", \"4\");\n    args.put(\"tokenSeparator\", \"=BLAH=\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, \n        new String[] { \"this\", \"this=BLAH=is=BLAH=a\", \n        \"this=BLAH=is=BLAH=a=BLAH=test\", \"is\", \n        \"is=BLAH=a=BLAH=test\", \"a\", \"test\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testMinShingleSizeAndTokenSeparator().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testMinShingleSizeAndTokenSeparator().mjava","sourceNew":"  /**\n   * Test with higher min (and max) shingle size \n   * and with a non-default token separator\n   */\n  public void testMinShingleSizeAndTokenSeparator() throws Exception {\n    Reader reader = new StringReader(\"this is a test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minShingleSize\", \"3\");\n    args.put(\"maxShingleSize\", \"4\");\n    args.put(\"tokenSeparator\", \"=BLAH=\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, \n        new String[] { \"this\", \"this=BLAH=is=BLAH=a\", \n        \"this=BLAH=is=BLAH=a=BLAH=test\", \"is\", \n        \"is=BLAH=a=BLAH=test\", \"a\", \"test\" });\n  }\n\n","sourceOld":"  /**\n   * Test with higher min (and max) shingle size \n   * and with a non-default token separator\n   */\n  public void testMinShingleSizeAndTokenSeparator() throws Exception {\n    Reader reader = new StringReader(\"this is a test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minShingleSize\", \"3\");\n    args.put(\"maxShingleSize\", \"4\");\n    args.put(\"tokenSeparator\", \"=BLAH=\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, \n        new String[] { \"this\", \"this=BLAH=is=BLAH=a\", \n        \"this=BLAH=is=BLAH=a=BLAH=test\", \"is\", \n        \"is=BLAH=a=BLAH=test\", \"a\", \"test\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testMinShingleSizeAndTokenSeparator().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testMinShingleSizeAndTokenSeparator().mjava","sourceNew":"  /**\n   * Test with higher min (and max) shingle size \n   * and with a non-default token separator\n   */\n  public void testMinShingleSizeAndTokenSeparator() throws Exception {\n    Reader reader = new StringReader(\"this is a test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minShingleSize\", \"3\");\n    args.put(\"maxShingleSize\", \"4\");\n    args.put(\"tokenSeparator\", \"=BLAH=\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, \n        new String[] { \"this\", \"this=BLAH=is=BLAH=a\", \n        \"this=BLAH=is=BLAH=a=BLAH=test\", \"is\", \n        \"is=BLAH=a=BLAH=test\", \"a\", \"test\" });\n  }\n\n","sourceOld":"  /**\n   * Test with higher min (and max) shingle size \n   * and with a non-default token separator\n   */\n  public void testMinShingleSizeAndTokenSeparator() throws Exception {\n    Reader reader = new StringReader(\"this is a test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minShingleSize\", \"3\");\n    args.put(\"maxShingleSize\", \"4\");\n    args.put(\"tokenSeparator\", \"=BLAH=\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, \n        new String[] { \"this\", \"this=BLAH=is=BLAH=a\", \n        \"this=BLAH=is=BLAH=a=BLAH=test\", \"is\", \n        \"is=BLAH=a=BLAH=test\", \"a\", \"test\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ee5b8559ba3f6a871258786b73945f7665846a5d"],"c26f00b574427b55127e869b935845554afde1fa":["ee5b8559ba3f6a871258786b73945f7665846a5d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5b8559ba3f6a871258786b73945f7665846a5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ee5b8559ba3f6a871258786b73945f7665846a5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee5b8559ba3f6a871258786b73945f7665846a5d"],"ee5b8559ba3f6a871258786b73945f7665846a5d":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}