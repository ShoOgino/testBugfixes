{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","commits":[{"id":"330e80d31a51e837b9cc906035e114377c0501dc","date":1429994103,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Object,int,String,String,boolean,boolean).mjava","sourceNew":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> rangeStats(Object label, int mincount, String low, String high, boolean iLow, boolean iHigh) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (label != null) {\n      bucket.add(\"val\", label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, low, high, iLow, iHigh);\n    fillBucket(bucket, rangeQ);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"168f749bbf9022a1ba5fea29c54baa1c00883d1d","date":1437587676,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","sourceNew":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null);\n\n    return bucket;\n  }\n\n","sourceOld":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ec805ca8fedc0166461148c7182f1bcbbd18ee1","date":1489767223,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","sourceNew":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false);\n\n    return bucket;\n  }\n\n","sourceOld":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b93c361b4f6fe193e84bfd27ea523366eada52","date":1490100167,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","sourceNew":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false, null);\n\n    return bucket;\n  }\n\n","sourceOld":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ab475c994c79138885cc8a30b2641d929cdc43","date":1490280010,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","sourceNew":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false);\n\n    return bucket;\n  }\n\n","sourceOld":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8908009aaa8e9318b455c1c22b83e0e87738228a","date":1490280013,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","sourceNew":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false, null);\n\n    return bucket;\n  }\n\n","sourceOld":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","sourceNew":null,"sourceOld":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false, null);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","sourceNew":null,"sourceOld":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false, null);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,boolean).mjava","sourceNew":null,"sourceOld":"  private  SimpleOrderedMap<Object> rangeStats(Range range, boolean special ) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n\n    // typically the start value of the range, but null for before/after/between\n    if (!special) {\n      bucket.add(\"val\", range.label);\n    }\n\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    fillBucket(bucket, rangeQ, null, false, null);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"330e80d31a51e837b9cc906035e114377c0501dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58b93c361b4f6fe193e84bfd27ea523366eada52":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["58b93c361b4f6fe193e84bfd27ea523366eada52","c05b634713ca09b2267477408773904d4c69dd9d"],"11ab475c994c79138885cc8a30b2641d929cdc43":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["330e80d31a51e837b9cc906035e114377c0501dc"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"8908009aaa8e9318b455c1c22b83e0e87738228a":["11ab475c994c79138885cc8a30b2641d929cdc43"],"c05b634713ca09b2267477408773904d4c69dd9d":["58b93c361b4f6fe193e84bfd27ea523366eada52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c05b634713ca09b2267477408773904d4c69dd9d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["58b93c361b4f6fe193e84bfd27ea523366eada52","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"330e80d31a51e837b9cc906035e114377c0501dc":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"58b93c361b4f6fe193e84bfd27ea523366eada52":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"11ab475c994c79138885cc8a30b2641d929cdc43":["8908009aaa8e9318b455c1c22b83e0e87738228a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["330e80d31a51e837b9cc906035e114377c0501dc"],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["11ab475c994c79138885cc8a30b2641d929cdc43","8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["58b93c361b4f6fe193e84bfd27ea523366eada52"],"8908009aaa8e9318b455c1c22b83e0e87738228a":[],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8908009aaa8e9318b455c1c22b83e0e87738228a","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}