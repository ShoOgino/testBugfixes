{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/Points#taskReportLine(String,TaskStats).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/Points#taskReportLine(String,TaskStats).mjava","pathOld":"/dev/null","sourceNew":"  private String taskReportLine(String longestOp, TaskStats stat) {\r\n    PerfTask task = stat.getTask();\r\n    StringBuffer sb = new StringBuffer();\r\n    sb.append(Format.format(task.getName(), longestOp));\r\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\r\n    sb.append(Format.formatPaddLeft(round, ROUND));\r\n    sb.append(config.getColsValuesForValsByRound(stat.getRound()));\r\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \r\n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\r\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\r\n    sb.append(Format.format(1,(float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\r\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\r\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \r\n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\r\n    return sb.toString();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask#taskReportLine(String,TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/Points#taskReportLine(String,TaskStats).mjava","sourceNew":"  /**\n   * Compute a report line for the given task stat.\n   * @param longestOp size of longest op name in the table.\n   * @param stat task stat to be printed.\n   * @return the report line.\n   */\n  protected String taskReportLine(String longestOp, TaskStats stat) {\n    PerfTask task = stat.getTask();\n    StringBuffer sb = new StringBuffer();\n    sb.append(Format.format(task.getName(), longestOp));\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\n    sb.append(Format.formatPaddLeft(round, ROUND));\n    sb.append(getRunData().getConfig().getColsValuesForValsByRound(stat.getRound()));\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\n    sb.append(Format.format(1,(float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\n    return sb.toString();\n  }\n\n","sourceOld":"  private String taskReportLine(String longestOp, TaskStats stat) {\r\n    PerfTask task = stat.getTask();\r\n    StringBuffer sb = new StringBuffer();\r\n    sb.append(Format.format(task.getName(), longestOp));\r\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\r\n    sb.append(Format.formatPaddLeft(round, ROUND));\r\n    sb.append(config.getColsValuesForValsByRound(stat.getRound()));\r\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \r\n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\r\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\r\n    sb.append(Format.format(1,(float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\r\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\r\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \r\n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\r\n    return sb.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"]},"commit2Childs":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}