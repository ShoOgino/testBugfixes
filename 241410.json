{"path":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","commits":[{"id":"ff7e60660726fd43b5f9d130e3de39e69252227a","date":1502275613,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"dummyauth\", \"solr\".getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"dummyauth\", \"solr\".getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e856d7afb0a6886d4412ca44a2f3f4be8e57b1d","date":1502456703,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","sourceNew":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"digest\", (\"solr:\"+SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"dummyauth\", \"solr\".getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e8eb794082b9cc37b6562c76814ec4a26b9b8b","date":1502501868,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","sourceNew":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"digest\", (\"solr:\"+SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"dummyauth\", \"solr\".getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"digest\", (\"solr:\"+SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e614eceb81b081076e753ed62268c93c8a2a28e","date":1576119727,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","sourceNew":"  @Test\n  public void testZkAcls() throws Exception {\n    try (ZooKeeper keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(),\n        (int) TimeUnit.MINUTES.toMillis(1), arg0 -> {/* Do nothing */})) {\n      keeper.addAuthInfo(\"digest\", (\"solr:\" + SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\") ? zkHost.substring(zkHost.indexOf(\"/\")) : null;\n      walkZkTree(keeper, zkChroot, \"/\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"digest\", (\"solr:\"+SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","sourceNew":"  @Test\n  public void testZkAcls() throws Exception {\n    try (ZooKeeper keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(),\n        (int) TimeUnit.MINUTES.toMillis(1), arg0 -> {/* Do nothing */})) {\n      keeper.addAuthInfo(\"digest\", (\"solr:\" + SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\") ? zkHost.substring(zkHost.indexOf(\"/\")) : null;\n      walkZkTree(keeper, zkChroot, \"/\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkAcls() throws Exception {\n    ZooKeeper keeper = null;\n    try {\n      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n        @Override\n        public void process(WatchedEvent arg0) {\n          // Do nothing\n        }\n      });\n\n      keeper.addAuthInfo(\"digest\", (\"solr:\"+SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n      walkZkTree(keeper, zkChroot, \"/\");\n\n    } finally {\n      if (keeper != null) {\n        keeper.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth#testZkAcls().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"try\"})\n  public void testZkAcls() throws Exception {\n    try (ZooKeeper keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(),\n        (int) TimeUnit.MINUTES.toMillis(1), arg0 -> {/* Do nothing */})) {\n      keeper.addAuthInfo(\"digest\", (\"solr:\" + SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\") ? zkHost.substring(zkHost.indexOf(\"/\")) : null;\n      walkZkTree(keeper, zkChroot, \"/\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkAcls() throws Exception {\n    try (ZooKeeper keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(),\n        (int) TimeUnit.MINUTES.toMillis(1), arg0 -> {/* Do nothing */})) {\n      keeper.addAuthInfo(\"digest\", (\"solr:\" + SOLR_PASSWD).getBytes(StandardCharsets.UTF_8));\n\n      // Test well known paths.\n      checkNonSecurityACLs(keeper, \"/solr.xml\");\n      checkSecurityACLs(keeper, \"/security/token\");\n      checkSecurityACLs(keeper, \"/security\");\n\n      // Now test all ZK tree.\n      String zkHost = cluster.getSolrClient().getZkHost();\n      String zkChroot = zkHost.contains(\"/\") ? zkHost.substring(zkHost.indexOf(\"/\")) : null;\n      walkZkTree(keeper, zkChroot, \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e856d7afb0a6886d4412ca44a2f3f4be8e57b1d":["58884af1f68e9d61c217c753fbd6266d86a63b14"],"df724d84dab24a0cc54bec95a8680867adc7f171":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b","7e614eceb81b081076e753ed62268c93c8a2a28e"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff7e60660726fd43b5f9d130e3de39e69252227a"],"7e614eceb81b081076e753ed62268c93c8a2a28e":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"ff7e60660726fd43b5f9d130e3de39e69252227a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["ff7e60660726fd43b5f9d130e3de39e69252227a","4e856d7afb0a6886d4412ca44a2f3f4be8e57b1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["7e614eceb81b081076e753ed62268c93c8a2a28e"]},"commit2Childs":{"4e856d7afb0a6886d4412ca44a2f3f4be8e57b1d":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"58884af1f68e9d61c217c753fbd6266d86a63b14":["4e856d7afb0a6886d4412ca44a2f3f4be8e57b1d"],"7e614eceb81b081076e753ed62268c93c8a2a28e":["df724d84dab24a0cc54bec95a8680867adc7f171","e98520789adb1d5ad05afb4956eca0944a929688"],"ff7e60660726fd43b5f9d130e3de39e69252227a":["58884af1f68e9d61c217c753fbd6266d86a63b14","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58884af1f68e9d61c217c753fbd6266d86a63b14","ff7e60660726fd43b5f9d130e3de39e69252227a","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["df724d84dab24a0cc54bec95a8680867adc7f171","7e614eceb81b081076e753ed62268c93c8a2a28e","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}