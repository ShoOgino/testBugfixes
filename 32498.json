{"path":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,String,String,String,String).mjava","commits":[{"id":"73b24dd99dc72171f84ace6f141e71e669f0221b","date":1237459915,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a RangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new RangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new RangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,String,String,String,String).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a RangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new RangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new RangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,String,String,String,String).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4275990669802f4c50b4de5d3252a0987854ad68","date":1260360486,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,String,String,String,String).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, String firstBeg, \n                                            String firstEnd, String secondBeg,\n                                            String secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4275990669802f4c50b4de5d3252a0987854ad68":["4256bc1b3c94786287ccdfc751230374521843cf"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["73b24dd99dc72171f84ace6f141e71e669f0221b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73b24dd99dc72171f84ace6f141e71e669f0221b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4275990669802f4c50b4de5d3252a0987854ad68"]},"commit2Childs":{"4275990669802f4c50b4de5d3252a0987854ad68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b24dd99dc72171f84ace6f141e71e669f0221b"],"73b24dd99dc72171f84ace6f141e71e669f0221b":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"4256bc1b3c94786287ccdfc751230374521843cf":["4275990669802f4c50b4de5d3252a0987854ad68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}