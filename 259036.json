{"path":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","commits":[{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(OutputStream).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= 0x1;\n      if (fi.storeTermVector) bits |= 0x2;\n      output.writeString(fi.name);\n      //Was REMOVE\n      //output.writeByte((byte)(fi.isIndexed ? 1 : 0));\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(OutputStream output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= 0x1;\n      if (fi.storeTermVector) bits |= 0x2;\n      output.writeString(fi.name);\n      //Was REMOVE\n      //output.writeByte((byte)(fi.isIndexed ? 1 : 0));\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= 0x1;\n      if (fi.storeTermVector) bits |= 0x2;\n      output.writeString(fi.name);\n      //Was REMOVE\n      //output.writeByte((byte)(fi.isIndexed ? 1 : 0));\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTf) bits |= OMIT_TF;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTf) bits |= OMIT_TF;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367","date":1241174228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"950f3c7592cb559e2534e5089c78833250e156a3":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["950f3c7592cb559e2534e5089c78833250e156a3"],"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5bf26a11728ffdf1d7a0eac68fd2cd501d45f367"]},"commit2Childs":{"950f3c7592cb559e2534e5089c78833250e156a3":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["5bf26a11728ffdf1d7a0eac68fd2cd501d45f367"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["950f3c7592cb559e2534e5089c78833250e156a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}