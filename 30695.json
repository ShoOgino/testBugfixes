{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkDistribStateManager#getAutoScalingConfig(Watcher).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkDistribStateManager#getAutoScalingConfig(Watcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    Stat stat = new Stat();\n    try {\n      byte[] bytes = zkClient.getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher, stat, true);\n      if (bytes != null && bytes.length > 0) {\n        map = (Map<String, Object>) fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException e) {\n      throw new IOException(e);\n    }\n    map.put(AutoScalingParams.ZK_VERSION, stat.getVersion());\n    return new AutoScalingConfig(map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkDistribStateManager#getAutoScalingConfig(Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkDistribStateManager#getAutoScalingConfig(Watcher).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    Stat stat = new Stat();\n    try {\n      byte[] bytes = zkClient.getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher, stat, true);\n      if (bytes != null && bytes.length > 0) {\n        map = (Map<String, Object>) fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException e) {\n      throw new IOException(e);\n    }\n    map.put(AutoScalingParams.ZK_VERSION, stat.getVersion());\n    return new AutoScalingConfig(map);\n  }\n\n","sourceOld":"  @Override\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    Stat stat = new Stat();\n    try {\n      byte[] bytes = zkClient.getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher, stat, true);\n      if (bytes != null && bytes.length > 0) {\n        map = (Map<String, Object>) fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException e) {\n      throw new IOException(e);\n    }\n    map.put(AutoScalingParams.ZK_VERSION, stat.getVersion());\n    return new AutoScalingConfig(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkDistribStateManager#getAutoScalingConfig(Watcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    Stat stat = new Stat();\n    try {\n      byte[] bytes = zkClient.getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher, stat, true);\n      if (bytes != null && bytes.length > 0) {\n        map = (Map<String, Object>) fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      // ignore\n    } catch (KeeperException e) {\n      throw new IOException(e);\n    }\n    map.put(AutoScalingParams.ZK_VERSION, stat.getVersion());\n    return new AutoScalingConfig(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}