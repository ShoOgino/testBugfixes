{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}