{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","commits":[{"id":"52ce612a40143b896fdbe465b45011e4540ce963","date":1211438856,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, true, new WhitespaceAnalyzer());\n    writer.setMergeFactor(mergeFactor);\n    writer.setRAMBufferSizeMB(ramMB);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, true, new WhitespaceAnalyzer());\n    writer.setMergeFactor(mergeFactor);\n    writer.setRAMBufferSizeMB(ramMB);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, true, new WhitespaceAnalyzer());\n    writer.setMergeFactor(mergeFactor);\n    writer.setRAMBufferSizeMB(ramMB);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMergeFactor(mergeFactor);\n    writer.setRAMBufferSizeMB(ramMB);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, true, new WhitespaceAnalyzer());\n    writer.setMergeFactor(mergeFactor);\n    writer.setRAMBufferSizeMB(ramMB);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMergeFactor(mergeFactor);\n    writer.setRAMBufferSizeMB(ramMB);\n\n    Iterator<String> iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMergeFactor(mergeFactor);\n    writer.setRAMBufferSizeMB(ramMB);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(),\n          IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMergeFactor(mergeFactor);\n      writer.setRAMBufferSizeMB(ramMB);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMergeFactor(mergeFactor);\n    writer.setRAMBufferSizeMB(ramMB);\n\n    Iterator<String> iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(),\n          IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMergeFactor(mergeFactor);\n      writer.setRAMBufferSizeMB(ramMB);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(),\n          IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMergeFactor(mergeFactor);\n      writer.setRAMBufferSizeMB(ramMB);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(),\n          IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMergeFactor(mergeFactor);\n      writer.setRAMBufferSizeMB(ramMB);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict, int mergeFactor, int ramMB) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(mergeFactor);\n  \n      Iterator<String> iter = dict.getWordsIterator();\n      while (iter.hasNext()) {\n        String word = iter.next();\n  \n        int len = word.length();\n        if (len < 3) {\n          continue; // too short we bail but \"too long\" is fine...\n        }\n  \n        if (this.exist(word)) { // if the word already exist in the gramindex\n          continue;\n        }\n  \n        // ok index the word\n        Document doc = createDocument(word, getMin(len), getMax(len));\n        writer.addDocument(doc);\n      }\n      // close writer\n      writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["87c966e9308847938a7c905c2e46a56d8df788b8"],"52ce612a40143b896fdbe465b45011e4540ce963":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["60cdc0e643184821eb066795a8791cd82559f46e"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["52ce612a40143b896fdbe465b45011e4540ce963"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"52ce612a40143b896fdbe465b45011e4540ce963":["4256bc1b3c94786287ccdfc751230374521843cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce612a40143b896fdbe465b45011e4540ce963"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["60cdc0e643184821eb066795a8791cd82559f46e"],"4256bc1b3c94786287ccdfc751230374521843cf":["87c966e9308847938a7c905c2e46a56d8df788b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}