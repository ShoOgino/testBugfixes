{"path":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","commits":[{"id":"1b30678d88259b68d3d1e3faba3ea3bccdf0c751","date":1211563231,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean useCache) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    \n    TermInfo ti;\n    ThreadResources resources = getThreadResources();\n    Cache cache = null;\n    \n    if (useCache) {\n      cache = resources.termInfoCache;\n      // check the cache first if the term was recently looked up\n      ti = (TermInfo) cache.get(term);\n      if (ti != null) {\n        return ti;\n      }\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (cache != null && numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            cache.put(term, ti);\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    seekEnum(enumerator, getIndexOffset(term));\n    enumerator.scanTo(term);\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (cache != null) {\n        cache.put(term, ti);\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean useCache) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfo ti;\n    ThreadResources resources = getThreadResources();\n    Cache cache = null;\n    \n    if (useCache) {\n      cache = resources.termInfoCache;\n      // check the cache first if the term was recently looked up\n      ti = (TermInfo) cache.get(term);\n      if (ti != null) {\n        return ti;\n      }\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (cache != null && numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            cache.put(term, ti);\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    seekEnum(enumerator, getIndexOffset(term));\n    enumerator.scanTo(term);\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (cache != null) {\n        cache.put(term, ti);\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean useCache) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    \n    TermInfo ti;\n    ThreadResources resources = getThreadResources();\n    Cache cache = null;\n    \n    if (useCache) {\n      cache = resources.termInfoCache;\n      // check the cache first if the term was recently looked up\n      ti = (TermInfo) cache.get(term);\n      if (ti != null) {\n        return ti;\n      }\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (cache != null && numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            cache.put(term, ti);\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    seekEnum(enumerator, getIndexOffset(term));\n    enumerator.scanTo(term);\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (cache != null) {\n        cache.put(term, ti);\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean useCache) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfo ti;\n    ThreadResources resources = getThreadResources();\n    Cache<Term,TermInfo> cache = null;\n    \n    if (useCache) {\n      cache = resources.termInfoCache;\n      // check the cache first if the term was recently looked up\n      ti = cache.get(term);\n      if (ti != null) {\n        return ti;\n      }\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (cache != null && numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            cache.put(term, ti);\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    seekEnum(enumerator, getIndexOffset(term));\n    enumerator.scanTo(term);\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (cache != null) {\n        cache.put(term, ti);\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean useCache) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfo ti;\n    ThreadResources resources = getThreadResources();\n    Cache cache = null;\n    \n    if (useCache) {\n      cache = resources.termInfoCache;\n      // check the cache first if the term was recently looked up\n      ti = (TermInfo) cache.get(term);\n      if (ti != null) {\n        return ti;\n      }\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (cache != null && numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            cache.put(term, ti);\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    seekEnum(enumerator, getIndexOffset(term));\n    enumerator.scanTo(term);\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (cache != null) {\n        cache.put(term, ti);\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3788e811fcba5db4611c3281af4d165044ad9d6","date":1259335977,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n    \n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert ti.equals(tiOrd);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert ti.equals(tiOrd);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean useCache) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfo ti;\n    ThreadResources resources = getThreadResources();\n    Cache<Term,TermInfo> cache = null;\n    \n    if (useCache) {\n      cache = resources.termInfoCache;\n      // check the cache first if the term was recently looked up\n      ti = cache.get(term);\n      if (ti != null) {\n        return ti;\n      }\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (cache != null && numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            cache.put(term, ti);\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    seekEnum(enumerator, getIndexOffset(term));\n    enumerator.scanTo(term);\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (cache != null) {\n        cache.put(term, ti);\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4660ef85b024c0181bfc51cc57e955e5aa28a7d4","date":1259358519,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n    \n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n    \n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert ti.equals(tiOrd);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert ti.equals(tiOrd);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n    \n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n    \n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4660ef85b024c0181bfc51cc57e955e5aa28a7d4":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"b3788e811fcba5db4611c3281af4d165044ad9d6":["ef82ff03e4016c705811b2658e81471a645c0e49"],"961159f13aece73fbb30aea720e77a2237e8bafd":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["961159f13aece73fbb30aea720e77a2237e8bafd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4660ef85b024c0181bfc51cc57e955e5aa28a7d4"]},"commit2Childs":{"4660ef85b024c0181bfc51cc57e955e5aa28a7d4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3788e811fcba5db4611c3281af4d165044ad9d6":["4660ef85b024c0181bfc51cc57e955e5aa28a7d4"],"961159f13aece73fbb30aea720e77a2237e8bafd":["ef82ff03e4016c705811b2658e81471a645c0e49"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["961159f13aece73fbb30aea720e77a2237e8bafd"],"ef82ff03e4016c705811b2658e81471a645c0e49":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}