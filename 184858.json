{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","commits":[{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"/dev/null","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = (String) params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<String,Map<String,String>>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<String,String>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"/dev/null","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = (String) params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<String,Map<String,String>>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<String,String>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"/dev/null","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = (String) params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<String,Map<String,String>>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<String,String>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<String,Map<String,String>>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<String,String>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = (String) params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<String,Map<String,String>>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<String,String>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<String,Map<String,String>>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<String,String>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cec95c8cf8e3ae86eecfa7ff107b950b578dd27","date":1403853996,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          config = loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          log.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          config = loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              log.info(\"Getting configuration for Global Datasource...\");\n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              log.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          LOG.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          config = loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              LOG.info(\"Getting configuration for Global Datasource...\");              \n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              LOG.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          log.info(\"Loading DIH Configuration: {}\", dataconfigFile);\n        }\n        if(is!=null) {          \n          config = loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              log.info(\"Getting configuration for Global Datasource...\");\n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              log.info(\"Adding properties to datasource: {}\", props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          log.info(\"Loading DIH Configuration: \" + dataconfigFile);\n        }\n        if(is!=null) {          \n          config = loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              log.info(\"Getting configuration for Global Datasource...\");\n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              log.info(\"Adding properties to datasource: \" + props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","sourceNew":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          log.info(\"Loading DIH Configuration: {}\", dataconfigFile);\n        }\n        if(is!=null) {          \n          config = loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              @SuppressWarnings({\"rawtypes\"})\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              log.info(\"Getting configuration for Global Datasource...\");\n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              log.info(\"Adding properties to datasource: {}\", props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          log.info(\"Loading DIH Configuration: {}\", dataconfigFile);\n        }\n        if(is!=null) {          \n          config = loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              log.info(\"Getting configuration for Global Datasource...\");\n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              log.info(\"Adding properties to datasource: {}\", props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#maybeReloadConfiguration(RequestInfo,NamedList[#]).mjava","sourceNew":null,"sourceOld":"  boolean maybeReloadConfiguration(RequestInfo params,\n      NamedList<?> defaultParams) throws IOException {\n  if (importLock.tryLock()) {\n      boolean success = false;\n      try {        \n        if (null != params.getRequest()) {\n          if (schema != params.getRequest().getSchema()) {\n            schema = params.getRequest().getSchema();\n          }\n        }\n        String dataConfigText = params.getDataConfig();\n        String dataconfigFile = params.getConfigFile();        \n        InputSource is = null;\n        if(dataConfigText!=null && dataConfigText.length()>0) {\n          is = new InputSource(new StringReader(dataConfigText));\n        } else if(dataconfigFile!=null) {\n          is = new InputSource(core.getResourceLoader().openResource(dataconfigFile));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(dataconfigFile));\n          log.info(\"Loading DIH Configuration: {}\", dataconfigFile);\n        }\n        if(is!=null) {          \n          config = loadDataConfig(is);\n          success = true;\n        }      \n        \n        Map<String,Map<String,String>> dsProps = new HashMap<>();\n        if(defaultParams!=null) {\n          int position = 0;\n          while (position < defaultParams.size()) {\n            if (defaultParams.getName(position) == null) {\n              break;\n            }\n            String name = defaultParams.getName(position);            \n            if (name.equals(\"datasource\")) {\n              success = true;\n              @SuppressWarnings({\"rawtypes\"})\n              NamedList dsConfig = (NamedList) defaultParams.getVal(position);\n              log.info(\"Getting configuration for Global Datasource...\");\n              Map<String,String> props = new HashMap<>();\n              for (int i = 0; i < dsConfig.size(); i++) {\n                props.put(dsConfig.getName(i), dsConfig.getVal(i).toString());\n              }\n              log.info(\"Adding properties to datasource: {}\", props);\n              dsProps.put((String) dsConfig.get(\"name\"), props);\n            }\n            position++;\n          }\n        }\n        requestLevelDataSourceProps = Collections.unmodifiableMap(dsProps);\n      } catch(IOException ioe) {\n        throw ioe;\n      } finally {\n        importLock.unlock();\n      }\n      return success;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5101aff20e65c9a285c274627ec956eb5409d253"],"2cec95c8cf8e3ae86eecfa7ff107b950b578dd27":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5101aff20e65c9a285c274627ec956eb5409d253"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["2cec95c8cf8e3ae86eecfa7ff107b950b578dd27"],"08970e5b8411182a29412c177eff67ec1110095b":["5101aff20e65c9a285c274627ec956eb5409d253"],"5101aff20e65c9a285c274627ec956eb5409d253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2cec95c8cf8e3ae86eecfa7ff107b950b578dd27"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2cec95c8cf8e3ae86eecfa7ff107b950b578dd27":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5101aff20e65c9a285c274627ec956eb5409d253":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","08970e5b8411182a29412c177eff67ec1110095b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}