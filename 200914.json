{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList<String>();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList<String>();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":null,"sourceOld":"  public List<String> files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList<String>();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}