{"path":"lucene/facet/src/test/org/apache/lucene/util/UnsafeByteArrayOutputStreamTest#testStartPos().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/UnsafeByteArrayOutputStreamTest#testStartPos().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/UnsafeByteArrayOutputStreamTest#testStartPos().mjava","sourceNew":"  @Test\n  public void testStartPos() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < buf.length; i++) {\n      buf[i] = (byte) i;\n    }\n    \n    int startPos = 3;\n    UnsafeByteArrayOutputStream ubaos = new UnsafeByteArrayOutputStream(buf, startPos);\n    int numValues = 5;\n    for (int i = 0; i < numValues; i++) {\n      ubaos.write((i + 1) * 2);\n    }\n\n    // the length of the buffer should be whatever was written after startPos\n    // and before that.\n    assertEquals(\"invalid buffer length\", startPos + numValues, ubaos.length());\n\n    assertEquals(\"invalid startPos\", startPos, ubaos.getStartPos());\n\n    byte[] bytes = ubaos.toByteArray();\n    for (int i = 0; i < startPos; i++) {\n      assertEquals(i, bytes[i]);\n    }\n    \n    for (int i = startPos, j = 0; j < numValues; i++, j++) {\n      assertEquals((j + 1) * 2, bytes[i]);\n    }\n\n    for (int i = startPos + numValues; i < buf.length; i++) {\n      assertEquals(i, bytes[i]);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testStartPos() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < buf.length; i++) {\n      buf[i] = (byte) i;\n    }\n    \n    int startPos = 3;\n    UnsafeByteArrayOutputStream ubaos = new UnsafeByteArrayOutputStream(buf, startPos);\n    int numValues = 5;\n    for (int i = 0; i < numValues; i++) {\n      ubaos.write((i + 1) * 2);\n    }\n\n    // the length of the buffer should be whatever was written after startPos\n    // and before that.\n    assertEquals(\"invalid buffer length\", startPos + numValues, ubaos.length());\n\n    assertEquals(\"invalid startPos\", startPos, ubaos.getStartPos());\n\n    byte[] bytes = ubaos.toByteArray();\n    for (int i = 0; i < startPos; i++) {\n      assertEquals(i, bytes[i]);\n    }\n    \n    for (int i = startPos, j = 0; j < numValues; i++, j++) {\n      assertEquals((j + 1) * 2, bytes[i]);\n    }\n\n    for (int i = startPos + numValues; i < buf.length; i++) {\n      assertEquals(i, bytes[i]);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/util/UnsafeByteArrayOutputStreamTest#testStartPos().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testStartPos() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < buf.length; i++) {\n      buf[i] = (byte) i;\n    }\n    \n    int startPos = 3;\n    UnsafeByteArrayOutputStream ubaos = new UnsafeByteArrayOutputStream(buf, startPos);\n    int numValues = 5;\n    for (int i = 0; i < numValues; i++) {\n      ubaos.write((i + 1) * 2);\n    }\n\n    // the length of the buffer should be whatever was written after startPos\n    // and before that.\n    assertEquals(\"invalid buffer length\", startPos + numValues, ubaos.length());\n\n    assertEquals(\"invalid startPos\", startPos, ubaos.getStartPos());\n\n    byte[] bytes = ubaos.toByteArray();\n    for (int i = 0; i < startPos; i++) {\n      assertEquals(i, bytes[i]);\n    }\n    \n    for (int i = startPos, j = 0; j < numValues; i++, j++) {\n      assertEquals((j + 1) * 2, bytes[i]);\n    }\n\n    for (int i = startPos + numValues; i < buf.length; i++) {\n      assertEquals(i, bytes[i]);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}