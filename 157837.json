{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","commits":[{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    assert stateReader != null;\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    assert stateReader != null;\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    assert stateReader != null;\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    assert stateReader != null;\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}