{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!merges.get(0).renameTo(output)) {\n        copy(merges.get(0), output);\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!merges.get(0).renameTo(output)) {\n        copy(merges.get(0), output);\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b902c9c43288af43c02939071661d2f3a028f2ba","date":1341961568,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      File single = merges.get(0);\n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!single.renameTo(output)) {\n        copy(single, output);\n        single.delete();\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!merges.get(0).renameTo(output)) {\n        copy(merges.get(0), output);\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":["fa4688b7aaba64836010dee5308f052574ec398d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa4688b7aaba64836010dee5308f052574ec398d","date":1341963669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      File single = merges.get(0);\n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!single.renameTo(output)) {\n        copy(single, output);\n        single.delete();\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26","b902c9c43288af43c02939071661d2f3a028f2ba"],"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!merges.get(0).renameTo(output)) {\n        copy(merges.get(0), output);\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!merges.get(0).renameTo(output)) {\n        copy(merges.get(0), output);\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b902c9c43288af43c02939071661d2f3a028f2ba":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fa4688b7aaba64836010dee5308f052574ec398d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["fa4688b7aaba64836010dee5308f052574ec398d","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fa4688b7aaba64836010dee5308f052574ec398d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["fa4688b7aaba64836010dee5308f052574ec398d"],"fa4688b7aaba64836010dee5308f052574ec398d":["b902c9c43288af43c02939071661d2f3a028f2ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"b902c9c43288af43c02939071661d2f3a028f2ba":["fa4688b7aaba64836010dee5308f052574ec398d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b902c9c43288af43c02939071661d2f3a028f2ba","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fa4688b7aaba64836010dee5308f052574ec398d":["aba371508186796cc6151d8223a5b4e16d02e26e","d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}