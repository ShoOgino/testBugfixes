{"path":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","commits":[{"id":"979e22aa7c63c9dc651adf861610c7e444d45832","date":1454615713,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Opens a new realtime searcher and returns it's fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return getFingerprint(newestSearcher.get(), maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Opens a new realtime searcher and returns it's fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return getFingerprint(newestSearcher.get(), maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Opens a new realtime searcher and returns it's fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return getFingerprint(newestSearcher.get(), maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58fec4cc4751826a310393076ec744b4e159eb33","date":1456164038,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","sourceNew":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return newestSearcher.get().getIndexFingerprint(maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and returns it's fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return getFingerprint(newestSearcher.get(), maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","sourceNew":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return newestSearcher.get().getIndexFingerprint(maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and returns it's fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return getFingerprint(newestSearcher.get(), maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05569170a222447d3aec8fad773feedf4429fdd5","date":1476800012,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","sourceNew":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      IndexFingerprint f = newestSearcher.get().getIndexFingerprint(maxVersion);\n      final double duration = timer.stop();\n      log.debug(\"IndexFingerprint time : {} result:{}\" ,duration, f);\n      return f;\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n    \n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return newestSearcher.get().getIndexFingerprint(maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b437b84da5e49daf1197c9cd533015490cdcb2c2","date":1476818430,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","sourceNew":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return newestSearcher.get().getIndexFingerprint(maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      IndexFingerprint f = newestSearcher.get().getIndexFingerprint(maxVersion);\n      final double duration = timer.stop();\n      log.debug(\"IndexFingerprint time : {} result:{}\" ,duration, f);\n      return f;\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11122ff28c20e6e4e02cb1366eaa029a92f69ce","date":1477307742,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","sourceNew":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      IndexFingerprint f = newestSearcher.get().getIndexFingerprint(maxVersion);\n      final double duration = timer.stop();\n      log.info(\"IndexFingerprint millis:{} result:{}\",duration, f);\n      return f;\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return newestSearcher.get().getIndexFingerprint(maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrCore,long).mjava","sourceNew":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      IndexFingerprint f = newestSearcher.get().getIndexFingerprint(maxVersion);\n      final double duration = timer.stop();\n      log.info(\"IndexFingerprint millis:{} result:{}\",duration, f);\n      return f;\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and returns it's (possibly cached) fingerprint */\n  public static IndexFingerprint getFingerprint(SolrCore core, long maxVersion) throws IOException {\n    core.getUpdateHandler().getUpdateLog().openRealtimeSearcher();\n    RefCounted<SolrIndexSearcher> newestSearcher = core.getUpdateHandler().getUpdateLog().uhandler.core.getRealtimeSearcher();\n    try {\n      return newestSearcher.get().getIndexFingerprint(maxVersion);\n    } finally {\n      if (newestSearcher != null) {\n        newestSearcher.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["05569170a222447d3aec8fad773feedf4429fdd5"],"58fec4cc4751826a310393076ec744b4e159eb33":["979e22aa7c63c9dc651adf861610c7e444d45832"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["419a8f52c6635419beb951255cacbbb281044c57","b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","979e22aa7c63c9dc651adf861610c7e444d45832"],"419a8f52c6635419beb951255cacbbb281044c57":["979e22aa7c63c9dc651adf861610c7e444d45832","58fec4cc4751826a310393076ec744b4e159eb33"],"979e22aa7c63c9dc651adf861610c7e444d45832":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1704c078ec59838c9d95d5bf5738b393b537494":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","979e22aa7c63c9dc651adf861610c7e444d45832"],"05569170a222447d3aec8fad773feedf4429fdd5":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce"]},"commit2Childs":{"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"58fec4cc4751826a310393076ec744b4e159eb33":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","979e22aa7c63c9dc651adf861610c7e444d45832","b1704c078ec59838c9d95d5bf5738b393b537494"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"419a8f52c6635419beb951255cacbbb281044c57":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","05569170a222447d3aec8fad773feedf4429fdd5"],"979e22aa7c63c9dc651adf861610c7e444d45832":["58fec4cc4751826a310393076ec744b4e159eb33","1e6acbaae7af722f17204ceccf0f7db5753eccf3","419a8f52c6635419beb951255cacbbb281044c57","b1704c078ec59838c9d95d5bf5738b393b537494"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"05569170a222447d3aec8fad773feedf4429fdd5":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}