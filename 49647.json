{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 120) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 120) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","pathOld":"/dev/null","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 120) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 120) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 120) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 120) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 120) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86b499d3c70dbcdcbc6887acd8c4fadbc7ab1fd7","date":1347718726,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 220) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 120) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    waitToSeeNotLive(zkStateReader, cjetty, 0);\n  }\n\n","sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 220) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    waitToSeeNotLive(zkStateReader, cjetty, 0);\n  }\n\n","sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    int tries = 0;\n    while (zkStateReader.getClusterState()\n        .liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n      if (tries++ == 220) {\n        fail(\"Shard still reported as live in zk\");\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","sourceNew":null,"sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    waitToSeeNotLive(zkStateReader, cjetty, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner).mjava","sourceNew":null,"sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty) throws InterruptedException {\n    waitToSeeNotLive(zkStateReader, cjetty, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","a69439d0df009e0bb0038d1e427159f449dd670d"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"fa64435b5902ce266c23755a4a00691a3285dab8":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69439d0df009e0bb0038d1e427159f449dd670d":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["86b499d3c70dbcdcbc6887acd8c4fadbc7ab1fd7"],"f2126b84bd093fa3d921582a109a0ee578c28126":["86b499d3c70dbcdcbc6887acd8c4fadbc7ab1fd7","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"86b499d3c70dbcdcbc6887acd8c4fadbc7ab1fd7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69439d0df009e0bb0038d1e427159f449dd670d"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["86b499d3c70dbcdcbc6887acd8c4fadbc7ab1fd7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69439d0df009e0bb0038d1e427159f449dd670d","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"86b499d3c70dbcdcbc6887acd8c4fadbc7ab1fd7":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}