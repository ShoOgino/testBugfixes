{"path":"src/java/org/apache/solr/util/XML#escapeCharData(String,Writer).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/XML#escapeCharData(String,Writer).mjava","pathOld":"/dev/null","sourceNew":"/*********\n *\n * @param str\n * @param out\n * @throws IOException\n */\n  public static void escapeCharData(String str, Writer out) throws IOException {\n    int start=0;\n    // \"n\" was used for counting the chars added to out...\n    // removed cause it wasn't really useful so far.\n    // int n=0;\n\n    for (int i=start; i<str.length(); i++) {\n      char ch = str.charAt(i);\n      // since I already received the char, what if I put it into\n      // a char array and wrote that to the stream instead of the\n      // string? (would cause extra GC though)\n      String subst=null;\n      if (ch<chardata_escapes.length) {\n        subst=chardata_escapes[ch];\n      }\n      if (subst != null) {\n        if (start<i) {\n          // out.write(str.substring(start,i));\n          out.write(str, start, i-start);\n          // n+=i-start;\n        }\n        out.write(subst);\n        // n+=subst.length();\n        start=i+1;\n      }\n    }\n    if (start==0) {\n      out.write(str);\n      // n += str.length();\n    } else if (start<str.length()) {\n      // out.write(str.substring(start));\n      out.write(str, start, str.length()-start);\n      // n += str.length()-start;\n    }\n    // return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a","date":1145639412,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/util/XML#escapeCharData(String,Writer).mjava","pathOld":"src/java/org/apache/solr/util/XML#escapeCharData(String,Writer).mjava","sourceNew":"/*********\n *\n * @param str\n * @param out\n * @throws IOException\n */\n  public static void escapeCharData(String str, Writer out) throws IOException {\n    escape(str, out, chardata_escapes);\n  }\n\n","sourceOld":"/*********\n *\n * @param str\n * @param out\n * @throws IOException\n */\n  public static void escapeCharData(String str, Writer out) throws IOException {\n    int start=0;\n    // \"n\" was used for counting the chars added to out...\n    // removed cause it wasn't really useful so far.\n    // int n=0;\n\n    for (int i=start; i<str.length(); i++) {\n      char ch = str.charAt(i);\n      // since I already received the char, what if I put it into\n      // a char array and wrote that to the stream instead of the\n      // string? (would cause extra GC though)\n      String subst=null;\n      if (ch<chardata_escapes.length) {\n        subst=chardata_escapes[ch];\n      }\n      if (subst != null) {\n        if (start<i) {\n          // out.write(str.substring(start,i));\n          out.write(str, start, i-start);\n          // n+=i-start;\n        }\n        out.write(subst);\n        // n+=subst.length();\n        start=i+1;\n      }\n    }\n    if (start==0) {\n      out.write(str);\n      // n += str.length();\n    } else if (start<str.length()) {\n      // out.write(str.substring(start));\n      out.write(str, start, str.length()-start);\n      // n += str.length()-start;\n    }\n    // return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/XML#escapeCharData(String,Writer).mjava","pathOld":"src/java/org/apache/solr/util/XML#escapeCharData(String,Writer).mjava","sourceNew":"/*********\n *\n * @param str\n * @param out\n * @throws IOException\n */\n  public static void escapeCharData(String str, Writer out) throws IOException {\n    escape(str, out, chardata_escapes);\n  }\n\n","sourceOld":"/*********\n *\n * @param str\n * @param out\n * @throws IOException\n */\n  public static void escapeCharData(String str, Writer out) throws IOException {\n    escape(str, out, chardata_escapes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["7bf252af5e92a90d1970a3dd2b4f7c0d431f235a"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["7bf252af5e92a90d1970a3dd2b4f7c0d431f235a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}