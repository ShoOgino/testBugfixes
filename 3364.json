{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","commits":[{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrServer instance for requests.  If null, a default HttpClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this.zkHost = buildZkHostString(zkHosts, chroot);\n    this.updatesToLeaders = updatesToLeaders;\n    \n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    \n    this.shutdownLBHttpSolrServer = lbSolrClient == null;\n    this.lbClient = lbSolrClient == null ? createLBHttpSolrClient(myClient) : lbSolrClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrServer instance for requests.  If null, a default HttpClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this.zkHost = buildZkHostString(zkHosts, chroot);\n    this.updatesToLeaders = updatesToLeaders;\n    \n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    \n    this.shutdownLBHttpSolrServer = lbSolrClient == null;\n    this.lbClient = lbSolrClient == null ? createLBHttpSolrClient(myClient) : lbSolrClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"291857aeee5ec20518ddce131ac4362c0075ebe1","date":1467882201,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrServer instance for requests.  If null, a default HttpClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, updatesToLeaders, false);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrServer instance for requests.  If null, a default HttpClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this.zkHost = buildZkHostString(zkHosts, chroot);\n    this.updatesToLeaders = updatesToLeaders;\n    \n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    \n    this.shutdownLBHttpSolrServer = lbSolrClient == null;\n    this.lbClient = lbSolrClient == null ? createLBHttpSolrClient(myClient) : lbSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12df104910eced8075ef09fb442e2db6273d6741","date":1475520560,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, null, updatesToLeaders, false);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrServer instance for requests.  If null, a default HttpClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, updatesToLeaders, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, null, updatesToLeaders, false);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrServer instance for requests.  If null, a default HttpClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this.zkHost = buildZkHostString(zkHosts, chroot);\n    this.updatesToLeaders = updatesToLeaders;\n    \n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    \n    this.shutdownLBHttpSolrServer = lbSolrClient == null;\n    this.lbClient = lbSolrClient == null ? createLBHttpSolrClient(myClient) : lbSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, null, updatesToLeaders, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, null, updatesToLeaders, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, null, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, null, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, null, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, null, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#CloudSolrClient(Collection[String],String,HttpClient,LBHttpSolrClient,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The provided httpClient should use a\n   *          multi-threaded connection manager.  If null, a default HttpClient will be used.\n   * @param lbSolrClient\n   *          LBHttpSolrClient instance for requests.  If null, a default LBHttpSolrClient will be used.\n   * @param updatesToLeaders\n   *          If true, sends updates to shard leaders.\n   *\n   * @deprecated use {@link Builder} instead.  This will soon be a protected method, and will only\n   * be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public CloudSolrClient(Collection<String> zkHosts, String chroot, HttpClient httpClient, LBHttpSolrClient lbSolrClient, boolean updatesToLeaders) {\n    this(zkHosts, chroot, null, httpClient, lbSolrClient, null, updatesToLeaders, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"63a1978c6710c767fa084741e3d6424840003a62":["a64b273d51a6540272668680ece9f8b686ff0004"],"a64b273d51a6540272668680ece9f8b686ff0004":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["12df104910eced8075ef09fb442e2db6273d6741"],"12df104910eced8075ef09fb442e2db6273d6741":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","12df104910eced8075ef09fb442e2db6273d6741"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","63a1978c6710c767fa084741e3d6424840003a62"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a64b273d51a6540272668680ece9f8b686ff0004","63a1978c6710c767fa084741e3d6424840003a62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a64b273d51a6540272668680ece9f8b686ff0004":["63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004","727bb765ff2542275f6d31f67be18d7104bae148"],"12df104910eced8075ef09fb442e2db6273d6741":["3eaeb36333664e8cb92108ef03f68a7b90beb759","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","291857aeee5ec20518ddce131ac4362c0075ebe1"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["12df104910eced8075ef09fb442e2db6273d6741"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}