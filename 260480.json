{"path":"lucene/core/src/java/org/apache/lucene/util/TimSorter#rotate(int,int,int).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TimSorter#rotate(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void rotate(int lo, int mid, int hi) {\n    int len1 = mid - lo;\n    int len2 = hi - mid;\n    if (len1 == len2) {\n      while (mid < hi) {\n        swap(lo++, mid++);\n      }\n    } else if (len2 < len1 && len2 <= maxTempSlots) {\n      save(mid, len2);\n      for (int i = lo + len1 - 1, j = hi - 1; i >= lo; --i, --j) {\n        copy(i, j);\n      }\n      for (int i = 0, j = lo; i < len2; ++i, ++j) {\n        restore(i, j);\n      }\n    } else if (len1 <= maxTempSlots) {\n      save(lo, len1);\n      for (int i = mid, j = lo; i < hi; ++i, ++j) {\n        copy(i, j);\n      }\n      for (int i = 0, j = lo + len2; j < hi; ++i, ++j) {\n        restore(i, j);\n      }\n    } else {\n      reverse(lo, mid);\n      reverse(mid, hi);\n      reverse(lo, hi);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e188680f3bce683e406acfb4e3de15f1fff2b6","date":1368480368,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TimSorter#doRotate(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TimSorter#rotate(int,int,int).mjava","sourceNew":"  @Override\n  void doRotate(int lo, int mid, int hi) {\n    final int len1 = mid - lo;\n    final int len2 = hi - mid;\n    if (len1 == len2) {\n      while (mid < hi) {\n        swap(lo++, mid++);\n      }\n    } else if (len2 < len1 && len2 <= maxTempSlots) {\n      save(mid, len2);\n      for (int i = lo + len1 - 1, j = hi - 1; i >= lo; --i, --j) {\n        copy(i, j);\n      }\n      for (int i = 0, j = lo; i < len2; ++i, ++j) {\n        restore(i, j);\n      }\n    } else if (len1 <= maxTempSlots) {\n      save(lo, len1);\n      for (int i = mid, j = lo; i < hi; ++i, ++j) {\n        copy(i, j);\n      }\n      for (int i = 0, j = lo + len2; j < hi; ++i, ++j) {\n        restore(i, j);\n      }\n    } else {\n      reverse(lo, mid);\n      reverse(mid, hi);\n      reverse(lo, hi);\n    }\n  }\n\n","sourceOld":"  @Override\n  void rotate(int lo, int mid, int hi) {\n    int len1 = mid - lo;\n    int len2 = hi - mid;\n    if (len1 == len2) {\n      while (mid < hi) {\n        swap(lo++, mid++);\n      }\n    } else if (len2 < len1 && len2 <= maxTempSlots) {\n      save(mid, len2);\n      for (int i = lo + len1 - 1, j = hi - 1; i >= lo; --i, --j) {\n        copy(i, j);\n      }\n      for (int i = 0, j = lo; i < len2; ++i, ++j) {\n        restore(i, j);\n      }\n    } else if (len1 <= maxTempSlots) {\n      save(lo, len1);\n      for (int i = mid, j = lo; i < hi; ++i, ++j) {\n        copy(i, j);\n      }\n      for (int i = 0, j = lo + len2; j < hi; ++i, ++j) {\n        restore(i, j);\n      }\n    } else {\n      reverse(lo, mid);\n      reverse(mid, hi);\n      reverse(lo, hi);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55e188680f3bce683e406acfb4e3de15f1fff2b6":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55e188680f3bce683e406acfb4e3de15f1fff2b6"]},"commit2Childs":{"55e188680f3bce683e406acfb4e3de15f1fff2b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["55e188680f3bce683e406acfb4e3de15f1fff2b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}