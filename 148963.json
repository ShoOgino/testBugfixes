{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCountsDocValues(SchemaField,RangeEndpointCalculator[T],ParsedParams).mjava","commits":[{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCountsDocValues(SchemaField,RangeEndpointCalculator[T],ParsedParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCountsDocValues(SchemaField,RangeEndpointCalculator[T]).mjava","sourceNew":"  private <T extends Comparable<T>> NamedList<Object> getFacetRangeCountsDocValues(final SchemaField sf,\n   final RangeEndpointCalculator<T> calc, ParsedParams parsed) throws IOException {\n  \n  final String f = sf.getName();\n  final NamedList<Object> res = new SimpleOrderedMap<>();\n  final NamedList<Integer> counts = new NamedList<>();\n  res.add(\"counts\", counts);\n  \n  String globalStartS = parsed.required.getFieldParam(f,FacetParams.FACET_RANGE_START);\n  String globalEndS = parsed.required.getFieldParam(f,FacetParams.FACET_RANGE_END);\n\n  final T start = calc.getValue(globalStartS);\n  // not final, hardend may change this\n  T end = calc.getValue(globalEndS);\n  if (end.compareTo(start) < 0) {\n    throw new SolrException\n      (SolrException.ErrorCode.BAD_REQUEST,\n       \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n  }\n  \n  final String gap = parsed.required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n  // explicitly return the gap.  compute this early so we are more \n  // likely to catch parse errors before attempting math\n  res.add(\"gap\", calc.getGap(gap));\n  \n  final int minCount = parsed.params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n  \n  final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n    (parsed.params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n  ArrayList<IntervalFacets.FacetInterval> intervals = new ArrayList<>();\n  \n  final String[] othersP =\n      parsed.params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n  \n  boolean includeBefore = false;\n  boolean includeBetween = false;\n  boolean includeAfter = false;\n  \n  if (othersP != null && othersP.length > 0) {\n    Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n    // Intervals must be in order (see IntervalFacets.getSortedIntervals), if \"BEFORE\" or\n    // \"BETWEEN\" are set, they must be added first\n    for (final String o : othersP) {\n      others.add(FacetRangeOther.get(o));\n    }\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (!others.contains(FacetRangeOther.NONE)) {\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BEFORE)) {\n        // We'll add an interval later in this position\n        intervals.add(null);\n        includeBefore = true;\n      }\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BETWEEN)) {\n        // We'll add an interval later in this position\n        intervals.add(null);\n        includeBetween = true;\n      }\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.AFTER)) {\n        includeAfter = true;\n      }\n    }\n    \n  }\n  \n  \n  T low = start;\n  \n  while (low.compareTo(end) < 0) {\n    T high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (parsed.params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n    \n    final boolean includeLower = \n      (include.contains(FacetRangeInclude.LOWER) ||\n       (include.contains(FacetRangeInclude.EDGE) && \n        0 == low.compareTo(start)));\n    final boolean includeUpper = \n      (include.contains(FacetRangeInclude.UPPER) ||\n       (include.contains(FacetRangeInclude.EDGE) && \n        0 == high.compareTo(end)));\n    \n    final String lowS = calc.formatValue(low);\n    final String highS = calc.formatValue(high);\n    \n    intervals.add(new IntervalFacets.FacetInterval(sf, lowS, highS, includeLower, includeUpper, lowS));\n    \n    low = high;\n  }\n  \n  if (includeBefore) {\n    // include upper bound if \"outer\" or if first gap doesn't already include it\n    intervals.set(0, new IntervalFacets.FacetInterval(sf, \"*\", globalStartS, true, \n        include.contains(FacetRangeInclude.OUTER) ||\n          (! (include.contains(FacetRangeInclude.LOWER) ||\n            include.contains(FacetRangeInclude.EDGE))), FacetRangeOther.BEFORE.toString()));\n  }\n  \n  if (includeBetween) {\n    int intervalIndex = (includeBefore?1:0);\n    intervals.set(intervalIndex, new IntervalFacets.FacetInterval(sf, globalStartS, calc.formatValue(end), \n        include.contains(FacetRangeInclude.LOWER) ||\n        include.contains(FacetRangeInclude.EDGE), \n        include.contains(FacetRangeInclude.UPPER) ||\n        include.contains(FacetRangeInclude.EDGE), \n        FacetRangeOther.BETWEEN.toString()));\n   }\n  \n  if (includeAfter) {\n    // include lower bound if \"outer\" or if last gap doesn't already include it\n    intervals.add(new IntervalFacets.FacetInterval(sf, calc.formatValue(end), \"*\", \n        (include.contains(FacetRangeInclude.OUTER) ||\n        (! (include.contains(FacetRangeInclude.UPPER) ||\n            include.contains(FacetRangeInclude.EDGE)))),  \n       false, FacetRangeOther.AFTER.toString()));\n  }\n  \n  IntervalFacets.FacetInterval[] intervalsArray = intervals.toArray(new IntervalFacets.FacetInterval[intervals.size()]);\n  // don't use the ArrayList anymore\n  intervals = null;\n  \n  new IntervalFacets(sf, searcher, parsed.docs, intervalsArray);\n  \n  int intervalIndex = 0;\n  int lastIntervalIndex = intervalsArray.length - 1;\n  // if the user requested \"BEFORE\", it will be the first of the intervals. Needs to be added to the \n  // response named list instead of with the counts\n  if (includeBefore) {\n    res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());\n    intervalIndex++;\n  }\n  \n  // if the user requested \"BETWEEN\", it will be the first or second of the intervals (depending on if \n  // \"BEFORE\" was also requested). Needs to be added to the response named list instead of with the counts\n  if (includeBetween) {\n    res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());\n    intervalIndex++;\n  }\n  \n  // if the user requested \"AFTER\", it will be the last of the intervals.\n  // Needs to be added to the response named list instead of with the counts\n  if (includeAfter) {\n    res.add(intervalsArray[lastIntervalIndex].getKey(), intervalsArray[lastIntervalIndex].getCount());\n    lastIntervalIndex--;\n  }\n  // now add all other intervals to the counts NL\n  while (intervalIndex <= lastIntervalIndex) {\n    FacetInterval interval = intervalsArray[intervalIndex];\n    if (interval.getCount() >= minCount) {\n      counts.add(interval.getKey(), interval.getCount());\n    }\n    intervalIndex++;\n  }\n  \n  res.add(\"start\", start);\n  res.add(\"end\", end);\n  return res;\n}  \n\n","sourceOld":"  private <T extends Comparable<T>> NamedList<Object> getFacetRangeCountsDocValues(final SchemaField sf,\n   final RangeEndpointCalculator<T> calc) throws IOException {\n  \n  final String f = sf.getName();\n  final NamedList<Object> res = new SimpleOrderedMap<>();\n  final NamedList<Integer> counts = new NamedList<>();\n  res.add(\"counts\", counts);\n  \n  String globalStartS = required.getFieldParam(f,FacetParams.FACET_RANGE_START);\n  String globalEndS = required.getFieldParam(f,FacetParams.FACET_RANGE_END);\n\n  final T start = calc.getValue(globalStartS);\n  // not final, hardend may change this\n  T end = calc.getValue(globalEndS);\n  if (end.compareTo(start) < 0) {\n    throw new SolrException\n      (SolrException.ErrorCode.BAD_REQUEST,\n       \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n  }\n  \n  final String gap = required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n  // explicitly return the gap.  compute this early so we are more \n  // likely to catch parse errors before attempting math\n  res.add(\"gap\", calc.getGap(gap));\n  \n  final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n  \n  final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n    (params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n  ArrayList<IntervalFacets.FacetInterval> intervals = new ArrayList<>();\n  \n  final String[] othersP =\n      params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n  \n  boolean includeBefore = false;\n  boolean includeBetween = false;\n  boolean includeAfter = false;\n  \n  if (othersP != null && othersP.length > 0) {\n    Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n    // Intervals must be in order (see IntervalFacets.getSortedIntervals), if \"BEFORE\" or\n    // \"BETWEEN\" are set, they must be added first\n    for (final String o : othersP) {\n      others.add(FacetRangeOther.get(o));\n    }\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (!others.contains(FacetRangeOther.NONE)) {\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BEFORE)) {\n        // We'll add an interval later in this position\n        intervals.add(null);\n        includeBefore = true;\n      }\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BETWEEN)) {\n        // We'll add an interval later in this position\n        intervals.add(null);\n        includeBetween = true;\n      }\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.AFTER)) {\n        includeAfter = true;\n      }\n    }\n    \n  }\n  \n  \n  T low = start;\n  \n  while (low.compareTo(end) < 0) {\n    T high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n    \n    final boolean includeLower = \n      (include.contains(FacetRangeInclude.LOWER) ||\n       (include.contains(FacetRangeInclude.EDGE) && \n        0 == low.compareTo(start)));\n    final boolean includeUpper = \n      (include.contains(FacetRangeInclude.UPPER) ||\n       (include.contains(FacetRangeInclude.EDGE) && \n        0 == high.compareTo(end)));\n    \n    final String lowS = calc.formatValue(low);\n    final String highS = calc.formatValue(high);\n    \n    intervals.add(new IntervalFacets.FacetInterval(sf, lowS, highS, includeLower, includeUpper, lowS));\n    \n    low = high;\n  }\n  \n  if (includeBefore) {\n    // include upper bound if \"outer\" or if first gap doesn't already include it\n    intervals.set(0, new IntervalFacets.FacetInterval(sf, \"*\", globalStartS, true, \n        include.contains(FacetRangeInclude.OUTER) ||\n          (! (include.contains(FacetRangeInclude.LOWER) ||\n            include.contains(FacetRangeInclude.EDGE))), FacetRangeOther.BEFORE.toString()));\n  }\n  \n  if (includeBetween) {\n    int intervalIndex = (includeBefore?1:0);\n    intervals.set(intervalIndex, new IntervalFacets.FacetInterval(sf, globalStartS, calc.formatValue(end), \n        include.contains(FacetRangeInclude.LOWER) ||\n        include.contains(FacetRangeInclude.EDGE), \n        include.contains(FacetRangeInclude.UPPER) ||\n        include.contains(FacetRangeInclude.EDGE), \n        FacetRangeOther.BETWEEN.toString()));\n   }\n  \n  if (includeAfter) {\n    // include lower bound if \"outer\" or if last gap doesn't already include it\n    intervals.add(new IntervalFacets.FacetInterval(sf, calc.formatValue(end), \"*\", \n        (include.contains(FacetRangeInclude.OUTER) ||\n        (! (include.contains(FacetRangeInclude.UPPER) ||\n            include.contains(FacetRangeInclude.EDGE)))),  \n       false, FacetRangeOther.AFTER.toString()));\n  }\n  \n  IntervalFacets.FacetInterval[] intervalsArray = intervals.toArray(new IntervalFacets.FacetInterval[intervals.size()]);\n  // don't use the ArrayList anymore\n  intervals = null;\n  \n  new IntervalFacets(sf, searcher, docs, intervalsArray);\n  \n  int intervalIndex = 0;\n  int lastIntervalIndex = intervalsArray.length - 1;\n  // if the user requested \"BEFORE\", it will be the first of the intervals. Needs to be added to the \n  // response named list instead of with the counts\n  if (includeBefore) {\n    res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());\n    intervalIndex++;\n  }\n  \n  // if the user requested \"BETWEEN\", it will be the first or second of the intervals (depending on if \n  // \"BEFORE\" was also requested). Needs to be added to the response named list instead of with the counts\n  if (includeBetween) {\n    res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());\n    intervalIndex++;\n  }\n  \n  // if the user requested \"AFTER\", it will be the last of the intervals.\n  // Needs to be added to the response named list instead of with the counts\n  if (includeAfter) {\n    res.add(intervalsArray[lastIntervalIndex].getKey(), intervalsArray[lastIntervalIndex].getCount());\n    lastIntervalIndex--;\n  }\n  // now add all other intervals to the counts NL\n  while (intervalIndex <= lastIntervalIndex) {\n    FacetInterval interval = intervalsArray[intervalIndex];\n    if (interval.getCount() >= minCount) {\n      counts.add(interval.getKey(), interval.getCount());\n    }\n    intervalIndex++;\n  }\n  \n  res.add(\"start\", start);\n  res.add(\"end\", end);\n  return res;\n}  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#[T-extends-Comparable[T]]_getFacetRangeCountsDocValues(SchemaField,RangeEndpointCalculator[T],ParsedParams).mjava","sourceNew":null,"sourceOld":"  private <T extends Comparable<T>> NamedList<Object> getFacetRangeCountsDocValues(final SchemaField sf,\n   final RangeEndpointCalculator<T> calc, ParsedParams parsed) throws IOException {\n  \n  final String f = sf.getName();\n  final NamedList<Object> res = new SimpleOrderedMap<>();\n  final NamedList<Integer> counts = new NamedList<>();\n  res.add(\"counts\", counts);\n  \n  String globalStartS = parsed.required.getFieldParam(f,FacetParams.FACET_RANGE_START);\n  String globalEndS = parsed.required.getFieldParam(f,FacetParams.FACET_RANGE_END);\n\n  final T start = calc.getValue(globalStartS);\n  // not final, hardend may change this\n  T end = calc.getValue(globalEndS);\n  if (end.compareTo(start) < 0) {\n    throw new SolrException\n      (SolrException.ErrorCode.BAD_REQUEST,\n       \"range facet 'end' comes before 'start': \"+end+\" < \"+start);\n  }\n  \n  final String gap = parsed.required.getFieldParam(f, FacetParams.FACET_RANGE_GAP);\n  // explicitly return the gap.  compute this early so we are more \n  // likely to catch parse errors before attempting math\n  res.add(\"gap\", calc.getGap(gap));\n  \n  final int minCount = parsed.params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n  \n  final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n    (parsed.params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE));\n  ArrayList<IntervalFacets.FacetInterval> intervals = new ArrayList<>();\n  \n  final String[] othersP =\n      parsed.params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);\n  \n  boolean includeBefore = false;\n  boolean includeBetween = false;\n  boolean includeAfter = false;\n  \n  if (othersP != null && othersP.length > 0) {\n    Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n    // Intervals must be in order (see IntervalFacets.getSortedIntervals), if \"BEFORE\" or\n    // \"BETWEEN\" are set, they must be added first\n    for (final String o : othersP) {\n      others.add(FacetRangeOther.get(o));\n    }\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (!others.contains(FacetRangeOther.NONE)) {\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BEFORE)) {\n        // We'll add an interval later in this position\n        intervals.add(null);\n        includeBefore = true;\n      }\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BETWEEN)) {\n        // We'll add an interval later in this position\n        intervals.add(null);\n        includeBetween = true;\n      }\n      \n      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.AFTER)) {\n        includeAfter = true;\n      }\n    }\n    \n  }\n  \n  \n  T low = start;\n  \n  while (low.compareTo(end) < 0) {\n    T high = calc.addGap(low, gap);\n    if (end.compareTo(high) < 0) {\n      if (parsed.params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false)) {\n        high = end;\n      } else {\n        end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n        (SolrException.ErrorCode.BAD_REQUEST,\n         \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n    \n    final boolean includeLower = \n      (include.contains(FacetRangeInclude.LOWER) ||\n       (include.contains(FacetRangeInclude.EDGE) && \n        0 == low.compareTo(start)));\n    final boolean includeUpper = \n      (include.contains(FacetRangeInclude.UPPER) ||\n       (include.contains(FacetRangeInclude.EDGE) && \n        0 == high.compareTo(end)));\n    \n    final String lowS = calc.formatValue(low);\n    final String highS = calc.formatValue(high);\n    \n    intervals.add(new IntervalFacets.FacetInterval(sf, lowS, highS, includeLower, includeUpper, lowS));\n    \n    low = high;\n  }\n  \n  if (includeBefore) {\n    // include upper bound if \"outer\" or if first gap doesn't already include it\n    intervals.set(0, new IntervalFacets.FacetInterval(sf, \"*\", globalStartS, true, \n        include.contains(FacetRangeInclude.OUTER) ||\n          (! (include.contains(FacetRangeInclude.LOWER) ||\n            include.contains(FacetRangeInclude.EDGE))), FacetRangeOther.BEFORE.toString()));\n  }\n  \n  if (includeBetween) {\n    int intervalIndex = (includeBefore?1:0);\n    intervals.set(intervalIndex, new IntervalFacets.FacetInterval(sf, globalStartS, calc.formatValue(end), \n        include.contains(FacetRangeInclude.LOWER) ||\n        include.contains(FacetRangeInclude.EDGE), \n        include.contains(FacetRangeInclude.UPPER) ||\n        include.contains(FacetRangeInclude.EDGE), \n        FacetRangeOther.BETWEEN.toString()));\n   }\n  \n  if (includeAfter) {\n    // include lower bound if \"outer\" or if last gap doesn't already include it\n    intervals.add(new IntervalFacets.FacetInterval(sf, calc.formatValue(end), \"*\", \n        (include.contains(FacetRangeInclude.OUTER) ||\n        (! (include.contains(FacetRangeInclude.UPPER) ||\n            include.contains(FacetRangeInclude.EDGE)))),  \n       false, FacetRangeOther.AFTER.toString()));\n  }\n  \n  IntervalFacets.FacetInterval[] intervalsArray = intervals.toArray(new IntervalFacets.FacetInterval[intervals.size()]);\n  // don't use the ArrayList anymore\n  intervals = null;\n  \n  new IntervalFacets(sf, searcher, parsed.docs, intervalsArray);\n  \n  int intervalIndex = 0;\n  int lastIntervalIndex = intervalsArray.length - 1;\n  // if the user requested \"BEFORE\", it will be the first of the intervals. Needs to be added to the \n  // response named list instead of with the counts\n  if (includeBefore) {\n    res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());\n    intervalIndex++;\n  }\n  \n  // if the user requested \"BETWEEN\", it will be the first or second of the intervals (depending on if \n  // \"BEFORE\" was also requested). Needs to be added to the response named list instead of with the counts\n  if (includeBetween) {\n    res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());\n    intervalIndex++;\n  }\n  \n  // if the user requested \"AFTER\", it will be the last of the intervals.\n  // Needs to be added to the response named list instead of with the counts\n  if (includeAfter) {\n    res.add(intervalsArray[lastIntervalIndex].getKey(), intervalsArray[lastIntervalIndex].getCount());\n    lastIntervalIndex--;\n  }\n  // now add all other intervals to the counts NL\n  while (intervalIndex <= lastIntervalIndex) {\n    FacetInterval interval = intervalsArray[intervalIndex];\n    if (interval.getCount() >= minCount) {\n      counts.add(interval.getKey(), interval.getCount());\n    }\n    intervalIndex++;\n  }\n  \n  res.add(\"start\", start);\n  res.add(\"end\", end);\n  return res;\n}  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}