{"path":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testSimple().mjava","commits":[{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"whitespace_stxt\", \"how now brown cow ?\", \"whitespace_f_stxt\", \"aaa bbb\"));\n    assertU(adoc(\"id\",\"2\", \"whitespace_stxt\", \"how now brown dog ?\", \"whitespace_f_stxt\", \"bbb aaa\"));\n    assertU(adoc(\"id\",\"3\", \"whitespace_stxt\", \"how now brown cat ?\", \"whitespace_f_stxt\", \"xxx yyy\"));\n    assertU(adoc(\"id\",\"4\", \"whitespace_stxt\", \"dog and cat\"          /* no val for whitespace_f_stxt */));\n                 \n    assertU(commit());\n\n    // search & sort\n    // NOTE: even if the field is indexed=false, should still be able to sort on it\n    for (String sortf : Arrays.asList(\"whitespace_stxt\", \"whitespace_nois_stxt\", \"whitespace_plain_str\")) {\n      assertQ(req(\"q\", \"whitespace_stxt:cat\", \"sort\", sortf + \" asc\")\n              , \"//*[@numFound='2']\"\n              , \"//result/doc[1]/str[@name='id'][.=4]\"\n              , \"//result/doc[2]/str[@name='id'][.=3]\"\n              );\n      assertQ(req(\"q\", \"whitespace_stxt:cat\", \"sort\", sortf + \" desc\")\n              , \"//*[@numFound='2']\"\n              , \"//result/doc[1]/str[@name='id'][.=3]\"\n              , \"//result/doc[2]/str[@name='id'][.=4]\"\n              );\n      assertQ(req(\"q\", \"whitespace_stxt:brown\", \"sort\", sortf + \" asc\")\n              , \"//*[@numFound='3']\"\n              , \"//result/doc[1]/str[@name='id'][.=3]\"\n              , \"//result/doc[2]/str[@name='id'][.=1]\"\n              , \"//result/doc[3]/str[@name='id'][.=2]\"\n              );\n      assertQ(req(\"q\", \"whitespace_stxt:brown\", \"sort\", sortf + \" desc\")\n              , \"//*[@numFound='3']\"\n              , \"//result/doc[1]/str[@name='id'][.=2]\"\n              , \"//result/doc[2]/str[@name='id'][.=1]\"\n              , \"//result/doc[3]/str[@name='id'][.=3]\"\n              );\n      \n      // we should still be able to search if docValues=\"false\" (but sort on a diff field)\n      assertQ(req(\"q\",\"whitespace_nodv_stxt:cat\", \"sort\", sortf + \" asc\")\n              , \"//*[@numFound='2']\"\n              , \"//result/doc[1]/str[@name='id'][.=4]\"\n              , \"//result/doc[2]/str[@name='id'][.=3]\"\n              );\n    }\n    \n    // attempting to sort on docValues=\"false\" field should give an error...\n    assertQEx(\"attempting to sort on docValues=false field should give an error\",\n              \"when docValues=\\\"false\\\"\",\n              req(\"q\",\"*:*\", \"sort\", \"whitespace_nodv_stxt asc\"),\n              ErrorCode.BAD_REQUEST);\n\n    // sortMissing - whitespace_f_stxt copyField to whitespace_l_stxt\n    assertQ(req(\"q\",\"*:*\", \"sort\", \"whitespace_f_stxt asc\")\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=4]\"\n            , \"//result/doc[2]/str[@name='id'][.=1]\"\n            , \"//result/doc[3]/str[@name='id'][.=2]\"\n            , \"//result/doc[4]/str[@name='id'][.=3]\"\n            );    \n    assertQ(req(\"q\",\"*:*\", \"sort\", \"whitespace_f_stxt desc\")\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=4]\"\n            , \"//result/doc[2]/str[@name='id'][.=3]\"\n            , \"//result/doc[3]/str[@name='id'][.=2]\"\n            , \"//result/doc[4]/str[@name='id'][.=1]\"\n            );    \n    assertQ(req(\"q\",\"*:*\", \"sort\", \"whitespace_l_stxt asc\")\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=1]\"\n            , \"//result/doc[2]/str[@name='id'][.=2]\"\n            , \"//result/doc[3]/str[@name='id'][.=3]\"\n            , \"//result/doc[4]/str[@name='id'][.=4]\"\n            );    \n    assertQ(req(\"q\",\"*:*\", \"sort\", \"whitespace_l_stxt desc\")\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=3]\"\n            , \"//result/doc[2]/str[@name='id'][.=2]\"\n            , \"//result/doc[3]/str[@name='id'][.=1]\"\n            , \"//result/doc[4]/str[@name='id'][.=4]\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09db84b25dda87b73022d145a68f14c86a3a552d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09db84b25dda87b73022d145a68f14c86a3a552d"]},"commit2Childs":{"09db84b25dda87b73022d145a68f14c86a3a552d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09db84b25dda87b73022d145a68f14c86a3a552d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}