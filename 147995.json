{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","commits":[{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["11e8ea32003f6ccf3282ad6c05ca47eec277e928","112d77ac8d3e10a362516ad834c9a11d35c94234"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}