{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","commits":[{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","pathOld":"/dev/null","sourceNew":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        termsHashPerField.writeVInt(0, (pos<<1)|1);\n        termsHashPerField.writeVInt(0, payload.length);\n        termsHashPerField.writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        termsHashPerField.writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","pathOld":"/dev/null","sourceNew":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        termsHashPerField.writeVInt(0, (pos<<1)|1);\n        termsHashPerField.writeVInt(0, payload.length);\n        termsHashPerField.writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        termsHashPerField.writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","pathOld":"/dev/null","sourceNew":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        termsHashPerField.writeVInt(0, (pos<<1)|1);\n        termsHashPerField.writeVInt(0, payload.length);\n        termsHashPerField.writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        termsHashPerField.writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","sourceNew":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        writeVInt(0, (pos<<1)|1);\n        writeVInt(0, payload.length);\n        writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        termsHashPerField.writeVInt(0, (pos<<1)|1);\n        termsHashPerField.writeVInt(0, payload.length);\n        termsHashPerField.writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        termsHashPerField.writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","sourceNew":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        writeVInt(0, (pos<<1)|1);\n        writeVInt(0, payload.length);\n        writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        termsHashPerField.writeVInt(0, (pos<<1)|1);\n        termsHashPerField.writeVInt(0, payload.length);\n        termsHashPerField.writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        termsHashPerField.writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","sourceNew":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        writeVInt(0, (pos<<1)|1);\n        writeVInt(0, payload.length);\n        writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        termsHashPerField.writeVInt(0, (pos<<1)|1);\n        termsHashPerField.writeVInt(0, payload.length);\n        termsHashPerField.writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        termsHashPerField.writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3cc3fa1ecad75b99ec55169e44628808f9866ad","date":1592311545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#writeProx(TermVectorsPostingsArray,int).mjava","sourceNew":"  void writeProx(TermVectorsPostingsArray postings, int termID) {\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        writeVInt(0, (pos<<1)|1);\n        writeVInt(0, payload.length);\n        writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void writeProx(TermVectorsPostingsArray postings, int termID) {    \n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      final BytesRef payload;\n      if (payloadAttribute == null) {\n        payload = null;\n      } else {\n        payload = payloadAttribute.getPayload();\n      }\n      \n      final int pos = fieldState.position - postings.lastPositions[termID];\n      if (payload != null && payload.length > 0) {\n        writeVInt(0, (pos<<1)|1);\n        writeVInt(0, payload.length);\n        writeBytes(0, payload.bytes, payload.offset, payload.length);\n        hasPayloads = true;\n      } else {\n        writeVInt(0, pos<<1);\n      }\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["0935c850ea562932997b72c69d93e345f21d7f45","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["0935c850ea562932997b72c69d93e345f21d7f45","3394716f52b34ab259ad5247e7595d9f9db6e935"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0935c850ea562932997b72c69d93e345f21d7f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0935c850ea562932997b72c69d93e345f21d7f45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52c7e49be259508735752fba88085255014a6ecf":["0935c850ea562932997b72c69d93e345f21d7f45"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d3cc3fa1ecad75b99ec55169e44628808f9866ad"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"0935c850ea562932997b72c69d93e345f21d7f45":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c7869f64c874ebf7f317d22c00baf2b6857797a6","52c7e49be259508735752fba88085255014a6ecf","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}