{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random, latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random, latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random, latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.shutdown();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.shutdown();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.shutdown();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.shutdown();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    int numReaderThreads = TEST_NIGHTLY ? TestUtil.nextInt(random(), 2, 5) : 2;\n    ReaderThread[] threads = new ReaderThread[numReaderThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws\n      IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random(), latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}