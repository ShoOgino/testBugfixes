{"path":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","pathOld":"/dev/null","sourceNew":"    boolean fetchFromAnyNode() {\n\n      ArrayList<String> l = shuffledNodes();\n      ZkStateReader stateReader = coreContainer.getZkController().getZkStateReader();\n      for (String liveNode : l) {\n        try {\n          String baseurl = stateReader.getBaseUrlForNodeName(liveNode);\n          String url = baseurl.replace(\"/solr\", \"/api\");\n          String reqUrl = url + \"/node/files\" + path +\n              \"?meta=true&wt=javabin&omitHeader=true\";\n          boolean nodeHasBlob = false;\n          Object nl = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(), reqUrl, Utils.JAVABINCONSUMER);\n          if (Utils.getObjectByPath(nl, false, Arrays.asList(\"files\", getMetaPath())) != null) {\n            nodeHasBlob = true;\n          }\n\n          if (nodeHasBlob) {\n            boolean success = fetchFileFromNodeAndPersist(liveNode);\n            if (success) return true;\n          }\n        } catch (Exception e) {\n          //it's OK for some nodes to fail\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849dbf8570155b8e5fd03d8c2274a0a60491051c","date":1570859954,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","sourceNew":"    boolean fetchFromAnyNode() {\n      ArrayList<String> l = coreContainer.getPackageStoreAPI().shuffledNodes();\n      ZkStateReader stateReader = coreContainer.getZkController().getZkStateReader();\n      for (String liveNode : l) {\n        try {\n          String baseurl = stateReader.getBaseUrlForNodeName(liveNode);\n          String url = baseurl.replace(\"/solr\", \"/api\");\n          String reqUrl = url + \"/node/files\" + path +\n              \"?meta=true&wt=javabin&omitHeader=true\";\n          boolean nodeHasBlob = false;\n          Object nl = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(), reqUrl, Utils.JAVABINCONSUMER);\n          if (Utils.getObjectByPath(nl, false, Arrays.asList(\"files\", getMetaPath())) != null) {\n            nodeHasBlob = true;\n          }\n\n          if (nodeHasBlob) {\n            boolean success = fetchFileFromNodeAndPersist(liveNode);\n            if (success) return true;\n          }\n        } catch (Exception e) {\n          //it's OK for some nodes to fail\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    boolean fetchFromAnyNode() {\n\n      ArrayList<String> l = shuffledNodes();\n      ZkStateReader stateReader = coreContainer.getZkController().getZkStateReader();\n      for (String liveNode : l) {\n        try {\n          String baseurl = stateReader.getBaseUrlForNodeName(liveNode);\n          String url = baseurl.replace(\"/solr\", \"/api\");\n          String reqUrl = url + \"/node/files\" + path +\n              \"?meta=true&wt=javabin&omitHeader=true\";\n          boolean nodeHasBlob = false;\n          Object nl = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(), reqUrl, Utils.JAVABINCONSUMER);\n          if (Utils.getObjectByPath(nl, false, Arrays.asList(\"files\", getMetaPath())) != null) {\n            nodeHasBlob = true;\n          }\n\n          if (nodeHasBlob) {\n            boolean success = fetchFileFromNodeAndPersist(liveNode);\n            if (success) return true;\n          }\n        } catch (Exception e) {\n          //it's OK for some nodes to fail\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","pathOld":"/dev/null","sourceNew":"    boolean fetchFromAnyNode() {\n      ArrayList<String> l = coreContainer.getPackageStoreAPI().shuffledNodes();\n      ZkStateReader stateReader = coreContainer.getZkController().getZkStateReader();\n      for (String liveNode : l) {\n        try {\n          String baseurl = stateReader.getBaseUrlForNodeName(liveNode);\n          String url = baseurl.replace(\"/solr\", \"/api\");\n          String reqUrl = url + \"/node/files\" + path +\n              \"?meta=true&wt=javabin&omitHeader=true\";\n          boolean nodeHasBlob = false;\n          Object nl = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(), reqUrl, Utils.JAVABINCONSUMER);\n          if (Utils.getObjectByPath(nl, false, Arrays.asList(\"files\", getMetaPath())) != null) {\n            nodeHasBlob = true;\n          }\n\n          if (nodeHasBlob) {\n            boolean success = fetchFileFromNodeAndPersist(liveNode);\n            if (success) return true;\n          }\n        } catch (Exception e) {\n          //it's OK for some nodes to fail\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a6448412ce640b28861f4c00f899484a9adac1","date":1573627357,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","sourceNew":"    boolean fetchFromAnyNode() {\n      ArrayList<String> l = coreContainer.getPackageStoreAPI().shuffledNodes();\n      ZkStateReader stateReader = coreContainer.getZkController().getZkStateReader();\n      for (String liveNode : l) {\n        try {\n          String baseurl = stateReader.getBaseUrlForNodeName(liveNode);\n          String url = baseurl.replace(\"/solr\", \"/api\");\n          String reqUrl = url + \"/node/files\" + path +\n              \"?meta=true&wt=javabin&omitHeader=true\";\n          boolean nodeHasBlob = false;\n          Object nl = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(), reqUrl, Utils.JAVABINCONSUMER);\n          if (Utils.getObjectByPath(nl, false, Arrays.asList(\"files\", path)) != null) {\n            nodeHasBlob = true;\n          }\n\n          if (nodeHasBlob) {\n            boolean success = fetchFileFromNodeAndPersist(liveNode);\n            if (success) return true;\n          }\n        } catch (Exception e) {\n          //it's OK for some nodes to fail\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    boolean fetchFromAnyNode() {\n      ArrayList<String> l = coreContainer.getPackageStoreAPI().shuffledNodes();\n      ZkStateReader stateReader = coreContainer.getZkController().getZkStateReader();\n      for (String liveNode : l) {\n        try {\n          String baseurl = stateReader.getBaseUrlForNodeName(liveNode);\n          String url = baseurl.replace(\"/solr\", \"/api\");\n          String reqUrl = url + \"/node/files\" + path +\n              \"?meta=true&wt=javabin&omitHeader=true\";\n          boolean nodeHasBlob = false;\n          Object nl = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(), reqUrl, Utils.JAVABINCONSUMER);\n          if (Utils.getObjectByPath(nl, false, Arrays.asList(\"files\", getMetaPath())) != null) {\n            nodeHasBlob = true;\n          }\n\n          if (nodeHasBlob) {\n            boolean success = fetchFileFromNodeAndPersist(liveNode);\n            if (success) return true;\n          }\n        } catch (Exception e) {\n          //it's OK for some nodes to fail\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFromAnyNode().mjava","sourceNew":"    boolean fetchFromAnyNode() {\n      ArrayList<String> l = coreContainer.getPackageStoreAPI().shuffledNodes();\n      ZkStateReader stateReader = coreContainer.getZkController().getZkStateReader();\n      for (String liveNode : l) {\n        try {\n          String baseurl = stateReader.getBaseUrlForNodeName(liveNode);\n          String url = baseurl.replace(\"/solr\", \"/api\");\n          String reqUrl = url + \"/node/files\" + path +\n                  \"?meta=true&wt=javabin&omitHeader=true\";\n          boolean nodeHasBlob = false;\n          Object nl = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(), reqUrl, Utils.JAVABINCONSUMER);\n          if (Utils.getObjectByPath(nl, false, Arrays.asList(\"files\", path)) != null) {\n            nodeHasBlob = true;\n          }\n\n          if (nodeHasBlob) {\n            boolean success = fetchFileFromNodeAndPersist(liveNode);\n            if (success) return true;\n          }\n        } catch (Exception e) {\n          //it's OK for some nodes to fail\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    boolean fetchFromAnyNode() {\n      ArrayList<String> l = coreContainer.getPackageStoreAPI().shuffledNodes();\n      ZkStateReader stateReader = coreContainer.getZkController().getZkStateReader();\n      for (String liveNode : l) {\n        try {\n          String baseurl = stateReader.getBaseUrlForNodeName(liveNode);\n          String url = baseurl.replace(\"/solr\", \"/api\");\n          String reqUrl = url + \"/node/files\" + path +\n              \"?meta=true&wt=javabin&omitHeader=true\";\n          boolean nodeHasBlob = false;\n          Object nl = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(), reqUrl, Utils.JAVABINCONSUMER);\n          if (Utils.getObjectByPath(nl, false, Arrays.asList(\"files\", path)) != null) {\n            nodeHasBlob = true;\n          }\n\n          if (nodeHasBlob) {\n            boolean success = fetchFileFromNodeAndPersist(liveNode);\n            if (success) return true;\n          }\n        } catch (Exception e) {\n          //it's OK for some nodes to fail\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["d1a6448412ce640b28861f4c00f899484a9adac1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a6448412ce640b28861f4c00f899484a9adac1":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["8476949555f799dff381770c01cfad051a264487"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849dbf8570155b8e5fd03d8c2274a0a60491051c"]},"commit2Childs":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"d1a6448412ce640b28861f4c00f899484a9adac1":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"8476949555f799dff381770c01cfad051a264487":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["d1a6448412ce640b28861f4c00f899484a9adac1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}