{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(AttributeFactory,TokenInfoDictionary,UnknownDictionary,ConnectionCosts,UserDictionary,boolean,Mode).mjava","commits":[{"id":"c0b14f16b545ec357d824d7dd34040f8b0460284","date":1568213150,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(AttributeFactory,TokenInfoDictionary,UnknownDictionary,ConnectionCosts,UserDictionary,boolean,Mode).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new JapaneseTokenizer, supplying a custom system dictionary and unknown dictionary.\n   * <p>\n   * Uses the default AttributeFactory.\n   *\n   * @param factory the AttributeFactory to use\n   * @param systemDictionary a custom known token dictionary\n   * @param unkDictionary a custom unknown token dictionary\n   * @param connectionCosts custom token transition costs\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public JapaneseTokenizer(AttributeFactory factory,\n                           TokenInfoDictionary systemDictionary,\n                           UnknownDictionary unkDictionary,\n                           ConnectionCosts connectionCosts,\n                           UserDictionary userDictionary,\n                           boolean discardPunctuation,\n                           Mode mode) {\n    super(factory);\n    this.dictionary = systemDictionary;\n    this.fst = dictionary.getFST();\n    this.unkDictionary = unkDictionary;\n    this.characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    this.costs = connectionCosts;\n    fstReader = fst.getBytesReader();\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader();\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(this.input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adee502365d6c69a27c002e673de61d306170634","date":1568719989,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(AttributeFactory,TokenInfoDictionary,UnknownDictionary,ConnectionCosts,UserDictionary,boolean,Mode).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(AttributeFactory,TokenInfoDictionary,UnknownDictionary,ConnectionCosts,UserDictionary,boolean,Mode).mjava","sourceNew":"  /**\n   * <p>Create a new JapaneseTokenizer, supplying a custom system dictionary and unknown dictionary.\n   * This constructor provides an entry point for users that want to construct custom language models\n   * that can be used as input to {@link org.apache.lucene.analysis.ja.util.DictionaryBuilder}.</p>\n   *\n   * @param factory the AttributeFactory to use\n   * @param systemDictionary a custom known token dictionary\n   * @param unkDictionary a custom unknown token dictionary\n   * @param connectionCosts custom token transition costs\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   * @lucene.experimental\n   */\n  public JapaneseTokenizer(AttributeFactory factory,\n                           TokenInfoDictionary systemDictionary,\n                           UnknownDictionary unkDictionary,\n                           ConnectionCosts connectionCosts,\n                           UserDictionary userDictionary,\n                           boolean discardPunctuation,\n                           Mode mode) {\n    super(factory);\n    this.dictionary = systemDictionary;\n    this.fst = dictionary.getFST();\n    this.unkDictionary = unkDictionary;\n    this.characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    this.costs = connectionCosts;\n    fstReader = fst.getBytesReader();\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader();\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(this.input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":"  /**\n   * Create a new JapaneseTokenizer, supplying a custom system dictionary and unknown dictionary.\n   * <p>\n   * Uses the default AttributeFactory.\n   *\n   * @param factory the AttributeFactory to use\n   * @param systemDictionary a custom known token dictionary\n   * @param unkDictionary a custom unknown token dictionary\n   * @param connectionCosts custom token transition costs\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public JapaneseTokenizer(AttributeFactory factory,\n                           TokenInfoDictionary systemDictionary,\n                           UnknownDictionary unkDictionary,\n                           ConnectionCosts connectionCosts,\n                           UserDictionary userDictionary,\n                           boolean discardPunctuation,\n                           Mode mode) {\n    super(factory);\n    this.dictionary = systemDictionary;\n    this.fst = dictionary.getFST();\n    this.unkDictionary = unkDictionary;\n    this.characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    this.costs = connectionCosts;\n    fstReader = fst.getBytesReader();\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader();\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(this.input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dcc09cac106847a24991642f3bb5444c60ddbe7","date":1580536269,"type":5,"author":"Kazuaki Hiraga","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(AttributeFactory,TokenInfoDictionary,UnknownDictionary,ConnectionCosts,UserDictionary,boolean,boolean,Mode).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(AttributeFactory,TokenInfoDictionary,UnknownDictionary,ConnectionCosts,UserDictionary,boolean,Mode).mjava","sourceNew":"  /**\n   * <p>Create a new JapaneseTokenizer, supplying a custom system dictionary and unknown dictionary.\n   * This constructor provides an entry point for users that want to construct custom language models\n   * that can be used as input to {@link org.apache.lucene.analysis.ja.util.DictionaryBuilder}.</p>\n   *\n   * @param factory the AttributeFactory to use\n   * @param systemDictionary a custom known token dictionary\n   * @param unkDictionary a custom unknown token dictionary\n   * @param connectionCosts custom token transition costs\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param discardCompoundToken true if compound tokens should be dropped from the output when tokenization mode is not NORMAL.\n   * @param mode tokenization mode.\n   * @lucene.experimental\n   */\n  public JapaneseTokenizer(AttributeFactory factory,\n                           TokenInfoDictionary systemDictionary,\n                           UnknownDictionary unkDictionary,\n                           ConnectionCosts connectionCosts,\n                           UserDictionary userDictionary,\n                           boolean discardPunctuation,\n                           boolean discardCompoundToken,\n                           Mode mode) {\n    super(factory);\n    this.dictionary = systemDictionary;\n    this.fst = dictionary.getFST();\n    this.unkDictionary = unkDictionary;\n    this.characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    this.costs = connectionCosts;\n    fstReader = fst.getBytesReader();\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader();\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = !discardCompoundToken;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = !discardCompoundToken;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(this.input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":"  /**\n   * <p>Create a new JapaneseTokenizer, supplying a custom system dictionary and unknown dictionary.\n   * This constructor provides an entry point for users that want to construct custom language models\n   * that can be used as input to {@link org.apache.lucene.analysis.ja.util.DictionaryBuilder}.</p>\n   *\n   * @param factory the AttributeFactory to use\n   * @param systemDictionary a custom known token dictionary\n   * @param unkDictionary a custom unknown token dictionary\n   * @param connectionCosts custom token transition costs\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   * @lucene.experimental\n   */\n  public JapaneseTokenizer(AttributeFactory factory,\n                           TokenInfoDictionary systemDictionary,\n                           UnknownDictionary unkDictionary,\n                           ConnectionCosts connectionCosts,\n                           UserDictionary userDictionary,\n                           boolean discardPunctuation,\n                           Mode mode) {\n    super(factory);\n    this.dictionary = systemDictionary;\n    this.fst = dictionary.getFST();\n    this.unkDictionary = unkDictionary;\n    this.characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    this.costs = connectionCosts;\n    fstReader = fst.getBytesReader();\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader();\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(this.input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b14f16b545ec357d824d7dd34040f8b0460284":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"adee502365d6c69a27c002e673de61d306170634":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"9dcc09cac106847a24991642f3bb5444c60ddbe7":["adee502365d6c69a27c002e673de61d306170634"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dcc09cac106847a24991642f3bb5444c60ddbe7"]},"commit2Childs":{"c0b14f16b545ec357d824d7dd34040f8b0460284":["adee502365d6c69a27c002e673de61d306170634"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"adee502365d6c69a27c002e673de61d306170634":["9dcc09cac106847a24991642f3bb5444c60ddbe7"],"9dcc09cac106847a24991642f3bb5444c60ddbe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}