{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#read().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ParallelStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = _read();\n\n    if(tuple.EOF) {\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      Tuple t = new Tuple(m);\n\n      Map<String, Map> metrics = new HashMap();\n      Iterator<Entry<String,Tuple>> it = this.eofTuples.entrySet().iterator();\n      while(it.hasNext()) {\n        Map.Entry<String, Tuple> entry = it.next();\n        metrics.put(entry.getKey(), entry.getValue().fields);\n      }\n\n      t.setMetrics(metrics);\n      return t;\n    }\n\n    return tuple;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple tuple = _read();\n\n    if(tuple.EOF) {\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      Tuple t = new Tuple(m);\n      t.setMetrics(this.eofTuples);\n      return t;\n    }\n\n    return tuple;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = _read();\n\n    if(tuple.EOF) {\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      Tuple t = new Tuple(m);\n\n      /*\n      Map<String, Map> metrics = new HashMap();\n      Iterator<Entry<String,Tuple>> it = this.eofTuples.entrySet().iterator();\n      while(it.hasNext()) {\n        Map.Entry<String, Tuple> entry = it.next();\n        if(entry.getValue().fields.size() > 1) {\n          metrics.put(entry.getKey(), entry.getValue().fields);\n        }\n      }\n\n      if(metrics.size() > 0) {\n        t.setMetrics(metrics);\n      }\n      */\n      return t;\n    }\n\n    return tuple;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple tuple = _read();\n\n    if(tuple.EOF) {\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      Tuple t = new Tuple(m);\n\n      Map<String, Map> metrics = new HashMap();\n      Iterator<Entry<String,Tuple>> it = this.eofTuples.entrySet().iterator();\n      while(it.hasNext()) {\n        Map.Entry<String, Tuple> entry = it.next();\n        metrics.put(entry.getKey(), entry.getValue().fields);\n      }\n\n      t.setMetrics(metrics);\n      return t;\n    }\n\n    return tuple;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = _read();\n\n    if(tuple.EOF) {\n      /*\n      Map<String, Map> metrics = new HashMap();\n      Iterator<Entry<String,Tuple>> it = this.eofTuples.entrySet().iterator();\n      while(it.hasNext()) {\n        Map.Entry<String, Tuple> entry = it.next();\n        if(entry.getValue().fields.size() > 1) {\n          metrics.put(entry.getKey(), entry.getValue().fields);\n        }\n      }\n\n      if(metrics.size() > 0) {\n        t.setMetrics(metrics);\n      }\n      */\n      return Tuple.EOF();\n    }\n\n    return tuple;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple tuple = _read();\n\n    if(tuple.EOF) {\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      Tuple t = new Tuple(m);\n\n      /*\n      Map<String, Map> metrics = new HashMap();\n      Iterator<Entry<String,Tuple>> it = this.eofTuples.entrySet().iterator();\n      while(it.hasNext()) {\n        Map.Entry<String, Tuple> entry = it.next();\n        if(entry.getValue().fields.size() > 1) {\n          metrics.put(entry.getKey(), entry.getValue().fields);\n        }\n      }\n\n      if(metrics.size() > 0) {\n        t.setMetrics(metrics);\n      }\n      */\n      return t;\n    }\n\n    return tuple;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"804a8d5358fe7b7563b85ee7838714d720b89272":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}