{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygonContains().mjava","commits":[{"id":"a35a7d0e36dd6f5b4f8053ac085490326734d5e4","date":1460739189,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygonContains().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests that our impl supports multiple components and holes (not currently used) */\n  public void testMultiPolygonContains() {\n    // this is the equivalent of the following: we don't recommend anyone do this (e.g. relation logic will not work)\n    // but lets not lose the property that it works.\n    ///\n    // Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    // Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    // Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    // Polygon polygons[] = new Polygon[] { outer, island };\n    \n    Polygon polygon = new Polygon(new double[] { 0, -50, -50, 50, 50, -50, 0, -5, -5, 5, 5, -5, 0, -10, -10, 10, 10, -10, 0 },\n                                  new double[] { 0, -50, 50, 50, -50, -50, 0, -5, 5, 5, -5, -5, 0, -10, 10, 10, -10, -10, 0 });\n    \n    assertTrue(polygon.contains(-2, 2)); // on the island\n    assertFalse(polygon.contains(-6, 6)); // in the hole\n    assertTrue(polygon.contains(-25, 25)); // on the mainland\n    assertFalse(polygon.contains(-51, 51)); // in the ocean\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygonContains().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests that our impl supports multiple components and holes (not currently used) */\n  public void testMultiPolygonContains() {\n    // this is the equivalent of the following: we don't recommend anyone do this (e.g. relation logic will not work)\n    // but lets not lose the property that it works.\n    ///\n    // Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    // Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    // Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    // Polygon polygons[] = new Polygon[] { outer, island };\n    \n    Polygon polygon = new Polygon(new double[] { 0, -50, -50, 50, 50, -50, 0, -5, -5, 5, 5, -5, 0, -10, -10, 10, 10, -10, 0 },\n                                  new double[] { 0, -50, 50, 50, -50, -50, 0, -5, 5, 5, -5, -5, 0, -10, 10, 10, -10, -10, 0 });\n    \n    assertTrue(polygon.contains(-2, 2)); // on the island\n    assertFalse(polygon.contains(-6, 6)); // in the hole\n    assertTrue(polygon.contains(-25, 25)); // on the mainland\n    assertFalse(polygon.contains(-51, 51)); // in the ocean\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygonContains().mjava","sourceNew":null,"sourceOld":"  /** Tests that our impl supports multiple components and holes (not currently used) */\n  public void testMultiPolygonContains() {\n    // this is the equivalent of the following: we don't recommend anyone do this (e.g. relation logic will not work)\n    // but lets not lose the property that it works.\n    ///\n    // Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    // Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    // Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    // Polygon polygons[] = new Polygon[] { outer, island };\n    \n    Polygon polygon = new Polygon(new double[] { 0, -50, -50, 50, 50, -50, 0, -5, -5, 5, 5, -5, 0, -10, -10, 10, 10, -10, 0 },\n                                  new double[] { 0, -50, 50, 50, -50, -50, 0, -5, 5, 5, -5, -5, 0, -10, 10, 10, -10, -10, 0 });\n    \n    assertTrue(polygon.contains(-2, 2)); // on the island\n    assertFalse(polygon.contains(-6, 6)); // in the hole\n    assertTrue(polygon.contains(-25, 25)); // on the mainland\n    assertFalse(polygon.contains(-51, 51)); // in the ocean\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygonContains().mjava","sourceNew":null,"sourceOld":"  /** Tests that our impl supports multiple components and holes (not currently used) */\n  public void testMultiPolygonContains() {\n    // this is the equivalent of the following: we don't recommend anyone do this (e.g. relation logic will not work)\n    // but lets not lose the property that it works.\n    ///\n    // Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    // Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    // Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    // Polygon polygons[] = new Polygon[] { outer, island };\n    \n    Polygon polygon = new Polygon(new double[] { 0, -50, -50, 50, 50, -50, 0, -5, -5, 5, 5, -5, 0, -10, -10, 10, 10, -10, 0 },\n                                  new double[] { 0, -50, 50, 50, -50, -50, 0, -5, 5, 5, -5, -5, 0, -10, 10, 10, -10, -10, 0 });\n    \n    assertTrue(polygon.contains(-2, 2)); // on the island\n    assertFalse(polygon.contains(-6, 6)); // in the hole\n    assertTrue(polygon.contains(-25, 25)); // on the mainland\n    assertFalse(polygon.contains(-51, 51)); // in the ocean\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","925fce43f3bac029d912b9b7de03c789e258a333"],"a35a7d0e36dd6f5b4f8053ac085490326734d5e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a35a7d0e36dd6f5b4f8053ac085490326734d5e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a35a7d0e36dd6f5b4f8053ac085490326734d5e4","73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a35a7d0e36dd6f5b4f8053ac085490326734d5e4":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}