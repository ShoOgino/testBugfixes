{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","commits":[{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            log.error(msg);\n            throw new DataImportHandlerException(\n                    SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            log.error(msg);\n            throw new DataImportHandlerException(\n                    SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67f5643cacc4332b0fa788db5aa6c741ddef7086","date":1259825802,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            log.error(msg);\n            throw new DataImportHandlerException(\n                    SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["67f5643cacc4332b0fa788db5aa6c741ddef7086"],"67f5643cacc4332b0fa788db5aa6c741ddef7086":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["67f5643cacc4332b0fa788db5aa6c741ddef7086"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"67f5643cacc4332b0fa788db5aa6c741ddef7086":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}