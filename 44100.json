{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<Position, String> getNodeMappings() {\n    List<String> shardNames = new ArrayList<>(shardVsReplicaCount.keySet());\n    int[] shardOrder = new int[shardNames.size()];\n    for (int i = 0; i < shardNames.size(); i++) shardOrder[i] = i;\n\n    boolean hasFuzzyRules = false;\n    int nonWildCardShardRules = 0;\n    for (Rule r : rules) {\n      if (r.isFuzzy()) hasFuzzyRules = true;\n      if (!r.shard.isWildCard()) {\n        nonWildCardShardRules++;\n        //we will have to try all combinations\n        if (shardNames.size() > 10) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Max 10 shards allowed if there is a non wild card shard specified in rule\");\n        }\n      }\n    }\n\n    Map<Position, String> result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, false);\n    if (result == null && hasFuzzyRules) {\n      result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, true);\n    }\n    return result;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","sourceNew":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<Position, String> getNodeMappings() {\n    Map<Position, String> result = getNodeMappings0();\n    if (result == null) {\n      String msg = \"Could not identify nodes matching the rules \" + rules;\n      if (!failedNodes.isEmpty()) {\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : this.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg += \" Some nodes where excluded from assigning replicas because tags could not be obtained from them \" + failedNodes;\n      }\n      msg += \"\\n tag values\" + ZkStateReader.toJSONString(getNodeVsTags());\n      if (!shardVsNodes.isEmpty()) {\n        msg += \"\\nInitial state for the coll : \" + ZkStateReader.toJSONString(shardVsNodes);\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<Position, String> getNodeMappings() {\n    List<String> shardNames = new ArrayList<>(shardVsReplicaCount.keySet());\n    int[] shardOrder = new int[shardNames.size()];\n    for (int i = 0; i < shardNames.size(); i++) shardOrder[i] = i;\n\n    boolean hasFuzzyRules = false;\n    int nonWildCardShardRules = 0;\n    for (Rule r : rules) {\n      if (r.isFuzzy()) hasFuzzyRules = true;\n      if (!r.shard.isWildCard()) {\n        nonWildCardShardRules++;\n        //we will have to try all combinations\n        if (shardNames.size() > 10) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Max 10 shards allowed if there is a non wild card shard specified in rule\");\n        }\n      }\n    }\n\n    Map<Position, String> result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, false);\n    if (result == null && hasFuzzyRules) {\n      result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, true);\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","sourceNew":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<Position, String> getNodeMappings() {\n    Map<Position, String> result = getNodeMappings0();\n    if (result == null) {\n      String msg = \"Could not identify nodes matching the rules \" + rules;\n      if (!failedNodes.isEmpty()) {\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : this.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg += \" Some nodes where excluded from assigning replicas because tags could not be obtained from them \" + failedNodes;\n      }\n      msg += \"\\n tag values\" + Utils.toJSONString(getNodeVsTags());\n      if (!shardVsNodes.isEmpty()) {\n        msg += \"\\nInitial state for the coll : \" + Utils.toJSONString(shardVsNodes);\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<Position, String> getNodeMappings() {\n    Map<Position, String> result = getNodeMappings0();\n    if (result == null) {\n      String msg = \"Could not identify nodes matching the rules \" + rules;\n      if (!failedNodes.isEmpty()) {\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : this.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg += \" Some nodes where excluded from assigning replicas because tags could not be obtained from them \" + failedNodes;\n      }\n      msg += \"\\n tag values\" + ZkStateReader.toJSONString(getNodeVsTags());\n      if (!shardVsNodes.isEmpty()) {\n        msg += \"\\nInitial state for the coll : \" + ZkStateReader.toJSONString(shardVsNodes);\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","sourceNew":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<ReplicaPosition, String> getNodeMappings() {\n    Map<ReplicaPosition, String> result = getNodeMappings0();\n    if (result == null) {\n      String msg = \"Could not identify nodes matching the rules \" + rules;\n      if (!failedNodes.isEmpty()) {\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : this.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg += \" Some nodes where excluded from assigning replicas because tags could not be obtained from them \" + failedNodes;\n      }\n      msg += \"\\n tag values\" + Utils.toJSONString(getNodeVsTags());\n      if (!shardVsNodes.isEmpty()) {\n        msg += \"\\nInitial state for the coll : \" + Utils.toJSONString(shardVsNodes);\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<Position, String> getNodeMappings() {\n    Map<Position, String> result = getNodeMappings0();\n    if (result == null) {\n      String msg = \"Could not identify nodes matching the rules \" + rules;\n      if (!failedNodes.isEmpty()) {\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : this.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg += \" Some nodes where excluded from assigning replicas because tags could not be obtained from them \" + failedNodes;\n      }\n      msg += \"\\n tag values\" + Utils.toJSONString(getNodeVsTags());\n      if (!shardVsNodes.isEmpty()) {\n        msg += \"\\nInitial state for the coll : \" + Utils.toJSONString(shardVsNodes);\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings().mjava","sourceNew":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<ReplicaPosition, String> getNodeMappings() {\n    Map<ReplicaPosition, String> result = getNodeMappings0();\n    if (result == null) {\n      String msg = \"Could not identify nodes matching the rules \" + rules;\n      if (!failedNodes.isEmpty()) {\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : this.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg += \" Some nodes where excluded from assigning replicas because tags could not be obtained from them \" + failedNodes;\n      }\n      msg += \"\\n tag values\" + Utils.toJSONString(getNodeVsTags());\n      if (!shardVsNodes.isEmpty()) {\n        msg += \"\\nInitial state for the coll : \" + Utils.toJSONString(shardVsNodes);\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**\n   * For each shard return a new set of nodes where the replicas need to be created satisfying\n   * the specified rule\n   */\n  public Map<Position, String> getNodeMappings() {\n    Map<Position, String> result = getNodeMappings0();\n    if (result == null) {\n      String msg = \"Could not identify nodes matching the rules \" + rules;\n      if (!failedNodes.isEmpty()) {\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : this.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg += \" Some nodes where excluded from assigning replicas because tags could not be obtained from them \" + failedNodes;\n      }\n      msg += \"\\n tag values\" + Utils.toJSONString(getNodeVsTags());\n      if (!shardVsNodes.isEmpty()) {\n        msg += \"\\nInitial state for the coll : \" + Utils.toJSONString(shardVsNodes);\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"969718c368b28ed1b2335ea2deb275c696cddb4f":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["969718c368b28ed1b2335ea2deb275c696cddb4f"]},"commit2Childs":{"969718c368b28ed1b2335ea2deb275c696cddb4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["969718c368b28ed1b2335ea2deb275c696cddb4f","0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}