{"path":"lucene/facet/src/java/org/apache/lucene/facet/params/CategoryListParams#createEncoder().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/params/CategoryListParams#createEncoder().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createEncoder().mjava","sourceNew":"  /**\n   * Allows to override how categories are encoded and decoded. A matching\n   * {@link IntDecoder} is provided by the {@link IntEncoder}.\n   * <p>\n   * Default implementation creates a new Sorting(<b>Unique</b>(DGap)) encoder.\n   * Uniqueness in this regard means when the same category appears twice in a\n   * document, only one appearance would be encoded. This has effect on facet\n   * counting results.\n   * <p>\n   * Some possible considerations when overriding may be:\n   * <ul>\n   * <li>an application \"knows\" that all categories are unique. So no need to\n   * pass through the unique filter.</li>\n   * <li>Another application might wish to count multiple occurrences of the\n   * same category, or, use a faster encoding which will consume more space.</li>\n   * </ul>\n   * In any event when changing this value make sure you know what you are\n   * doing, and test the results - e.g. counts, if the application is about\n   * counting facets.\n   */\n  public IntEncoder createEncoder() {\n    return new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder()));\n  }\n\n","sourceOld":"  /**\n   * Allows to override how categories are encoded and decoded. A matching\n   * {@link IntDecoder} is provided by the {@link IntEncoder}.\n   * <p>\n   * Default implementation creates a new Sorting(<b>Unique</b>(DGap)) encoder.\n   * Uniqueness in this regard means when the same category appears twice in a\n   * document, only one appearance would be encoded. This has effect on facet\n   * counting results.\n   * <p>\n   * Some possible considerations when overriding may be:\n   * <ul>\n   * <li>an application \"knows\" that all categories are unique. So no need to\n   * pass through the unique filter.</li>\n   * <li>Another application might wish to count multiple occurrences of the\n   * same category, or, use a faster encoding which will consume more space.</li>\n   * </ul>\n   * In any event when changing this value make sure you know what you are\n   * doing, and test the results - e.g. counts, if the application is about\n   * counting facets.\n   */\n  public IntEncoder createEncoder() {\n    return new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/params/CategoryListParams#createEncoder().mjava","sourceNew":null,"sourceOld":"  /**\n   * Allows to override how categories are encoded and decoded. A matching\n   * {@link IntDecoder} is provided by the {@link IntEncoder}.\n   * <p>\n   * Default implementation creates a new Sorting(<b>Unique</b>(DGap)) encoder.\n   * Uniqueness in this regard means when the same category appears twice in a\n   * document, only one appearance would be encoded. This has effect on facet\n   * counting results.\n   * <p>\n   * Some possible considerations when overriding may be:\n   * <ul>\n   * <li>an application \"knows\" that all categories are unique. So no need to\n   * pass through the unique filter.</li>\n   * <li>Another application might wish to count multiple occurrences of the\n   * same category, or, use a faster encoding which will consume more space.</li>\n   * </ul>\n   * In any event when changing this value make sure you know what you are\n   * doing, and test the results - e.g. counts, if the application is about\n   * counting facets.\n   */\n  public IntEncoder createEncoder() {\n    return new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/params/CategoryListParams#createEncoder().mjava","sourceNew":null,"sourceOld":"  /**\n   * Allows to override how categories are encoded and decoded. A matching\n   * {@link IntDecoder} is provided by the {@link IntEncoder}.\n   * <p>\n   * Default implementation creates a new Sorting(<b>Unique</b>(DGap)) encoder.\n   * Uniqueness in this regard means when the same category appears twice in a\n   * document, only one appearance would be encoded. This has effect on facet\n   * counting results.\n   * <p>\n   * Some possible considerations when overriding may be:\n   * <ul>\n   * <li>an application \"knows\" that all categories are unique. So no need to\n   * pass through the unique filter.</li>\n   * <li>Another application might wish to count multiple occurrences of the\n   * same category, or, use a faster encoding which will consume more space.</li>\n   * </ul>\n   * In any event when changing this value make sure you know what you are\n   * doing, and test the results - e.g. counts, if the application is about\n   * counting facets.\n   */\n  public IntEncoder createEncoder() {\n    return new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}