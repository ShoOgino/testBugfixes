{"path":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"fa96fdb58cefcada21fc51faf37114033f044f3f","date":1180916840,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( SolrParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(SolrParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( SolrParams.START, 0 );\n    int rows  = params.getInt( SolrParams.ROWS, 10 );\n    \n    DocList mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    rsp.add( \"response\", mltDocs );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FACET,false)) {\n      SimpleFacets f = new SimpleFacets(searcher, mltDocs, params );\n      rsp.add( \"facet_counts\", f.getFacetCounts() );\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","dbf8bf15546966c2999be987d32191fc1ef495ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc512c052d4f0e04ae655f1070aaa43b45934dde","date":1183993013,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( SolrParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(SolrParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( SolrParams.START, 0 );\n    int rows  = params.getInt( SolrParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(searcher, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( SolrParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(SolrParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( SolrParams.START, 0 );\n    int rows  = params.getInt( SolrParams.ROWS, 10 );\n    \n    DocList mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    rsp.add( \"response\", mltDocs );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FACET,false)) {\n      SimpleFacets f = new SimpleFacets(searcher, mltDocs, params );\n      rsp.add( \"facet_counts\", f.getFacetCounts() );\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(searcher, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( SolrParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(SolrParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( SolrParams.START, 0 );\n    int rows  = params.getInt( SolrParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(searcher, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":["dbf8bf15546966c2999be987d32191fc1ef495ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(searcher, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ff676ea3919c34f30df120b9fa469cd439203ec","date":1211576148,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    rsp.setHttpCaching(true);\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd36d5d7353f6cf7c2cccbd79385b298db7bc906","date":1213706937,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    rsp.setHttpCaching(true);\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    rsp.setHttpCaching(true);\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      \n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c79e84313497146a1eb431df8994acaa6c8516d1","date":1218002449,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    rsp.setHttpCaching(true);\n    \n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b909e7d84d56c113538485360000872547c3cfd","date":1219961929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbf8bf15546966c2999be987d32191fc1ef495ef","date":1265300798,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    String q = params.get( CommonParams.Q );\n    if( q == null || q.trim().length() <1 ) {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if( streams != null ) {\n        Iterator<ContentStream> iter = streams.iterator();\n        if( iter.hasNext() ) {\n          reader = iter.next().getReader();\n        }\n        if( iter.hasNext() ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"MoreLikeThis does not support multiple ContentStreams\" );\n        }\n      }\n    }\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    // What fields do we need to return\n    String fl = params.get(CommonParams.FL);\n    int flags = 0; \n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    int start = params.getInt( CommonParams.START, 0 );\n    int rows  = params.getInt( CommonParams.ROWS, 10 );\n    \n    DocListAndSet mltDocs = null;\n    \n    // Find documents MoreLikeThis - either with a reader or a query\n    //--------------------------------------------------------------------------------\n    if( reader != null ) {\n      mltDocs = mlt.getMoreLikeThis( reader, start, rows, filters, interesting, flags );\n    }\n    else if( q != null ) {\n      // Matching options\n      boolean includeMatch = params.getBool( MoreLikeThisParams.MATCH_INCLUDE, true );\n      int matchOffset = params.getInt( MoreLikeThisParams.MATCH_OFFSET, 0 );\n      // Find the base match  \n      Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF), params, req.getSchema());\n      DocList match = searcher.getDocList(query, null, null, matchOffset, 1, flags ); // only get the first one...\n      if( includeMatch ) {\n        rsp.add( \"match\", match );\n      }\n\n      // This is an iterator, but we only handle the first match\n      DocIterator iterator = match.iterator();\n      if( iterator.hasNext() ) {\n        // do a MoreLikeThis query for each document in results\n        int id = iterator.nextDoc();\n        mltDocs = mlt.getMoreLikeThis( id, start, rows, filters, interesting, flags );\n      }\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n          \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\" );\n    }\n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","fa96fdb58cefcada21fc51faf37114033f044f3f"],"bugIntro":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"c79e84313497146a1eb431df8994acaa6c8516d1":["dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"dd36d5d7353f6cf7c2cccbd79385b298db7bc906":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fa96fdb58cefcada21fc51faf37114033f044f3f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"dbf8bf15546966c2999be987d32191fc1ef495ef":["8b909e7d84d56c113538485360000872547c3cfd"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["fc512c052d4f0e04ae655f1070aaa43b45934dde"],"8b909e7d84d56c113538485360000872547c3cfd":["c79e84313497146a1eb431df8994acaa6c8516d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["dbf8bf15546966c2999be987d32191fc1ef495ef"],"fc512c052d4f0e04ae655f1070aaa43b45934dde":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"c79e84313497146a1eb431df8994acaa6c8516d1":["8b909e7d84d56c113538485360000872547c3cfd"],"dd36d5d7353f6cf7c2cccbd79385b298db7bc906":["c79e84313497146a1eb431df8994acaa6c8516d1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"fa96fdb58cefcada21fc51faf37114033f044f3f":["fc512c052d4f0e04ae655f1070aaa43b45934dde"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"dbf8bf15546966c2999be987d32191fc1ef495ef":["ad94625fb8d088209f46650c8097196fec67f00c"],"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"8b909e7d84d56c113538485360000872547c3cfd":["dbf8bf15546966c2999be987d32191fc1ef495ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fc512c052d4f0e04ae655f1070aaa43b45934dde":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}