{"path":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e6e919043fa85ee891123768dd655a98edbbf63c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}