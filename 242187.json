{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}