{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","sourceNew":"  /**\n   * Returns a sorted array of transitions for each state (and sets state\n   * numbers).\n   */\n  public Transition[][] getSortedTransitions() {\n    final State[] states = getNumberedStates();\n    Transition[][] transitions = new Transition[states.length][];\n    for (State s : states) {\n      s.sortTransitions(Transition.CompareByMinMaxThenDest);\n      s.trimTransitionsArray();\n      transitions[s.number] = s.transitionsArray;\n      assert s.transitionsArray != null;\n    }\n    return transitions;\n  }\n\n","sourceOld":"  /**\n   * Returns a sorted array of transitions for each state (and sets state\n   * numbers).\n   */\n  public Transition[][] getSortedTransitions() {\n    final State[] states = getNumberedStates();\n    Transition[][] transitions = new Transition[states.length][];\n    for (State s : states) {\n      s.sortTransitions(Transition.CompareByMinMaxThenDest);\n      s.trimTransitionsArray();\n      transitions[s.number] = s.transitionsArray;\n      assert s.transitionsArray != null;\n    }\n    return transitions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a sorted array of transitions for each state (and sets state\n   * numbers).\n   */\n  public Transition[][] getSortedTransitions() {\n    final State[] states = getNumberedStates();\n    Transition[][] transitions = new Transition[states.length][];\n    for (State s : states) {\n      s.sortTransitions(Transition.CompareByMinMaxThenDest);\n      s.trimTransitionsArray();\n      transitions[s.number] = s.transitionsArray;\n      assert s.transitionsArray != null;\n    }\n    return transitions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#getSortedTransitions().mjava","sourceNew":"  /** Sugar, but object-heavy; it's better to iterate instead. */\n  public Transition[][] getSortedTransitions() {\n    int numStates = getNumStates();\n    Transition[][] transitions = new Transition[numStates][];\n    for(int s=0;s<numStates;s++) {\n      int numTransitions = getNumTransitions(s);\n      transitions[s] = new Transition[numTransitions];\n      for(int t=0;t<numTransitions;t++) {\n        Transition transition = new Transition();\n        getTransition(s, t, transition);\n        transitions[s][t] = transition;\n      }\n    }\n\n    return transitions;\n  }\n\n","sourceOld":"  /** Sugar, but object-heavy; it's better to iterate instead. */\n  public Transition[][] getSortedTransitions() {\n    int numStates = getNumStates();\n    Transition[][] transitions = new Transition[numStates][];\n    for(int s=0;s<numStates;s++) {\n      int numTransitions = getNumTransitions(s);\n      transitions[s] = new Transition[numTransitions];\n      for(int t=0;t<numTransitions;t++) {\n        Transition transition = new Transition();\n        getTransition(s, t, transition);\n        transitions[s][t] = transition;\n      }\n    }\n\n    return transitions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","sourceNew":"  /** Sugar to get all transitions for all states.  This is\n   *  object-heavy; it's better to iterate state by state instead. */\n  public Transition[][] getSortedTransitions() {\n    int numStates = getNumStates();\n    Transition[][] transitions = new Transition[numStates][];\n    for(int s=0;s<numStates;s++) {\n      int numTransitions = getNumTransitions(s);\n      transitions[s] = new Transition[numTransitions];\n      for(int t=0;t<numTransitions;t++) {\n        Transition transition = new Transition();\n        getTransition(s, t, transition);\n        transitions[s][t] = transition;\n      }\n    }\n\n    return transitions;\n  }\n\n","sourceOld":"  /** Sugar, but object-heavy; it's better to iterate instead. */\n  public Transition[][] getSortedTransitions() {\n    int numStates = getNumStates();\n    Transition[][] transitions = new Transition[numStates][];\n    for(int s=0;s<numStates;s++) {\n      int numTransitions = getNumTransitions(s);\n      transitions[s] = new Transition[numTransitions];\n      for(int t=0;t<numTransitions;t++) {\n        Transition transition = new Transition();\n        getTransition(s, t, transition);\n        transitions[s][t] = transition;\n      }\n    }\n\n    return transitions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getSortedTransitions().mjava","sourceNew":"  /** Sugar to get all transitions for all states.  This is\n   *  object-heavy; it's better to iterate state by state instead. */\n  public Transition[][] getSortedTransitions() {\n    int numStates = getNumStates();\n    Transition[][] transitions = new Transition[numStates][];\n    for(int s=0;s<numStates;s++) {\n      int numTransitions = getNumTransitions(s);\n      transitions[s] = new Transition[numTransitions];\n      for(int t=0;t<numTransitions;t++) {\n        Transition transition = new Transition();\n        getTransition(s, t, transition);\n        transitions[s][t] = transition;\n      }\n    }\n\n    return transitions;\n  }\n\n","sourceOld":"  /**\n   * Returns a sorted array of transitions for each state (and sets state\n   * numbers).\n   */\n  public Transition[][] getSortedTransitions() {\n    final State[] states = getNumberedStates();\n    Transition[][] transitions = new Transition[states.length][];\n    for (State s : states) {\n      s.sortTransitions(Transition.CompareByMinMaxThenDest);\n      s.trimTransitionsArray();\n      transitions[s.number] = s.transitionsArray;\n      assert s.transitionsArray != null;\n    }\n    return transitions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}