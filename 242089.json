{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequestForAllShards(ResponseBuilder).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequestForAllShards(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private ShardRequest[] createRequestForAllShards(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(\"group.distibuted.second\",\"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n         String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(\"group.topgroups.\" + entry.getKey(), groupValue);\n      }\n    }\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["27270b721a573cf4b774ce70b062078ef490388e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27270b721a573cf4b774ce70b062078ef490388e","date":1329092012,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequestForAllShards(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequestForAllShards(ResponseBuilder).mjava","sourceNew":"  private ShardRequest[] createRequestForAllShards(ResponseBuilder rb) {\n    return createRequest(rb, ShardRequest.ALL_SHARDS);\n  }\n\n","sourceOld":"  private ShardRequest[] createRequestForAllShards(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(\"group.distibuted.second\",\"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n         String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(\"group.topgroups.\" + entry.getKey(), groupValue);\n      }\n    }\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27270b721a573cf4b774ce70b062078ef490388e":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27270b721a573cf4b774ce70b062078ef490388e"]},"commit2Childs":{"27270b721a573cf4b774ce70b062078ef490388e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["27270b721a573cf4b774ce70b062078ef490388e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}