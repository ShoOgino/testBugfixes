{"path":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"28b61f1c9cf357a13efbb645d116d056feb80cf6","date":1428863054,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    // TODO: we are wasteful and createWeight twice in this case... use VirtualMethod?\n    // we need to not wrap if the query is e.g. a Payload one that overrides this (it should really be final)\n    SpanWeight weight = in.createWeight(searcher, needsScores);\n    if (weight.getClass() == SpanWeight.class) {\n      return super.createWeight(searcher, needsScores);\n    } else {\n      return weight;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    // TODO: we are wasteful and createWeight twice in this case... use VirtualMethod?\n    // we need to not wrap if the query is e.g. a Payload one that overrides this (it should really be final)\n    SpanWeight weight = in.createWeight(searcher, needsScores);\n    if (weight.getClass() == SpanWeight.class) {\n      return super.createWeight(searcher, needsScores);\n    } else {\n      return weight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery#createWeight(IndexSearcher,boolean,SpanCollectorFactory).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    SpanWeight weight = in.createWeight(searcher, needsScores);\n    return new AssertingSpanWeight(searcher, weight);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, SpanCollectorFactory factory) throws IOException {\n    SpanWeight weight = in.createWeight(searcher, needsScores, factory);\n    return new AssertingSpanWeight(searcher, weight);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    SpanWeight weight = in.createWeight(searcher, needsScores, boost);\n    return new AssertingSpanWeight(searcher, weight);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    SpanWeight weight = in.createWeight(searcher, needsScores);\n    return new AssertingSpanWeight(searcher, weight);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    SpanWeight weight = in.createWeight(searcher, needsScores);\n    return new AssertingSpanWeight(searcher, weight);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["29aea3139c4326c0501d75d51059855463220279"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["29aea3139c4326c0501d75d51059855463220279","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["29aea3139c4326c0501d75d51059855463220279"],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}