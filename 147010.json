{"path":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    DirectoryIndexReader r1 = (DirectoryIndexReader) writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    DirectoryIndexReader iwr1 = (DirectoryIndexReader) writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    DirectoryIndexReader r2 = (DirectoryIndexReader) writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    DirectoryIndexReader r1 = (DirectoryIndexReader) writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    DirectoryIndexReader iwr1 = (DirectoryIndexReader) writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    DirectoryIndexReader r2 = (DirectoryIndexReader) writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}