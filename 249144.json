{"path":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","commits":[{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a description of this field's similarity, if any */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    String className = getClass().getName();\n    if (className.startsWith(\"org.apache.solr.schema.IndexSchema$\")) {\n      // If this class is just a no-params wrapper around a similarity class, use the similarity class\n      className = getSimilarity().getClass().getName();\n    } else {\n      // Only normalize factory names\n      className = normalizeSPIname(className);\n    }\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n    props.add(CLASS_NAME, normalizeSPIname(className));\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        props.add(key, params.get(key));\n      }\n    }\n    return props;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c24717152dabd46d0983ccaab3b4a8a86cb9b30e","date":1364341877,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","sourceNew":"  /** Returns a serializable description of this similarity(factory) */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    String className = getClass().getName();\n    if (className.startsWith(\"org.apache.solr.schema.IndexSchema$\")) {\n      // If this class is just a no-params wrapper around a similarity class, use the similarity class\n      className = getSimilarity().getClass().getName();\n    } else {\n      // Only normalize factory names\n      className = normalizeName(className);\n    }\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n    props.add(CLASS_NAME, className);\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        props.add(key, params.get(key));\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  /** Returns a description of this field's similarity, if any */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    String className = getClass().getName();\n    if (className.startsWith(\"org.apache.solr.schema.IndexSchema$\")) {\n      // If this class is just a no-params wrapper around a similarity class, use the similarity class\n      className = getSimilarity().getClass().getName();\n    } else {\n      // Only normalize factory names\n      className = normalizeSPIname(className);\n    }\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n    props.add(CLASS_NAME, normalizeSPIname(className));\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        props.add(key, params.get(key));\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ece367783f1064f12ed72eabac9cc1afeb402b3c","date":1364362226,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","sourceNew":"  /** Returns a serializable description of this similarity(factory) */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    String className = getClass().getName();\n    if (className.startsWith(\"org.apache.solr.schema.IndexSchema$\")) {\n      // If this class is just a no-params wrapper around a similarity class, use the similarity class\n      className = getSimilarity().getClass().getName();\n    } else {\n      // Only shorten factory names\n      if (className.startsWith(SOLR_SIMILARITIES_PACKAGE + \".\")) {\n        className = className.replace(SOLR_SIMILARITIES_PACKAGE, \"solr\");\n      }\n    }\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n    props.add(CLASS_NAME, className);\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        props.add(key, params.get(key));\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  /** Returns a serializable description of this similarity(factory) */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    String className = getClass().getName();\n    if (className.startsWith(\"org.apache.solr.schema.IndexSchema$\")) {\n      // If this class is just a no-params wrapper around a similarity class, use the similarity class\n      className = getSimilarity().getClass().getName();\n    } else {\n      // Only normalize factory names\n      className = normalizeName(className);\n    }\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n    props.add(CLASS_NAME, className);\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        props.add(key, params.get(key));\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b4b4d68085809ae840a099e4620e5a128509279","date":1365633379,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","sourceNew":"  /** Returns a serializable description of this similarity(factory) */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n    props.add(CLASS_NAME, getClassArg());\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        if ( ! CLASS_NAME.equals(key)) {\n          props.add(key, params.get(key));\n        }\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  /** Returns a serializable description of this similarity(factory) */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    String className = getClass().getName();\n    if (className.startsWith(\"org.apache.solr.schema.IndexSchema$\")) {\n      // If this class is just a no-params wrapper around a similarity class, use the similarity class\n      className = getSimilarity().getClass().getName();\n    } else {\n      // Only shorten factory names\n      if (className.startsWith(SOLR_SIMILARITIES_PACKAGE + \".\")) {\n        className = className.replace(SOLR_SIMILARITIES_PACKAGE, \"solr\");\n      }\n    }\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n    props.add(CLASS_NAME, className);\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        props.add(key, params.get(key));\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimilarityFactory#getNamedPropertyValues().mjava","sourceNew":"  /** Returns a serializable description of this similarity(factory) */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n    props.add(CLASS_NAME, getClassArg());\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        if ( ! CLASS_NAME.equals(key)) {\n          props.add(key, params.get(key));\n        }\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  /** Returns a serializable description of this similarity(factory) */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n    props.add(CLASS_NAME, getClassArg());\n    if (null != params) {\n      Iterator<String> iter = params.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        if ( ! CLASS_NAME.equals(key)) {\n          props.add(key, params.get(key));\n        }\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9b4b4d68085809ae840a099e4620e5a128509279"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c24717152dabd46d0983ccaab3b4a8a86cb9b30e":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b4b4d68085809ae840a099e4620e5a128509279":["ece367783f1064f12ed72eabac9cc1afeb402b3c"],"ece367783f1064f12ed72eabac9cc1afeb402b3c":["c24717152dabd46d0983ccaab3b4a8a86cb9b30e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["c24717152dabd46d0983ccaab3b4a8a86cb9b30e"],"c24717152dabd46d0983ccaab3b4a8a86cb9b30e":["ece367783f1064f12ed72eabac9cc1afeb402b3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"9b4b4d68085809ae840a099e4620e5a128509279":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ece367783f1064f12ed72eabac9cc1afeb402b3c":["9b4b4d68085809ae840a099e4620e5a128509279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}