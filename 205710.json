{"path":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","commits":[{"id":"d41ab32fc87982eab82a896cee390971b5c08fd2","date":1225735438,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the function variables used by lengthNorm for a specific named field.\n   * \n   * @param field field name\n   * @param min minimum value\n   * @param max maximum value\n   * @param steepness steepness of the curve\n   * @param discountOverlaps if true, <code>numOverlapTokens</code> will be\n   * subtracted from <code>numTokens</code>; if false then\n   * <code>numOverlapTokens</code> will be assumed to be 0 (see\n   * {@link DefaultSimilarity#computeNorm(String, FieldInvertState)} for details).\n   *\n   * @see #lengthNorm\n   */\n  public void setLengthNormFactors(String field, int min, int max,\n                                   float steepness, boolean discountOverlaps) {\n    ln_mins.put(field, new Integer(min));\n    ln_maxs.put(field, new Integer(max));\n    ln_steeps.put(field, new Float(steepness));\n    ln_overlaps.put(field, new Boolean(discountOverlaps));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#setLengthNormFactors(String,int,int,float,boolean).mjava","sourceNew":"  /**\n   * Sets the function variables used by lengthNorm for a specific named field.\n   * \n   * @param field field name\n   * @param min minimum value\n   * @param max maximum value\n   * @param steepness steepness of the curve\n   * @param discountOverlaps if true, <code>numOverlapTokens</code> will be\n   * subtracted from <code>numTokens</code>; if false then\n   * <code>numOverlapTokens</code> will be assumed to be 0 (see\n   * {@link DefaultSimilarity#computeNorm(String, FieldInvertState)} for details).\n   *\n   * @see #lengthNorm\n   */\n  public void setLengthNormFactors(String field, int min, int max,\n                                   float steepness, boolean discountOverlaps) {\n    ln_mins.put(field, new Integer(min));\n    ln_maxs.put(field, new Integer(max));\n    ln_steeps.put(field, new Float(steepness));\n    ln_overlaps.put(field, new Boolean(discountOverlaps));\n  }\n\n","sourceOld":"  /**\n   * Sets the function variables used by lengthNorm for a specific named field.\n   * \n   * @param field field name\n   * @param min minimum value\n   * @param max maximum value\n   * @param steepness steepness of the curve\n   * @param discountOverlaps if true, <code>numOverlapTokens</code> will be\n   * subtracted from <code>numTokens</code>; if false then\n   * <code>numOverlapTokens</code> will be assumed to be 0 (see\n   * {@link DefaultSimilarity#computeNorm(String, FieldInvertState)} for details).\n   *\n   * @see #lengthNorm\n   */\n  public void setLengthNormFactors(String field, int min, int max,\n                                   float steepness, boolean discountOverlaps) {\n    ln_mins.put(field, new Integer(min));\n    ln_maxs.put(field, new Integer(max));\n    ln_steeps.put(field, new Float(steepness));\n    ln_overlaps.put(field, new Boolean(discountOverlaps));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}