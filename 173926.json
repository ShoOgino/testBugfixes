{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","sourceNew":"  private ConnectionCosts() throws IOException {\n    IOException priorE = null;\n    InputStream is = null;\n    short[][] costs = null;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          int raw = in.readVInt();\n          accum += (raw >>> 1) ^ -(raw & 1);\n          a[i] = (short)accum;\n        }\n      }\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, is);\n    }\n    \n    this.costs = costs;\n  }\n\n","sourceOld":"  private ConnectionCosts() throws IOException {\n    IOException priorE = null;\n    InputStream is = null;\n    short[][] costs = null;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          int raw = in.readVInt();\n          accum += (raw >>> 1) ^ -(raw & 1);\n          a[i] = (short)accum;\n        }\n      }\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, is);\n    }\n    \n    this.costs = costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4c9600e627d27133f442e03debf1f765790fe9","date":1397238925,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","sourceNew":"  private ConnectionCosts() throws IOException {\n    IOException priorE = null;\n    InputStream is = null;\n    short[][] costs = null;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          accum += BitUtil.zigZagDecode(in.readVInt());\n          a[i] = (short)accum;\n        }\n      }\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, is);\n    }\n    \n    this.costs = costs;\n  }\n\n","sourceOld":"  private ConnectionCosts() throws IOException {\n    IOException priorE = null;\n    InputStream is = null;\n    short[][] costs = null;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          int raw = in.readVInt();\n          accum += (raw >>> 1) ^ -(raw & 1);\n          a[i] = (short)accum;\n        }\n      }\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, is);\n    }\n    \n    this.costs = costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","sourceNew":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    short[][] costs = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          accum += BitUtil.zigZagDecode(in.readVInt());\n          a[i] = (short)accum;\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    \n    this.costs = costs;\n  }\n\n","sourceOld":"  private ConnectionCosts() throws IOException {\n    IOException priorE = null;\n    InputStream is = null;\n    short[][] costs = null;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          accum += BitUtil.zigZagDecode(in.readVInt());\n          a[i] = (short)accum;\n        }\n      }\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, is);\n    }\n    \n    this.costs = costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493","date":1406810962,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","sourceNew":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    short[][] costs = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          accum += in.readZInt();\n          a[i] = (short)accum;\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    \n    this.costs = costs;\n  }\n\n","sourceOld":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    short[][] costs = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          accum += BitUtil.zigZagDecode(in.readVInt());\n          a[i] = (short)accum;\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    \n    this.costs = costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b14f16b545ec357d824d7dd34040f8b0460284","date":1568213150,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts#ConnectionCosts().mjava","sourceNew":"  private ConnectionCosts() throws IOException {\n    this(BinaryDictionary.ResourceScheme.CLASSPATH, ConnectionCosts.class.getName());\n  }\n\n","sourceOld":"  private ConnectionCosts() throws IOException {\n    InputStream is = null;\n    short[][] costs = null;\n    boolean success = false;\n    try {\n      is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);\n      is = new BufferedInputStream(is);\n      final DataInput in = new InputStreamDataInput(is);\n      CodecUtil.checkHeader(in, HEADER, VERSION, VERSION);\n      int forwardSize = in.readVInt();\n      int backwardSize = in.readVInt();\n      costs = new short[backwardSize][forwardSize];\n      int accum = 0;\n      for (int j = 0; j < costs.length; j++) {\n        final short[] a = costs[j];\n        for (int i = 0; i < a.length; i++) {\n          accum += in.readZInt();\n          a[i] = (short)accum;\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n    \n    this.costs = costs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0b14f16b545ec357d824d7dd34040f8b0460284":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["7b4c9600e627d27133f442e03debf1f765790fe9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"7b4c9600e627d27133f442e03debf1f765790fe9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7b4c9600e627d27133f442e03debf1f765790fe9"],"c0b14f16b545ec357d824d7dd34040f8b0460284":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7b4c9600e627d27133f442e03debf1f765790fe9":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}