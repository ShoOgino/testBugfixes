{"path":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#loadDocValues(int,Directory,String,Type).mjava","commits":[{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#loadDocValues(int,Directory,String,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#loadDocValues(int,Directory,String,Values).mjava","sourceNew":"  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Type v) throws IOException {\n    switch (v) {\n    case PACKED_INTS:\n      return Ints.getValues(dir, id, false);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + v);\n    }\n  }\n\n","sourceOld":"  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Values v) throws IOException {\n    switch (v) {\n    case PACKED_INTS:\n      return Ints.getValues(dir, id, false);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16dc5aef9648bb8fedce2ef55874f52e62c2766d","date":1293994163,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#loadDocValues(int,Directory,String,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#loadDocValues(int,Directory,String,Type).mjava","sourceNew":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Type type) throws IOException {\n    switch (type) {\n    case PACKED_INTS:\n      return Ints.getValues(dir, id, false);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Type v) throws IOException {\n    switch (v) {\n    case PACKED_INTS:\n      return Ints.getValues(dir, id, false);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#loadDocValues(int,Directory,String,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#loadDocValues(int,Directory,String,Type).mjava","sourceNew":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Type type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Type type) throws IOException {\n    switch (type) {\n    case PACKED_INTS:\n      return Ints.getValues(dir, id, false);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d47326e0c6ce589b6962777df409aad0550940fa","date":1304584540,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#loadDocValues(int,Directory,String,Type).mjava","sourceNew":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Type type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Type type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d47326e0c6ce589b6962777df409aad0550940fa":["85130289d2ed101fcc2d8798511c7c5b020ffab4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["d47326e0c6ce589b6962777df409aad0550940fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d47326e0c6ce589b6962777df409aad0550940fa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d47326e0c6ce589b6962777df409aad0550940fa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}