{"path":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]]).mjava","commits":[{"id":"cdcf766020b9b159d0b3a6ecae90ff1998ded019","date":1286818331,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]]).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\twhile (internalHasNext()) {\n\t\t\trankedPossibilityList.add(internalNext());\n\t\t}\n\t\tCollections.sort(rankedPossibilityList);\n\t\trankedPossibilityIterator = rankedPossibilityList.iterator();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]]).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\twhile (internalHasNext()) {\n\t\t\trankedPossibilityList.add(internalNext());\n\t\t}\n\t\tCollections.sort(rankedPossibilityList);\n\t\trankedPossibilityIterator = rankedPossibilityList.iterator();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","date":1307387688,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]]).mjava","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\twhile (internalHasNext()) {\n\t\t\trankedPossibilityList.add(internalNext());\n\t\t}\n\t\tCollections.sort(rankedPossibilityList);\n\t\trankedPossibilityIterator = rankedPossibilityList.iterator();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]]).mjava","sourceNew":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions, int maximumRequiredSuggestions, int maxEvaluations) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong count = 0;\n\t\tPriorityQueue<RankedSpellPossibility> rankedPossibilities = new PriorityQueue<RankedSpellPossibility>();\t\t\n\t\twhile (count < maxEvaluations && internalHasNext()) {\n\t\t\tRankedSpellPossibility rsp = internalNext();\n\t\t\tcount++;\t\t\t\n\t\t\t\n\t\t\tif(rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.getRank() >= rankedPossibilities.peek().getRank()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trankedPossibilities.offer(rsp);\n\t\t\tif(rankedPossibilities.size() > maximumRequiredSuggestions) {\n\t\t\t\trankedPossibilities.poll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tRankedSpellPossibility[] rpArr = new RankedSpellPossibility[rankedPossibilities.size()];\n\t\tfor(int i=rankedPossibilities.size() - 1  ; i>=0 ; i--) {\n\t\t\trpArr[i] = rankedPossibilities.remove();\n\t\t}\n\t\trankedPossibilityIterator = Arrays.asList(rpArr).iterator();\t\t\n\t}\n\n","sourceOld":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\twhile (internalHasNext()) {\n\t\t\trankedPossibilityList.add(internalNext());\n\t\t}\n\t\tCollections.sort(rankedPossibilityList);\n\t\trankedPossibilityIterator = rankedPossibilityList.iterator();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/spelling/PossibilityIterator#PossibilityIterator(Map[Token,LinkedHashMap[String,Integer]]).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * <p>\n\t * We assume here that the passed-in inner LinkedHashMaps are already sorted\n\t * in order of \"Best Possible Correction\".\n\t * </p>\n\t * \n\t * @param suggestions\n\t */\n\tpublic PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>> suggestions) {\n\t\tfor (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n\t\t\tToken token = entry.getKey();\n\t\t\tList<SpellCheckCorrection> possibleCorrections = new ArrayList<SpellCheckCorrection>();\n\t\t\tfor (Map.Entry<String, Integer> entry1 : entry.getValue().entrySet()) {\n\t\t\t\tSpellCheckCorrection correction = new SpellCheckCorrection();\n\t\t\t\tcorrection.setOriginal(token);\n\t\t\t\tcorrection.setCorrection(entry1.getKey());\n\t\t\t\tcorrection.setNumberOfOccurences(entry1.getValue());\n\t\t\t\tpossibleCorrections.add(correction);\n\t\t\t}\n\t\t\tpossibilityList.add(possibleCorrections);\n\t\t}\n\n\t\tint wrapSize = possibilityList.size();\n\t\tif (wrapSize == 0) {\n\t\t\tdone = true;\n\t\t} else {\n\t\t\tcorrectionIndex = new int[wrapSize];\n\t\t\tfor (int i = 0; i < wrapSize; i++) {\n\t\t\t\tint suggestSize = possibilityList.get(i).size();\n\t\t\t\tif (suggestSize == 0) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcorrectionIndex[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\twhile (internalHasNext()) {\n\t\t\trankedPossibilityList.add(internalNext());\n\t\t}\n\t\tCollections.sort(rankedPossibilityList);\n\t\trankedPossibilityIterator = rankedPossibilityList.iterator();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}