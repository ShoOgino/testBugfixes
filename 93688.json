{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","commits":[{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    commit();\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404b171beda23ddce9e45366a3dbd6444d8d029c","date":1391180301,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    assertU(commit());\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    commit();\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    assertU(commit());\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getSlowAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getSlowAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\", \"stringdv\", \"value1\", \"stringdv\", \"value2\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        dv.setDocument(0);\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1392e0146862d1e9ae2aeedb447da88284e48dbf","date":1498774179,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n\n    final DocValuesType expectedNumericDvType = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP) ?\n      DocValuesType.SORTED_NUMERIC : DocValuesType.SORTED_SET;\n    \n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getSlowAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(expectedNumericDvType, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(expectedNumericDvType, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getSlowAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n\n    final DocValuesType expectedNumericDvType = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP) ?\n      DocValuesType.SORTED_NUMERIC : DocValuesType.SORTED_SET;\n    \n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getSlowAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(expectedNumericDvType, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(expectedNumericDvType, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\", \"floatdv\", \"4.5\", \"intdv\", \"-1\", \"intdv\", \"3\",\n        \"stringdv\", \"value1\", \"stringdv\", \"value2\",\n        \"booldv\", \"false\", \"booldv\", \"true\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getSlowAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"booldv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED_SET, infos.fieldInfo(\"intdv\").getDocValuesType());\n\n        SortedSetDocValues dv = reader.getSortedSetDocValues(\"stringdv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n        dv = reader.getSortedSetDocValues(\"booldv\");\n        assertEquals(0, dv.nextDoc());\n        assertEquals(0, dv.nextOrd());\n        assertEquals(1, dv.nextOrd());\n        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1392e0146862d1e9ae2aeedb447da88284e48dbf":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"30c8e5574b55d57947e989443dfde611646530ee":["e07c409cff8701e4dc3d45934b021a949a5a8822","1392e0146862d1e9ae2aeedb447da88284e48dbf"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","e07c409cff8701e4dc3d45934b021a949a5a8822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["404b171beda23ddce9e45366a3dbd6444d8d029c"],"404b171beda23ddce9e45366a3dbd6444d8d029c":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1392e0146862d1e9ae2aeedb447da88284e48dbf"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["404b171beda23ddce9e45366a3dbd6444d8d029c"],"1392e0146862d1e9ae2aeedb447da88284e48dbf":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"30c8e5574b55d57947e989443dfde611646530ee":[],"e07c409cff8701e4dc3d45934b021a949a5a8822":["1392e0146862d1e9ae2aeedb447da88284e48dbf","30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"404b171beda23ddce9e45366a3dbd6444d8d029c":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}