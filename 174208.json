{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SchedulerStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"8815a2fe9bb8a141732b2059eb62f4ac94ed826e","date":1483126456,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SchedulerStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // stream\n    if(includeStreams) {\n      if (highPriorityTasks instanceof Expressible) {\n        expression.addParameter(((Expressible) highPriorityTasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n\n      if (tasks instanceof Expressible) {\n        expression.addParameter(((Expressible) tasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21a4bfa236e53d4457f5b62019d7285f42214f13","date":1483373324,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PriorityStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SchedulerStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // stream\n    if(includeStreams) {\n      if (highPriorityTasks instanceof Expressible) {\n        expression.addParameter(((Expressible) highPriorityTasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n\n      if (tasks instanceof Expressible) {\n        expression.addParameter(((Expressible) tasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // stream\n    if(includeStreams) {\n      if (highPriorityTasks instanceof Expressible) {\n        expression.addParameter(((Expressible) highPriorityTasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n\n      if (tasks instanceof Expressible) {\n        expression.addParameter(((Expressible) tasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4062c48c67245d14e4c4d776cb7b290822ddbcb","date":1483428214,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PriorityStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SchedulerStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // stream\n    if(includeStreams) {\n      if (highPriorityTasks instanceof Expressible) {\n        expression.addParameter(((Expressible) highPriorityTasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n\n      if (tasks instanceof Expressible) {\n        expression.addParameter(((Expressible) tasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // stream\n    if(includeStreams) {\n      if (highPriorityTasks instanceof Expressible) {\n        expression.addParameter(((Expressible) highPriorityTasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n\n      if (tasks instanceof Expressible) {\n        expression.addParameter(((Expressible) tasks).toExpression(factory));\n      } else {\n        throw new IOException(\"The SchedulerStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["8815a2fe9bb8a141732b2059eb62f4ac94ed826e","21a4bfa236e53d4457f5b62019d7285f42214f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8815a2fe9bb8a141732b2059eb62f4ac94ed826e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21a4bfa236e53d4457f5b62019d7285f42214f13":["8815a2fe9bb8a141732b2059eb62f4ac94ed826e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"]},"commit2Childs":{"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8815a2fe9bb8a141732b2059eb62f4ac94ed826e"],"8815a2fe9bb8a141732b2059eb62f4ac94ed826e":["b4062c48c67245d14e4c4d776cb7b290822ddbcb","21a4bfa236e53d4457f5b62019d7285f42214f13"],"21a4bfa236e53d4457f5b62019d7285f42214f13":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}