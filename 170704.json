{"path":"src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","commits":[{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.getNextSize(termAtttribute.termLength())];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be9a3c6f54fb2faafce536acb20ed350d1ca0f2c","date":1268618552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAtttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.getNextSize(termAtttribute.termLength())];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAtttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAtttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be9a3c6f54fb2faafce536acb20ed350d1ca0f2c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["be9a3c6f54fb2faafce536acb20ed350d1ca0f2c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be9a3c6f54fb2faafce536acb20ed350d1ca0f2c":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["be9a3c6f54fb2faafce536acb20ed350d1ca0f2c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}