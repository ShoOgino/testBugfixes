{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMonteCarlo().mjava","commits":[{"id":"c1a53d14dc034261ebfe5e5cfdcab02043992802","date":1506216698,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMonteCarlo().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMonteCarlo() throws Exception {\n    String cexpr = \"let(a=constantDistribution(10), b=constantDistribution(20), c=monteCarlo(add(sample(a), sample(b)), 10))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertTrue(out.size()==10);\n    assertEquals(out.get(0).doubleValue(), 30.0, .0);\n    assertEquals(out.get(1).doubleValue(), 30.0, .0);\n    assertEquals(out.get(2).doubleValue(), 30.0, .0);\n    assertEquals(out.get(3).doubleValue(), 30.0, .0);\n    assertEquals(out.get(4).doubleValue(), 30.0, .0);\n    assertEquals(out.get(5).doubleValue(), 30.0, .0);\n    assertEquals(out.get(6).doubleValue(), 30.0, .0);\n    assertEquals(out.get(7).doubleValue(), 30.0, .0);\n    assertEquals(out.get(8).doubleValue(), 30.0, .0);\n    assertEquals(out.get(9).doubleValue(), 30.0, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8557552f7ab8e381c4d1a941a269e14f11e779d","date":1506320429,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMonteCarlo().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMonteCarlo() throws Exception {\n    String cexpr = \"let(a=constantDistribution(10), b=constantDistribution(20), c=monteCarlo(add(sample(a), sample(b)), 10))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertTrue(out.size()==10);\n    assertEquals(out.get(0).doubleValue(), 30.0, .0);\n    assertEquals(out.get(1).doubleValue(), 30.0, .0);\n    assertEquals(out.get(2).doubleValue(), 30.0, .0);\n    assertEquals(out.get(3).doubleValue(), 30.0, .0);\n    assertEquals(out.get(4).doubleValue(), 30.0, .0);\n    assertEquals(out.get(5).doubleValue(), 30.0, .0);\n    assertEquals(out.get(6).doubleValue(), 30.0, .0);\n    assertEquals(out.get(7).doubleValue(), 30.0, .0);\n    assertEquals(out.get(8).doubleValue(), 30.0, .0);\n    assertEquals(out.get(9).doubleValue(), 30.0, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMonteCarlo().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMonteCarlo() throws Exception {\n    String cexpr = \"let(a=constantDistribution(10), b=constantDistribution(20), c=monteCarlo(add(sample(a), sample(b)), 10))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertTrue(out.size()==10);\n    assertEquals(out.get(0).doubleValue(), 30.0, .0);\n    assertEquals(out.get(1).doubleValue(), 30.0, .0);\n    assertEquals(out.get(2).doubleValue(), 30.0, .0);\n    assertEquals(out.get(3).doubleValue(), 30.0, .0);\n    assertEquals(out.get(4).doubleValue(), 30.0, .0);\n    assertEquals(out.get(5).doubleValue(), 30.0, .0);\n    assertEquals(out.get(6).doubleValue(), 30.0, .0);\n    assertEquals(out.get(7).doubleValue(), 30.0, .0);\n    assertEquals(out.get(8).doubleValue(), 30.0, .0);\n    assertEquals(out.get(9).doubleValue(), 30.0, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMonteCarlo().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMonteCarlo().mjava","sourceNew":"  @Test\n  public void testMonteCarlo() throws Exception {\n    String cexpr = \"let(a=constantDistribution(10), b=constantDistribution(20), c=monteCarlo(add(sample(a), sample(b)), 10))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertTrue(out.size()==10);\n    assertEquals(out.get(0).doubleValue(), 30.0, .0);\n    assertEquals(out.get(1).doubleValue(), 30.0, .0);\n    assertEquals(out.get(2).doubleValue(), 30.0, .0);\n    assertEquals(out.get(3).doubleValue(), 30.0, .0);\n    assertEquals(out.get(4).doubleValue(), 30.0, .0);\n    assertEquals(out.get(5).doubleValue(), 30.0, .0);\n    assertEquals(out.get(6).doubleValue(), 30.0, .0);\n    assertEquals(out.get(7).doubleValue(), 30.0, .0);\n    assertEquals(out.get(8).doubleValue(), 30.0, .0);\n    assertEquals(out.get(9).doubleValue(), 30.0, .0);\n  }\n\n","sourceOld":"  @Test\n  public void testMonteCarlo() throws Exception {\n    String cexpr = \"let(a=constantDistribution(10), b=constantDistribution(20), c=monteCarlo(add(sample(a), sample(b)), 10))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertTrue(out.size()==10);\n    assertEquals(out.get(0).doubleValue(), 30.0, .0);\n    assertEquals(out.get(1).doubleValue(), 30.0, .0);\n    assertEquals(out.get(2).doubleValue(), 30.0, .0);\n    assertEquals(out.get(3).doubleValue(), 30.0, .0);\n    assertEquals(out.get(4).doubleValue(), 30.0, .0);\n    assertEquals(out.get(5).doubleValue(), 30.0, .0);\n    assertEquals(out.get(6).doubleValue(), 30.0, .0);\n    assertEquals(out.get(7).doubleValue(), 30.0, .0);\n    assertEquals(out.get(8).doubleValue(), 30.0, .0);\n    assertEquals(out.get(9).doubleValue(), 30.0, .0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8557552f7ab8e381c4d1a941a269e14f11e779d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1a53d14dc034261ebfe5e5cfdcab02043992802"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8557552f7ab8e381c4d1a941a269e14f11e779d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"c1a53d14dc034261ebfe5e5cfdcab02043992802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8557552f7ab8e381c4d1a941a269e14f11e779d":["6240b74b884c5587f2a4062dd27d6c32bf228889","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8557552f7ab8e381c4d1a941a269e14f11e779d","6240b74b884c5587f2a4062dd27d6c32bf228889","c1a53d14dc034261ebfe5e5cfdcab02043992802"],"c1a53d14dc034261ebfe5e5cfdcab02043992802":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}