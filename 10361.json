{"path":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","commits":[{"id":"4801fd4ad4830fcde9b6ed9024c04839ade25e42","date":1441807244,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","pathOld":"/dev/null","sourceNew":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    NamedList nl = queryCacheStats.getStatistics();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getStatistics();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(\"partialResults\")));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    NamedList nl2 = queryCacheStats.getStatistics();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(\"partialResults\"));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b038ad0480d5e81e058bf9fafb2dd85399985d","date":1450812495,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","sourceNew":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    NamedList nl = queryCacheStats.getStatistics();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getStatistics();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    NamedList nl2 = queryCacheStats.getStatistics();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","sourceOld":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    NamedList nl = queryCacheStats.getStatistics();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getStatistics();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(\"partialResults\")));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    NamedList nl2 = queryCacheStats.getStatistics();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(\"partialResults\"));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","sourceNew":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","sourceOld":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    NamedList nl = queryCacheStats.getStatistics();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getStatistics();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    NamedList nl2 = queryCacheStats.getStatistics();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","sourceNew":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","sourceOld":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    NamedList nl = queryCacheStats.getStatistics();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getStatistics();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    NamedList nl2 = queryCacheStats.getStatistics();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","sourceNew":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","sourceOld":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","sourceNew":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","sourceOld":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","sourceNew":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) fromJSONString(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) fromJSONString(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","sourceOld":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testQueryResults().mjava","sourceNew":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map res = (Map) fromJSONString(response);\n    @SuppressWarnings({\"rawtypes\"})\n    Map body = (Map) (res.get(\"response\"));\n    @SuppressWarnings({\"rawtypes\"})\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) fromJSONString(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","sourceOld":"  // When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed\n  // This tests for the second query NOT returning partial results, along with some other\n  @Test\n  public void testQueryResults() throws Exception {\n    String q = \"name:e*\";\n    SolrCore core = h.getCore();\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    Map<String,Object> nl = queryCacheStats.getValue();\n    long inserts = (long) nl.get(\"inserts\");\n\n    String response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    // The queryResultCache should NOT get an entry here.\n    nl = queryCacheStats.getValue();\n    assertEquals(\"Should NOT have inserted partial results!\", inserts, (long) nl.get(\"inserts\"));\n\n    Map res = (Map) fromJSONString(response);\n    Map body = (Map) (res.get(\"response\"));\n    Map header = (Map) (res.get(\"responseHeader\"));\n\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    response = JQ(req(\"q\", q, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    Map<String,Object> nl2 = queryCacheStats.getValue();\n    assertEquals(\"Hits should still be 0\", (long) nl.get(\"hits\"), (long) nl2.get(\"hits\"));\n    assertTrue(\"Inserts should be bumped\", inserts < (long) nl2.get(\"inserts\"));\n\n    res = (Map) fromJSONString(response);\n    body = (Map) (res.get(\"response\"));\n    header = (Map) (res.get(\"responseHeader\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, NUM_DOCS, (long) (body.get(\"numFound\")));\n    Boolean test = (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    if (test != null) {\n      assertFalse(\"Should NOT have partial results\", test);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["43564cbb30b064675027cfb569564e8531096e97"],"816521ebaad5add9cb96bb88c577394e2938c40b":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}