{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","commits":[{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(FacetSearchParams,IndexReader).mjava","sourceNew":"  public RangeAccumulator(List<FacetRequest> facetRequests) {\n    super(new FacetSearchParams(facetRequests));\n    for (FacetRequest fr : facetRequests) {\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"this accumulator only supports RangeFacetRequest; got \" + fr);\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n      \n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n      requests.add(new RangeSet(rfr.ranges, fr.categoryPath.components[0]));\n    }\n  }\n\n","sourceOld":"  public RangeAccumulator(FacetSearchParams fsp, IndexReader reader) {\n    super(fsp, reader, null, null);\n\n    for(FacetRequest fr : fsp.facetRequests) {\n\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"only RangeFacetRequest is supported; got \" + fsp.facetRequests.get(0).getClass());\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n\n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n\n      requests.add(new RangeSet(rfr.ranges, rfr.categoryPath.components[0]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(FacetSearchParams,IndexReader).mjava","sourceNew":"  public RangeAccumulator(List<FacetRequest> facetRequests) {\n    super(new FacetSearchParams(facetRequests));\n    for (FacetRequest fr : facetRequests) {\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"this accumulator only supports RangeFacetRequest; got \" + fr);\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n      \n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n      requests.add(new RangeSet(rfr.ranges, fr.categoryPath.components[0]));\n    }\n  }\n\n","sourceOld":"  public RangeAccumulator(FacetSearchParams fsp, IndexReader reader) {\n    super(fsp, reader, null, null);\n\n    for(FacetRequest fr : fsp.facetRequests) {\n\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"only RangeFacetRequest is supported; got \" + fsp.facetRequests.get(0).getClass());\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n\n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n\n      requests.add(new RangeSet(rfr.ranges, rfr.categoryPath.components[0]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aa0430e2aac625e9331378ddcde1dabbd8d3577","date":1383625721,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","sourceNew":"  public RangeAccumulator(List<FacetRequest> facetRequests) {\n    super(new FacetSearchParams(facetRequests));\n    for (FacetRequest fr : facetRequests) {\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"this accumulator only supports RangeFacetRequest; got \" + fr);\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n    }\n  }\n\n","sourceOld":"  public RangeAccumulator(List<FacetRequest> facetRequests) {\n    super(new FacetSearchParams(facetRequests));\n    for (FacetRequest fr : facetRequests) {\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"this accumulator only supports RangeFacetRequest; got \" + fr);\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n      \n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n      requests.add(new RangeSet(rfr.ranges, fr.categoryPath.components[0]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990","date":1385332359,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","sourceNew":null,"sourceOld":"  public RangeAccumulator(List<FacetRequest> facetRequests) {\n    super(new FacetSearchParams(facetRequests));\n    for (FacetRequest fr : facetRequests) {\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"this accumulator only supports RangeFacetRequest; got \" + fr);\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","sourceNew":null,"sourceOld":"  public RangeAccumulator(List<FacetRequest> facetRequests) {\n    super(new FacetSearchParams(facetRequests));\n    for (FacetRequest fr : facetRequests) {\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"this accumulator only supports RangeFacetRequest; got \" + fr);\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990":["6aa0430e2aac625e9331378ddcde1dabbd8d3577"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6aa0430e2aac625e9331378ddcde1dabbd8d3577","5ec3bb9046a73ab9aea7b2a07d53ca9b71904990"],"6aa0430e2aac625e9331378ddcde1dabbd8d3577":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6aa0430e2aac625e9331378ddcde1dabbd8d3577":["5ec3bb9046a73ab9aea7b2a07d53ca9b71904990","3cc728b07df73b197e6d940d27f9b08b63918f13"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["6aa0430e2aac625e9331378ddcde1dabbd8d3577"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}