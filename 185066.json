{"path":"backwards/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"/dev/null","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {                         // update fieldToReader map\n      if (fieldToReader.get(field) == null)\n        fieldToReader.put(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {                         // update fieldToReader map\n      if (fieldToReader.get(field) == null)\n        fieldToReader.put(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {                         // update fieldToReader map\n      if (fieldToReader.get(field) == null)\n        fieldToReader.put(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}