{"path":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testVisitor().mjava","commits":[{"id":"fe1bc3639daa2b0731b0eac4b50e518f492d3a23","date":1588151945,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testVisitor().mjava","pathOld":"/dev/null","sourceNew":"  public void testVisitor() {\n    // singleton reports back to consumeTerms()\n    TermInSetQuery singleton = new TermInSetQuery(\"field\", new BytesRef(\"term1\"));\n    singleton.visit(new QueryVisitor() {\n      @Override\n      public void consumeTerms(Query query, Term... terms) {\n        assertEquals(1, terms.length);\n        assertEquals(new Term(\"field\", new BytesRef(\"term1\")), terms[0]);\n      }\n\n      @Override\n      public void consumeTermsMatching(Query query, String field, Supplier<ByteRunAutomaton> automaton) {\n        fail(\"Singleton TermInSetQuery should not try to build ByteRunAutomaton\");\n      }\n    });\n\n    // multiple values built into automaton\n    List<BytesRef> terms = new ArrayList<>();\n    for (int i = 0; i < 100; i++) {\n      terms.add(new BytesRef(\"term\" + i));\n    }\n    TermInSetQuery t = new TermInSetQuery(\"field\", terms);\n    t.visit(new QueryVisitor() {\n      @Override\n      public void consumeTerms(Query query, Term... terms) {\n        fail(\"TermInSetQuery with multiple terms should build automaton\");\n      }\n\n      @Override\n      public void consumeTermsMatching(Query query, String field, Supplier<ByteRunAutomaton> automaton) {\n        ByteRunAutomaton a = automaton.get();\n        BytesRef test = new BytesRef(\"nonmatching\");\n        assertFalse(a.run(test.bytes, test.offset, test.length));\n        for (BytesRef term : terms) {\n          assertTrue(a.run(term.bytes, term.offset, term.length));\n        }\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe1bc3639daa2b0731b0eac4b50e518f492d3a23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe1bc3639daa2b0731b0eac4b50e518f492d3a23"]},"commit2Childs":{"fe1bc3639daa2b0731b0eac4b50e518f492d3a23":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe1bc3639daa2b0731b0eac4b50e518f492d3a23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}