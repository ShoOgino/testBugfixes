{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    zkController.publishAsRecoveryFailed(baseUrl, cd,\n        shardZkNodeName, core.getName());\n    close = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    zkController.publishAsRecoveryFailed(baseUrl, cd,\n        shardZkNodeName, core.getName());\n    close = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    zkController.publishAsRecoveryFailed(baseUrl, cd,\n        shardZkNodeName, core.getName());\n    close = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2","date":1337787106,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publishAsRecoveryFailed(baseUrl, cd,\n          shardZkNodeName, core.getName());\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    zkController.publishAsRecoveryFailed(baseUrl, cd,\n        shardZkNodeName, core.getName());\n    close = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publishAsRecoveryFailed(baseUrl, cd,\n          shardZkNodeName, core.getName());\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    zkController.publishAsRecoveryFailed(baseUrl, cd,\n        shardZkNodeName, core.getName());\n    close = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publishAsRecoveryFailed(baseUrl, cd,\n          shardZkNodeName, core.getName());\n    } finally {\n      close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9583322dbc8650e3cd32d936c0b3e31eefadba","date":1344482424,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. Core:\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. Core:\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40c478fcb4e093ac431407a8db2896ac9c867f33","date":1344540116,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. core=\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. Core:\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. core=\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. core=\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. Core:\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. core=\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. core=\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. core=\" + coreName);\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. core=\" + coreName);\n    try {\n      zkController.publish(cd, ZkStateReader.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up. core=\" + coreName);\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"610f5499a87a7113d53e5b621b616890f002e9f1","date":1450873010,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7392b75d2c2f2aecf31188732a0764fe0dc74ade","date":1489420141,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws Exception {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws Exception {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws Exception {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws KeeperException, InterruptedException {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#recoveryFailed(SolrCore,ZkController,String,String,CoreDescriptor).mjava","sourceNew":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws Exception {\n    SolrException.log(log, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","sourceOld":"  final private void recoveryFailed(final SolrCore core,\n      final ZkController zkController, final String baseUrl,\n      final String shardZkNodeName, final CoreDescriptor cd) throws Exception {\n    SolrException.log(LOG, \"Recovery failed - I give up.\");\n    try {\n      zkController.publish(cd, Replica.State.RECOVERY_FAILED);\n    } finally {\n      close();\n      recoveryListener.failed();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"610f5499a87a7113d53e5b621b616890f002e9f1":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["40c478fcb4e093ac431407a8db2896ac9c867f33"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"ef9583322dbc8650e3cd32d936c0b3e31eefadba":["a5093a9e893633cc091cf2f729d7863671c2b715"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"40c478fcb4e093ac431407a8db2896ac9c867f33":["ef9583322dbc8650e3cd32d936c0b3e31eefadba"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a5093a9e893633cc091cf2f729d7863671c2b715","40c478fcb4e093ac431407a8db2896ac9c867f33"],"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","5c76806dcdb4841b4f71ecfe9e9e95147f7201f2"],"a5093a9e893633cc091cf2f729d7863671c2b715":["5c76806dcdb4841b4f71ecfe9e9e95147f7201f2"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","ef9583322dbc8650e3cd32d936c0b3e31eefadba"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7392b75d2c2f2aecf31188732a0764fe0dc74ade":["610f5499a87a7113d53e5b621b616890f002e9f1"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","40c478fcb4e093ac431407a8db2896ac9c867f33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"610f5499a87a7113d53e5b621b616890f002e9f1":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"ef9583322dbc8650e3cd32d936c0b3e31eefadba":["40c478fcb4e093ac431407a8db2896ac9c867f33","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["610f5499a87a7113d53e5b621b616890f002e9f1"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"40c478fcb4e093ac431407a8db2896ac9c867f33":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2":["3599646b4d4c346cf74d334813488b8b337b5bf5","a5093a9e893633cc091cf2f729d7863671c2b715"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["ef9583322dbc8650e3cd32d936c0b3e31eefadba","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","5c76806dcdb4841b4f71ecfe9e9e95147f7201f2","3599646b4d4c346cf74d334813488b8b337b5bf5"],"7392b75d2c2f2aecf31188732a0764fe0dc74ade":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","b869898f50ca80263bac2e3ae0949f7700e5c977","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","3599646b4d4c346cf74d334813488b8b337b5bf5","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}