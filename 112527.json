{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034b8e37ade96af2cef0172233d24b652b432f99","date":1337636665,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      // nocommit nuke this filtering\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3c0b74d0a1220dbfbdb366a60df468dbb2c285f","date":1337803847,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      // nocommit nuke this filtering\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || (segmentName == null && fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950882a2bd2a5f9dc16a154871584eaa643d882a","date":1436366563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || (segmentName == null && fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || (segmentName == null && fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac05884852c2a15a6aa9153063de70dea4fbcae","date":1441829939,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      m.reset(fileName);\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !fileName.endsWith(\"write.lock\") &&\n          !refCounts.containsKey(fileName) &&\n          (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) \n              // we only try to clear out pending_segments_N during rollback(), because we don't ref-count it\n              // TODO: this is sneaky, should we do this, or change TestIWExceptions? rollback closes anyway, and \n              // any leftover file will be deleted/retried on next IW bootup anyway...\n              || (segmentName == null && fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)))) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["9eae2a56dc810a17cf807d831f720dec931a03de"],"aac05884852c2a15a6aa9153063de70dea4fbcae":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"b3c0b74d0a1220dbfbdb366a60df468dbb2c285f":["034b8e37ade96af2cef0172233d24b652b432f99"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b3c0b74d0a1220dbfbdb366a60df468dbb2c285f"],"9eae2a56dc810a17cf807d831f720dec931a03de":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"950882a2bd2a5f9dc16a154871584eaa643d882a":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"034b8e37ade96af2cef0172233d24b652b432f99":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aac05884852c2a15a6aa9153063de70dea4fbcae"]},"commit2Childs":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"aac05884852c2a15a6aa9153063de70dea4fbcae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3c0b74d0a1220dbfbdb366a60df468dbb2c285f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["9eae2a56dc810a17cf807d831f720dec931a03de"],"9eae2a56dc810a17cf807d831f720dec931a03de":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","034b8e37ade96af2cef0172233d24b652b432f99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["aac05884852c2a15a6aa9153063de70dea4fbcae"],"034b8e37ade96af2cef0172233d24b652b432f99":["b3c0b74d0a1220dbfbdb366a60df468dbb2c285f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}