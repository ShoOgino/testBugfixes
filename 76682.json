{"path":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"671279fa1676e7f2755c2745a25abd77a169f992","date":1312053489,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.solrDoc = new SolrInputDocument();\n      cmd.solrDoc.addField(\"id\", \"id_\" + i);\n      cmd.solrDoc.addField(\"subject\", \"subject_\" + i);\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","date":1529965060,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":null,"sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.solrDoc = new SolrInputDocument();\n      cmd.solrDoc.addField(\"id\", \"id_\" + i);\n      cmd.solrDoc.addField(\"subject\", \"subject_\" + i);\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":null,"sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.solrDoc = new SolrInputDocument();\n      cmd.solrDoc.addField(\"id\", \"id_\" + i);\n      cmd.solrDoc.addField(\"subject\", \"subject_\" + i);\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":null,"sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    SolrQueryRequest req = req();\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.solrDoc = new SolrInputDocument();\n      cmd.solrDoc.addField(\"id\", \"id_\" + i);\n      cmd.solrDoc.addField(\"subject\", \"subject_\" + i);\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(req, true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"671279fa1676e7f2755c2745a25abd77a169f992":["c26f00b574427b55127e869b935845554afde1fa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["671279fa1676e7f2755c2745a25abd77a169f992","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["671279fa1676e7f2755c2745a25abd77a169f992"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["671279fa1676e7f2755c2745a25abd77a169f992","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"]},"commit2Childs":{"671279fa1676e7f2755c2745a25abd77a169f992":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["671279fa1676e7f2755c2745a25abd77a169f992"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}