{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","commits":[{"id":"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f","date":1215042831,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads one column from the token stream.\n   *\n   * When the last token is read from the token stream it will column.setLast(true);\n   *\n   * @return true if it manage to read one more column from the input token stream\n   * @throws IOException if the matrix source input stream throws an exception\n   */\n  private boolean readColumn() throws IOException {\n\n    Token token;\n    if (readColumnBuf != null) {\n      token = readColumnBuf;\n      readColumnBuf = null;\n    } else {\n      token = input.next(new Token());\n    }\n\n    if (token == null) {\n      return false;\n    }\n\n    Matrix.Column currentReaderColumn = matrix.new Column();\n    Matrix.Column.Row currentReaderRow = currentReaderColumn.new Row();\n\n    currentReaderRow.getTokens().add(token);\n    TokenPositioner tokenPositioner;\n    while ((readColumnBuf = input.next(new Token())) != null\n        && (tokenPositioner = settingsCodec.getTokenPositioner(readColumnBuf)) != TokenPositioner.newColumn) {\n\n      if (tokenPositioner == TokenPositioner.sameRow) {\n        currentReaderRow.getTokens().add(readColumnBuf);\n      } else /*if (tokenPositioner == TokenPositioner.newRow)*/ {\n        currentReaderRow = currentReaderColumn.new Row();\n        currentReaderRow.getTokens().add(readColumnBuf);\n      }\n      readColumnBuf = null;\n\n    }\n\n    if (readColumnBuf == null) {\n      readColumnBuf = input.next(new Token());\n      if (readColumnBuf == null) {\n        currentReaderColumn.setLast(true);\n      }\n    }\n\n\n    return true;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","sourceNew":"  /**\n   * Loads one column from the token stream.\n   *\n   * When the last token is read from the token stream it will column.setLast(true);\n   *\n   * @return true if it manage to read one more column from the input token stream\n   * @throws IOException if the matrix source input stream throws an exception\n   */\n  private boolean readColumn() throws IOException {\n\n    Token token;\n    if (readColumnBuf != null) {\n      token = readColumnBuf;\n      readColumnBuf = null;\n    } else {\n      token = input.next(new Token());\n    }\n\n    if (token == null) {\n      return false;\n    }\n\n    Matrix.Column currentReaderColumn = matrix.new Column();\n    Matrix.Column.Row currentReaderRow = currentReaderColumn.new Row();\n\n    currentReaderRow.getTokens().add(token);\n    TokenPositioner tokenPositioner;\n    while ((readColumnBuf = input.next(new Token())) != null\n        && (tokenPositioner = settingsCodec.getTokenPositioner(readColumnBuf)) != TokenPositioner.newColumn) {\n\n      if (tokenPositioner == TokenPositioner.sameRow) {\n        currentReaderRow.getTokens().add(readColumnBuf);\n      } else /*if (tokenPositioner == TokenPositioner.newRow)*/ {\n        currentReaderRow = currentReaderColumn.new Row();\n        currentReaderRow.getTokens().add(readColumnBuf);\n      }\n      readColumnBuf = null;\n\n    }\n\n    if (readColumnBuf == null) {\n      readColumnBuf = input.next(new Token());\n      if (readColumnBuf == null) {\n        currentReaderColumn.setLast(true);\n      }\n    }\n\n\n    return true;\n\n  }\n\n","sourceOld":"  /**\n   * Loads one column from the token stream.\n   *\n   * When the last token is read from the token stream it will column.setLast(true);\n   *\n   * @return true if it manage to read one more column from the input token stream\n   * @throws IOException if the matrix source input stream throws an exception\n   */\n  private boolean readColumn() throws IOException {\n\n    Token token;\n    if (readColumnBuf != null) {\n      token = readColumnBuf;\n      readColumnBuf = null;\n    } else {\n      token = input.next(new Token());\n    }\n\n    if (token == null) {\n      return false;\n    }\n\n    Matrix.Column currentReaderColumn = matrix.new Column();\n    Matrix.Column.Row currentReaderRow = currentReaderColumn.new Row();\n\n    currentReaderRow.getTokens().add(token);\n    TokenPositioner tokenPositioner;\n    while ((readColumnBuf = input.next(new Token())) != null\n        && (tokenPositioner = settingsCodec.getTokenPositioner(readColumnBuf)) != TokenPositioner.newColumn) {\n\n      if (tokenPositioner == TokenPositioner.sameRow) {\n        currentReaderRow.getTokens().add(readColumnBuf);\n      } else /*if (tokenPositioner == TokenPositioner.newRow)*/ {\n        currentReaderRow = currentReaderColumn.new Row();\n        currentReaderRow.getTokens().add(readColumnBuf);\n      }\n      readColumnBuf = null;\n\n    }\n\n    if (readColumnBuf == null) {\n      readColumnBuf = input.next(new Token());\n      if (readColumnBuf == null) {\n        currentReaderColumn.setLast(true);\n      }\n    }\n\n\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}