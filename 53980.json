{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.TrieSubsetMatcher.Builder#addSubset(Collection[E],M).mjava","commits":[{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.TrieSubsetMatcher.Builder#addSubset(Collection[E],M).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Adds a subset. If the subset is already registered, the new match value is added to the previous one(s).\n       *\n       * @param subset     The subset of {@link Comparable} elements; it is copied. It is ignored if its size is <code>0</code>.\n       *                   Any subset added is guaranteed to be returned by {@link TrieSubsetMatcher#findSubsetsMatching}\n       *                   if it matches (i.e. is contained), even if two or more subsets are equal, or equal when ignoring\n       *                   duplicate elements.\n       * @param matchValue The match value provided each time the subset matches.\n       * @return This builder.\n       */\n      public Builder<E, M> addSubset(Collection<E> subset, M matchValue) {\n        if (!subset.isEmpty()) {\n          TrieSubsetMatcher.Node<E, M> node = root;\n          for (E e : ImmutableSortedSet.copyOf(subset)) {\n            node = node.getOrCreateChild(e);\n          }\n          node.addMatchValue(matchValue);\n          subsetCount++;\n        }\n        return this;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.TrieSubsetMatcher.Builder#addSubset(Collection[E],M).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Adds a subset. If the subset is already registered, the new match value is added to the previous one(s).\n       *\n       * @param subset     The subset of {@link Comparable} elements; it is copied. It is ignored if its size is <code>0</code>.\n       *                   Any subset added is guaranteed to be returned by {@link TrieSubsetMatcher#findSubsetsMatching}\n       *                   if it matches (i.e. is contained), even if two or more subsets are equal, or equal when ignoring\n       *                   duplicate elements.\n       * @param matchValue The match value provided each time the subset matches.\n       * @return This builder.\n       */\n      public Builder<E, M> addSubset(Collection<E> subset, M matchValue) {\n        if (!subset.isEmpty()) {\n          TrieSubsetMatcher.Node<E, M> node = root;\n          for (E e : ImmutableSortedSet.copyOf(subset)) {\n            node = node.getOrCreateChild(e);\n          }\n          node.addMatchValue(matchValue);\n          subsetCount++;\n        }\n        return this;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6046c615b67e878b7c0ab9257d01dd759493f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}