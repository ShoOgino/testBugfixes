{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","pathOld":"/dev/null","sourceNew":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getCanonicalName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    final List<Feature> featuresList = model.getFeatures();\n    final List<Normalizer> normsList = model.getNorms();\n    for (int ii=0; ii<featuresList.size(); ++ii) {\n      features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","pathOld":"/dev/null","sourceNew":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getCanonicalName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    final List<Feature> featuresList = model.getFeatures();\n    final List<Normalizer> normsList = model.getNorms();\n    for (int ii=0; ii<featuresList.size(); ++ii) {\n      features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a03034a121f635bebacef74693404e3273b614a6","date":1511880957,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","sourceNew":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getCanonicalName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    if (!(model instanceof WrapperModel)) {\n      final List<Feature> featuresList = model.getFeatures();\n      final List<Normalizer> normsList = model.getNorms();\n      for (int ii = 0; ii < featuresList.size(); ++ii) {\n        features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n      }\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","sourceOld":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getCanonicalName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    final List<Feature> featuresList = model.getFeatures();\n    final List<Normalizer> normsList = model.getNorms();\n    for (int ii=0; ii<featuresList.size(); ++ii) {\n      features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","sourceNew":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getCanonicalName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    if (!(model instanceof WrapperModel)) {\n      final List<Feature> featuresList = model.getFeatures();\n      final List<Normalizer> normsList = model.getNorms();\n      for (int ii = 0; ii < featuresList.size(); ++ii) {\n        features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n      }\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","sourceOld":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getCanonicalName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    final List<Feature> featuresList = model.getFeatures();\n    final List<Normalizer> normsList = model.getNorms();\n    for (int ii=0; ii<featuresList.size(); ++ii) {\n      features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e3fdbcab9b445653b4770ff1c006686dcb30c30","date":1518197297,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","sourceNew":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    if (!(model instanceof WrapperModel)) {\n      final List<Feature> featuresList = model.getFeatures();\n      final List<Normalizer> normsList = model.getNorms();\n      for (int ii = 0; ii < featuresList.size(); ++ii) {\n        features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n      }\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","sourceOld":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getCanonicalName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    if (!(model instanceof WrapperModel)) {\n      final List<Feature> featuresList = model.getFeatures();\n      final List<Normalizer> normsList = model.getNorms();\n      for (int ii = 0; ii < featuresList.size(); ++ii) {\n        features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n      }\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#toLTRScoringModelMap(LTRScoringModel).mjava","sourceNew":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    if (!(model instanceof WrapperModel)) {\n      final List<Feature> featuresList = model.getFeatures();\n      final List<Normalizer> normsList = model.getNorms();\n      for (int ii = 0; ii < featuresList.size(); ++ii) {\n        features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n      }\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","sourceOld":"  private static LinkedHashMap<String,Object> toLTRScoringModelMap(LTRScoringModel model) {\n    final LinkedHashMap<String,Object> modelMap = new LinkedHashMap<>(5, 1.0f);\n\n    modelMap.put(NAME_KEY, model.getName());\n    modelMap.put(CLASS_KEY, model.getClass().getCanonicalName());\n    modelMap.put(STORE_KEY, model.getFeatureStoreName());\n\n    final List<Map<String,Object>> features = new ArrayList<>();\n    if (!(model instanceof WrapperModel)) {\n      final List<Feature> featuresList = model.getFeatures();\n      final List<Normalizer> normsList = model.getNorms();\n      for (int ii = 0; ii < featuresList.size(); ++ii) {\n        features.add(toFeatureMap(featuresList.get(ii), normsList.get(ii)));\n      }\n    }\n    modelMap.put(FEATURES_KEY, features);\n\n    modelMap.put(PARAMS_KEY, model.getParams());\n\n    return modelMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","a03034a121f635bebacef74693404e3273b614a6"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e3fdbcab9b445653b4770ff1c006686dcb30c30":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a03034a121f635bebacef74693404e3273b614a6":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f906c3206e7eb174774f938416460e39170d819"],"3f906c3206e7eb174774f938416460e39170d819":["1aad05eeff7818b0833c02ac6b743aa72054963b","6e3fdbcab9b445653b4770ff1c006686dcb30c30"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["6e3fdbcab9b445653b4770ff1c006686dcb30c30","3f906c3206e7eb174774f938416460e39170d819"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["1aad05eeff7818b0833c02ac6b743aa72054963b","9720b151fde2073f4e401450f4574e5f31c2d0ff","a03034a121f635bebacef74693404e3273b614a6"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"6e3fdbcab9b445653b4770ff1c006686dcb30c30":["3f906c3206e7eb174774f938416460e39170d819"],"a03034a121f635bebacef74693404e3273b614a6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3f906c3206e7eb174774f938416460e39170d819":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}