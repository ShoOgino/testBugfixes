{"path":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","commits":[{"id":"1166b183ba6d2f30d8660b254c6a8255505a44c3","date":1413452503,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    TrieDateField trieDF = new TrieDateField();\n    Date tempDate = trieDF.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = trieDF.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(trieDF.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(trieDF.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(trieDF.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(trieDF.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", trieDF.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    TrieDateField trieDF = new TrieDateField();\n    Date tempDate = trieDF.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = trieDF.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(trieDF.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(trieDF.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(trieDF.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(trieDF.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", trieDF.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","sourceNew":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    TrieDateField trieDF = new TrieDateField();\n    Date tempDate = DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        DateFormatUtil.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        DateFormatUtil.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        DateFormatUtil.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        DateFormatUtil.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateFormatUtil.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateFormatUtil.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateFormatUtil.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateFormatUtil.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateFormatUtil.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateFormatUtil.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    TrieDateField trieDF = new TrieDateField();\n    Date tempDate = trieDF.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{trieDF.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        trieDF.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        trieDF.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = trieDF.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(trieDF.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(trieDF.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(trieDF.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(trieDF.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", trieDF.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","sourceNew":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    TrieDateField trieDF = new TrieDateField();\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    TrieDateField trieDF = new TrieDateField();\n    Date tempDate = DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        DateFormatUtil.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        DateFormatUtil.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        DateFormatUtil.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateFormatUtil.parseMath(null, \"2014-02-01T12:00:00Z\"), \n        DateFormatUtil.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateFormatUtil.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateFormatUtil.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateFormatUtil.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateFormatUtil.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateFormatUtil.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateFormatUtil.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateFormatUtil.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94a0eda7dbad12579530df39279403d27344ebcb","date":1500511909,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","sourceNew":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    TrieDateField trieDF = new TrieDateField();\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","sourceNew":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    TrieDateField trieDF = new TrieDateField();\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d","date":1570469935,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","sourceNew":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-03T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); // remove only removed first occurrence\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveDateUsingDateType().mjava","sourceNew":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-03T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); // remove only removed first occurrence\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Ignore(\"Remove Date is not supported in other formats than UTC\")\n  @Test\n  public void testRemoveDateUsingDateType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    Date tempDate = DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10002\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-07-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10020\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-03T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    doc.setField(\"dateRemove\", new Date[]{DateMathParser.parseMath(null, \"2014-02-01T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\"),\n        DateMathParser.parseMath(null, \"2014-02-04T12:00:00Z\")\n        });\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    String dateString = DateMathParser.parseMath(null, \"2014-02-02T12:00:00Z\").toString();\n//    assertQ(req(\"q\", \"dateRemove:\"+URLEncoder.encode(dateString, \"UTF-8\"), \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n//    assertQ(req(\"q\", \"dateRemove:\"+dateString, \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n    assertQ(req(\"q\", \"dateRemove:\\\"Sun Feb 02 10:00:00 FNT 2014\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); //Sun Feb 02 10:00:00 FNT 2014\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    List<Date> removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10021\");\n    removeList = new ArrayList<Date>();\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-02T12:00:00Z\"));\n    removeList.add(DateMathParser.parseMath(null, \"2014-09-03T12:00:00Z\"));\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-02T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"10001\");\n    doc.setField(\"dateRemove\", ImmutableMap.of(\"remove\", DateMathParser.parseMath(null, \"2014-09-01T12:00:00Z\"))); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"dateRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"dateRemove:\\\"2014-09-01T12:00:00Z\\\"\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1166b183ba6d2f30d8660b254c6a8255505a44c3"],"94a0eda7dbad12579530df39279403d27344ebcb":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d":["94a0eda7dbad12579530df39279403d27344ebcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["d3f6c7717a0f1decd1668144537943efcc70cd95","94a0eda7dbad12579530df39279403d27344ebcb"],"1166b183ba6d2f30d8660b254c6a8255505a44c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a25dacbb15b3a184ab77b437a6b4d54ff286b5d"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["1166b183ba6d2f30d8660b254c6a8255505a44c3"],"b0b597c65628ca9e73913a07e81691f8229bae35":["94a0eda7dbad12579530df39279403d27344ebcb","6a25dacbb15b3a184ab77b437a6b4d54ff286b5d"]},"commit2Childs":{"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"94a0eda7dbad12579530df39279403d27344ebcb":["6a25dacbb15b3a184ab77b437a6b4d54ff286b5d","936cdd5882761db3b844afd6f84ab81cbb011a75","b0b597c65628ca9e73913a07e81691f8229bae35"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["94a0eda7dbad12579530df39279403d27344ebcb","936cdd5882761db3b844afd6f84ab81cbb011a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","1166b183ba6d2f30d8660b254c6a8255505a44c3"],"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"1166b183ba6d2f30d8660b254c6a8255505a44c3":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}