{"path":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","commits":[{"id":"7757c08ec94a8148b09e422e72ff266b9a7dd4bc","date":1223667919,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeAndEquals(){\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n    \n    Term term1= new Term(\"someField\",\"someText\");\n    \n    query1.add(term1);\n    query2.add(term1);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n    \n    Term term2= new Term(\"someField\",\"someMoreText\");\n    \n    query1.add(term2);\n    \n    assertFalse(query1.hashCode()==query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2.add(term2);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals(){\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n    \n    Term term1= new Term(\"someField\",\"someText\");\n    \n    query1.add(term1);\n    query2.add(term1);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n    \n    Term term2= new Term(\"someField\",\"someMoreText\");\n    \n    query1.add(term2);\n    \n    assertFalse(query1.hashCode()==query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2.add(term2);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals(){\n    MultiPhraseQuery query1 = new MultiPhraseQuery();\n    MultiPhraseQuery query2 = new MultiPhraseQuery();\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n    \n    Term term1= new Term(\"someField\",\"someText\");\n    \n    query1.add(term1);\n    query2.add(term1);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n    \n    Term term2= new Term(\"someField\",\"someMoreText\");\n    \n    query1.add(term2);\n    \n    assertFalse(query1.hashCode()==query2.hashCode());\n    assertFalse(query1.equals(query2));\n    \n    query2.add(term2);\n    \n    assertEquals(query1.hashCode(), query2.hashCode());\n    assertEquals(query1,query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7757c08ec94a8148b09e422e72ff266b9a7dd4bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7757c08ec94a8148b09e422e72ff266b9a7dd4bc"]},"commit2Childs":{"7757c08ec94a8148b09e422e72ff266b9a7dd4bc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7757c08ec94a8148b09e422e72ff266b9a7dd4bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}