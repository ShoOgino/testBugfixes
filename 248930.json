{"path":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","pathOld":"modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","sourceNew":"  private void popNextLemma() {\n    final WordData lemma = lemmaList.get(lemmaListIndex++);\n    termAtt.setEmpty().append(lemma.getStem());\n    tagAtt.setTag(lemma.getTag());\n  }\n\n","sourceOld":"  private void popNextLemma() {\n    final WordData lemma = lemmaList.get(lemmaListIndex++);\n    termAtt.setEmpty().append(lemma.getStem());\n    tagAtt.setTag(lemma.getTag());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84ab9fb766b354a9a9f16580a1162aac7ebbfc51","date":1340868936,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","sourceNew":"  private void popNextLemma() {\n    // Collect all tags for the next unique lemma.\n    CharSequence currentStem;\n    int tags = 0;\n    do {\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      currentStem = lemma.getStem();\n      final CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        if (tagsList.size() <= tags) {\n          tagsList.add(new StringBuilder());\n        }\n\n        final StringBuilder buffer = tagsList.get(tags++);  \n        buffer.setLength(0);\n        buffer.append(lemma.getTag());\n      }\n    } while (lemmaListIndex < lemmaList.size() &&\n             equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n    // Set the lemma's base form and tags as attributes.\n    termAtt.setEmpty().append(currentStem);\n    tagsAtt.setTags(tagsList.subList(0, tags));\n  }\n\n","sourceOld":"  private void popNextLemma() {\n    final WordData lemma = lemmaList.get(lemmaListIndex++);\n    termAtt.setEmpty().append(lemma.getStem());\n    tagAtt.setTag(lemma.getTag());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","sourceNew":"  private void popNextLemma() {\n    // Collect all tags for the next unique lemma.\n    CharSequence currentStem;\n    int tags = 0;\n    do {\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      currentStem = lemma.getStem();\n      final CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        if (tagsList.size() <= tags) {\n          tagsList.add(new StringBuilder());\n        }\n\n        final StringBuilder buffer = tagsList.get(tags++);  \n        buffer.setLength(0);\n        buffer.append(lemma.getTag());\n      }\n    } while (lemmaListIndex < lemmaList.size() &&\n             equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n    // Set the lemma's base form and tags as attributes.\n    termAtt.setEmpty().append(currentStem);\n    tagsAtt.setTags(tagsList.subList(0, tags));\n  }\n\n","sourceOld":"  private void popNextLemma() {\n    final WordData lemma = lemmaList.get(lemmaListIndex++);\n    termAtt.setEmpty().append(lemma.getStem());\n    tagAtt.setTag(lemma.getTag());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43cfa455b570ba7bf8eefe91de210d46c68a0a2a","date":1372853690,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","sourceNew":"  private void popNextLemma() {\n    if (multipleTagsPerLemma) {\n      // One tag (concatenated) per lemma.\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      termAtt.setEmpty().append(lemma.getStem());\n      CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        String[] tags = tag.toString().split(\"\\\\+\");\n        for (int i = 0; i < tags.length; i++) {\n          if (tagsList.size() <= i) {\n            tagsList.add(new StringBuilder());\n          }\n          StringBuilder buffer = tagsList.get(i);\n          buffer.setLength(0);\n          buffer.append(tags[i]);\n        }\n        tagsAtt.setTags(tagsList.subList(0, tags.length));\n      } else {\n        tagsAtt.setTags(Collections.<StringBuilder> emptyList());\n      }\n    } else {\n      // One tag (concatenated) per stem (lemma repeated).\n      CharSequence currentStem;\n      int tags = 0;\n      do {\n        final WordData lemma = lemmaList.get(lemmaListIndex++);\n        currentStem = lemma.getStem();\n        final CharSequence tag = lemma.getTag();\n        if (tag != null) {\n          if (tagsList.size() <= tags) {\n            tagsList.add(new StringBuilder());\n          }\n  \n          final StringBuilder buffer = tagsList.get(tags++);  \n          buffer.setLength(0);\n          buffer.append(lemma.getTag());\n        }\n      } while (lemmaListIndex < lemmaList.size() &&\n               equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n      // Set the lemma's base form and tags as attributes.\n      termAtt.setEmpty().append(currentStem);\n      tagsAtt.setTags(tagsList.subList(0, tags));\n    }\n  }\n\n","sourceOld":"  private void popNextLemma() {\n    // Collect all tags for the next unique lemma.\n    CharSequence currentStem;\n    int tags = 0;\n    do {\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      currentStem = lemma.getStem();\n      final CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        if (tagsList.size() <= tags) {\n          tagsList.add(new StringBuilder());\n        }\n\n        final StringBuilder buffer = tagsList.get(tags++);  \n        buffer.setLength(0);\n        buffer.append(lemma.getTag());\n      }\n    } while (lemmaListIndex < lemmaList.size() &&\n             equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n    // Set the lemma's base form and tags as attributes.\n    termAtt.setEmpty().append(currentStem);\n    tagsAtt.setTags(tagsList.subList(0, tags));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11c53338ab4895c6b6a082c1c07aea2abce674db","date":1372879961,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","sourceNew":"  private void popNextLemma() {\n    if (multipleTagsPerLemma) {\n      // One tag (concatenated) per lemma.\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      termAtt.setEmpty().append(lemma.getStem());\n      CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        String[] tags = tag.toString().split(\"\\\\+|\\\\|\");\n        for (int i = 0; i < tags.length; i++) {\n          if (tagsList.size() <= i) {\n            tagsList.add(new StringBuilder());\n          }\n          StringBuilder buffer = tagsList.get(i);\n          buffer.setLength(0);\n          buffer.append(tags[i]);\n        }\n        tagsAtt.setTags(tagsList.subList(0, tags.length));\n      } else {\n        tagsAtt.setTags(Collections.<StringBuilder> emptyList());\n      }\n    } else {\n      // One tag (concatenated) per stem (lemma repeated).\n      CharSequence currentStem;\n      int tags = 0;\n      do {\n        final WordData lemma = lemmaList.get(lemmaListIndex++);\n        currentStem = lemma.getStem();\n        final CharSequence tag = lemma.getTag();\n        if (tag != null) {\n          if (tagsList.size() <= tags) {\n            tagsList.add(new StringBuilder());\n          }\n  \n          final StringBuilder buffer = tagsList.get(tags++);  \n          buffer.setLength(0);\n          buffer.append(lemma.getTag());\n        }\n      } while (lemmaListIndex < lemmaList.size() &&\n               equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n      // Set the lemma's base form and tags as attributes.\n      termAtt.setEmpty().append(currentStem);\n      tagsAtt.setTags(tagsList.subList(0, tags));\n    }\n  }\n\n","sourceOld":"  private void popNextLemma() {\n    if (multipleTagsPerLemma) {\n      // One tag (concatenated) per lemma.\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      termAtt.setEmpty().append(lemma.getStem());\n      CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        String[] tags = tag.toString().split(\"\\\\+\");\n        for (int i = 0; i < tags.length; i++) {\n          if (tagsList.size() <= i) {\n            tagsList.add(new StringBuilder());\n          }\n          StringBuilder buffer = tagsList.get(i);\n          buffer.setLength(0);\n          buffer.append(tags[i]);\n        }\n        tagsAtt.setTags(tagsList.subList(0, tags.length));\n      } else {\n        tagsAtt.setTags(Collections.<StringBuilder> emptyList());\n      }\n    } else {\n      // One tag (concatenated) per stem (lemma repeated).\n      CharSequence currentStem;\n      int tags = 0;\n      do {\n        final WordData lemma = lemmaList.get(lemmaListIndex++);\n        currentStem = lemma.getStem();\n        final CharSequence tag = lemma.getTag();\n        if (tag != null) {\n          if (tagsList.size() <= tags) {\n            tagsList.add(new StringBuilder());\n          }\n  \n          final StringBuilder buffer = tagsList.get(tags++);  \n          buffer.setLength(0);\n          buffer.append(lemma.getTag());\n        }\n      } while (lemmaListIndex < lemmaList.size() &&\n               equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n      // Set the lemma's base form and tags as attributes.\n      termAtt.setEmpty().append(currentStem);\n      tagsAtt.setTags(tagsList.subList(0, tags));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","sourceNew":"  private void popNextLemma() {\n    if (multipleTagsPerLemma) {\n      // One tag (concatenated) per lemma.\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      termAtt.setEmpty().append(lemma.getStem());\n      CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        String[] tags = tag.toString().split(\"\\\\+|\\\\|\");\n        for (int i = 0; i < tags.length; i++) {\n          if (tagsList.size() <= i) {\n            tagsList.add(new StringBuilder());\n          }\n          StringBuilder buffer = tagsList.get(i);\n          buffer.setLength(0);\n          buffer.append(tags[i]);\n        }\n        tagsAtt.setTags(tagsList.subList(0, tags.length));\n      } else {\n        tagsAtt.setTags(Collections.<StringBuilder> emptyList());\n      }\n    } else {\n      // One tag (concatenated) per stem (lemma repeated).\n      CharSequence currentStem;\n      int tags = 0;\n      do {\n        final WordData lemma = lemmaList.get(lemmaListIndex++);\n        currentStem = lemma.getStem();\n        final CharSequence tag = lemma.getTag();\n        if (tag != null) {\n          if (tagsList.size() <= tags) {\n            tagsList.add(new StringBuilder());\n          }\n  \n          final StringBuilder buffer = tagsList.get(tags++);  \n          buffer.setLength(0);\n          buffer.append(lemma.getTag());\n        }\n      } while (lemmaListIndex < lemmaList.size() &&\n               equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n      // Set the lemma's base form and tags as attributes.\n      termAtt.setEmpty().append(currentStem);\n      tagsAtt.setTags(tagsList.subList(0, tags));\n    }\n  }\n\n","sourceOld":"  private void popNextLemma() {\n    // Collect all tags for the next unique lemma.\n    CharSequence currentStem;\n    int tags = 0;\n    do {\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      currentStem = lemma.getStem();\n      final CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        if (tagsList.size() <= tags) {\n          tagsList.add(new StringBuilder());\n        }\n\n        final StringBuilder buffer = tagsList.get(tags++);  \n        buffer.setLength(0);\n        buffer.append(lemma.getTag());\n      }\n    } while (lemmaListIndex < lemmaList.size() &&\n             equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n    // Set the lemma's base form and tags as attributes.\n    termAtt.setEmpty().append(currentStem);\n    tagsAtt.setTags(tagsList.subList(0, tags));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622","date":1376037561,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","sourceNew":"  private void popNextLemma() {\n    // One tag (concatenated) per lemma.\n    final WordData lemma = lemmaList.get(lemmaListIndex++);\n    termAtt.setEmpty().append(lemma.getStem());\n    CharSequence tag = lemma.getTag();\n    if (tag != null) {\n      String[] tags = lemmaSplitter.split(tag.toString());\n      for (int i = 0; i < tags.length; i++) {\n        if (tagsList.size() <= i) {\n          tagsList.add(new StringBuilder());\n        }\n        StringBuilder buffer = tagsList.get(i);\n        buffer.setLength(0);\n        buffer.append(tags[i]);\n      }\n      tagsAtt.setTags(tagsList.subList(0, tags.length));\n    } else {\n      tagsAtt.setTags(Collections.<StringBuilder> emptyList());\n    }\n  }\n\n","sourceOld":"  private void popNextLemma() {\n    if (multipleTagsPerLemma) {\n      // One tag (concatenated) per lemma.\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      termAtt.setEmpty().append(lemma.getStem());\n      CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        String[] tags = tag.toString().split(\"\\\\+|\\\\|\");\n        for (int i = 0; i < tags.length; i++) {\n          if (tagsList.size() <= i) {\n            tagsList.add(new StringBuilder());\n          }\n          StringBuilder buffer = tagsList.get(i);\n          buffer.setLength(0);\n          buffer.append(tags[i]);\n        }\n        tagsAtt.setTags(tagsList.subList(0, tags.length));\n      } else {\n        tagsAtt.setTags(Collections.<StringBuilder> emptyList());\n      }\n    } else {\n      // One tag (concatenated) per stem (lemma repeated).\n      CharSequence currentStem;\n      int tags = 0;\n      do {\n        final WordData lemma = lemmaList.get(lemmaListIndex++);\n        currentStem = lemma.getStem();\n        final CharSequence tag = lemma.getTag();\n        if (tag != null) {\n          if (tagsList.size() <= tags) {\n            tagsList.add(new StringBuilder());\n          }\n  \n          final StringBuilder buffer = tagsList.get(tags++);  \n          buffer.setLength(0);\n          buffer.append(lemma.getTag());\n        }\n      } while (lemmaListIndex < lemmaList.size() &&\n               equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n      // Set the lemma's base form and tags as attributes.\n      termAtt.setEmpty().append(currentStem);\n      tagsAtt.setTags(tagsList.subList(0, tags));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#popNextLemma().mjava","sourceNew":"  private void popNextLemma() {\n    // One tag (concatenated) per lemma.\n    final WordData lemma = lemmaList.get(lemmaListIndex++);\n    termAtt.setEmpty().append(lemma.getStem());\n    CharSequence tag = lemma.getTag();\n    if (tag != null) {\n      String[] tags = lemmaSplitter.split(tag.toString());\n      for (int i = 0; i < tags.length; i++) {\n        if (tagsList.size() <= i) {\n          tagsList.add(new StringBuilder());\n        }\n        StringBuilder buffer = tagsList.get(i);\n        buffer.setLength(0);\n        buffer.append(tags[i]);\n      }\n      tagsAtt.setTags(tagsList.subList(0, tags.length));\n    } else {\n      tagsAtt.setTags(Collections.<StringBuilder> emptyList());\n    }\n  }\n\n","sourceOld":"  private void popNextLemma() {\n    if (multipleTagsPerLemma) {\n      // One tag (concatenated) per lemma.\n      final WordData lemma = lemmaList.get(lemmaListIndex++);\n      termAtt.setEmpty().append(lemma.getStem());\n      CharSequence tag = lemma.getTag();\n      if (tag != null) {\n        String[] tags = tag.toString().split(\"\\\\+|\\\\|\");\n        for (int i = 0; i < tags.length; i++) {\n          if (tagsList.size() <= i) {\n            tagsList.add(new StringBuilder());\n          }\n          StringBuilder buffer = tagsList.get(i);\n          buffer.setLength(0);\n          buffer.append(tags[i]);\n        }\n        tagsAtt.setTags(tagsList.subList(0, tags.length));\n      } else {\n        tagsAtt.setTags(Collections.<StringBuilder> emptyList());\n      }\n    } else {\n      // One tag (concatenated) per stem (lemma repeated).\n      CharSequence currentStem;\n      int tags = 0;\n      do {\n        final WordData lemma = lemmaList.get(lemmaListIndex++);\n        currentStem = lemma.getStem();\n        final CharSequence tag = lemma.getTag();\n        if (tag != null) {\n          if (tagsList.size() <= tags) {\n            tagsList.add(new StringBuilder());\n          }\n  \n          final StringBuilder buffer = tagsList.get(tags++);  \n          buffer.setLength(0);\n          buffer.append(lemma.getTag());\n        }\n      } while (lemmaListIndex < lemmaList.size() &&\n               equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));\n\n      // Set the lemma's base form and tags as attributes.\n      termAtt.setEmpty().append(currentStem);\n      tagsAtt.setTags(tagsList.subList(0, tags));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11c53338ab4895c6b6a082c1c07aea2abce674db":["43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["84ab9fb766b354a9a9f16580a1162aac7ebbfc51","11c53338ab4895c6b6a082c1c07aea2abce674db"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","84ab9fb766b354a9a9f16580a1162aac7ebbfc51"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["84ab9fb766b354a9a9f16580a1162aac7ebbfc51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622":["11c53338ab4895c6b6a082c1c07aea2abce674db"],"84ab9fb766b354a9a9f16580a1162aac7ebbfc51":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9d760ce88b54634b37e6de1cf1ff5d6d66cd622"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","84ab9fb766b354a9a9f16580a1162aac7ebbfc51"],"11c53338ab4895c6b6a082c1c07aea2abce674db":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b9d760ce88b54634b37e6de1cf1ff5d6d66cd622"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["11c53338ab4895c6b6a082c1c07aea2abce674db"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"84ab9fb766b354a9a9f16580a1162aac7ebbfc51":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}