{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/TermIntervalsSource#termPositionsCost(TermsEnum).mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/TermIntervalsSource#termPositionsCost(TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an expected cost in simple operations\n   *  of processing the occurrences of a term\n   *  in a document that contains the term.\n   *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n   *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n   */\n  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n    // TODO: When intervals move to core, refactor to use the copy of this in PhraseQuery\n    int docFreq = termsEnum.docFreq();\n    assert docFreq > 0;\n    long totalTermFreq = termsEnum.totalTermFreq();\n    float expOccurrencesInMatchingDoc = totalTermFreq / (float) docFreq;\n    return TERM_POSNS_SEEK_OPS_PER_DOC + expOccurrencesInMatchingDoc * TERM_OPS_PER_POS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#termPositionsCost(TermsEnum).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/TermIntervalsSource#termPositionsCost(TermsEnum).mjava","sourceNew":"  /** Returns an expected cost in simple operations\n   *  of processing the occurrences of a term\n   *  in a document that contains the term.\n   *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n   *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n   */\n  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n    // TODO: When intervals move to core, refactor to use the copy of this in PhraseQuery\n    int docFreq = termsEnum.docFreq();\n    assert docFreq > 0;\n    long totalTermFreq = termsEnum.totalTermFreq();\n    float expOccurrencesInMatchingDoc = totalTermFreq / (float) docFreq;\n    return TERM_POSNS_SEEK_OPS_PER_DOC + expOccurrencesInMatchingDoc * TERM_OPS_PER_POS;\n  }\n\n","sourceOld":"  /** Returns an expected cost in simple operations\n   *  of processing the occurrences of a term\n   *  in a document that contains the term.\n   *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n   *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n   */\n  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n    // TODO: When intervals move to core, refactor to use the copy of this in PhraseQuery\n    int docFreq = termsEnum.docFreq();\n    assert docFreq > 0;\n    long totalTermFreq = termsEnum.totalTermFreq();\n    float expOccurrencesInMatchingDoc = totalTermFreq / (float) docFreq;\n    return TERM_POSNS_SEEK_OPS_PER_DOC + expOccurrencesInMatchingDoc * TERM_OPS_PER_POS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["361b1afc99f68598c73d37074aec089c9c951586"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"361b1afc99f68598c73d37074aec089c9c951586":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}