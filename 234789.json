{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1085ea837da8f1e96697e17cf73e1d08e7329261","date":1281469548,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (Norm norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = deletedDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  // nocommit: remove deletions from SR\n  private void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6c554455db6752562dfe09614cdf3fd06062c3","date":1323301343,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  // TODO: remove deletions from SR\n  private void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","sourceOld":"  // nocommit: remove deletions from SR\n  private void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  // TODO: remove deletions from SR\n  private void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  // TODO: remove deletions from SR\n  private void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","sourceOld":"  void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackNormsDirty = normsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n    for (SegmentNorms norm : norms.values()) {\n      norm.rollbackDirty = norm.dirty;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781537683b56c6c5aad3b1046f00daf1c7ea93ae","date":1323968781,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":"  // TODO: remove deletions from SR\n  private void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","sourceOld":"  // TODO: remove deletions from SR\n  private void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackDeletedDocsDirty = liveDocsDirty;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#startCommit().mjava","sourceNew":null,"sourceOld":"  // TODO: remove deletions from SR\n  private void startCommit() {\n    rollbackSegmentInfo = (SegmentInfo) si.clone();\n    rollbackHasChanges = hasChanges;\n    rollbackPendingDeleteCount = pendingDeleteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["1085ea837da8f1e96697e17cf73e1d08e7329261","8b5e0eebe355b14693e24007d721da78a79d8170"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["8b5e0eebe355b14693e24007d721da78a79d8170"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1085ea837da8f1e96697e17cf73e1d08e7329261"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["8b5e0eebe355b14693e24007d721da78a79d8170","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"8b5e0eebe355b14693e24007d721da78a79d8170":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["4122a26e1fd0457a340616673a3d3aada370f713"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1085ea837da8f1e96697e17cf73e1d08e7329261","8b5e0eebe355b14693e24007d721da78a79d8170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7d6c554455db6752562dfe09614cdf3fd06062c3"],"7d6c554455db6752562dfe09614cdf3fd06062c3":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"4122a26e1fd0457a340616673a3d3aada370f713":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"1085ea837da8f1e96697e17cf73e1d08e7329261":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b5e0eebe355b14693e24007d721da78a79d8170","a3776dccca01c11e7046323cfad46a3b4a471233"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"8b5e0eebe355b14693e24007d721da78a79d8170":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["7d6c554455db6752562dfe09614cdf3fd06062c3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["781537683b56c6c5aad3b1046f00daf1c7ea93ae","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"7d6c554455db6752562dfe09614cdf3fd06062c3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4122a26e1fd0457a340616673a3d3aada370f713":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1085ea837da8f1e96697e17cf73e1d08e7329261","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}