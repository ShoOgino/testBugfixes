{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"0ac446a120a3c5f1ac22f9a866256ad428c1821b","date":1447203034,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816189b2f867eab5e0795237a1d8e1bc03b19550","date":1493771668,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n    \n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Validate there are no unknown parameters - zkHost is namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#StatsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    // We've got all the required items\n    init(collectionName, params, metrics, zkHost);\n  }\n\n","sourceOld":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    // metrics, optional - if not provided then why are you using this?\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, params, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["70d9c44f68e848648da304352cf7c045c33148f4"],"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["a027750b86452a8dcd054ac993d54b203dae9102"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a027750b86452a8dcd054ac993d54b203dae9102","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a027750b86452a8dcd054ac993d54b203dae9102","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d470c8182e92b264680e34081b75e70a9f2b3c89","816189b2f867eab5e0795237a1d8e1bc03b19550"],"7107555998ea86d6f61e2ad770687d674fa8e012":["70d9c44f68e848648da304352cf7c045c33148f4","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a027750b86452a8dcd054ac993d54b203dae9102","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"816189b2f867eab5e0795237a1d8e1bc03b19550":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a027750b86452a8dcd054ac993d54b203dae9102":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"70d9c44f68e848648da304352cf7c045c33148f4":["816189b2f867eab5e0795237a1d8e1bc03b19550"]},"commit2Childs":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","570664407cd3123a8039f1b4f2f6c6693bdaee31"],"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["a027750b86452a8dcd054ac993d54b203dae9102"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","816189b2f867eab5e0795237a1d8e1bc03b19550"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"a027750b86452a8dcd054ac993d54b203dae9102":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"816189b2f867eab5e0795237a1d8e1bc03b19550":["e9017cf144952056066919f1ebc7897ff9bd71b1","70d9c44f68e848648da304352cf7c045c33148f4"],"70d9c44f68e848648da304352cf7c045c33148f4":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","7107555998ea86d6f61e2ad770687d674fa8e012","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}