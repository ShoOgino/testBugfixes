{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","commits":[{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new FieldValueQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new FieldValueQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8914a0d123cdba0648288fc001c35ec78dfe698a","date":1499266234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new FieldValueQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new FieldValueQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n\n            @Override\n            public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n              return null;\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n\n            @Override\n            public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n              return null;\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n\n            @Override\n            public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n              return null;\n            }\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n                @Override\n                public float maxScore() {\n                  return Float.POSITIVE_INFINITY;\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n                @Override\n                public float maxScore() {\n                  return Float.POSITIVE_INFINITY;\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, false, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return Float.POSITIVE_INFINITY;\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n                @Override\n                public float maxScore() {\n                  return Float.POSITIVE_INFINITY;\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#numericDocValuesScoreQuery(String).mjava","sourceNew":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n          return new Weight(this) {\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return Float.POSITIVE_INFINITY;\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n      @Override\n      public void visit(QueryVisitor visitor) {\n\n      }\n\n      @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","sourceOld":"  // FunctionQuery would be helpful, but join module doesn't depend on queries module.\n  static Query numericDocValuesScoreQuery(final String field) {\n    return new Query() {\n\n        private final Query fieldQuery = new DocValuesFieldExistsQuery(field);\n\n        @Override\n        public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n          Weight fieldWeight = fieldQuery.createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n          return new Weight(this) {\n\n            @Override\n            public void extractTerms(Set<Term> terms) {\n            }\n\n            @Override\n            public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n              return null;\n            }\n\n            @Override\n            public Scorer scorer(LeafReaderContext context) throws IOException {\n              Scorer fieldScorer = fieldWeight.scorer(context);\n              if (fieldScorer == null) {\n                return null;\n              }\n              NumericDocValues price = context.reader().getNumericDocValues(field);\n              return new FilterScorer(fieldScorer, this) {\n                @Override\n                public float score() throws IOException {\n                  assertEquals(in.docID(), price.advance(in.docID()));\n                  return (float) price.longValue();\n                }\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return Float.POSITIVE_INFINITY;\n                }\n              };\n            }\n\n            @Override\n            public boolean isCacheable(LeafReaderContext ctx) {\n              return false;\n            }\n\n          };\n        }\n\n        @Override\n        public String toString(String field) {\n          return fieldQuery.toString(field);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o == this;\n        }\n\n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["8914a0d123cdba0648288fc001c35ec78dfe698a"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["8914a0d123cdba0648288fc001c35ec78dfe698a","706a7a3396c030cc66dda92a0492eb492131c4c0"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"8914a0d123cdba0648288fc001c35ec78dfe698a":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["523cc6563c99a55527ef7993efc5413c6648852d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","8914a0d123cdba0648288fc001c35ec78dfe698a"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"8914a0d123cdba0648288fc001c35ec78dfe698a":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","e73d8d559120669b47658108d818b637df5456ea"],"523cc6563c99a55527ef7993efc5413c6648852d":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"e73d8d559120669b47658108d818b637df5456ea":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","8914a0d123cdba0648288fc001c35ec78dfe698a","e73d8d559120669b47658108d818b637df5456ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}