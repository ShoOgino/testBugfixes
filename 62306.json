{"path":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f78c4193e9cdb55c470990e3b32f3a02c446812b","date":1294090250,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return TermRangeQuery.newStringRange(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","f78c4193e9cdb55c470990e3b32f3a02c446812b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["3e492fb0f2bb0b4b47208286f9331ff55963c656","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["f78c4193e9cdb55c470990e3b32f3a02c446812b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","f78c4193e9cdb55c470990e3b32f3a02c446812b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"f78c4193e9cdb55c470990e3b32f3a02c446812b":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","f78c4193e9cdb55c470990e3b32f3a02c446812b"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"f78c4193e9cdb55c470990e3b32f3a02c446812b":["70ad682703b8585f5d0a637efec044d57ec05efb","3e492fb0f2bb0b4b47208286f9331ff55963c656","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}