{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":null,"sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}