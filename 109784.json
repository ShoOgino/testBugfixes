{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","commits":[{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}