{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,StreamComparator).mjava","commits":[{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,StreamComparator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,Comparator[Tuple]).mjava","sourceNew":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,StreamComparator comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(!objectSerialize && !(tupleStream instanceof Expressible)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","sourceOld":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,Comparator<Tuple> comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(!objectSerialize && !(tupleStream instanceof Expressible)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43","date":1449690748,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,StreamComparator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,StreamComparator).mjava","sourceNew":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,StreamComparator comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(! (tupleStream instanceof Expressible)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","sourceOld":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,StreamComparator comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(!objectSerialize && !(tupleStream instanceof Expressible)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0891a6931fc352fc7e61f2752ef9add758d3fb89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"]},"commit2Childs":{"0891a6931fc352fc7e61f2752ef9add758d3fb89":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}