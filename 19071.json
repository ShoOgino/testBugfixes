{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2008f6eecc5a7dda6e17a35c70aa5cb0fb5a01f1","date":1301602570,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\")) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      } else if (className.equals(\"KeywordAnalyzer\")) {\n        className = \"org.apache.lucene.analysis.core.KeywordAnalyzer\";\n      } else if (className.indexOf(\".\") == -1 || className.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e900bd4e9633cee011b2c3ae686f3039b7fc0ee","date":1301610886,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\")) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      } else if (className.equals(\"KeywordAnalyzer\")) {\n        className = \"org.apache.lucene.analysis.core.KeywordAnalyzer\";\n      } else if (className.indexOf(\".\") == -1 || className.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size())\n      {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      if (className == null || className.equals(\"\"))\n      {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (className.indexOf(\".\") == -1  || className.startsWith(\"standard.\"))//there is no package name, assume o.a.l.analysis\n      {\n        className = \"org.apache.lucene.analysis.\" + className;\n      }\n      getRunData().setAnalyzer(createAnalyzer(className));\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2e900bd4e9633cee011b2c3ae686f3039b7fc0ee"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e900bd4e9633cee011b2c3ae686f3039b7fc0ee":["2008f6eecc5a7dda6e17a35c70aa5cb0fb5a01f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","2e900bd4e9633cee011b2c3ae686f3039b7fc0ee"],"2008f6eecc5a7dda6e17a35c70aa5cb0fb5a01f1":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"45669a651c970812a680841b97a77cce06af559f":["868da859b43505d9d2a023bfeae6dd0c795f5295","2e900bd4e9633cee011b2c3ae686f3039b7fc0ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","2008f6eecc5a7dda6e17a35c70aa5cb0fb5a01f1","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e900bd4e9633cee011b2c3ae686f3039b7fc0ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"2008f6eecc5a7dda6e17a35c70aa5cb0fb5a01f1":["2e900bd4e9633cee011b2c3ae686f3039b7fc0ee"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}