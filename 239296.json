{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      for(int id=0;id<num;id++) {\n        if (random.nextInt(4) == 3) {\n          f.setValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setValue(\"b\");\n        }\n        idField.setValue(\"\"+id);\n        w.addDocument(doc);\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      for(int id=0;id<num;id++) {\n        if (random.nextInt(4) == 3) {\n          f.setValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setValue(\"b\");\n        }\n        idField.setValue(\"\"+id);\n        w.addDocument(doc);\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      for(int id=0;id<num;id++) {\n        if (random.nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      for(int id=0;id<num;id++) {\n        if (random.nextInt(4) == 3) {\n          f.setValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setValue(\"b\");\n        }\n        idField.setValue(\"\"+id);\n        w.addDocument(doc);\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["e212ce9e66e9e69443bd5faec69d9f312b1574e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      for(int id=0;id<num;id++) {\n        if (random.nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random, te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b512a6470fbb93c320e0cc8519ec0fe94efa13e","date":1337522360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n      doc.add(f);\n      final Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, false);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, 0);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = _TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<Integer>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<Integer>();\n      final List<Integer> bDocIDs = new ArrayList<Integer>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.shutdown();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.shutdown();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      DocsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, DocsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.FLAG_NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.FLAG_NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator(null);\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, null, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).fields().terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlySegmentReader(r).fields().terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).fields().terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).fields().terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).fields().terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testStressAdvance().mjava","sourceNew":"  public void testStressAdvance() throws Exception {\n    int numIters = TEST_NIGHTLY ? 3 : 1;\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStressAdvance() throws Exception {\n    for(int iter=0;iter<3;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      final Set<Integer> aDocs = new HashSet<>();\n      final Document doc = new Document();\n      final Field f = newStringField(\"field\", \"\", Field.Store.NO);\n      doc.add(f);\n      final Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n      doc.add(idField);\n      int num = atLeast(4097);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: numDocs=\" + num);\n      }\n      for(int id=0;id<num;id++) {\n        if (random().nextInt(4) == 3) {\n          f.setStringValue(\"a\");\n          aDocs.add(id);\n        } else {\n          f.setStringValue(\"b\");\n        }\n        idField.setStringValue(\"\"+id);\n        w.addDocument(doc);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: doc upto \" + id);\n        }\n      }\n\n      w.forceMerge(1);\n\n      final List<Integer> aDocIDs = new ArrayList<>();\n      final List<Integer> bDocIDs = new ArrayList<>();\n\n      final DirectoryReader r = w.getReader();\n      final int[] idToDocID = new int[r.maxDoc()];\n      for(int docID=0;docID<idToDocID.length;docID++) {\n        int id = Integer.parseInt(r.document(docID).get(\"id\"));\n        if (aDocs.contains(id)) {\n          aDocIDs.add(docID);\n        } else {\n          bDocIDs.add(docID);\n        }\n      }\n      final TermsEnum te = getOnlyLeafReader(r).terms(\"field\").iterator();\n      \n      PostingsEnum de = null;\n      for(int iter2=0;iter2<10;iter2++) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: iter=\" + iter + \" iter2=\" + iter2);\n        }\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"a\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, aDocIDs);\n\n        assertEquals(TermsEnum.SeekStatus.FOUND, te.seekCeil(new BytesRef(\"b\")));\n        de = TestUtil.docs(random(), te, de, PostingsEnum.NONE);\n        testOne(de, bDocIDs);\n      }\n\n      w.close();\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"28288370235ed02234a64753cdbf0c6ec096304a":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","02331260bb246364779cb6f04919ca47900d01bb"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","02331260bb246364779cb6f04919ca47900d01bb"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["28288370235ed02234a64753cdbf0c6ec096304a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"02331260bb246364779cb6f04919ca47900d01bb":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"28288370235ed02234a64753cdbf0c6ec096304a":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}