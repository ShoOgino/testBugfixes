{"path":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testMerge().mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'policies': {\" +\n        \"    'default': {\" +\n        \"      'conditions': [\" +\n        \"        {  replica:'#ANY' , 'nodeRole': '!overseer'},\" +\n        \"        { 'replica': '<2', 'shard': '#EACH', node:'#ANY'}\" +\n        \"      ],\" +\n        \"      'preferences':[\" +\n        \"        {'maximize': 'freedisk', 'precision':50},\" +\n        \"      {'minimize': 'replica', 'precision':50}]\" +\n        \"    },\" +\n        \"    'policy1': {\" +\n        \"      'conditions': [\" +\n        \"        { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"        { 'replica': '<2', 'shard': '#ANY' , node: '#ANY'},\" +\n        \"        { 'replica': '<2', 'shard':'#EACH', 'rack': 'rack1' }\" +\n        \"      ], preferences: [{maximize:freedisk, precision:75}]} } }\");\n    map = (Map) map.get(\"policies\");\n    map = Policy.mergePolicies(\"mycoll\", (Map<String, Object>) map.get(\"policy1\"), (Map<String, Object>) map.get(\"default\"));\n    assertEquals(((List) map.get(\"conditions\")).size(), 4);\n    assertEquals(((List) map.get(\"preferences\")).size(), 2);\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[0]/replica\")), \"1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/replica\")), \"<2\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/shard\")), \"#ANY\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[2]/rack\")), \"rack1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[3]/nodeRole\")), \"!overseer\");\n\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/maximize\")), \"freedisk\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/precision\")), \"75\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[1]/precision\")), \"50\");\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'policies': {\" +\n        \"    'default': {\" +\n        \"      'conditions': [\" +\n        \"        {  replica:'#ANY' , 'nodeRole': '!overseer'},\" +\n        \"        { 'replica': '<2', 'shard': '#EACH', node:'#ANY'}\" +\n        \"      ],\" +\n        \"      'preferences':[\" +\n        \"        {'maximize': 'freedisk', 'precision':50},\" +\n        \"      {'minimize': 'replica', 'precision':50}]\" +\n        \"    },\" +\n        \"    'policy1': {\" +\n        \"      'conditions': [\" +\n        \"        { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"        { 'replica': '<2', 'shard': '#ANY' , node: '#ANY'},\" +\n        \"        { 'replica': '<2', 'shard':'#EACH', 'rack': 'rack1' }\" +\n        \"      ], preferences: [{maximize:freedisk, precision:75}]} } }\");\n    map = (Map) map.get(\"policies\");\n    map = Policy.mergePolicies(\"mycoll\", (Map<String, Object>) map.get(\"policy1\"), (Map<String, Object>) map.get(\"default\"));\n    assertEquals(((List) map.get(\"conditions\")).size(), 4);\n    assertEquals(((List) map.get(\"preferences\")).size(), 2);\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[0]/replica\")), \"1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/replica\")), \"<2\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/shard\")), \"#ANY\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[2]/rack\")), \"rack1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[3]/nodeRole\")), \"!overseer\");\n\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/maximize\")), \"freedisk\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/precision\")), \"75\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[1]/precision\")), \"50\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'policies': {\" +\n        \"    'default': {\" +\n        \"      'conditions': [\" +\n        \"        {  replica:'#ANY' , 'nodeRole': '!overseer'},\" +\n        \"        { 'replica': '<2', 'shard': '#EACH', node:'#ANY'}\" +\n        \"      ],\" +\n        \"      'preferences':[\" +\n        \"        {'maximize': 'freedisk', 'precision':50},\" +\n        \"      {'minimize': 'replica', 'precision':50}]\" +\n        \"    },\" +\n        \"    'policy1': {\" +\n        \"      'conditions': [\" +\n        \"        { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"        { 'replica': '<2', 'shard': '#ANY' , node: '#ANY'},\" +\n        \"        { 'replica': '<2', 'shard':'#EACH', 'rack': 'rack1' }\" +\n        \"      ], preferences: [{maximize:freedisk, precision:75}]} } }\");\n    map = (Map) map.get(\"policies\");\n    map = Policy.mergePolicies(\"mycoll\", (Map<String, Object>) map.get(\"policy1\"), (Map<String, Object>) map.get(\"default\"));\n    assertEquals(((List) map.get(\"conditions\")).size(), 4);\n    assertEquals(((List) map.get(\"preferences\")).size(), 2);\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[0]/replica\")), \"1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/replica\")), \"<2\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/shard\")), \"#ANY\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[2]/rack\")), \"rack1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[3]/nodeRole\")), \"!overseer\");\n\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/maximize\")), \"freedisk\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/precision\")), \"75\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[1]/precision\")), \"50\");\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'policies': {\" +\n        \"    'default': {\" +\n        \"      'conditions': [\" +\n        \"        {  replica:'#ANY' , 'nodeRole': '!overseer'},\" +\n        \"        { 'replica': '<2', 'shard': '#EACH', node:'#ANY'}\" +\n        \"      ],\" +\n        \"      'preferences':[\" +\n        \"        {'maximize': 'freedisk', 'precision':50},\" +\n        \"      {'minimize': 'replica', 'precision':50}]\" +\n        \"    },\" +\n        \"    'policy1': {\" +\n        \"      'conditions': [\" +\n        \"        { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"        { 'replica': '<2', 'shard': '#ANY' , node: '#ANY'},\" +\n        \"        { 'replica': '<2', 'shard':'#EACH', 'rack': 'rack1' }\" +\n        \"      ], preferences: [{maximize:freedisk, precision:75}]} } }\");\n    map = (Map) map.get(\"policies\");\n    map = Policy.mergePolicies(\"mycoll\", (Map<String, Object>) map.get(\"policy1\"), (Map<String, Object>) map.get(\"default\"));\n    assertEquals(((List) map.get(\"conditions\")).size(), 4);\n    assertEquals(((List) map.get(\"preferences\")).size(), 2);\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[0]/replica\")), \"1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/replica\")), \"<2\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/shard\")), \"#ANY\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[2]/rack\")), \"rack1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[3]/nodeRole\")), \"!overseer\");\n\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/maximize\")), \"freedisk\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/precision\")), \"75\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[1]/precision\")), \"50\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}