{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart);\n      return termsEnum;\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","date":1344608180,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets);\n      return termsEnum;\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart);\n      return termsEnum;\n    }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets, storePayloads);\n      return termsEnum;\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets, storePayloads);\n      return termsEnum;\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets, storePayloads);\n      return termsEnum;\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets, storePayloads);\n      return termsEnum;\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets, storePayloads);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets, storePayloads);\n      return termsEnum;\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      TVTermsEnum termsEnum;\n      if (reuse instanceof TVTermsEnum) {\n        termsEnum = (TVTermsEnum) reuse;\n        if (!termsEnum.canReuse(tvf)) {\n          termsEnum = new TVTermsEnum();\n        }\n      } else {\n        termsEnum = new TVTermsEnum();\n      }\n      termsEnum.reset(numTerms, tvfFPStart, storePositions, storeOffsets, storePayloads);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["0935c850ea562932997b72c69d93e345f21d7f45"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0935c850ea562932997b72c69d93e345f21d7f45":["5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0935c850ea562932997b72c69d93e345f21d7f45","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["0935c850ea562932997b72c69d93e345f21d7f45"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4cc45c615dbb82bf79d5f9550286098367874fbf","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}