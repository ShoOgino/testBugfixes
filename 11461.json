{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","sourceNew":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) throws IOException {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","sourceOld":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) throws IOException {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","sourceNew":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","sourceOld":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) throws IOException {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","bugFix":["4e622d1d7e4496e3a8c1709c84e5be91ced69889"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","sourceNew":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","sourceOld":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) throws IOException {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","sourceNew":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","sourceOld":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"97d4692d0c601ff773f0a2231967312428a904e4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97d4692d0c601ff773f0a2231967312428a904e4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","97d4692d0c601ff773f0a2231967312428a904e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}