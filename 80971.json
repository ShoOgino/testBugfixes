{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f354f2175f861ee625bb3c9572d53b77cd8545","date":1508405819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<String> collections = new HashSet<>();\n          // XXX improve this when AddReplicaSuggester supports coll_shard hint\n          hotReplicas.forEach(r -> collections.add(r.getCollection()));\n          hotShards.forEach((coll, shards) -> collections.add(coll));\n          hotCollections.forEach((coll, rate) -> collections.add(coll));\n          for (String coll : collections) {\n            suggester = suggester.hint(Suggester.Hint.COLL, coll);\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost and searchRate, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<Pair> collectionShards = new HashSet<>();\n          hotShards.forEach((coll, shards) -> shards.forEach((s, r) -> collectionShards.add(new Pair(coll, s))));\n          for (Pair<String, String> colShard : collectionShards) {\n            suggester = suggester.hint(Suggester.Hint.COLL_SHARD, colShard);\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost and searchRate, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<String> collections = new HashSet<>();\n          // XXX improve this when AddReplicaSuggester supports coll_shard hint\n          hotReplicas.forEach(r -> collections.add(r.getCollection()));\n          hotShards.forEach((coll, shards) -> collections.add(coll));\n          hotCollections.forEach((coll, rate) -> collections.add(coll));\n          for (String coll : collections) {\n            suggester = suggester.hint(Suggester.Hint.COLL, coll);\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost and searchRate, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35a328e6f64355319d0b316956c260b0be251aca","date":1513957730,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<Pair> collectionShards = new HashSet<>();\n          hotShards.forEach((coll, shards) -> shards.forEach((s, r) -> collectionShards.add(new Pair(coll, s))));\n          for (Pair<String, String> colShard : collectionShards) {\n            suggester = suggester.hint(Suggester.Hint.COLL_SHARD, colShard);\n          }\n        }\n        break;\n      case METRIC:\n        Map<String, Number> sourceNodes = (Map<String, Number>) event.getProperty(AutoScalingParams.NODE);\n        String collection = (String) event.getProperty(AutoScalingParams.COLLECTION);\n        String shard = (String) event.getProperty(AutoScalingParams.SHARD);\n        String preferredOp = (String) event.getProperty(PREFERRED_OP);\n        if (sourceNodes.isEmpty()) {\n          log.warn(\"No nodes reported in event: \" + event);\n          return NoneSuggester.INSTANCE;\n        }\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp == null ? CollectionParams.CollectionAction.MOVEREPLICA.toLower() : preferredOp);\n        suggester = session.getSuggester(action);\n        for (String node : sourceNodes.keySet()) {\n          suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n        }\n        if (collection != null) {\n          if (shard == null) {\n            suggester = suggester.hint(Suggester.Hint.COLL, collection);\n          } else {\n            suggester = suggester.hint(Suggester.Hint.COLL_SHARD, new Pair(collection, shard));\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<Pair> collectionShards = new HashSet<>();\n          hotShards.forEach((coll, shards) -> shards.forEach((s, r) -> collectionShards.add(new Pair(coll, s))));\n          for (Pair<String, String> colShard : collectionShards) {\n            suggester = suggester.hint(Suggester.Hint.COLL_SHARD, colShard);\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost and searchRate, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<Pair> collectionShards = new HashSet<>();\n          hotShards.forEach((coll, shards) -> shards.forEach((s, r) -> collectionShards.add(new Pair(coll, s))));\n          for (Pair<String, String> colShard : collectionShards) {\n            suggester = suggester.hint(Suggester.Hint.COLL_SHARD, colShard);\n          }\n        }\n        break;\n      case METRIC:\n        Map<String, Number> sourceNodes = (Map<String, Number>) event.getProperty(AutoScalingParams.NODE);\n        String collection = (String) event.getProperty(AutoScalingParams.COLLECTION);\n        String shard = (String) event.getProperty(AutoScalingParams.SHARD);\n        String preferredOp = (String) event.getProperty(PREFERRED_OP);\n        if (sourceNodes.isEmpty()) {\n          log.warn(\"No nodes reported in event: \" + event);\n          return NoneSuggester.INSTANCE;\n        }\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp == null ? CollectionParams.CollectionAction.MOVEREPLICA.toLower() : preferredOp);\n        suggester = session.getSuggester(action);\n        for (String node : sourceNodes.keySet()) {\n          suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n        }\n        if (collection != null) {\n          if (shard == null) {\n            suggester = suggester.hint(Suggester.Hint.COLL, collection);\n          } else {\n            suggester = suggester.hint(Suggester.Hint.COLL_SHARD, new Pair(collection, shard));\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<Pair> collectionShards = new HashSet<>();\n          hotShards.forEach((coll, shards) -> shards.forEach((s, r) -> collectionShards.add(new Pair(coll, s))));\n          for (Pair<String, String> colShard : collectionShards) {\n            suggester = suggester.hint(Suggester.Hint.COLL_SHARD, colShard);\n          }\n        }\n        break;\n      case METRIC:\n        Map<String, Number> sourceNodes = (Map<String, Number>) event.getProperty(AutoScalingParams.NODE);\n        String collection = (String) event.getProperty(AutoScalingParams.COLLECTION);\n        String shard = (String) event.getProperty(AutoScalingParams.SHARD);\n        String preferredOp = (String) event.getProperty(PREFERRED_OP);\n        if (sourceNodes.isEmpty()) {\n          log.warn(\"No nodes reported in event: \" + event);\n          return NoneSuggester.INSTANCE;\n        }\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp == null ? CollectionParams.CollectionAction.MOVEREPLICA.toLower() : preferredOp);\n        suggester = session.getSuggester(action);\n        for (String node : sourceNodes.keySet()) {\n          suggester = suggester.hint(Suggester.Hint.SRC_NODE, node);\n        }\n        if (collection != null) {\n          if (shard == null) {\n            suggester = suggester.hint(Suggester.Hint.COLL, collection);\n          } else {\n            suggester = suggester.hint(Suggester.Hint.COLL_SHARD, new Pair(collection, shard));\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3102a9c9032617766c43974e7ec8b7a3148fb91","date":1519273763,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP);\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c252a8291191876badb5f6235f62895d6e36b33e","date":1519309955,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP);\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dec9417ffbde1f9d7317d78c151248cb8f6af88","date":1520019381,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP);\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b6486136ec2c4fa54e33c828abf690144736bd8","date":1520351825,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP);\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(\"unsupportedOps\", k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(\"unsupportedOps\", k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"35a328e6f64355319d0b316956c260b0be251aca":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["6b6486136ec2c4fa54e33c828abf690144736bd8","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["c252a8291191876badb5f6235f62895d6e36b33e"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["35a328e6f64355319d0b316956c260b0be251aca","d9ccfe45460d496c5e5e1b70396521dac842d966"],"c3f354f2175f861ee625bb3c9572d53b77cd8545":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["6b6486136ec2c4fa54e33c828abf690144736bd8"],"6b6486136ec2c4fa54e33c828abf690144736bd8":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"c252a8291191876badb5f6235f62895d6e36b33e":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["35a328e6f64355319d0b316956c260b0be251aca"]},"commit2Childs":{"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"35a328e6f64355319d0b316956c260b0be251aca":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["6b6486136ec2c4fa54e33c828abf690144736bd8"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"c3f354f2175f861ee625bb3c9572d53b77cd8545":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"6b6486136ec2c4fa54e33c828abf690144736bd8":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"c252a8291191876badb5f6235f62895d6e36b33e":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["35a328e6f64355319d0b316956c260b0be251aca"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["c252a8291191876badb5f6235f62895d6e36b33e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}