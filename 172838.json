{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(String,Replica,boolean).mjava","commits":[{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(String,Replica,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(String,ReplicaInfo,boolean).mjava","sourceNew":"  /**\n   * Add a replica. Note that all details of the replica must be present here, including\n   * node, coreNodeName and SolrCore name.\n   * @param nodeId node id where the replica will be added\n   * @param replicaInfo replica info\n   * @param runLeaderElection if true then run a leader election after adding the replica.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void simAddReplica(String nodeId, Replica replicaInfo, boolean runLeaderElection) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    try {\n\n      // make sure SolrCore name is unique across cluster and coreNodeName within collection\n      for (Map.Entry<String, List<Replica>> e : nodeReplicaMap.entrySet()) {\n        final List<Replica> replicas = e.getValue();\n        synchronized (replicas) {\n          for (Replica ri : replicas) {\n            if (ri.getCoreName().equals(replicaInfo.getCoreName())) {\n              throw new Exception(\"Duplicate SolrCore name for existing=\" + ri + \" on node \" + e.getKey() + \" and new=\" + replicaInfo);\n            }\n            if (ri.getName().equals(replicaInfo.getName()) && ri.getCollection().equals(replicaInfo.getCollection())) {\n              throw new Exception(\"Duplicate coreNode name for existing=\" + ri + \" on node \" + e.getKey() + \" and new=\" + replicaInfo);\n            }\n          }\n        }\n      }\n      if (!liveNodes.contains(nodeId)) {\n        throw new Exception(\"Target node \" + nodeId + \" is not live: \" + liveNodes);\n      }\n      // verify info\n      if (replicaInfo.getCoreName() == null) {\n        throw new Exception(\"Missing core: \" + replicaInfo);\n      }\n      // XXX replica info is not supposed to have this as a variable\n      replicaInfo.getProperties().remove(ZkStateReader.SHARD_ID_PROP);\n      if (replicaInfo.getName() == null) {\n        throw new Exception(\"Missing name: \" + replicaInfo);\n      }\n      if (replicaInfo.getNodeName() == null) {\n        throw new Exception(\"Missing node: \" + replicaInfo);\n      }\n      if (!replicaInfo.getNodeName().equals(nodeId)) {\n        throw new Exception(\"Wrong node (not \" + nodeId + \"): \" + replicaInfo);\n      }\n      \n      opDelay(replicaInfo.getCollection(), CollectionParams.CollectionAction.ADDREPLICA.name());\n\n      // mark replica as active\n      replicaInfo.setState(Replica.State.ACTIVE);\n      // add a property expected in Policy calculations, if missing\n      if (replicaInfo.get(Type.CORE_IDX.metricsAttribute) == null) {\n        replicaInfo.getProperties().put(Type.CORE_IDX.metricsAttribute, new AtomicLong(SimCloudManager.DEFAULT_IDX_SIZE_BYTES));\n        replicaInfo.getProperties().put(Variable.coreidxsize,\n            new AtomicDouble((Double)Type.CORE_IDX.convertVal(SimCloudManager.DEFAULT_IDX_SIZE_BYTES)));\n      }\n      nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN).add(replicaInfo);\n      colShardReplicaMap.computeIfAbsent(replicaInfo.getCollection(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(replicaInfo.getShard(), s -> new ArrayList<>())\n          .add(replicaInfo);\n\n      Map<String, Object> values = cloudManager.getSimNodeStateProvider().simGetAllNodeValues()\n          .computeIfAbsent(nodeId, id -> new ConcurrentHashMap<>(SimCloudManager.createNodeValues(id)));\n      // update the number of cores and freedisk in node values\n      Number cores = (Number)values.get(ImplicitSnitch.CORES);\n      if (cores == null) {\n        cores = 0;\n      }\n      cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores.intValue() + 1);\n      Number disk = (Number)values.get(ImplicitSnitch.DISK);\n      if (disk == null) {\n        throw new Exception(\"Missing '\" + ImplicitSnitch.DISK + \"' in node metrics for node \" + nodeId);\n        //disk = SimCloudManager.DEFAULT_FREE_DISK;\n      }\n      long replicaSize = ((Number)replicaInfo.get(Type.CORE_IDX.metricsAttribute)).longValue();\n      Number replicaSizeGB = (Number)Type.CORE_IDX.convertVal(replicaSize);\n      cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk.doubleValue() - replicaSizeGB.doubleValue());\n      // fake metrics\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, replicaInfo.getCollection(),\n          replicaInfo.getShard(),\n          Utils.parseMetricsReplicaName(replicaInfo.getCollection(), replicaInfo.getCoreName()));\n      cloudManager.getMetricManager().registry(registry).counter(\"UPDATE./update.requests\");\n      cloudManager.getMetricManager().registry(registry).counter(\"QUERY./select.requests\");\n      cloudManager.getMetricManager().registerGauge(null, registry,\n          () -> replicaSize, \"\", true, Type.CORE_IDX.metricsAttribute);\n      // at this point nuke our cached DocCollection state\n      collectionsStatesRef.get(replicaInfo.getCollection()).invalidate();\n      log.trace(\"-- simAddReplica {}\", replicaInfo);\n      if (runLeaderElection) {\n        simRunLeaderElection(replicaInfo.getCollection(), replicaInfo.getShard(), true);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a replica. Note that all details of the replica must be present here, including\n   * node, coreNodeName and SolrCore name.\n   * @param nodeId node id where the replica will be added\n   * @param replicaInfo replica info\n   * @param runLeaderElection if true then run a leader election after adding the replica.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void simAddReplica(String nodeId, ReplicaInfo replicaInfo, boolean runLeaderElection) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    try {\n\n      // make sure SolrCore name is unique across cluster and coreNodeName within collection\n      for (Map.Entry<String, List<ReplicaInfo>> e : nodeReplicaMap.entrySet()) {\n        final List<ReplicaInfo> replicas = e.getValue();\n        synchronized (replicas) {\n          for (ReplicaInfo ri : replicas) {\n            if (ri.getCore().equals(replicaInfo.getCore())) {\n              throw new Exception(\"Duplicate SolrCore name for existing=\" + ri + \" on node \" + e.getKey() + \" and new=\" + replicaInfo);\n            }\n            if (ri.getName().equals(replicaInfo.getName()) && ri.getCollection().equals(replicaInfo.getCollection())) {\n              throw new Exception(\"Duplicate coreNode name for existing=\" + ri + \" on node \" + e.getKey() + \" and new=\" + replicaInfo);\n            }\n          }\n        }\n      }\n      if (!liveNodes.contains(nodeId)) {\n        throw new Exception(\"Target node \" + nodeId + \" is not live: \" + liveNodes);\n      }\n      // verify info\n      if (replicaInfo.getCore() == null) {\n        throw new Exception(\"Missing core: \" + replicaInfo);\n      }\n      // XXX replica info is not supposed to have this as a variable\n      replicaInfo.getVariables().remove(ZkStateReader.SHARD_ID_PROP);\n      if (replicaInfo.getName() == null) {\n        throw new Exception(\"Missing name: \" + replicaInfo);\n      }\n      if (replicaInfo.getNode() == null) {\n        throw new Exception(\"Missing node: \" + replicaInfo);\n      }\n      if (!replicaInfo.getNode().equals(nodeId)) {\n        throw new Exception(\"Wrong node (not \" + nodeId + \"): \" + replicaInfo);\n      }\n      \n      opDelay(replicaInfo.getCollection(), CollectionParams.CollectionAction.ADDREPLICA.name());\n\n      // mark replica as active\n      replicaInfo.getVariables().put(ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      // add a property expected in Policy calculations, if missing\n      if (replicaInfo.getVariable(Type.CORE_IDX.metricsAttribute) == null) {\n        replicaInfo.getVariables().put(Type.CORE_IDX.metricsAttribute, new AtomicLong(SimCloudManager.DEFAULT_IDX_SIZE_BYTES));\n        replicaInfo.getVariables().put(Variable.coreidxsize,\n            new AtomicDouble((Double)Type.CORE_IDX.convertVal(SimCloudManager.DEFAULT_IDX_SIZE_BYTES)));\n      }\n      nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN).add(replicaInfo);\n      colShardReplicaMap.computeIfAbsent(replicaInfo.getCollection(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(replicaInfo.getShard(), s -> new ArrayList<>())\n          .add(replicaInfo);\n\n      Map<String, Object> values = cloudManager.getSimNodeStateProvider().simGetAllNodeValues()\n          .computeIfAbsent(nodeId, id -> new ConcurrentHashMap<>(SimCloudManager.createNodeValues(id)));\n      // update the number of cores and freedisk in node values\n      Number cores = (Number)values.get(ImplicitSnitch.CORES);\n      if (cores == null) {\n        cores = 0;\n      }\n      cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores.intValue() + 1);\n      Number disk = (Number)values.get(ImplicitSnitch.DISK);\n      if (disk == null) {\n        throw new Exception(\"Missing '\" + ImplicitSnitch.DISK + \"' in node metrics for node \" + nodeId);\n        //disk = SimCloudManager.DEFAULT_FREE_DISK;\n      }\n      long replicaSize = ((Number)replicaInfo.getVariable(Type.CORE_IDX.metricsAttribute)).longValue();\n      Number replicaSizeGB = (Number)Type.CORE_IDX.convertVal(replicaSize);\n      cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk.doubleValue() - replicaSizeGB.doubleValue());\n      // fake metrics\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, replicaInfo.getCollection(),\n          replicaInfo.getShard(),\n          Utils.parseMetricsReplicaName(replicaInfo.getCollection(), replicaInfo.getCore()));\n      cloudManager.getMetricManager().registry(registry).counter(\"UPDATE./update.requests\");\n      cloudManager.getMetricManager().registry(registry).counter(\"QUERY./select.requests\");\n      cloudManager.getMetricManager().registerGauge(null, registry,\n          () -> replicaSize, \"\", true, Type.CORE_IDX.metricsAttribute);\n      // at this point nuke our cached DocCollection state\n      collectionsStatesRef.get(replicaInfo.getCollection()).invalidate();\n      log.trace(\"-- simAddReplica {}\", replicaInfo);\n      if (runLeaderElection) {\n        simRunLeaderElection(replicaInfo.getCollection(), replicaInfo.getShard(), true);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(String,Replica,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a replica. Note that all details of the replica must be present here, including\n   * node, coreNodeName and SolrCore name.\n   * @param nodeId node id where the replica will be added\n   * @param replicaInfo replica info\n   * @param runLeaderElection if true then run a leader election after adding the replica.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void simAddReplica(String nodeId, Replica replicaInfo, boolean runLeaderElection) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    try {\n\n      // make sure SolrCore name is unique across cluster and coreNodeName within collection\n      for (Map.Entry<String, List<Replica>> e : nodeReplicaMap.entrySet()) {\n        final List<Replica> replicas = e.getValue();\n        synchronized (replicas) {\n          for (Replica ri : replicas) {\n            if (ri.getCoreName().equals(replicaInfo.getCoreName())) {\n              throw new Exception(\"Duplicate SolrCore name for existing=\" + ri + \" on node \" + e.getKey() + \" and new=\" + replicaInfo);\n            }\n            if (ri.getName().equals(replicaInfo.getName()) && ri.getCollection().equals(replicaInfo.getCollection())) {\n              throw new Exception(\"Duplicate coreNode name for existing=\" + ri + \" on node \" + e.getKey() + \" and new=\" + replicaInfo);\n            }\n          }\n        }\n      }\n      if (!liveNodes.contains(nodeId)) {\n        throw new Exception(\"Target node \" + nodeId + \" is not live: \" + liveNodes);\n      }\n      // verify info\n      if (replicaInfo.getCoreName() == null) {\n        throw new Exception(\"Missing core: \" + replicaInfo);\n      }\n      // XXX replica info is not supposed to have this as a variable\n      replicaInfo.getProperties().remove(ZkStateReader.SHARD_ID_PROP);\n      if (replicaInfo.getName() == null) {\n        throw new Exception(\"Missing name: \" + replicaInfo);\n      }\n      if (replicaInfo.getNodeName() == null) {\n        throw new Exception(\"Missing node: \" + replicaInfo);\n      }\n      if (!replicaInfo.getNodeName().equals(nodeId)) {\n        throw new Exception(\"Wrong node (not \" + nodeId + \"): \" + replicaInfo);\n      }\n      \n      opDelay(replicaInfo.getCollection(), CollectionParams.CollectionAction.ADDREPLICA.name());\n\n      // mark replica as active\n      replicaInfo.setState(Replica.State.ACTIVE);\n      // add a property expected in Policy calculations, if missing\n      if (replicaInfo.get(Type.CORE_IDX.metricsAttribute) == null) {\n        replicaInfo.getProperties().put(Type.CORE_IDX.metricsAttribute, new AtomicLong(SimCloudManager.DEFAULT_IDX_SIZE_BYTES));\n        replicaInfo.getProperties().put(Variable.coreidxsize,\n            new AtomicDouble((Double)Type.CORE_IDX.convertVal(SimCloudManager.DEFAULT_IDX_SIZE_BYTES)));\n      }\n      nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN).add(replicaInfo);\n      colShardReplicaMap.computeIfAbsent(replicaInfo.getCollection(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(replicaInfo.getShard(), s -> new ArrayList<>())\n          .add(replicaInfo);\n\n      Map<String, Object> values = cloudManager.getSimNodeStateProvider().simGetAllNodeValues()\n          .computeIfAbsent(nodeId, id -> new ConcurrentHashMap<>(SimCloudManager.createNodeValues(id)));\n      // update the number of cores and freedisk in node values\n      Number cores = (Number)values.get(ImplicitSnitch.CORES);\n      if (cores == null) {\n        cores = 0;\n      }\n      cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores.intValue() + 1);\n      Number disk = (Number)values.get(ImplicitSnitch.DISK);\n      if (disk == null) {\n        throw new Exception(\"Missing '\" + ImplicitSnitch.DISK + \"' in node metrics for node \" + nodeId);\n        //disk = SimCloudManager.DEFAULT_FREE_DISK;\n      }\n      long replicaSize = ((Number)replicaInfo.get(Type.CORE_IDX.metricsAttribute)).longValue();\n      Number replicaSizeGB = (Number)Type.CORE_IDX.convertVal(replicaSize);\n      cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk.doubleValue() - replicaSizeGB.doubleValue());\n      // fake metrics\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, replicaInfo.getCollection(),\n          replicaInfo.getShard(),\n          Utils.parseMetricsReplicaName(replicaInfo.getCollection(), replicaInfo.getCoreName()));\n      cloudManager.getMetricManager().registry(registry).counter(\"UPDATE./update.requests\");\n      cloudManager.getMetricManager().registry(registry).counter(\"QUERY./select.requests\");\n      cloudManager.getMetricManager().registerGauge(null, registry,\n          () -> replicaSize, \"\", true, Type.CORE_IDX.metricsAttribute);\n      // at this point nuke our cached DocCollection state\n      collectionsStatesRef.get(replicaInfo.getCollection()).invalidate();\n      log.trace(\"-- simAddReplica {}\", replicaInfo);\n      if (runLeaderElection) {\n        simRunLeaderElection(replicaInfo.getCollection(), replicaInfo.getShard(), true);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}