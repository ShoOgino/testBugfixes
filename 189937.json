{"path":"dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet#hasInheritedJavadocs(Element).mjava","commits":[{"id":"0818fc555aefcb0330785d4ad1c1487980a0b04b","date":1599049757,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet#hasInheritedJavadocs(Element).mjava","pathOld":"/dev/null","sourceNew":"  private boolean hasInheritedJavadocs(Element element) {\n    boolean hasOverrides = element.getAnnotationMirrors().stream()\n        .anyMatch(ann -> ann.getAnnotationType().toString().equals(Override.class.getName()));\n\n    if (hasOverrides) {\n      // If an element has explicit @Overrides annotation, assume it does\n      // have inherited javadocs somewhere.\n      reporter.print(Diagnostic.Kind.NOTE, element, \"javadoc empty but @Override declared, skipping.\");\n      return true;\n    }\n\n    // Check for methods up the types tree.\n    if (element instanceof ExecutableElement) {\n      ExecutableElement thisMethod = (ExecutableElement) element;\n      Iterable<Element> superTypes =\n          () -> superTypeForInheritDoc(thisMethod.getEnclosingElement()).iterator();\n\n      for (Element sup : superTypes) {\n        for (ExecutableElement supMethod : ElementFilter.methodsIn(sup.getEnclosedElements())) {\n          TypeElement clazz = (TypeElement) thisMethod.getEnclosingElement();\n          if (elementUtils.overrides(thisMethod, supMethod, clazz)) {\n            // We could check supMethod for non-empty javadoc here. Don't know if this makes\n            // sense though as all methods will be verified in the end so it'd fail on the\n            // top of the hierarchy (if empty) anyway.\n            reporter.print(Diagnostic.Kind.NOTE, element, \"javadoc empty but method overrides another, skipping.\");\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0818fc555aefcb0330785d4ad1c1487980a0b04b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0818fc555aefcb0330785d4ad1c1487980a0b04b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0818fc555aefcb0330785d4ad1c1487980a0b04b"],"0818fc555aefcb0330785d4ad1c1487980a0b04b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}