{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequestForDBQ().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequestForDBQ().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequestForDBQ() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequestForDBQ().mjava","pathOld":"/dev/null","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequestForDBQ() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"601f914e4448cab7640fecfb5d15f8f2e2af0bf6","date":1508947828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequestForDBQ().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequestForDBQ().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequestForDBQ() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequestForDBQ() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":5,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequestForDBQ().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequestForDBQ().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<SolrCmdDistributor.Node> setupRequestForDBQ() {\n    List<SolrCmdDistributor.Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new SolrCmdDistributor.StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequestForDBQ() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","601f914e4448cab7640fecfb5d15f8f2e2af0bf6"],"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}