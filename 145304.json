{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A list of cluster policies was not found\");\n    }\n    List<Clause> cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A list of cluster policies was not found\");\n    }\n    List<Clause> cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","date":1501832890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::create).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::create).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::create).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::new).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::create).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::create).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetClusterPolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private AutoScalingConfig handleSetClusterPolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    List<Map<String, Object>> clusterPolicy = (List<Map<String, Object>>) op.getCommandData();\n    if (clusterPolicy == null || !(clusterPolicy instanceof List)) {\n      op.addError(\"set-cluster-policy expects an array of objects\");\n      return currentConfig;\n    }\n    List<Clause> cp = null;\n    try {\n      cp = clusterPolicy.stream().map(Clause::create).collect(Collectors.toList());\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    Policy p = currentConfig.getPolicy().withClusterPolicy(cp);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["560c18d71dad43d675158783c3840f8c80d6d39c","9837f40c922407d857991971de6def18eda0857b"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["9837f40c922407d857991971de6def18eda0857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["e3590d254d013266ac3849fae45974e747f7f576"],"9837f40c922407d857991971de6def18eda0857b":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3590d254d013266ac3849fae45974e747f7f576":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["560c18d71dad43d675158783c3840f8c80d6d39c","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","daa0f21a44e235a2299ea1fa913898b182dd7cce","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["e3590d254d013266ac3849fae45974e747f7f576"],"e3590d254d013266ac3849fae45974e747f7f576":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}