{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (!keywordAtt.isKeyword()) { // don't muck with already-keyworded terms\n        String stem = dictionary.get(termAtt.buffer(), 0, termAtt.length());\n        if (stem != null) {\n          termAtt.setEmpty().append(stem);\n          keywordAtt.setKeyword(true);\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (!keywordAtt.isKeyword()) { // don't muck with already-keyworded terms\n        String stem = dictionary.get(termAtt.buffer(), 0, termAtt.length());\n        if (stem != null) {\n          termAtt.setEmpty().append(stem);\n          keywordAtt.setKeyword(true);\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7476b30b7c03f9027676c9df28fda37629da2c97","date":1364206093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (!keywordAtt.isKeyword()) { // don't muck with already-keyworded terms\n        final BytesRef stem = stemmerOverrideMap.get(termAtt.buffer(), termAtt.length(), scratchArc, fstReader);\n        if (stem != null) {\n          final char[] buffer = spare.chars = termAtt.buffer();\n          UnicodeUtil.UTF8toUTF16(stem.bytes, stem.offset, stem.length, spare);\n          if (spare.chars != buffer) {\n            termAtt.copyBuffer(spare.chars, spare.offset, spare.length);\n          }\n          termAtt.setLength(spare.length);\n          keywordAtt.setKeyword(true);\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (!keywordAtt.isKeyword()) { // don't muck with already-keyworded terms\n        String stem = dictionary.get(termAtt.buffer(), 0, termAtt.length());\n        if (stem != null) {\n          termAtt.setEmpty().append(stem);\n          keywordAtt.setKeyword(true);\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a27e96c9573a4f9762f931a9b3221b75ed498b10","date":1364239820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (fstReader == null) {\n        // No overrides\n        return true;\n      }\n      if (!keywordAtt.isKeyword()) { // don't muck with already-keyworded terms\n        final BytesRef stem = stemmerOverrideMap.get(termAtt.buffer(), termAtt.length(), scratchArc, fstReader);\n        if (stem != null) {\n          final char[] buffer = spare.chars = termAtt.buffer();\n          UnicodeUtil.UTF8toUTF16(stem.bytes, stem.offset, stem.length, spare);\n          if (spare.chars != buffer) {\n            termAtt.copyBuffer(spare.chars, spare.offset, spare.length);\n          }\n          termAtt.setLength(spare.length);\n          keywordAtt.setKeyword(true);\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (!keywordAtt.isKeyword()) { // don't muck with already-keyworded terms\n        final BytesRef stem = stemmerOverrideMap.get(termAtt.buffer(), termAtt.length(), scratchArc, fstReader);\n        if (stem != null) {\n          final char[] buffer = spare.chars = termAtt.buffer();\n          UnicodeUtil.UTF8toUTF16(stem.bytes, stem.offset, stem.length, spare);\n          if (spare.chars != buffer) {\n            termAtt.copyBuffer(spare.chars, spare.offset, spare.length);\n          }\n          termAtt.setLength(spare.length);\n          keywordAtt.setKeyword(true);\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (fstReader == null) {\n        // No overrides\n        return true;\n      }\n      if (!keywordAtt.isKeyword()) { // don't muck with already-keyworded terms\n        final BytesRef stem = stemmerOverrideMap.get(termAtt.buffer(), termAtt.length(), scratchArc, fstReader);\n        if (stem != null) {\n          spare = ArrayUtil.grow(termAtt.buffer(), stem.length);\n          final int length = UnicodeUtil.UTF8toUTF16(stem, spare);\n          if (spare != termAtt.buffer()) {\n            termAtt.copyBuffer(spare, 0, length);\n          } else {\n            termAtt.setLength(length);\n          }\n          keywordAtt.setKeyword(true);\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (fstReader == null) {\n        // No overrides\n        return true;\n      }\n      if (!keywordAtt.isKeyword()) { // don't muck with already-keyworded terms\n        final BytesRef stem = stemmerOverrideMap.get(termAtt.buffer(), termAtt.length(), scratchArc, fstReader);\n        if (stem != null) {\n          final char[] buffer = spare.chars = termAtt.buffer();\n          UnicodeUtil.UTF8toUTF16(stem.bytes, stem.offset, stem.length, spare);\n          if (spare.chars != buffer) {\n            termAtt.copyBuffer(spare.chars, spare.offset, spare.length);\n          }\n          termAtt.setLength(spare.length);\n          keywordAtt.setKeyword(true);\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["7476b30b7c03f9027676c9df28fda37629da2c97"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7476b30b7c03f9027676c9df28fda37629da2c97":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a27e96c9573a4f9762f931a9b3221b75ed498b10":["7476b30b7c03f9027676c9df28fda37629da2c97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a27e96c9573a4f9762f931a9b3221b75ed498b10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7476b30b7c03f9027676c9df28fda37629da2c97"],"7476b30b7c03f9027676c9df28fda37629da2c97":["a27e96c9573a4f9762f931a9b3221b75ed498b10"],"a27e96c9573a4f9762f931a9b3221b75ed498b10":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}