{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#produceNextToken(Token).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#produceNextToken(Token).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#produceNextToken(Token).mjava","sourceNew":"  /**\n   * This method exists in order to avoid recursive calls to the method\n   * as the complexity of a fairly small matrix then easily would require\n   * a gigabyte sized stack per thread.\n   *\n   * @param reusableToken\n   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.\n   * @throws IOException\n   */\n  private Token produceNextToken(final Token reusableToken) throws IOException {\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && ((currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || (currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return getNextToken(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>(currentShingleLength);\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return request_next_token;\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        reusableToken.setTermBuffer(sb.toString());\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return request_next_token;\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rid of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token token : row.getTokens()) {\n              deletedColumnTokens.add(token);\n            }\n\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return request_next_token;\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return request_next_token;\n  }\n\n","sourceOld":"  /**\n   * This method exists in order to avoid recursive calls to the method\n   * as the complexity of a fairly small matrix then easily would require\n   * a gigabyte sized stack per thread.\n   *\n   * @param reusableToken\n   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.\n   * @throws IOException\n   */\n  private Token produceNextToken(final Token reusableToken) throws IOException {\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && ((currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || (currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return getNextToken(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>(currentShingleLength);\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return request_next_token;\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        reusableToken.setTermBuffer(sb.toString());\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return request_next_token;\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rid of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token token : row.getTokens()) {\n              deletedColumnTokens.add(token);\n            }\n\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return request_next_token;\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return request_next_token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#produceNextToken(Token).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#produceNextToken(Token).mjava","sourceNew":"  /**\n   * This method exists in order to avoid recursive calls to the method\n   * as the complexity of a fairly small matrix then easily would require\n   * a gigabyte sized stack per thread.\n   *\n   * @param reusableToken\n   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.\n   * @throws IOException\n   */\n  private Token produceNextToken(final Token reusableToken) throws IOException {\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && ((currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || (currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return getNextToken(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>(currentShingleLength);\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.length();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return request_next_token;\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.buffer(), 0, shingleToken.length());\n        }\n        reusableToken.setEmpty().append(sb);\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return request_next_token;\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rid of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token token : row.getTokens()) {\n              deletedColumnTokens.add(token);\n            }\n\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return request_next_token;\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return request_next_token;\n  }\n\n","sourceOld":"  /**\n   * This method exists in order to avoid recursive calls to the method\n   * as the complexity of a fairly small matrix then easily would require\n   * a gigabyte sized stack per thread.\n   *\n   * @param reusableToken\n   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.\n   * @throws IOException\n   */\n  private Token produceNextToken(final Token reusableToken) throws IOException {\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && ((currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || (currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return getNextToken(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>(currentShingleLength);\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return request_next_token;\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        reusableToken.setTermBuffer(sb.toString());\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return request_next_token;\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rid of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token token : row.getTokens()) {\n              deletedColumnTokens.add(token);\n            }\n\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return request_next_token;\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return request_next_token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacf7f8a9f6ea920c7ca39f86371d4e25397121b","date":1297761846,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#produceNextToken(Token).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method exists in order to avoid recursive calls to the method\n   * as the complexity of a fairly small matrix then easily would require\n   * a gigabyte sized stack per thread.\n   *\n   * @param reusableToken\n   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.\n   * @throws IOException\n   */\n  private Token produceNextToken(final Token reusableToken) throws IOException {\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && ((currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || (currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return getNextToken(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>(currentShingleLength);\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.length();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return request_next_token;\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.buffer(), 0, shingleToken.length());\n        }\n        reusableToken.setEmpty().append(sb);\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return request_next_token;\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rid of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token token : row.getTokens()) {\n              deletedColumnTokens.add(token);\n            }\n\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return request_next_token;\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return request_next_token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#produceNextToken(Token).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method exists in order to avoid recursive calls to the method\n   * as the complexity of a fairly small matrix then easily would require\n   * a gigabyte sized stack per thread.\n   *\n   * @param reusableToken\n   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.\n   * @throws IOException\n   */\n  private Token produceNextToken(final Token reusableToken) throws IOException {\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && ((currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || (currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return getNextToken(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>(currentShingleLength);\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.length();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return request_next_token;\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.buffer(), 0, shingleToken.length());\n        }\n        reusableToken.setEmpty().append(sb);\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return request_next_token;\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rid of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token token : row.getTokens()) {\n              deletedColumnTokens.add(token);\n            }\n\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return request_next_token;\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return request_next_token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#produceNextToken(Token).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method exists in order to avoid recursive calls to the method\n   * as the complexity of a fairly small matrix then easily would require\n   * a gigabyte sized stack per thread.\n   *\n   * @param reusableToken\n   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.\n   * @throws IOException\n   */\n  private Token produceNextToken(final Token reusableToken) throws IOException {\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && ((currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || (currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return getNextToken(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>(currentShingleLength);\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.length();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return request_next_token;\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.buffer(), 0, shingleToken.length());\n        }\n        reusableToken.setEmpty().append(sb);\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return request_next_token;\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rid of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token token : row.getTokens()) {\n              deletedColumnTokens.add(token);\n            }\n\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return request_next_token;\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return request_next_token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a7347509fad0711ac30cb15a746e9a3830a38ebd","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a7347509fad0711ac30cb15a746e9a3830a38ebd","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aacf7f8a9f6ea920c7ca39f86371d4e25397121b"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aacf7f8a9f6ea920c7ca39f86371d4e25397121b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}