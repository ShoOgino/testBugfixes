{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#toAutomaton(TokenStream).mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#toAutomaton(TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  private Automaton toAutomaton(TokenStream ts) throws IOException {\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PositionLengthAttribute posLenAtt = ts.addAttribute(PositionLengthAttribute.class);\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    ts.reset();\n    Automaton a = new Automaton();\n    int srcNode = -1;\n    int destNode = -1;\n    int state = a.createState();\n    while (ts.incrementToken()) {\n      assert termAtt.length() == 1;\n      char c = termAtt.charAt(0);\n      int posInc = posIncAtt.getPositionIncrement();\n      if (posInc != 0) {\n        srcNode += posInc;\n        while (state < srcNode) {\n          state = a.createState();\n        }\n      }\n      destNode = srcNode + posLenAtt.getPositionLength();\n      while (state < destNode) {\n        state = a.createState();\n      }\n      a.addTransition(srcNode, destNode, c);\n    }\n    ts.end();\n    ts.close();\n    a.finishState();\n    a.setAccept(destNode, true);\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#toAutomaton(TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  private Automaton toAutomaton(TokenStream ts) throws IOException {\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PositionLengthAttribute posLenAtt = ts.addAttribute(PositionLengthAttribute.class);\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    ts.reset();\n    Automaton a = new Automaton();\n    int srcNode = -1;\n    int destNode = -1;\n    int state = a.createState();\n    while (ts.incrementToken()) {\n      assert termAtt.length() == 1;\n      char c = termAtt.charAt(0);\n      int posInc = posIncAtt.getPositionIncrement();\n      if (posInc != 0) {\n        srcNode += posInc;\n        while (state < srcNode) {\n          state = a.createState();\n        }\n      }\n      destNode = srcNode + posLenAtt.getPositionLength();\n      while (state < destNode) {\n        state = a.createState();\n      }\n      a.addTransition(srcNode, destNode, c);\n    }\n    ts.end();\n    ts.close();\n    a.finishState();\n    a.setAccept(destNode, true);\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}