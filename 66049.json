{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","commits":[{"id":"df4ed22dc7b048a2e9efa6ee55cb84b9457e9ee5","date":1347730635,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex().mjava","sourceNew":"  void initIndex(boolean reload) {\n    try {\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        // to remove locks, the directory must already exist... so we create it\n        // if it didn't exist already...\n        Directory dir = directoryFactory.get(indexDir, getSolrConfig().indexConfig.lockType);\n        if (dir != null)  {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(logid + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\", indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid + \"Solr index directory '{}' is locked.  Throwing exception\", indexDir);\n              throw new LockObtainFailedException(\"Index locked for write for core \" + name);\n            }\n          }\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  void initIndex() {\n    try {\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime) {\n        // to remove locks, the directory must already exist... so we create it\n        // if it didn't exist already...\n        Directory dir = directoryFactory.get(indexDir, getSolrConfig().indexConfig.lockType);\n        if (dir != null)  {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(logid + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\", indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid + \"Solr index directory '{}' is locked.  Throwing exception\", indexDir);\n              throw new LockObtainFailedException(\"Index locked for write for core \" + name);\n            }\n          }\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) {\n    try {\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        // to remove locks, the directory must already exist... so we create it\n        // if it didn't exist already...\n        Directory dir = directoryFactory.get(indexDir, getSolrConfig().indexConfig.lockType);\n        if (dir != null)  {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(logid + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\", indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid + \"Solr index directory '{}' is locked.  Throwing exception\", indexDir);\n              throw new LockObtainFailedException(\"Index locked for write for core \" + name);\n            }\n          }\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0","058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) {\n    try {\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        // to remove locks, the directory must already exist... so we create it\n        // if it didn't exist already...\n        Directory dir = directoryFactory.get(indexDir, getSolrConfig().indexConfig.lockType);\n        if (dir != null)  {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(logid + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\", indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid + \"Solr index directory '{}' is locked.  Throwing exception\", indexDir);\n              throw new LockObtainFailedException(\"Index locked for write for core \" + name);\n            }\n          }\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"948cb7389da6d4f397f5a0f89caf885a9033c959","date":1362946471,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(new File(indexDir).getCanonicalPath());\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54f9a16329716fa08b653c53f1c3dfc6b284d2cc","date":1363905854,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec, false);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n            directoryFactory.release(dir);\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, schema, solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab20a04a303d3d2a5078076f4633e0482d643cc0","date":1398201811,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.shutdown();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.shutdown();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.shutdown();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fafd23b8e49a461cdbc22b302dfdea2f2a08d953","date":1415887806,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();              \n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              IndexWriter.unlock(dir);\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":["5c2336584348b3646859b03caea74ba6c89f49ab"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();              \n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();              \n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(\"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n\n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();              \n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0","ae1dfc6b5c606bdefacac904cca6ac5619c4d81e","877f1e09b9299ce0757f4d83768da944803baf04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n\n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n \n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n        \n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();              \n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n            \n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true, \n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"877f1e09b9299ce0757f4d83768da944803baf04","date":1433276115,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n\n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n\n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n\n\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077","9aea0485ecacb6734c17da2d02569816c23a69c1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0","date":1433439403,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n    boolean removeLocks = solrConfig.unlockOnStartup;\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n          getSolrConfig().indexConfig.lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          if (removeLocks) {\n            log.warn(\n                logid\n                    + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                indexDir);\n            dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();\n          } else {\n            log.error(logid\n                + \"Solr index directory '{}' is locked.  Throwing exception\",\n                indexDir);\n            throw new LockObtainFailedException(\n                \"Index locked for write for core \" + name);\n          }\n\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n              + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n      String indexDir = getNewIndexDir();\n      boolean indexExists = getDirectoryFactory().exists(indexDir);\n      boolean firstTime;\n      synchronized (SolrCore.class) {\n        firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n      }\n      boolean removeLocks = solrConfig.unlockOnStartup;\n\n      initIndexReaderFactory();\n\n      if (indexExists && firstTime && !reload) {\n\n        Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n            getSolrConfig().indexConfig.lockType);\n        try {\n          if (IndexWriter.isLocked(dir)) {\n            if (removeLocks) {\n              log.warn(\n                  logid\n                      + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                  indexDir);\n              dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();\n            } else {\n              log.error(logid\n                  + \"Solr index directory '{}' is locked.  Throwing exception\",\n                  indexDir);\n              throw new LockObtainFailedException(\n                  \"Index locked for write for core \" + name);\n            }\n\n          }\n        } finally {\n          directoryFactory.release(dir);\n        }\n      }\n\n      // Create the index if it doesn't exist.\n      if(!indexExists) {\n        log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n                + \" Creating new index...\");\n\n        SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                        getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n        writer.close();\n      }\n  }\n\n","bugFix":["f885550d27f2e8768dae49c3e1adf890f86f7988","d0ef034a4f10871667ae75181537775ddcf8ade4","0e74c023a740578ac4e079f01ded819fd6307c78","5c2336584348b3646859b03caea74ba6c89f49ab","0df4c5cd5eaf4742b3a39587e6de21a372bcb6fc","656ba78dd2c0e88d11623fc5bceca3ea217ce0b3","e22ffe8cc51a892ae103df018822d7873e901c2a","df4ed22dc7b048a2e9efa6ee55cb84b9457e9ee5","948cb7389da6d4f397f5a0f89caf885a9033c959","d9405f486872f1e416304dfe389741f4ee2f8a4d","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","db71c9bced2a5e90a7d21fa3ce2d105f60867412","08970e5b8411182a29412c177eff67ec1110095b","87d6953dbc5baae40e6e21efa735a75f85ac13f2","9aea0485ecacb6734c17da2d02569816c23a69c1","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":["ae1dfc6b5c606bdefacac904cca6ac5619c4d81e","ed32d8e4e6f80a018e7092cc35f204dcef1e87ec","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n          getSolrConfig().indexConfig.lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          log.error(logid\n              + \"Solr index directory '{}' is locked.  Throwing exception.\",\n              indexDir);\n          throw new LockObtainFailedException(\n              \"Index locked for write for core '\" + name +\n              \"'. Solr now longer supports forceful unlocking via 'unlockOnStartup'. Please verify locks manually!\");\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n              + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n    boolean removeLocks = solrConfig.unlockOnStartup;\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n          getSolrConfig().indexConfig.lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          if (removeLocks) {\n            log.warn(\n                logid\n                    + \"WARNING: Solr index directory '{}' is locked.  Unlocking...\",\n                indexDir);\n            dir.makeLock(IndexWriter.WRITE_LOCK_NAME).close();\n          } else {\n            log.error(logid\n                + \"Solr index directory '{}' is locked.  Throwing exception\",\n                indexDir);\n            throw new LockObtainFailedException(\n                \"Index locked for write for core \" + name);\n          }\n\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n              + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":null,"bugIntro":["ae1dfc6b5c606bdefacac904cca6ac5619c4d81e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae1dfc6b5c606bdefacac904cca6ac5619c4d81e","date":1440696940,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n              + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT,\n          getSolrConfig().indexConfig.lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          log.error(logid\n              + \"Solr index directory '{}' is locked.  Throwing exception.\",\n              indexDir);\n          throw new LockObtainFailedException(\n              \"Index locked for write for core '\" + name +\n              \"'. Solr now longer supports forceful unlocking via 'unlockOnStartup'. Please verify locks manually!\");\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n              + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0","618635065f043788c9e034f96ca5cd5cea1b4592","9aea0485ecacb6734c17da2d02569816c23a69c1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec","date":1457637589,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid+\"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n              + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"897721e7324f7b1722ba6c325683d4a53cf756e2","date":1472142878,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.debug(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.debug(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.debug(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (IndexWriter.isLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.warn(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean passOnPreviousState, boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !passOnPreviousState) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.debug(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories(reload);\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.debug(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"948cb7389da6d4f397f5a0f89caf885a9033c959":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"ae1dfc6b5c606bdefacac904cca6ac5619c4d81e":["618635065f043788c9e034f96ca5cd5cea1b4592"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d9405f486872f1e416304dfe389741f4ee2f8a4d","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"ab20a04a303d3d2a5078076f4633e0482d643cc0":["08970e5b8411182a29412c177eff67ec1110095b"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["df4ed22dc7b048a2e9efa6ee55cb84b9457e9ee5"],"fafd23b8e49a461cdbc22b302dfdea2f2a08d953":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"],"08970e5b8411182a29412c177eff67ec1110095b":["058801f8673d53a5abac8088204860ec29a40f0d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","9aea0485ecacb6734c17da2d02569816c23a69c1"],"e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0":["877f1e09b9299ce0757f4d83768da944803baf04"],"df4ed22dc7b048a2e9efa6ee55cb84b9457e9ee5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["948cb7389da6d4f397f5a0f89caf885a9033c959"],"f2126b84bd093fa3d921582a109a0ee578c28126":["df4ed22dc7b048a2e9efa6ee55cb84b9457e9ee5","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec","897721e7324f7b1722ba6c325683d4a53cf756e2"],"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec":["ae1dfc6b5c606bdefacac904cca6ac5619c4d81e"],"877f1e09b9299ce0757f4d83768da944803baf04":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["08970e5b8411182a29412c177eff67ec1110095b","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"618635065f043788c9e034f96ca5cd5cea1b4592":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"058801f8673d53a5abac8088204860ec29a40f0d":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"897721e7324f7b1722ba6c325683d4a53cf756e2":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad28156288ac00b91352582904d97e6653205757"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"948cb7389da6d4f397f5a0f89caf885a9033c959":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"ae1dfc6b5c606bdefacac904cca6ac5619c4d81e":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["948cb7389da6d4f397f5a0f89caf885a9033c959","8917bfede3b4ca30f4305c1e391e9218959cd723"],"ab20a04a303d3d2a5078076f4633e0482d643cc0":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d0ef034a4f10871667ae75181537775ddcf8ade4"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","f2126b84bd093fa3d921582a109a0ee578c28126"],"fafd23b8e49a461cdbc22b302dfdea2f2a08d953":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"08970e5b8411182a29412c177eff67ec1110095b":["ab20a04a303d3d2a5078076f4633e0482d643cc0","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0":["618635065f043788c9e034f96ca5cd5cea1b4592"],"df4ed22dc7b048a2e9efa6ee55cb84b9457e9ee5":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad28156288ac00b91352582904d97e6653205757","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df4ed22dc7b048a2e9efa6ee55cb84b9457e9ee5"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["058801f8673d53a5abac8088204860ec29a40f0d"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","877f1e09b9299ce0757f4d83768da944803baf04"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"877f1e09b9299ce0757f4d83768da944803baf04":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0"],"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","897721e7324f7b1722ba6c325683d4a53cf756e2"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"618635065f043788c9e034f96ca5cd5cea1b4592":["ae1dfc6b5c606bdefacac904cca6ac5619c4d81e"],"058801f8673d53a5abac8088204860ec29a40f0d":["08970e5b8411182a29412c177eff67ec1110095b"],"897721e7324f7b1722ba6c325683d4a53cf756e2":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f2126b84bd093fa3d921582a109a0ee578c28126","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}