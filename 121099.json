{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n    // numRead < 0\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f0c6d69031c318c402abfe2543736076e80a132","date":1404594729,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzBuffer.length*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n    }\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead;           \n    int totalRead = 0;\n    while (totalRead < requested) {\n      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);\n      if (numRead == -1) {\n        break;\n      }\n      totalRead += numRead;\n    }\n\n    if (totalRead > 0) {\n      zzEndRead += totalRead;\n      if (totalRead == requested) { /* possibly more input available */\n        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n        }\n      }\n      return false;\n    }\n\n    // totalRead = 0: End of stream\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n    // numRead < 0\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c00ffa555aa637d932f7d491038cf9992403994","date":1408702746,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;           \n    int totalRead = 0;\n    while (totalRead < requested) {\n      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);\n      if (numRead == -1) {\n        break;\n      }\n      totalRead += numRead;\n    }\n\n    if (totalRead > 0) {\n      zzEndRead += totalRead;\n      if (totalRead == requested) { /* possibly more input available */\n        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n          if (totalRead == 1) { return true; }\n        }\n      }\n      return false;\n    }\n\n    // totalRead = 0: End of stream\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzBuffer.length*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n    }\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead;           \n    int totalRead = 0;\n    while (totalRead < requested) {\n      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);\n      if (numRead == -1) {\n        break;\n      }\n      totalRead += numRead;\n    }\n\n    if (totalRead > 0) {\n      zzEndRead += totalRead;\n      if (totalRead == requested) { /* possibly more input available */\n        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n        }\n      }\n      return false;\n    }\n\n    // totalRead = 0: End of stream\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;           \n    int totalRead = 0;\n    while (totalRead < requested) {\n      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);\n      if (numRead == -1) {\n        break;\n      }\n      totalRead += numRead;\n    }\n\n    if (totalRead > 0) {\n      zzEndRead += totalRead;\n      if (totalRead == requested) { /* possibly more input available */\n        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n          if (totalRead == 1) { return true; }\n        }\n      }\n      return false;\n    }\n\n    // totalRead = 0: End of stream\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;           \n    int totalRead = 0;\n    while (totalRead < requested) {\n      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);\n      if (numRead == -1) {\n        break;\n      }\n      totalRead += numRead;\n    }\n\n    if (totalRead > 0) {\n      zzEndRead += totalRead;\n      if (totalRead == requested) { /* possibly more input available */\n        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n          if (totalRead == 1) { return true; }\n        }\n      }\n      return false;\n    }\n\n    // totalRead = 0: End of stream\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;           \n    int totalRead = 0;\n    while (totalRead < requested) {\n      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);\n      if (numRead == -1) {\n        break;\n      }\n      totalRead += numRead;\n    }\n\n    if (totalRead > 0) {\n      zzEndRead += totalRead;\n      if (totalRead == requested) { /* possibly more input available */\n        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n          if (totalRead == 1) { return true; }\n        }\n      }\n      return false;\n    }\n\n    // totalRead = 0: End of stream\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;           \n    int totalRead = 0;\n    while (totalRead < requested) {\n      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);\n      if (numRead == -1) {\n        break;\n      }\n      totalRead += numRead;\n    }\n\n    if (totalRead > 0) {\n      zzEndRead += totalRead;\n      if (totalRead == requested) { /* possibly more input available */\n        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n          if (totalRead == 1) { return true; }\n        }\n      }\n      return false;\n    }\n\n    // totalRead = 0: End of stream\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f0c6d69031c318c402abfe2543736076e80a132":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c00ffa555aa637d932f7d491038cf9992403994":["4f0c6d69031c318c402abfe2543736076e80a132"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["3c00ffa555aa637d932f7d491038cf9992403994"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3c00ffa555aa637d932f7d491038cf9992403994","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4f0c6d69031c318c402abfe2543736076e80a132":["3c00ffa555aa637d932f7d491038cf9992403994"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3c00ffa555aa637d932f7d491038cf9992403994":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4f0c6d69031c318c402abfe2543736076e80a132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}