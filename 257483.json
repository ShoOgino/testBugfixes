{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], outputs.get(idx)));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testBasicFSA().mjava","sourceNew":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","sourceOld":"  public void testBasicFSA() throws IOException {\n    String[] strings = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\", \"stat\"};\n    String[] strings2 = new String[] {\"station\", \"commotion\", \"elation\", \"elastic\", \"plastic\", \"stop\", \"ftop\", \"ftation\"};\n    IntsRef[] terms = new IntsRef[strings.length];\n    IntsRef[] terms2 = new IntsRef[strings2.length];\n    for(int inputMode=0;inputMode<2;inputMode++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: inputMode=\" + inputModeToString(inputMode));\n      }\n\n      for(int idx=0;idx<strings.length;idx++) {\n        terms[idx] = toIntsRef(strings[idx], inputMode);\n      }\n      for(int idx=0;idx<strings2.length;idx++) {\n        terms2[idx] = toIntsRef(strings2[idx], inputMode);\n      }\n      Arrays.sort(terms2);\n\n      doTest(inputMode, terms);\n    \n      // Test pre-determined FST sizes to make sure we haven't lost minimality (at least on this trivial set of terms):\n\n      // FSA\n      {\n        final Outputs<Object> outputs = NoOutputs.getSingleton();\n        final Object NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms2.length);\n        for(IntsRef term : terms2) {\n          pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n        }\n        FST<Object> fst = new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST ord pos int\n      {\n        final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n        final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          pairs.add(new FSTTester.InputOutput<Long>(terms2[idx], (long) idx));\n        }\n        final FST<Long> fst = new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(22, fst.getNodeCount());\n        assertEquals(27, fst.getArcCount());\n      }\n\n      // FST byte sequence ord\n      {\n        final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n        final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n        final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms2.length);\n        for(int idx=0;idx<terms2.length;idx++) {\n          final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n          pairs.add(new FSTTester.InputOutput<BytesRef>(terms2[idx], output));\n        }\n        final FST<BytesRef> fst = new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest(0, 0, false);\n        assertNotNull(fst);\n        assertEquals(24, fst.getNodeCount());\n        assertEquals(30, fst.getArcCount());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["4708e7bf7695781d702d204d178627b4faddc03f"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4708e7bf7695781d702d204d178627b4faddc03f":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["4708e7bf7695781d702d204d178627b4faddc03f"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"4708e7bf7695781d702d204d178627b4faddc03f":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}