{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","sourceNew":"  protected void readHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_START, FixedGapTermsIndexWriter.VERSION_START);\n    dirOffset = input.readLong();\n  }\n\n","sourceOld":"  protected void readHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_START, FixedGapTermsIndexWriter.VERSION_START);\n    dirOffset = input.readLong();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","date":1349788355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","sourceNew":"  private int readHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_START, FixedGapTermsIndexWriter.VERSION_CURRENT);\n    if (version < FixedGapTermsIndexWriter.VERSION_APPEND_ONLY) {\n      dirOffset = input.readLong();\n    }\n    return version;\n  }\n\n","sourceOld":"  protected void readHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_START, FixedGapTermsIndexWriter.VERSION_START);\n    dirOffset = input.readLong();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","sourceNew":"  private void readHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_CURRENT, FixedGapTermsIndexWriter.VERSION_CURRENT);\n  }\n\n","sourceOld":"  private int readHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_START, FixedGapTermsIndexWriter.VERSION_CURRENT);\n    if (version < FixedGapTermsIndexWriter.VERSION_APPEND_ONLY) {\n      dirOffset = input.readLong();\n    }\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","sourceNew":"  private void readHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_CURRENT, FixedGapTermsIndexWriter.VERSION_CURRENT);\n  }\n\n","sourceOld":"  private int readHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_START, FixedGapTermsIndexWriter.VERSION_CURRENT);\n    if (version < FixedGapTermsIndexWriter.VERSION_APPEND_ONLY) {\n      dirOffset = input.readLong();\n    }\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","sourceNew":"  private void readHeader(IndexInput input) throws IOException {\n    version = CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_CURRENT, FixedGapTermsIndexWriter.VERSION_CURRENT);\n  }\n\n","sourceOld":"  private void readHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_CURRENT, FixedGapTermsIndexWriter.VERSION_CURRENT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","sourceNew":"  private void readHeader(IndexInput input) throws IOException {\n    version = CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_CURRENT, FixedGapTermsIndexWriter.VERSION_CURRENT);\n  }\n\n","sourceOld":"  private void readHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_CURRENT, FixedGapTermsIndexWriter.VERSION_CURRENT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","date":1412165020,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","sourceNew":null,"sourceOld":"  private void readHeader(IndexInput input) throws IOException {\n    version = CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_CURRENT, FixedGapTermsIndexWriter.VERSION_CURRENT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader#readHeader(IndexInput).mjava","sourceNew":null,"sourceOld":"  private void readHeader(IndexInput input) throws IOException {\n    version = CodecUtil.checkHeader(input, FixedGapTermsIndexWriter.CODEC_NAME,\n      FixedGapTermsIndexWriter.VERSION_CURRENT, FixedGapTermsIndexWriter.VERSION_CURRENT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a45bec74b98f6fc05f52770cfb425739e6563960","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a45bec74b98f6fc05f52770cfb425739e6563960"],"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"a45bec74b98f6fc05f52770cfb425739e6563960":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"9bb9a29a5e71a90295f175df8919802993142c9a":["1f3b037cd083286b2af89f96e768f85dcd8072d6","e6f7d3244902a0689d3acc83eaa8d8a4e8504de1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","9bb9a29a5e71a90295f175df8919802993142c9a"],"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}