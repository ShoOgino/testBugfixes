{"path":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","commits":[{"id":"bcce0e518c0546269a896ca6124ba4313059185f","date":1340381078,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f7c14f40c65357617cada58ca9b026ab9f81c24","date":1432120112,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    register(state, ord);\n    accumulateStatistics(docFreq, totalTermFreq);\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":["0f3cee3d20b0c786e6fca20539454262e29edcab","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermStates#register(TermState,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    register(state, ord);\n    accumulateStatistics(docFreq, totalTermFreq);\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    register(state, ord);\n    accumulateStatistics(docFreq, totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermStates#register(TermState,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    register(state, ord);\n    accumulateStatistics(docFreq, totalTermFreq);\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    register(state, ord);\n    accumulateStatistics(docFreq, totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["9f7c14f40c65357617cada58ca9b026ab9f81c24","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["9f7c14f40c65357617cada58ca9b026ab9f81c24"],"bcce0e518c0546269a896ca6124ba4313059185f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f7c14f40c65357617cada58ca9b026ab9f81c24":["bcce0e518c0546269a896ca6124ba4313059185f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcce0e518c0546269a896ca6124ba4313059185f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bcce0e518c0546269a896ca6124ba4313059185f":["9f7c14f40c65357617cada58ca9b026ab9f81c24","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9f7c14f40c65357617cada58ca9b026ab9f81c24":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bcce0e518c0546269a896ca6124ba4313059185f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}