{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String nodeset = params.required().get(Clause.NODESET);\n      Set<String> nodes = new HashSet<>();\n      if (nodeset.equals(Policy.ANY)) {\n        nodes.addAll(scenario.cluster.getLiveNodesSet().get());\n      } else {\n        String[] list = nodeset.split(\"[,\\\\s]+\");\n        for (String node : list) {\n          if (node.isBlank()) {\n            continue;\n          }\n          nodes.add(node);\n        }\n      }\n      Map<String, Object> values = new HashMap<>();\n      params.remove(Clause.NODESET);\n      for (String key : params.getParameterNames()) {\n        values.put(key, params.get(key));\n      }\n      for (String node : nodes) {\n        scenario.cluster.getSimNodeStateProvider().simSetNodeValues(node, values);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8f79e6c597ec19b2f9669589153faac2f803462a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f79e6c597ec19b2f9669589153faac2f803462a","date":1575984097,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String nodeset = params.required().get(Clause.NODESET);\n      Set<String> nodes = new HashSet<>();\n      if (nodeset.equals(Policy.ANY)) {\n        nodes.addAll(scenario.cluster.getLiveNodesSet().get());\n      } else {\n        String[] list = nodeset.split(\"[,\\\\s]+\");\n        for (String node : list) {\n          if (node.isBlank()) {\n            continue;\n          }\n          nodes.add(node);\n        }\n      }\n      Map<String, Object> values = new HashMap<>();\n      params.remove(Clause.NODESET);\n      for (String key : params.getParameterNames()) {\n        String strVal = params.get(key);\n        Object val;\n        // try auto-converting to a number\n        try {\n          val = Long.parseLong(strVal);\n        } catch (NumberFormatException nfe) {\n          try {\n            val = Double.parseDouble(strVal);\n          } catch (NumberFormatException nfe1) {\n            val = strVal;\n          }\n        }\n        values.put(key, val);\n      }\n      for (String node : nodes) {\n        scenario.cluster.getSimNodeStateProvider().simSetNodeValues(node, values);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String nodeset = params.required().get(Clause.NODESET);\n      Set<String> nodes = new HashSet<>();\n      if (nodeset.equals(Policy.ANY)) {\n        nodes.addAll(scenario.cluster.getLiveNodesSet().get());\n      } else {\n        String[] list = nodeset.split(\"[,\\\\s]+\");\n        for (String node : list) {\n          if (node.isBlank()) {\n            continue;\n          }\n          nodes.add(node);\n        }\n      }\n      Map<String, Object> values = new HashMap<>();\n      params.remove(Clause.NODESET);\n      for (String key : params.getParameterNames()) {\n        values.put(key, params.get(key));\n      }\n      for (String node : nodes) {\n        scenario.cluster.getSimNodeStateProvider().simSetNodeValues(node, values);\n      }\n    }\n\n","bugFix":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String nodeset = params.required().get(Clause.NODESET);\n      Set<String> nodes = new HashSet<>();\n      if (nodeset.equals(Policy.ANY)) {\n        nodes.addAll(scenario.cluster.getLiveNodesSet().get());\n      } else {\n        String[] list = nodeset.split(\"[,\\\\s]+\");\n        for (String node : list) {\n          if (node.isBlank()) {\n            continue;\n          }\n          nodes.add(node);\n        }\n      }\n      Map<String, Object> values = new HashMap<>();\n      params.remove(Clause.NODESET);\n      for (String key : params.getParameterNames()) {\n        String strVal = params.get(key);\n        Object val;\n        // try auto-converting to a number\n        try {\n          val = Long.parseLong(strVal);\n        } catch (NumberFormatException nfe) {\n          try {\n            val = Double.parseDouble(strVal);\n          } catch (NumberFormatException nfe1) {\n            val = strVal;\n          }\n        }\n        values.put(key, val);\n      }\n      for (String node : nodes) {\n        scenario.cluster.getSimNodeStateProvider().simSetNodeValues(node, values);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String nodeset = params.required().get(Clause.NODESET);\n      Set<String> nodes = new HashSet<>();\n      if (nodeset.equals(Policy.ANY)) {\n        nodes.addAll(scenario.cluster.getLiveNodesSet().get());\n      } else {\n        String[] list = nodeset.split(\"[,\\\\s]+\");\n        for (String node : list) {\n          if (node.isBlank()) {\n            continue;\n          }\n          nodes.add(node);\n        }\n      }\n      Map<String, Object> values = new HashMap<>();\n      params.remove(Clause.NODESET);\n      for (String key : params.getParameterNames()) {\n        values.put(key, params.get(key));\n      }\n      for (String node : nodes) {\n        scenario.cluster.getSimNodeStateProvider().simSetNodeValues(node, values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String nodeset = params.required().get(Clause.NODESET);\n      Set<String> nodes = new HashSet<>();\n      if (nodeset.equals(Policy.ANY)) {\n        nodes.addAll(scenario.cluster.getLiveNodesSet().get());\n      } else {\n        String[] list = nodeset.split(\"[,\\\\s]+\");\n        for (String node : list) {\n          if (node.isBlank()) {\n            continue;\n          }\n          nodes.add(node);\n        }\n      }\n      Map<String, Object> values = new HashMap<>();\n      params.remove(Clause.NODESET);\n      for (String key : params.getParameterNames()) {\n        String strVal = params.get(key);\n        Object val;\n        // try auto-converting to a number\n        try {\n          val = Long.parseLong(strVal);\n        } catch (NumberFormatException nfe) {\n          try {\n            val = Double.parseDouble(strVal);\n          } catch (NumberFormatException nfe1) {\n            val = strVal;\n          }\n        }\n        values.put(key, val);\n      }\n      for (String node : nodes) {\n        Map<String, Object> newValues = new HashMap<>(scenario.cluster.getSimNodeStateProvider().simGetNodeValues(node));\n        newValues.putAll(values);\n        scenario.cluster.getSimNodeStateProvider().simSetNodeValues(node, newValues);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String nodeset = params.required().get(Clause.NODESET);\n      Set<String> nodes = new HashSet<>();\n      if (nodeset.equals(Policy.ANY)) {\n        nodes.addAll(scenario.cluster.getLiveNodesSet().get());\n      } else {\n        String[] list = nodeset.split(\"[,\\\\s]+\");\n        for (String node : list) {\n          if (node.isBlank()) {\n            continue;\n          }\n          nodes.add(node);\n        }\n      }\n      Map<String, Object> values = new HashMap<>();\n      params.remove(Clause.NODESET);\n      for (String key : params.getParameterNames()) {\n        String strVal = params.get(key);\n        Object val;\n        // try auto-converting to a number\n        try {\n          val = Long.parseLong(strVal);\n        } catch (NumberFormatException nfe) {\n          try {\n            val = Double.parseDouble(strVal);\n          } catch (NumberFormatException nfe1) {\n            val = strVal;\n          }\n        }\n        values.put(key, val);\n      }\n      for (String node : nodes) {\n        scenario.cluster.getSimNodeStateProvider().simSetNodeValues(node, values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetNodeMetrics#execute(SimScenario).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String nodeset = params.required().get(Clause.NODESET);\n      Set<String> nodes = new HashSet<>();\n      if (nodeset.equals(Policy.ANY)) {\n        nodes.addAll(scenario.cluster.getLiveNodesSet().get());\n      } else {\n        String[] list = nodeset.split(\"[,\\\\s]+\");\n        for (String node : list) {\n          if (node.isBlank()) {\n            continue;\n          }\n          nodes.add(node);\n        }\n      }\n      Map<String, Object> values = new HashMap<>();\n      params.remove(Clause.NODESET);\n      for (String key : params.getParameterNames()) {\n        String strVal = params.get(key);\n        Object val;\n        // try auto-converting to a number\n        try {\n          val = Long.parseLong(strVal);\n        } catch (NumberFormatException nfe) {\n          try {\n            val = Double.parseDouble(strVal);\n          } catch (NumberFormatException nfe1) {\n            val = strVal;\n          }\n        }\n        values.put(key, val);\n      }\n      for (String node : nodes) {\n        Map<String, Object> newValues = new HashMap<>(scenario.cluster.getSimNodeStateProvider().simGetNodeValues(node));\n        newValues.putAll(values);\n        scenario.cluster.getSimNodeStateProvider().simSetNodeValues(node, newValues);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","8f79e6c597ec19b2f9669589153faac2f803462a"],"3f504512a03d978990cbff30db0522b354e846db":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"067ba8c807b0f23eae8bf41bc27046a87b548134":["8f79e6c597ec19b2f9669589153faac2f803462a"],"8f79e6c597ec19b2f9669589153faac2f803462a":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"8f79e6c597ec19b2f9669589153faac2f803462a":["993b0c7dda6341b437fe5685d35c6cc35eaac420","067ba8c807b0f23eae8bf41bc27046a87b548134"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["993b0c7dda6341b437fe5685d35c6cc35eaac420","8f79e6c597ec19b2f9669589153faac2f803462a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}