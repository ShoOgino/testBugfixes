{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","commits":[{"id":"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","date":1416362965,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw, true);\n    LeafReader r = getOnlySegmentReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    try {\n      DocValues.getNumeric(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSorted(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSortedSet(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSortedNumeric(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlySegmentReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    try {\n      DocValues.getNumeric(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSorted(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSortedSet(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSortedNumeric(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw, true);\n    LeafReader r = getOnlySegmentReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    try {\n      DocValues.getNumeric(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSorted(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSortedSet(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSortedNumeric(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlySegmentReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlySegmentReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    try {\n      DocValues.getNumeric(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSorted(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSortedSet(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    try {\n      DocValues.getSortedNumeric(r, \"foo\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlySegmentReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    assertNotNull(DocValues.getDocsWithField(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02d47321ea7c7780a0e0cb7a3676d109d9d62542","date":1543843794,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /**\n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e86b9927b3acb1937be9daf7b71fe0733edc2206","date":1544534047,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /**\n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValues#testBinaryField().mjava","sourceNew":"  /**\n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * field with binary docvalues\n   */\n  public void testBinaryField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"bar\")));\n    iw.addDocument(doc);\n    DirectoryReader dr = DirectoryReader.open(iw);\n    LeafReader r = getOnlyLeafReader(dr);\n    \n    // ok\n    assertNotNull(DocValues.getBinary(r, \"foo\"));\n    \n    // errors\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getNumeric(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSorted(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedSet(r, \"foo\");\n    });\n    expectThrows(IllegalStateException.class, () -> {\n      DocValues.getSortedNumeric(r, \"foo\");\n    });\n    \n    dr.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["02d47321ea7c7780a0e0cb7a3676d109d9d62542","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"05fe562aa248790944d43cdd478f512572835ba0":["2a1862266772deb28cdcb7d996b64d2177022687"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["05fe562aa248790944d43cdd478f512572835ba0"],"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a1862266772deb28cdcb7d996b64d2177022687":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["cfd70c9571310639a77f0123aea0db41077d9bb6","03e17b020972a0d6e8d6823f545571a66646a167"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"05fe562aa248790944d43cdd478f512572835ba0":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["05fe562aa248790944d43cdd478f512572835ba0"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["cfd70c9571310639a77f0123aea0db41077d9bb6","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}