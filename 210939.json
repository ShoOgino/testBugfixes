{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caaf8f27a34037f65ab81e92835f18a303d8d2f1","date":1389767794,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n        \"+term +(+phrase1 +phrase2) +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term (term)^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n        \"+term +(+phrase1 +phrase2) +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n        \"+term +(+phrase1 +phrase2) +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term (term)^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n\n// TODO: Re-enable once flexible standard parser gets multi-word synonym support\n//    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n//                      \"term phrase1 phrase2 term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n// TODO: Re-enable once flexible standard parser gets multi-word synonym support\n//    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n//        \"+term +phrase1 +phrase2 +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term (term)^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n        \"+term +(+phrase1 +phrase2) +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4778b794a897685e2f6c62caa1ac04983d1e69f","date":1467997674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term (term)^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n\n// TODO: Re-enable once flexible standard parser gets multi-word synonym support\n//    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n//                      \"term phrase1 phrase2 term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertMatchNoDocsQuery(\"stop^3\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"stop\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"(stop)^3\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"((stop))^3\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"(stop^3)\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"((stop)^3)\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"(stop)\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"((stop))\", qpAnalyzer);\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n// TODO: Re-enable once flexible standard parser gets multi-word synonym support\n//    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n//        \"+term +phrase1 +phrase2 +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term (term)^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n\n// TODO: Re-enable once flexible standard parser gets multi-word synonym support\n//    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n//                      \"term phrase1 phrase2 term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n// TODO: Re-enable once flexible standard parser gets multi-word synonym support\n//    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n//        \"+term +phrase1 +phrase2 +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term (term)^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n\n// TODO: Re-enable once flexible standard parser gets multi-word synonym support\n//    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n//                      \"term phrase1 phrase2 term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertMatchNoDocsQuery(\"stop^3\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"stop\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"(stop)^3\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"((stop))^3\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"(stop^3)\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"((stop)^3)\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"(stop)\", qpAnalyzer);\n    assertMatchNoDocsQuery(\"((stop))\", qpAnalyzer);\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n// TODO: Re-enable once flexible standard parser gets multi-word synonym support\n//    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n//        \"+term +phrase1 +phrase2 +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term (term)^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term (phrase1 phrase2) term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -(phrase1 phrase2) term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    \n    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);\n    setDefaultOperatorAND(cqpc);\n    assertQueryEquals(cqpc, \"field\", \"term phrase term\",\n        \"+term +(+phrase1 +phrase2) +term\");\n    assertQueryEquals(cqpc, \"field\", \"phrase\",\n        \"+phrase1 +phrase2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["caaf8f27a34037f65ab81e92835f18a303d8d2f1"],"caaf8f27a34037f65ab81e92835f18a303d8d2f1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0cdf628dda21ad509f09608c835dc27541d1ca3","f4778b794a897685e2f6c62caa1ac04983d1e69f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4778b794a897685e2f6c62caa1ac04983d1e69f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["caaf8f27a34037f65ab81e92835f18a303d8d2f1"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["f4778b794a897685e2f6c62caa1ac04983d1e69f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"caaf8f27a34037f65ab81e92835f18a303d8d2f1":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}