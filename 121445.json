{"path":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testAllEqual().mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testAllEqual().mjava","pathOld":"/dev/null","sourceNew":"  public void testAllEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      if (docID == 0) {\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[docID] = values;\n      } else {\n        docValues[docID] = docValues[0];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, DimensionalValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, DimensionalValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      if (docID == 0) {\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[docID] = values;\n      } else {\n        docValues[docID] = docValues[0];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      if (docID == 0) {\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[docID] = values;\n      } else {\n        docValues[docID] = docValues[0];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      if (docID == 0) {\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[docID] = values;\n      } else {\n        docValues[docID] = docValues[0];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, DimensionalValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, DimensionalValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      if (docID == 0) {\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[docID] = values;\n      } else {\n        docValues[docID] = docValues[0];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}