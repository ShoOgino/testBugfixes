{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","commits":[{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["a5093a9e893633cc091cf2f729d7863671c2b715"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a5093a9e893633cc091cf2f729d7863671c2b715","29f5eaf296600e1665151e7929d42a3cbe22e481"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a5093a9e893633cc091cf2f729d7863671c2b715":["29f5eaf296600e1665151e7929d42a3cbe22e481","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}