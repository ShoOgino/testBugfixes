{"path":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","commits":[{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          method.invoke(obj, req, rsp, o);\n        }\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8","date":1570799519,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          method.invoke(obj, req, rsp, o);\n        }\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38d63171317f90b25910c2374de2e33c55c243f5","date":1570800220,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          method.invoke(obj, req, rsp, o);\n        }\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n      }\n\n    }\n\n","sourceOld":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4505d603fb135c5279b5c6b1fc375feeeff582f1","date":1570801145,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          method.invoke(obj, req, rsp, o);\n        }\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c2c13adedecb2b2131001c8f0ee9d68206ee550","date":1570858508,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (InvocationTargetException ite) {\n        log.error(\"Error executing command \", ite);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        throw se;\n      } catch (InvocationTargetException ite) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (InvocationTargetException ite) {\n        log.error(\"Error executing command \", ite);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (InvocationTargetException ite) {\n        log.error(\"Error executing command \", ite);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if(paramsCount ==1) {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null && c != Map.class) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n          cmd = payloadObj;\n          method.invoke(obj, payloadObj);\n          checkForErrorInPayload(cmd);\n        } else if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          checkForErrorInPayload(cmd);\n        }\n\n\n      } catch (SolrException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (InvocationTargetException ite) {\n        log.error(\"Error executing command \", ite);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          if (cmd.hasError()) {\n            throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error executing command\",\n                CommandOperation.captureErrors(Collections.singletonList(cmd)));\n          }\n        }\n\n\n      } catch (SolrException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (InvocationTargetException ite) {\n        log.error(\"Error executing command \", ite);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9","date":1593520826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        Object o = null;\n        String commandName = null;\n        if(paramsCount == 1) {\n          if(cmd == null) {\n            if(parameterClass != null) {\n              try {\n                ContentStream stream = req.getContentStreams().iterator().next();\n                o = mapper.readValue(stream.getStream(), parameterClass);\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid payload\", e);\n              }\n            }\n          } else {\n            commandName = cmd.name;\n            o = cmd.getCommandData();\n            if (o instanceof Map && parameterClass != null && parameterClass != Map.class) {\n              o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n            }\n          }\n          PayloadObj<Object> payloadObj = new PayloadObj<>(commandName, o, o, req, rsp);\n          cmd = payloadObj;\n          method.invoke(obj, payloadObj);\n          checkForErrorInPayload(cmd);\n        } else if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          o = cmd.getCommandData();\n          if (o instanceof Map && parameterClass != null) {\n            o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          checkForErrorInPayload(cmd);\n        }\n      } catch (RuntimeException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (Throwable e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        if(paramsCount ==1) {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null && c != Map.class) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n          cmd = payloadObj;\n          method.invoke(obj, payloadObj);\n          checkForErrorInPayload(cmd);\n        } else if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          Object o = cmd.getCommandData();\n          if (o instanceof Map && c != null) {\n            o = mapper.readValue(Utils.toJSONString(o), c);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          checkForErrorInPayload(cmd);\n        }\n\n\n      } catch (SolrException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (InvocationTargetException ite) {\n        log.error(\"Error executing command \", ite);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ite.getCause());\n      } catch (Exception e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b6680904fafe5905f847812d32dc7ad79c96a0","date":1600243603,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      Object original = null;\n      try {\n        Object o = null;\n        String commandName = null;\n        if(paramsCount == 1) {\n          if(cmd == null) {\n            if(parameterClass != null) {\n              try {\n                ContentStream stream = req.getContentStreams().iterator().next();\n                o = mapper.readValue(stream.getStream(), parameterClass);\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid payload\", e);\n              }\n            }\n          } else {\n            commandName = cmd.name;\n            original = cmd.getCommandData();\n            o = original;\n            if (o instanceof Map && parameterClass != null && parameterClass != Map.class) {\n              o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n            }\n          }\n          PayloadObj<Object> payloadObj = new PayloadObj<>(commandName, original, o, req, rsp);\n          cmd = payloadObj;\n          method.invoke(obj, payloadObj);\n          checkForErrorInPayload(cmd);\n        } else if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          o = cmd.getCommandData();\n          if (o instanceof Map && parameterClass != null) {\n            o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          checkForErrorInPayload(cmd);\n        }\n      } catch (RuntimeException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (Throwable e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        Object o = null;\n        String commandName = null;\n        if(paramsCount == 1) {\n          if(cmd == null) {\n            if(parameterClass != null) {\n              try {\n                ContentStream stream = req.getContentStreams().iterator().next();\n                o = mapper.readValue(stream.getStream(), parameterClass);\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid payload\", e);\n              }\n            }\n          } else {\n            commandName = cmd.name;\n            o = cmd.getCommandData();\n            if (o instanceof Map && parameterClass != null && parameterClass != Map.class) {\n              o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n            }\n          }\n          PayloadObj<Object> payloadObj = new PayloadObj<>(commandName, o, o, req, rsp);\n          cmd = payloadObj;\n          method.invoke(obj, payloadObj);\n          checkForErrorInPayload(cmd);\n        } else if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          o = cmd.getCommandData();\n          if (o instanceof Map && parameterClass != null) {\n            o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          checkForErrorInPayload(cmd);\n        }\n      } catch (RuntimeException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (Throwable e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#invoke(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      Object original = null;\n      try {\n        Object o = null;\n        String commandName = null;\n        if(paramsCount == 1) {\n          if(cmd == null) {\n            if(parameterClass != null) {\n              try {\n                ContentStream stream = req.getContentStreams().iterator().next();\n                o = mapper.readValue(stream.getStream(), parameterClass);\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid payload\", e);\n              }\n            }\n          } else {\n            commandName = cmd.name;\n            original = cmd.getCommandData();\n            o = original;\n            if (o instanceof Map && parameterClass != null && parameterClass != Map.class) {\n              o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n            }\n          }\n          PayloadObj<Object> payloadObj = new PayloadObj<>(commandName, original, o, req, rsp);\n          cmd = payloadObj;\n          method.invoke(obj, payloadObj);\n          checkForErrorInPayload(cmd);\n        } else if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          o = cmd.getCommandData();\n          if (o instanceof Map && parameterClass != null) {\n            o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          checkForErrorInPayload(cmd);\n        }\n      } catch (RuntimeException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (Throwable e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    void invoke(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation cmd) {\n      try {\n        Object o = null;\n        String commandName = null;\n        if(paramsCount == 1) {\n          if(cmd == null) {\n            if(parameterClass != null) {\n              try {\n                ContentStream stream = req.getContentStreams().iterator().next();\n                o = mapper.readValue(stream.getStream(), parameterClass);\n              } catch (IOException e) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid payload\", e);\n              }\n            }\n          } else {\n            commandName = cmd.name;\n            o = cmd.getCommandData();\n            if (o instanceof Map && parameterClass != null && parameterClass != Map.class) {\n              o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n            }\n          }\n          PayloadObj<Object> payloadObj = new PayloadObj<>(commandName, o, o, req, rsp);\n          cmd = payloadObj;\n          method.invoke(obj, payloadObj);\n          checkForErrorInPayload(cmd);\n        } else if (paramsCount == 2) {\n          method.invoke(obj, req, rsp);\n        } else {\n          o = cmd.getCommandData();\n          if (o instanceof Map && parameterClass != null) {\n            o = mapper.readValue(Utils.toJSONString(o), parameterClass);\n          }\n          if (isWrappedInPayloadObj) {\n            PayloadObj<Object> payloadObj = new PayloadObj<>(cmd.name, cmd.getCommandData(), o, req, rsp);\n            cmd = payloadObj;\n            method.invoke(obj, req, rsp, payloadObj);\n          } else {\n            method.invoke(obj, req, rsp, o);\n          }\n          checkForErrorInPayload(cmd);\n        }\n      } catch (RuntimeException se) {\n        log.error(\"Error executing command  \", se);\n        throw se;\n      } catch (Throwable e) {\n        log.error(\"Error executing command : \", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38d63171317f90b25910c2374de2e33c55c243f5":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"c0b6680904fafe5905f847812d32dc7ad79c96a0":["6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9"],"2c2c13adedecb2b2131001c8f0ee9d68206ee550":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["38d63171317f90b25910c2374de2e33c55c243f5"],"680b6449f09827f58fe987aff279e014c311d966":["6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9","c0b6680904fafe5905f847812d32dc7ad79c96a0"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["2c2c13adedecb2b2131001c8f0ee9d68206ee550"],"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c2c13adedecb2b2131001c8f0ee9d68206ee550"]},"commit2Childs":{"38d63171317f90b25910c2374de2e33c55c243f5":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["38d63171317f90b25910c2374de2e33c55c243f5"],"c0b6680904fafe5905f847812d32dc7ad79c96a0":["680b6449f09827f58fe987aff279e014c311d966"],"2c2c13adedecb2b2131001c8f0ee9d68206ee550":["954ae83b7dfacaa33d48ea056448ae11f7745a93","b0b597c65628ca9e73913a07e81691f8229bae35"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["2c2c13adedecb2b2131001c8f0ee9d68206ee550"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9":["c0b6680904fafe5905f847812d32dc7ad79c96a0","680b6449f09827f58fe987aff279e014c311d966"],"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}