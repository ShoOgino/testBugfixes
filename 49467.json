{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#build(TaxonomyWriter,IndexDocument).mjava","commits":[{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#build(TaxonomyWriter,IndexDocument).mjava","pathOld":"/dev/null","sourceNew":"  /** Translates any added {@link FacetField}s into normal\n   *  fields for indexing. */\n  public IndexDocument build(TaxonomyWriter taxoWriter, IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    Set<String> seenDims = new HashSet<String>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        if (dimConfig.hierarchical) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot be hierarchical (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n        if (dimConfig.requireDimCount) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot requireDimCount (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(taxoWriter, byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(taxoWriter, assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#build(TaxonomyWriter,IndexDocument).mjava","pathOld":"/dev/null","sourceNew":"  /** Translates any added {@link FacetField}s into normal\n   *  fields for indexing. */\n  public IndexDocument build(TaxonomyWriter taxoWriter, IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    Set<String> seenDims = new HashSet<String>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        if (dimConfig.hierarchical) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot be hierarchical (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n        if (dimConfig.requireDimCount) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot requireDimCount (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(taxoWriter, byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(taxoWriter, assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755faee94413f220e729a0b60122d6b24f7a2468","date":1391011756,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#build(TaxonomyWriter,Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#build(TaxonomyWriter,IndexDocument).mjava","sourceNew":"  /**\n   * Translates any added {@link FacetField}s into normal fields for indexing.\n   * \n   * <p>\n   * <b>NOTE:</b> you should add the returned document to IndexWriter, not the\n   * input one!\n   */\n  public Document build(TaxonomyWriter taxoWriter, Document doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    Set<String> seenDims = new HashSet<String>();\n\n    for (IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        if (dimConfig.hierarchical) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot be hierarchical (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n        if (dimConfig.requireDimCount) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot requireDimCount (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    Document result = new Document();\n\n    processFacetFields(taxoWriter, byField, result);\n    processSSDVFacetFields(dvByField, result);\n    processAssocFacetFields(taxoWriter, assocByField, result);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    for (Field field : doc.getFields()) {\n      FieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        result.add(field);\n      }\n    }\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return result;\n  }\n\n","sourceOld":"  /** Translates any added {@link FacetField}s into normal\n   *  fields for indexing. */\n  public IndexDocument build(TaxonomyWriter taxoWriter, IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    Set<String> seenDims = new HashSet<String>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        if (dimConfig.hierarchical) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot be hierarchical (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n        if (dimConfig.requireDimCount) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot requireDimCount (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(taxoWriter, byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(taxoWriter, assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"755faee94413f220e729a0b60122d6b24f7a2468":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd83550e4b0bdd36e7d9dca9273264100782440b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["755faee94413f220e729a0b60122d6b24f7a2468"]},"commit2Childs":{"755faee94413f220e729a0b60122d6b24f7a2468":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd83550e4b0bdd36e7d9dca9273264100782440b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["755faee94413f220e729a0b60122d6b24f7a2468"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}