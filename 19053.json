{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#addEscapes(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#addEscapes(String).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#addEscapes(String).mjava","sourceNew":"  /**\n   * Replaces unprintable characters by their escaped (or unicode escaped)\n   * equivalents in the given string\n   */\n  protected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i))\n      {\n        case 0 :\n          continue;\n        case '\\b':\n          retval.append(\"\\\\b\");\n          continue;\n        case '\\t':\n          retval.append(\"\\\\t\");\n          continue;\n        case '\\n':\n          retval.append(\"\\\\n\");\n          continue;\n        case '\\f':\n          retval.append(\"\\\\f\");\n          continue;\n        case '\\r':\n          retval.append(\"\\\\r\");\n          continue;\n        case '\\\"':\n          retval.append(\"\\\\\\\"\");\n          continue;\n        case '\\'':\n          retval.append(\"\\\\\\'\");\n          continue;\n        case '\\\\':\n          retval.append(\"\\\\\\\\\");\n          continue;\n        default:\n          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n            String s = \"0000\" + Integer.toString(ch, 16);\n            retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n          } else {\n            retval.append(ch);\n          }\n          continue;\n      }\n    }\n    return retval.toString();\n  }\n\n","sourceOld":"  /**\n   * Replaces unprintable characters by their escaped (or unicode escaped)\n   * equivalents in the given string\n   */\n  protected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i))\n      {\n        case 0 :\n          continue;\n        case '\\b':\n          retval.append(\"\\\\b\");\n          continue;\n        case '\\t':\n          retval.append(\"\\\\t\");\n          continue;\n        case '\\n':\n          retval.append(\"\\\\n\");\n          continue;\n        case '\\f':\n          retval.append(\"\\\\f\");\n          continue;\n        case '\\r':\n          retval.append(\"\\\\r\");\n          continue;\n        case '\\\"':\n          retval.append(\"\\\\\\\"\");\n          continue;\n        case '\\'':\n          retval.append(\"\\\\\\'\");\n          continue;\n        case '\\\\':\n          retval.append(\"\\\\\\\\\");\n          continue;\n        default:\n          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n            String s = \"0000\" + Integer.toString(ch, 16);\n            retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n          } else {\n            retval.append(ch);\n          }\n          continue;\n      }\n    }\n    return retval.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#addEscapes(String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#addEscapes(String).mjava","sourceNew":"   /**\r\n    * Replaces unprintable characters by their escaped (or unicode escaped)\r\n    * equivalents in the given string\r\n    */\r\n   protected static final String addEscapes(String str) {\r\n      StringBuffer retval = new StringBuffer();\r\n      char ch;\r\n      for (int i = 0; i < str.length(); i++) {\r\n        switch (str.charAt(i))\r\n        {\r\n           case 0 :\r\n              continue;\r\n           case '\\b':\r\n              retval.append(\"\\\\b\");\r\n              continue;\r\n           case '\\t':\r\n              retval.append(\"\\\\t\");\r\n              continue;\r\n           case '\\n':\r\n              retval.append(\"\\\\n\");\r\n              continue;\r\n           case '\\f':\r\n              retval.append(\"\\\\f\");\r\n              continue;\r\n           case '\\r':\r\n              retval.append(\"\\\\r\");\r\n              continue;\r\n           case '\\\"':\r\n              retval.append(\"\\\\\\\"\");\r\n              continue;\r\n           case '\\'':\r\n              retval.append(\"\\\\\\'\");\r\n              continue;\r\n           case '\\\\':\r\n              retval.append(\"\\\\\\\\\");\r\n              continue;\r\n           default:\r\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                 String s = \"0000\" + Integer.toString(ch, 16);\r\n                 retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\r\n              } else {\r\n                 retval.append(ch);\r\n              }\r\n              continue;\r\n        }\r\n      }\r\n      return retval.toString();\r\n   }\r\n\n","sourceOld":"  /**\n   * Replaces unprintable characters by their escaped (or unicode escaped)\n   * equivalents in the given string\n   */\n  protected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i))\n      {\n        case 0 :\n          continue;\n        case '\\b':\n          retval.append(\"\\\\b\");\n          continue;\n        case '\\t':\n          retval.append(\"\\\\t\");\n          continue;\n        case '\\n':\n          retval.append(\"\\\\n\");\n          continue;\n        case '\\f':\n          retval.append(\"\\\\f\");\n          continue;\n        case '\\r':\n          retval.append(\"\\\\r\");\n          continue;\n        case '\\\"':\n          retval.append(\"\\\\\\\"\");\n          continue;\n        case '\\'':\n          retval.append(\"\\\\\\'\");\n          continue;\n        case '\\\\':\n          retval.append(\"\\\\\\\\\");\n          continue;\n        default:\n          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n            String s = \"0000\" + Integer.toString(ch, 16);\n            retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n          } else {\n            retval.append(ch);\n          }\n          continue;\n      }\n    }\n    return retval.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#addEscapes(String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#addEscapes(String).mjava","sourceNew":"   /**\n    * Replaces unprintable characters by their escaped (or unicode escaped)\n    * equivalents in the given string\n    */\n   protected static final String addEscapes(String str) {\n      StringBuffer retval = new StringBuffer();\n      char ch;\n      for (int i = 0; i < str.length(); i++) {\n        switch (str.charAt(i))\n        {\n           case 0 :\n              continue;\n           case '\\b':\n              retval.append(\"\\\\b\");\n              continue;\n           case '\\t':\n              retval.append(\"\\\\t\");\n              continue;\n           case '\\n':\n              retval.append(\"\\\\n\");\n              continue;\n           case '\\f':\n              retval.append(\"\\\\f\");\n              continue;\n           case '\\r':\n              retval.append(\"\\\\r\");\n              continue;\n           case '\\\"':\n              retval.append(\"\\\\\\\"\");\n              continue;\n           case '\\'':\n              retval.append(\"\\\\\\'\");\n              continue;\n           case '\\\\':\n              retval.append(\"\\\\\\\\\");\n              continue;\n           default:\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                 String s = \"0000\" + Integer.toString(ch, 16);\n                 retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n              } else {\n                 retval.append(ch);\n              }\n              continue;\n        }\n      }\n      return retval.toString();\n   }\n\n","sourceOld":"   /**\r\n    * Replaces unprintable characters by their escaped (or unicode escaped)\r\n    * equivalents in the given string\r\n    */\r\n   protected static final String addEscapes(String str) {\r\n      StringBuffer retval = new StringBuffer();\r\n      char ch;\r\n      for (int i = 0; i < str.length(); i++) {\r\n        switch (str.charAt(i))\r\n        {\r\n           case 0 :\r\n              continue;\r\n           case '\\b':\r\n              retval.append(\"\\\\b\");\r\n              continue;\r\n           case '\\t':\r\n              retval.append(\"\\\\t\");\r\n              continue;\r\n           case '\\n':\r\n              retval.append(\"\\\\n\");\r\n              continue;\r\n           case '\\f':\r\n              retval.append(\"\\\\f\");\r\n              continue;\r\n           case '\\r':\r\n              retval.append(\"\\\\r\");\r\n              continue;\r\n           case '\\\"':\r\n              retval.append(\"\\\\\\\"\");\r\n              continue;\r\n           case '\\'':\r\n              retval.append(\"\\\\\\'\");\r\n              continue;\r\n           case '\\\\':\r\n              retval.append(\"\\\\\\\\\");\r\n              continue;\r\n           default:\r\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                 String s = \"0000\" + Integer.toString(ch, 16);\r\n                 retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\r\n              } else {\r\n                 retval.append(ch);\r\n              }\r\n              continue;\r\n        }\r\n      }\r\n      return retval.toString();\r\n   }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#addEscapes(String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#addEscapes(String).mjava","sourceNew":"   /**\n    * Replaces unprintable characters by their escaped (or unicode escaped)\n    * equivalents in the given string\n    */\n   protected static final String addEscapes(String str) {\n      StringBuffer retval = new StringBuffer();\n      char ch;\n      for (int i = 0; i < str.length(); i++) {\n        switch (str.charAt(i))\n        {\n           case 0 :\n              continue;\n           case '\\b':\n              retval.append(\"\\\\b\");\n              continue;\n           case '\\t':\n              retval.append(\"\\\\t\");\n              continue;\n           case '\\n':\n              retval.append(\"\\\\n\");\n              continue;\n           case '\\f':\n              retval.append(\"\\\\f\");\n              continue;\n           case '\\r':\n              retval.append(\"\\\\r\");\n              continue;\n           case '\\\"':\n              retval.append(\"\\\\\\\"\");\n              continue;\n           case '\\'':\n              retval.append(\"\\\\\\'\");\n              continue;\n           case '\\\\':\n              retval.append(\"\\\\\\\\\");\n              continue;\n           default:\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                 String s = \"0000\" + Integer.toString(ch, 16);\n                 retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n              } else {\n                 retval.append(ch);\n              }\n              continue;\n        }\n      }\n      return retval.toString();\n   }\n\n","sourceOld":"   /**\n    * Replaces unprintable characters by their escaped (or unicode escaped)\n    * equivalents in the given string\n    */\n   protected static final String addEscapes(String str) {\n      StringBuffer retval = new StringBuffer();\n      char ch;\n      for (int i = 0; i < str.length(); i++) {\n        switch (str.charAt(i))\n        {\n           case 0 :\n              continue;\n           case '\\b':\n              retval.append(\"\\\\b\");\n              continue;\n           case '\\t':\n              retval.append(\"\\\\t\");\n              continue;\n           case '\\n':\n              retval.append(\"\\\\n\");\n              continue;\n           case '\\f':\n              retval.append(\"\\\\f\");\n              continue;\n           case '\\r':\n              retval.append(\"\\\\r\");\n              continue;\n           case '\\\"':\n              retval.append(\"\\\\\\\"\");\n              continue;\n           case '\\'':\n              retval.append(\"\\\\\\'\");\n              continue;\n           case '\\\\':\n              retval.append(\"\\\\\\\\\");\n              continue;\n           default:\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                 String s = \"0000\" + Integer.toString(ch, 16);\n                 retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n              } else {\n                 retval.append(ch);\n              }\n              continue;\n        }\n      }\n      return retval.toString();\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}