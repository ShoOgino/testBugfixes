{"path":"src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","commits":[{"id":"705f33e5fdd5faefb06e318ed968763f66e8a2b0","date":1262624396,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(vec1[i], vec2[i]);\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bccfc18d297d557641c5b39bf98c5ee1fe614a54","date":1266434771,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(vec1[i], vec2[i]);\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"705f33e5fdd5faefb06e318ed968763f66e8a2b0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bccfc18d297d557641c5b39bf98c5ee1fe614a54":["705f33e5fdd5faefb06e318ed968763f66e8a2b0"],"ad94625fb8d088209f46650c8097196fec67f00c":["bccfc18d297d557641c5b39bf98c5ee1fe614a54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"705f33e5fdd5faefb06e318ed968763f66e8a2b0":["bccfc18d297d557641c5b39bf98c5ee1fe614a54"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["705f33e5fdd5faefb06e318ed968763f66e8a2b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bccfc18d297d557641c5b39bf98c5ee1fe614a54":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}