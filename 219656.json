{"path":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        before();\n        \n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["197be891529ba2dea8287e2251906be9533dc8ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"197be891529ba2dea8287e2251906be9533dc8ea","date":1339266828,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n\n        try {\n          before();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        before();\n        \n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n\n        try {\n          before();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n\n        try {\n          before();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n\n        try {\n          before();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n\n        try {\n          before();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<>();\n\n        try {\n          before();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n\n        try {\n          before();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n        \n        try {\n          after();\n        } catch (Throwable t) {\n          errors.add(t);\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["197be891529ba2dea8287e2251906be9533dc8ea","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"197be891529ba2dea8287e2251906be9533dc8ea":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["197be891529ba2dea8287e2251906be9533dc8ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["197be891529ba2dea8287e2251906be9533dc8ea"],"197be891529ba2dea8287e2251906be9533dc8ea":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}