{"path":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","commits":[{"id":"06109d9780d72758486e57823588a28a70c7fb84","date":1474451879,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress(), false);\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fb4e0f9ecd64404d1c3b401c534806575469614c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb4e0f9ecd64404d1c3b401c534806575469614c","date":1474546896,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","sourceOld":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress(), false);\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","bugFix":["06109d9780d72758486e57823588a28a70c7fb84"],"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","sourceOld":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress(), false);\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    return client;\n  }\n\n","sourceOld":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    return client;\n  }\n\n","sourceOld":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    client.getLbClient().setConnectionTimeout(30000);\n    client.getLbClient().setSoTimeout(60000);\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c","date":1510261138,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build();\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    return client;\n  }\n\n","sourceOld":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build();\n    client.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder(Collections.singletonList(zkServer.getZkAddress()), Optional.empty())\n        .sendDirectUpdatesToAnyShardReplica()\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build();\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    return client;\n  }\n\n","sourceOld":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder()\n        .withZkHost(zkServer.getZkAddress())\n        .sendDirectUpdatesToAnyShardReplica()\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build();\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    return client;\n  }\n\n","bugFix":["fb4e0f9ecd64404d1c3b401c534806575469614c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createCloudClient(String).mjava","sourceNew":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder(Collections.singletonList(zkServer.getZkAddress()), Optional.empty())\n        .sendDirectUpdatesToAnyShardReplica()\n        .withConnectionTimeout(5000)\n        .withSocketTimeout(10000)\n        .build();\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    return client;\n  }\n\n","sourceOld":"  /**\n   * We need to turn off directUpdatesToLeadersOnly due to SOLR-9512\n   */\n  @Override\n  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient client = new CloudSolrClient.Builder(Collections.singletonList(zkServer.getZkAddress()), Optional.empty())\n        .sendDirectUpdatesToAnyShardReplica()\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build();\n    if (defaultCollection != null) client.setDefaultCollection(defaultCollection);\n    return client;\n  }\n\n","bugFix":["43d1e498704edd2bba13548a189eed4dfccff11b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c":["43d1e498704edd2bba13548a189eed4dfccff11b"],"fb4e0f9ecd64404d1c3b401c534806575469614c":["06109d9780d72758486e57823588a28a70c7fb84"],"43d1e498704edd2bba13548a189eed4dfccff11b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["06109d9780d72758486e57823588a28a70c7fb84","fb4e0f9ecd64404d1c3b401c534806575469614c"],"06109d9780d72758486e57823588a28a70c7fb84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","43d1e498704edd2bba13548a189eed4dfccff11b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"fb4e0f9ecd64404d1c3b401c534806575469614c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"43d1e498704edd2bba13548a189eed4dfccff11b":["15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"06109d9780d72758486e57823588a28a70c7fb84":["fb4e0f9ecd64404d1c3b401c534806575469614c","126d6ad24eed13163ba0959435d5a80e5672837c"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06109d9780d72758486e57823588a28a70c7fb84","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}