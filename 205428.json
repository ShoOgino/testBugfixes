{"path":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals (msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57415e4567291785a7689972b13849f922d1e482","date":1321278367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    for(SortField sortField : sort.getSort()) {\n      if (sortField.getUseIndexValues() && sortField.getType() == SortField.Type.STRING) {\n        if (searcher.getIndexReader() instanceof SlowMultiReaderWrapper) {\n          // Cannot use STRING DocValues sort with SlowMultiReaderWrapper\n          return;\n        }\n      }\n    }\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98b4277e099b630ebc5ed90c8df3ad81ae18c10f","date":1321385787,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    for(SortField sortField : sort.getSort()) {\n      if (sortField.getUseIndexValues() && sortField.getType() == SortField.Type.STRING) {\n        if (hasSlowMultiReaderWrapper(searcher.getIndexReader())) {\n          // Cannot use STRING DocValues sort with SlowMultiReaderWrapper\n          return;\n        }\n      }\n    }\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    for(SortField sortField : sort.getSort()) {\n      if (sortField.getUseIndexValues() && sortField.getType() == SortField.Type.STRING) {\n        if (searcher.getIndexReader() instanceof SlowMultiReaderWrapper) {\n          // Cannot use STRING DocValues sort with SlowMultiReaderWrapper\n          return;\n        }\n      }\n    }\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eae7c5ddae4b9692a6691d2d252ab6a4229457b","date":1325870827,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    for(SortField sortField : sort.getSort()) {\n      if (sortField.getUseIndexValues() && sortField.getType() == SortField.Type.STRING) {\n        if (hasSlowMultiReaderWrapper(searcher.getIndexReader())) {\n          // Cannot use STRING DocValues sort with SlowMultiReaderWrapper\n          return;\n        }\n      }\n    }\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"57415e4567291785a7689972b13849f922d1e482":["382fe3a6ca9745891afebda9b9a57cc158305545"],"98b4277e099b630ebc5ed90c8df3ad81ae18c10f":["57415e4567291785a7689972b13849f922d1e482"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"382fe3a6ca9745891afebda9b9a57cc158305545":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["98b4277e099b630ebc5ed90c8df3ad81ae18c10f"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"57415e4567291785a7689972b13849f922d1e482":["98b4277e099b630ebc5ed90c8df3ad81ae18c10f"],"98b4277e099b630ebc5ed90c8df3ad81ae18c10f":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","1509f151d7692d84fae414b2b799ac06ba60fcb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["57415e4567291785a7689972b13849f922d1e482"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}