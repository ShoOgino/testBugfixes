{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestAllDictionaries#testOneDictionary().mjava","sourceNew":"  public void testOneDictionary() throws Exception {\n    String toTest = \"hu_HU.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","sourceOld":"  public void testOneDictionary() throws Exception {\n    String toTest = \"hu_HU.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              Dictionary dic = new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneDictionary() throws Exception {\n    String toTest = \"hu_HU.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","sourceNew":"  public void testOneDictionary() throws Exception {\n    String toTest = \"hu_HU.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","sourceOld":"  public void testOneDictionary() throws Exception {\n    String toTest = \"hu_HU.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","sourceNew":"  public void testOneDictionary() throws Exception {\n    String toTest = \"hu_HU.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","sourceOld":"  public void testOneDictionary() throws Exception {\n    String toTest = \"hu_HU.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5916de6e2f6deb9da923b2710f6451668e94a20c","date":1403356557,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","sourceNew":"  public void testOneDictionary() throws Exception {\n    String toTest = \"zu_ZA.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","sourceOld":"  public void testOneDictionary() throws Exception {\n    String toTest = \"hu_HU.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","sourceNew":"  public void testOneDictionary() throws Exception {\n    String toTest = \"zu_ZA.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        Path f = DICTIONARY_HOME.resolve(tests[i]);\n        assert Files.exists(f);\n        \n        try (ZipFile zip = new ZipFile(f.toFile(), StandardCharsets.UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","sourceOld":"  public void testOneDictionary() throws Exception {\n    String toTest = \"zu_ZA.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        File f = new File(DICTIONARY_HOME, tests[i]);\n        assert f.exists();\n        \n        try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3125c103a40467dd318d6beff055c5f34b7bcf3a","date":1410661891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","sourceNew":"  public void testOneDictionary() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n\n    String toTest = \"zu_ZA.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        Path f = DICTIONARY_HOME.resolve(tests[i]);\n        assert Files.exists(f);\n        \n        IOUtils.rm(tmp);\n        Files.createDirectory(tmp);\n        \n        try (InputStream in = Files.newInputStream(f)) {\n          TestUtil.unzip(in, tmp);\n          Path dicEntry = tmp.resolve(tests[i+1]);\n          Path affEntry = tmp.resolve(tests[i+2]);\n        \n          try (InputStream dictionary = Files.newInputStream(dicEntry);\n              InputStream affix = Files.newInputStream(affEntry)) {\n            new Dictionary(affix, dictionary);\n          } \n        }\n      }\n    }    \n  }\n\n","sourceOld":"  public void testOneDictionary() throws Exception {\n    String toTest = \"zu_ZA.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        Path f = DICTIONARY_HOME.resolve(tests[i]);\n        assert Files.exists(f);\n        \n        try (ZipFile zip = new ZipFile(f.toFile(), StandardCharsets.UTF_8)) {\n          ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n          assert dicEntry != null;\n          ZipEntry affEntry = zip.getEntry(tests[i+2]);\n          assert affEntry != null;\n        \n          try (InputStream dictionary = zip.getInputStream(dicEntry);\n               InputStream affix = zip.getInputStream(affEntry)) {\n              new Dictionary(affix, dictionary);\n          }\n        }\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries#testOneDictionary().mjava","sourceNew":"  public void testOneDictionary() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n\n    String toTest = \"zu_ZA.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        Path f = DICTIONARY_HOME.resolve(tests[i]);\n        assert Files.exists(f);\n        \n        IOUtils.rm(tmp);\n        Files.createDirectory(tmp);\n        \n        try (InputStream in = Files.newInputStream(f)) {\n          TestUtil.unzip(in, tmp);\n          Path dicEntry = tmp.resolve(tests[i+1]);\n          Path affEntry = tmp.resolve(tests[i+2]);\n        \n          try (InputStream dictionary = Files.newInputStream(dicEntry);\n               InputStream affix = Files.newInputStream(affEntry);\n               Directory tempDir = getDirectory()) {\n            new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          } \n        }\n      }\n    }    \n  }\n\n","sourceOld":"  public void testOneDictionary() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n\n    String toTest = \"zu_ZA.zip\";\n    for (int i = 0; i < tests.length; i++) {\n      if (tests[i].equals(toTest)) {\n        Path f = DICTIONARY_HOME.resolve(tests[i]);\n        assert Files.exists(f);\n        \n        IOUtils.rm(tmp);\n        Files.createDirectory(tmp);\n        \n        try (InputStream in = Files.newInputStream(f)) {\n          TestUtil.unzip(in, tmp);\n          Path dicEntry = tmp.resolve(tests[i+1]);\n          Path affEntry = tmp.resolve(tests[i+2]);\n        \n          try (InputStream dictionary = Files.newInputStream(dicEntry);\n              InputStream affix = Files.newInputStream(affEntry)) {\n            new Dictionary(affix, dictionary);\n          } \n        }\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["ba791bce8103c79e38f957e9c5a53a75871bd918","7d89d7e4e5101347833eea558851bf4209218619"],"5916de6e2f6deb9da923b2710f6451668e94a20c":["7d89d7e4e5101347833eea558851bf4209218619"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["5916de6e2f6deb9da923b2710f6451668e94a20c"],"7d89d7e4e5101347833eea558851bf4209218619":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["3125c103a40467dd318d6beff055c5f34b7bcf3a"],"3125c103a40467dd318d6beff055c5f34b7bcf3a":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"5916de6e2f6deb9da923b2710f6451668e94a20c":["f4abec28b874149a7223e32cc7a01704c27790de"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","5916de6e2f6deb9da923b2710f6451668e94a20c"],"f4abec28b874149a7223e32cc7a01704c27790de":["3125c103a40467dd318d6beff055c5f34b7bcf3a"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3125c103a40467dd318d6beff055c5f34b7bcf3a":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}