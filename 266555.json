{"path":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","commits":[{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Build an automaton accepting all terms with the specified prefix. */\n  public static Automaton toAutomaton(BytesRef prefix) {\n    Automaton automaton = new Automaton();\n    int lastState = automaton.createState();\n    for(int i=0;i<prefix.length;i++) {\n      int state = automaton.createState();\n      automaton.addTransition(lastState, state, prefix.bytes[prefix.offset+i]&0xff);\n      lastState = state;\n    }\n    automaton.setAccept(lastState, true);\n    automaton.addTransition(lastState, lastState, 0, 255);\n    automaton.finishState();\n    assert automaton.isDeterministic();\n    return automaton;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Build an automaton accepting all terms with the specified prefix. */\n  public static Automaton toAutomaton(BytesRef prefix) {\n    Automaton automaton = new Automaton();\n    int lastState = automaton.createState();\n    for(int i=0;i<prefix.length;i++) {\n      int state = automaton.createState();\n      automaton.addTransition(lastState, state, prefix.bytes[prefix.offset+i]&0xff);\n      lastState = state;\n    }\n    automaton.setAccept(lastState, true);\n    automaton.addTransition(lastState, lastState, 0, 255);\n    automaton.finishState();\n    assert automaton.isDeterministic();\n    return automaton;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76d6bf1308ae49017045f54a27a112c662b69f09","date":1470395617,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","sourceNew":"  /** Build an automaton accepting all terms with the specified prefix. */\n  public static Automaton toAutomaton(BytesRef prefix) {\n    final int numStatesAndTransitions = prefix.length+1;\n    final Automaton automaton = new Automaton(numStatesAndTransitions, numStatesAndTransitions);\n    int lastState = automaton.createState();\n    for(int i=0;i<prefix.length;i++) {\n      int state = automaton.createState();\n      automaton.addTransition(lastState, state, prefix.bytes[prefix.offset+i]&0xff);\n      lastState = state;\n    }\n    automaton.setAccept(lastState, true);\n    automaton.addTransition(lastState, lastState, 0, 255);\n    automaton.finishState();\n    assert automaton.isDeterministic();\n    return automaton;\n  }\n\n","sourceOld":"  /** Build an automaton accepting all terms with the specified prefix. */\n  public static Automaton toAutomaton(BytesRef prefix) {\n    Automaton automaton = new Automaton();\n    int lastState = automaton.createState();\n    for(int i=0;i<prefix.length;i++) {\n      int state = automaton.createState();\n      automaton.addTransition(lastState, state, prefix.bytes[prefix.offset+i]&0xff);\n      lastState = state;\n    }\n    automaton.setAccept(lastState, true);\n    automaton.addTransition(lastState, lastState, 0, 255);\n    automaton.finishState();\n    assert automaton.isDeterministic();\n    return automaton;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","sourceNew":"  /** Build an automaton accepting all terms with the specified prefix. */\n  public static Automaton toAutomaton(BytesRef prefix) {\n    final int numStatesAndTransitions = prefix.length+1;\n    final Automaton automaton = new Automaton(numStatesAndTransitions, numStatesAndTransitions);\n    int lastState = automaton.createState();\n    for(int i=0;i<prefix.length;i++) {\n      int state = automaton.createState();\n      automaton.addTransition(lastState, state, prefix.bytes[prefix.offset+i]&0xff);\n      lastState = state;\n    }\n    automaton.setAccept(lastState, true);\n    automaton.addTransition(lastState, lastState, 0, 255);\n    automaton.finishState();\n    assert automaton.isDeterministic();\n    return automaton;\n  }\n\n","sourceOld":"  /** Build an automaton accepting all terms with the specified prefix. */\n  public static Automaton toAutomaton(BytesRef prefix) {\n    Automaton automaton = new Automaton();\n    int lastState = automaton.createState();\n    for(int i=0;i<prefix.length;i++) {\n      int state = automaton.createState();\n      automaton.addTransition(lastState, state, prefix.bytes[prefix.offset+i]&0xff);\n      lastState = state;\n    }\n    automaton.setAccept(lastState, true);\n    automaton.addTransition(lastState, lastState, 0, 255);\n    automaton.finishState();\n    assert automaton.isDeterministic();\n    return automaton;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#toAutomaton(BytesRef).mjava","sourceNew":"  /** Build an automaton accepting all terms with the specified prefix. */\n  public static Automaton toAutomaton(BytesRef prefix) {\n    final int numStatesAndTransitions = prefix.length+1;\n    final Automaton automaton = new Automaton(numStatesAndTransitions, numStatesAndTransitions);\n    int lastState = automaton.createState();\n    for(int i=0;i<prefix.length;i++) {\n      int state = automaton.createState();\n      automaton.addTransition(lastState, state, prefix.bytes[prefix.offset+i]&0xff);\n      lastState = state;\n    }\n    automaton.setAccept(lastState, true);\n    automaton.addTransition(lastState, lastState, 0, 255);\n    automaton.finishState();\n    assert automaton.isDeterministic();\n    return automaton;\n  }\n\n","sourceOld":"  /** Build an automaton accepting all terms with the specified prefix. */\n  public static Automaton toAutomaton(BytesRef prefix) {\n    Automaton automaton = new Automaton();\n    int lastState = automaton.createState();\n    for(int i=0;i<prefix.length;i++) {\n      int state = automaton.createState();\n      automaton.addTransition(lastState, state, prefix.bytes[prefix.offset+i]&0xff);\n      lastState = state;\n    }\n    automaton.setAccept(lastState, true);\n    automaton.addTransition(lastState, lastState, 0, 255);\n    automaton.finishState();\n    assert automaton.isDeterministic();\n    return automaton;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76d6bf1308ae49017045f54a27a112c662b69f09":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0","76d6bf1308ae49017045f54a27a112c662b69f09"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0","76d6bf1308ae49017045f54a27a112c662b69f09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76d6bf1308ae49017045f54a27a112c662b69f09"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","76d6bf1308ae49017045f54a27a112c662b69f09","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"76d6bf1308ae49017045f54a27a112c662b69f09":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}