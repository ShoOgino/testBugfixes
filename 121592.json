{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","commits":[{"id":"99a5f85422ca89d404fe800c0beb4cb6796feb60","date":1433398015,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"/dev/null","sourceNew":"  private void testNoConfigSetExist() throws Exception {\n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().updateClusterState(true);\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    assertNull(slices);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertFalse(collections.contains(\"corewithnocollection3\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  private void testNoConfigSetExist() throws Exception {\n    cloudClient.getZkStateReader().updateClusterState();\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().updateClusterState();\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    assertNull(slices);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertFalse(collections.contains(\"corewithnocollection3\"));\n  }\n\n","sourceOld":"  private void testNoConfigSetExist() throws Exception {\n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().updateClusterState(true);\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    assertNull(slices);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertFalse(collections.contains(\"corewithnocollection3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"175a04d27a2b736171e7e51ca46a03b2aec094d4","date":1452534768,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  private void testNoConfigSetExist() throws Exception {\n    cloudClient.getZkStateReader().updateClusterState();\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().updateClusterState();\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertTrue(collections.contains(\"corewithnocollection3\"));\n  }\n\n","sourceOld":"  private void testNoConfigSetExist() throws Exception {\n    cloudClient.getZkStateReader().updateClusterState();\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().updateClusterState();\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    assertNull(slices);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertFalse(collections.contains(\"corewithnocollection3\"));\n  }\n\n","bugFix":["99a5f85422ca89d404fe800c0beb4cb6796feb60"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  private void testNoConfigSetExist() throws Exception {\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertTrue(collections.contains(\"corewithnocollection3\"));\n  }\n\n","sourceOld":"  private void testNoConfigSetExist() throws Exception {\n    cloudClient.getZkStateReader().updateClusterState();\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().updateClusterState();\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertTrue(collections.contains(\"corewithnocollection3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(createCmd);\n    });\n\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    // TODO - WTF? shouldn't this *not* contain the collection?\n    assertTrue(CollectionAdminRequest.listCollections(cloudClient).contains(\"corewithnocollection3\"));\n\n  }\n\n","sourceOld":"  private void testNoConfigSetExist() throws Exception {\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertTrue(collections.contains(\"corewithnocollection3\"));\n  }\n\n","bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(createCmd);\n    });\n\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    // TODO - WTF? shouldn't this *not* contain the collection?\n    assertTrue(CollectionAdminRequest.listCollections(cloudClient).contains(\"corewithnocollection3\"));\n\n  }\n\n","sourceOld":"  private void testNoConfigSetExist() throws Exception {\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n    boolean gotExp = false;\n    try {\n      makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), createCmd);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n\n    assertTrue(gotExp);\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    CollectionAdminResponse res = new CollectionAdminResponse();\n        res.setResponse(makeRequest(getBaseUrl((HttpSolrClient) clients.get(1)), list));\n    List<String> collections = (List<String>) res.getResponse().get(\"collections\");\n    assertTrue(collections.contains(\"corewithnocollection3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3497f9b38a89a21fe71affd4e085cf48556bce85","date":1486066327,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(createCmd);\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    // TODO - WTF? shouldn't this *not* contain the collection?\n    assertTrue(CollectionAdminRequest.listCollections(cloudClient).contains(\"corewithnocollection3\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(createCmd);\n    });\n\n    TimeUnit.MILLISECONDS.sleep(200);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    // TODO - WTF? shouldn't this *not* contain the collection?\n    assertTrue(CollectionAdminRequest.listCollections(cloudClient).contains(\"corewithnocollection3\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createCollection(\"noconfig\", \"conf123\", 1, 1)\n          .process(cluster.getSolrClient());\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cluster.getSolrClient().getZkStateReader().forceUpdateCollection(\"noconfig\");\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(\"noconfig\"));\n  }\n\n","sourceOld":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(createCmd);\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    // TODO - WTF? shouldn't this *not* contain the collection?\n    assertTrue(CollectionAdminRequest.listCollections(cloudClient).contains(\"corewithnocollection3\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createCollection(\"noconfig\", \"conf123\", 1, 1)\n          .process(cluster.getSolrClient());\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cluster.getSolrClient().getZkStateReader().forceUpdateCollection(\"noconfig\");\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(\"noconfig\"));\n  }\n\n","sourceOld":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(createCmd);\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    // TODO - WTF? shouldn't this *not* contain the collection?\n    assertTrue(CollectionAdminRequest.listCollections(cloudClient).contains(\"corewithnocollection3\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createCollection(\"noconfig\", \"conf123\", 1, 1)\n          .process(cluster.getSolrClient());\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cluster.getSolrClient().getZkStateReader().forceUpdateCollection(\"noconfig\");\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(\"noconfig\"));\n  }\n\n","sourceOld":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"corewithnocollection3\"));\n\n    // try and create a SolrCore with no collection name\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"corewithnocollection3\");\n    createCmd.setCollection(\"\");\n    String dataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(dataDir);\n    createCmd.setNumShards(1);\n    createCmd.setCollectionConfigName(\"conf123\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(createCmd);\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cloudClient.getZkStateReader().forceUpdateCollection(\"corewithnocollection3\");\n\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(\"corewithnocollection3\");\n    int replicaCount = 0;\n    if (slices != null) {\n      for (Slice slice : slices) {\n        replicaCount += slice.getReplicas().size();\n      }\n    }\n    assertEquals(\"replicaCount\", 0, replicaCount);\n\n    // TODO - WTF? shouldn't this *not* contain the collection?\n    assertTrue(CollectionAdminRequest.listCollections(cloudClient).contains(\"corewithnocollection3\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createCollection(\"noconfig\", \"conf123\", 1, 1)\n          .process(cluster.getSolrClient());\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cluster.getSolrClient().getZkStateReader().forceUpdateCollection(\"noconfig\");\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(\"noconfig\"));\n  }\n\n","sourceOld":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createCollection(\"noconfig\", \"conf123\", 1, 1)\n          .process(cluster.getSolrClient());\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cluster.getSolrClient().getZkStateReader().forceUpdateCollection(\"noconfig\");\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(\"noconfig\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testNoConfigSetExist().mjava","sourceNew":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createCollection(\"noconfig\", \"conf123\", 1, 1)\n          .process(cluster.getSolrClient());\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cluster.getSolrClient().getZkStateReader().forceUpdateCollection(\"noconfig\");\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(\"noconfig\"));\n  }\n\n","sourceOld":"  @Test\n  public void testNoConfigSetExist() throws Exception {\n\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createCollection(\"noconfig\", \"conf123\", 1, 1)\n          .process(cluster.getSolrClient());\n    });\n\n    TimeUnit.MILLISECONDS.sleep(1000);\n    // in both cases, the collection should have default to the core name\n    cluster.getSolrClient().getZkStateReader().forceUpdateCollection(\"noconfig\");\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient()).contains(\"noconfig\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["3497f9b38a89a21fe71affd4e085cf48556bce85"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["99a5f85422ca89d404fe800c0beb4cb6796feb60"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["28288370235ed02234a64753cdbf0c6ec096304a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3497f9b38a89a21fe71affd4e085cf48556bce85","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["3497f9b38a89a21fe71affd4e085cf48556bce85","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"99a5f85422ca89d404fe800c0beb4cb6796feb60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3497f9b38a89a21fe71affd4e085cf48556bce85":["a4efd3fffdd7acd625bb88e455c8097e17f75735"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","3497f9b38a89a21fe71affd4e085cf48556bce85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99a5f85422ca89d404fe800c0beb4cb6796feb60"],"99a5f85422ca89d404fe800c0beb4cb6796feb60":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"3497f9b38a89a21fe71affd4e085cf48556bce85":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}