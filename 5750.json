{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685c242a4f1bc78f1fa61c131bd557355edad6c7","date":1429208182,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   */\n  public void add(Term[] terms, int position) {\n    Objects.requireNonNull(terms, \"Term array must not be null\");\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   */\n  public void add(Term[] terms, int position) {\n    Objects.requireNonNull(terms, \"Term array must not be null\");\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   */\n  public void add(Term[] terms, int position) {\n    Objects.requireNonNull(terms, \"Term array must not be null\");\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"860d9cc0c963b5c0db351fb0473b6894b1d96020","date":1448302628,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * The array is not copied or mutated, the caller should consider it\n   * immutable subsequent to calling this method.\n   */\n  public void add(Term[] terms, int position) {\n    Objects.requireNonNull(terms, \"Term array must not be null\");\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (Term term : terms) {\n      if (!term.field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \" + term);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(position);\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   */\n  public void add(Term[] terms, int position) {\n    Objects.requireNonNull(terms, \"Term array must not be null\");\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":["45f06bdc846cdc9b2546a27a8a1492d613e87879","6bcde5e3f23911110baa101ed062b544162825b5","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":4,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * The array is not copied or mutated, the caller should consider it\n   * immutable subsequent to calling this method.\n   */\n  public void add(Term[] terms, int position) {\n    Objects.requireNonNull(terms, \"Term array must not be null\");\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (Term term : terms) {\n      if (!term.field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \" + term);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(position);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * The array is not copied or mutated, the caller should consider it\n   * immutable subsequent to calling this method.\n   */\n  public void add(Term[] terms, int position) {\n    Objects.requireNonNull(terms, \"Term array must not be null\");\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (Term term : terms) {\n      if (!term.field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \" + term);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(position);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"e9e1499c5d26c936238506df90a3c02c76707722":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["e9e1499c5d26c936238506df90a3c02c76707722"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["860d9cc0c963b5c0db351fb0473b6894b1d96020","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"e9e1499c5d26c936238506df90a3c02c76707722":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["e9e1499c5d26c936238506df90a3c02c76707722"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}