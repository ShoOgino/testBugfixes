{"path":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = new FixedBitSetIterator(bits, 0L); // the cost is not useful here\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = new BitSetIterator(bits, 0L); // the cost is not useful here\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = new FixedBitSetIterator(bits, 0L); // the cost is not useful here\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      // our cast is ok, since we open the Directory.\n      super((CodecReader) context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = new BitSetIterator(bits, 0L); // the cost is not useful here\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = new BitSetIterator(bits, 0L); // the cost is not useful here\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eb27e66c7f4fe0888faf8a05111a36969584bf4","date":1435647050,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Weight,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredLeafIndexReader#DocumentFilteredLeafIndexReader(LeafReaderContext,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Weight preserveWeight, boolean negateFilter) throws IOException {\n      // our cast is ok, since we open the Directory.\n      super((CodecReader) context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSetIterator preserveIt = preserveWeight.scorer(context);\n      if (preserveIt != null) {\n        bits.or(preserveIt);\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = new BitSetIterator(bits, 0L); // the cost is not useful here\n        for (int i = it.nextDoc(); i != DocIdSetIterator.NO_MORE_DOCS; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n\n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredLeafIndexReader(LeafReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      // our cast is ok, since we open the Directory.\n      super((CodecReader) context.reader());\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = new BitSetIterator(bits, 0L); // the cost is not useful here\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7eb27e66c7f4fe0888faf8a05111a36969584bf4":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7eb27e66c7f4fe0888faf8a05111a36969584bf4"]},"commit2Childs":{"7eb27e66c7f4fe0888faf8a05111a36969584bf4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["7eb27e66c7f4fe0888faf8a05111a36969584bf4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}