{"path":"src/test/org/apache/lucene/analysis/TestAnalyzers#testSimple().mjava","commits":[{"id":"12600386fedb0398b0f8e7b710089727b833c2e0","date":1004754826,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testSimple().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(Version.LUCENE_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testSimple().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(Version.LUCENE_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestAnalyzers#testSimple().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["12600386fedb0398b0f8e7b710089727b833c2e0"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12600386fedb0398b0f8e7b710089727b833c2e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12600386fedb0398b0f8e7b710089727b833c2e0"],"12600386fedb0398b0f8e7b710089727b833c2e0":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}