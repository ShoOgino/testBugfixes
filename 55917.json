{"path":"backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal);\n        \n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we never need to use TermDocs,\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, false) {\n          @Override\n          final boolean matchDoc(int doc) {\n            return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal);\n        \n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we never need to use TermDocs,\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, false) {\n          @Override\n          final boolean matchDoc(int doc) {\n            return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal);\n        \n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we never need to use TermDocs,\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, false) {\n          @Override\n          final boolean matchDoc(int doc) {\n            return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}