{"path":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#assertGaugeMetricsChanged(boolean,boolean).mjava","commits":[{"id":"26bd56bd7f06194390617d646d6b9a24a7a472dd","date":1420576157,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#assertGaugeMetricsChanged(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Stateful method to verify whether the amount of buffers allocated and lost\n   * since the last call has changed.\n   *\n   * @param allocated\n   *          whether buffers should have been allocated since the last call\n   * @param lost\n   *          whether buffers should have been lost since the last call\n   */\n  private void assertGaugeMetricsChanged(boolean allocated, boolean lost) {\n    NamedList<Number> stats = metrics.getStatistics();\n\n    assertEquals(\"Buffer allocation metric not updating correctly.\",\n        allocated, isMetricPositive(stats, \"buffercache.allocations\"));\n    assertEquals(\"Buffer lost metric not updating correctly.\",\n        lost, isMetricPositive(stats, \"buffercache.lost\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#assertGaugeMetricsChanged(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#assertGaugeMetricsChanged(boolean,boolean).mjava","sourceNew":"  /**\n   * Stateful method to verify whether the amount of buffers allocated and lost\n   * since the last call has changed.\n   *\n   * @param allocated\n   *          whether buffers should have been allocated since the last call\n   * @param lost\n   *          whether buffers should have been lost since the last call\n   */\n  private void assertGaugeMetricsChanged(boolean allocated, boolean lost) {\n    Map<String,Object> stats = metricsMap.getValue();\n\n    assertEquals(\"Buffer allocation metric not updating correctly.\",\n        allocated, isMetricPositive(stats, \"buffercache.allocations\"));\n    assertEquals(\"Buffer lost metric not updating correctly.\",\n        lost, isMetricPositive(stats, \"buffercache.lost\"));\n  }\n\n","sourceOld":"  /**\n   * Stateful method to verify whether the amount of buffers allocated and lost\n   * since the last call has changed.\n   *\n   * @param allocated\n   *          whether buffers should have been allocated since the last call\n   * @param lost\n   *          whether buffers should have been lost since the last call\n   */\n  private void assertGaugeMetricsChanged(boolean allocated, boolean lost) {\n    NamedList<Number> stats = metrics.getStatistics();\n\n    assertEquals(\"Buffer allocation metric not updating correctly.\",\n        allocated, isMetricPositive(stats, \"buffercache.allocations\"));\n    assertEquals(\"Buffer lost metric not updating correctly.\",\n        lost, isMetricPositive(stats, \"buffercache.lost\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#assertGaugeMetricsChanged(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#assertGaugeMetricsChanged(boolean,boolean).mjava","sourceNew":"  /**\n   * Stateful method to verify whether the amount of buffers allocated and lost\n   * since the last call has changed.\n   *\n   * @param allocated\n   *          whether buffers should have been allocated since the last call\n   * @param lost\n   *          whether buffers should have been lost since the last call\n   */\n  private void assertGaugeMetricsChanged(boolean allocated, boolean lost) {\n    Map<String,Object> stats = metricsMap.getValue();\n\n    assertEquals(\"Buffer allocation metric not updating correctly.\",\n        allocated, isMetricPositive(stats, \"buffercache.allocations\"));\n    assertEquals(\"Buffer lost metric not updating correctly.\",\n        lost, isMetricPositive(stats, \"buffercache.lost\"));\n  }\n\n","sourceOld":"  /**\n   * Stateful method to verify whether the amount of buffers allocated and lost\n   * since the last call has changed.\n   *\n   * @param allocated\n   *          whether buffers should have been allocated since the last call\n   * @param lost\n   *          whether buffers should have been lost since the last call\n   */\n  private void assertGaugeMetricsChanged(boolean allocated, boolean lost) {\n    NamedList<Number> stats = metrics.getStatistics();\n\n    assertEquals(\"Buffer allocation metric not updating correctly.\",\n        allocated, isMetricPositive(stats, \"buffercache.allocations\"));\n    assertEquals(\"Buffer lost metric not updating correctly.\",\n        lost, isMetricPositive(stats, \"buffercache.lost\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}