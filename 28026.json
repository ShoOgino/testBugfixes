{"path":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","commits":[{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader(), singletonCommands));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader(), singletonCommands));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader(), singletonCommands));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","sourceNew":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n    for (ContentStream stream : streams) {\n      if (\"application/javabin\".equals(stream.getContentType())) {\n        ops.addAll(parse(stream.getStream(), singletonCommands));\n      } else {\n        ops.addAll(parse(stream.getReader(), singletonCommands));\n      }\n    }\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader(), singletonCommands));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","sourceNew":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n    for (ContentStream stream : streams) {\n      if (\"application/javabin\".equals(stream.getContentType())) {\n        ops.addAll(parse(stream.getStream(), singletonCommands));\n      } else {\n        ops.addAll(parse(stream.getReader(), singletonCommands));\n      }\n    }\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader(), singletonCommands));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n    for (ContentStream stream : streams) {\n      if (\"application/javabin\".equals(stream.getContentType())) {\n        ops.addAll(parse(stream.getStream(), singletonCommands));\n      } else {\n        ops.addAll(parse(stream.getReader(), singletonCommands));\n      }\n    }\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33138637f13378b80c31543ed4d8c44c00269c1d","date":1509606571,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","sourceNew":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n    for (ContentStream stream : streams) {\n\n      if (\"application/javabin\".equals(stream.getContentType())) {\n        ops.addAll(parse(stream.getStream(), singletonCommands));\n      } else {\n        ops.addAll(parse(stream.getReader(), singletonCommands));\n      }\n    }\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n    for (ContentStream stream : streams) {\n      if (\"application/javabin\".equals(stream.getContentType())) {\n        ops.addAll(parse(stream.getStream(), singletonCommands));\n      } else {\n        ops.addAll(parse(stream.getReader(), singletonCommands));\n      }\n    }\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList,Set[String]).mjava","sourceNew":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams,\n                                                    @SuppressWarnings({\"rawtypes\"})NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n    for (ContentStream stream : streams) {\n\n      if (\"application/javabin\".equals(stream.getContentType())) {\n        ops.addAll(parse(stream.getStream(), singletonCommands));\n      } else {\n        ops.addAll(parse(stream.getReader(), singletonCommands));\n      }\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":"  /**\n   * Read commands from request streams\n   *\n   * @param streams           the streams\n   * @param resp              solr query response\n   * @param singletonCommands , commands that cannot be repeated\n   * @return parsed list of commands\n   * @throws IOException if there is an error while parsing the stream\n   */\n  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp, Set<String> singletonCommands)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n    for (ContentStream stream : streams) {\n\n      if (\"application/javabin\".equals(stream.getContentType())) {\n        ops.addAll(parse(stream.getStream(), singletonCommands));\n      } else {\n        ops.addAll(parse(stream.getReader(), singletonCommands));\n      }\n    }\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["33138637f13378b80c31543ed4d8c44c00269c1d"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d3fc88a06a44fc3112186e9be4562b36713955d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"33138637f13378b80c31543ed4d8c44c00269c1d":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["33138637f13378b80c31543ed4d8c44c00269c1d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"33138637f13378b80c31543ed4d8c44c00269c1d":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}