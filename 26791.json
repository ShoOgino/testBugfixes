{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacf7f8a9f6ea920c7ca39f86371d4e25397121b","date":1297761846,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aacf7f8a9f6ea920c7ca39f86371d4e25397121b"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aacf7f8a9f6ea920c7ca39f86371d4e25397121b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}