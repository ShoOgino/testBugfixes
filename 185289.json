{"path":"lucene/backwards/src/java/org/apache/lucene/search/FilteredQuery#createWeight(Searcher).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FilteredQuery#createWeight(Searcher).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FilteredQuery#createWeight(Searcher).mjava","sourceNew":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  @Override\n  public Weight createWeight(final Searcher searcher) throws IOException {\n    final Weight weight = query.createWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new Weight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      @Override\n      public float getValue() { return value; }\n      \n      @Override\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n\n      @Override\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n\n      @Override\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSet docIdSet = f.getDocIdSet(ir);\n        DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSet.EMPTY_DOCIDSET.iterator() : docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      @Override\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      @Override\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, true, false);\n        if (scorer == null) {\n          return null;\n        }\n        DocIdSet docIdSet = filter.getDocIdSet(indexReader);\n        if (docIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator docIdSetIterator = docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          return null;\n        }\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          @Override\n          public int docID() { return doc; }\n          \n          @Override\n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          @Override\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  @Override\n  public Weight createWeight(final Searcher searcher) throws IOException {\n    final Weight weight = query.createWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new Weight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      @Override\n      public float getValue() { return value; }\n      \n      @Override\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n\n      @Override\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n\n      @Override\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSet docIdSet = f.getDocIdSet(ir);\n        DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSet.EMPTY_DOCIDSET.iterator() : docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      @Override\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      @Override\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, true, false);\n        if (scorer == null) {\n          return null;\n        }\n        DocIdSet docIdSet = filter.getDocIdSet(indexReader);\n        if (docIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator docIdSetIterator = docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          return null;\n        }\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          @Override\n          public int docID() { return doc; }\n          \n          @Override\n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          @Override\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/FilteredQuery#createWeight(Searcher).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a Weight that applies the filter to the enclosed query's Weight.\n   * This is accomplished by overriding the Scorer returned by the Weight.\n   */\n  @Override\n  public Weight createWeight(final Searcher searcher) throws IOException {\n    final Weight weight = query.createWeight (searcher);\n    final Similarity similarity = query.getSimilarity(searcher);\n    return new Weight() {\n      private float value;\n        \n      // pass these methods through to enclosed query's weight\n      @Override\n      public float getValue() { return value; }\n      \n      @Override\n      public float sumOfSquaredWeights() throws IOException { \n        return weight.sumOfSquaredWeights() * getBoost() * getBoost(); \n      }\n\n      @Override\n      public void normalize (float v) { \n        weight.normalize(v);\n        value = weight.getValue() * getBoost();\n      }\n\n      @Override\n      public Explanation explain (IndexReader ir, int i) throws IOException {\n        Explanation inner = weight.explain (ir, i);\n        if (getBoost()!=1) {\n          Explanation preBoost = inner;\n          inner = new Explanation(inner.getValue()*getBoost(),\"product of:\");\n          inner.addDetail(new Explanation(getBoost(),\"boost\"));\n          inner.addDetail(preBoost);\n        }\n        Filter f = FilteredQuery.this.filter;\n        DocIdSet docIdSet = f.getDocIdSet(ir);\n        DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSet.EMPTY_DOCIDSET.iterator() : docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n        if (docIdSetIterator.advance(i) == i) {\n          return inner;\n        } else {\n          Explanation result = new Explanation\n            (0.0f, \"failure to match filter: \" + f.toString());\n          result.addDetail(inner);\n          return result;\n        }\n      }\n\n      // return this query\n      @Override\n      public Query getQuery() { return FilteredQuery.this; }\n\n      // return a filtering scorer\n      @Override\n      public Scorer scorer(IndexReader indexReader, boolean scoreDocsInOrder, boolean topScorer)\n          throws IOException {\n        final Scorer scorer = weight.scorer(indexReader, true, false);\n        if (scorer == null) {\n          return null;\n        }\n        DocIdSet docIdSet = filter.getDocIdSet(indexReader);\n        if (docIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator docIdSetIterator = docIdSet.iterator();\n        if (docIdSetIterator == null) {\n          return null;\n        }\n\n        return new Scorer(similarity) {\n\n          private int doc = -1;\n          \n          private int advanceToCommon(int scorerDoc, int disiDoc) throws IOException {\n            while (scorerDoc != disiDoc) {\n              if (scorerDoc < disiDoc) {\n                scorerDoc = scorer.advance(disiDoc);\n              } else {\n                disiDoc = docIdSetIterator.advance(scorerDoc);\n              }\n            }\n            return scorerDoc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            int scorerDoc, disiDoc;\n            return doc = (disiDoc = docIdSetIterator.nextDoc()) != NO_MORE_DOCS\n                && (scorerDoc = scorer.nextDoc()) != NO_MORE_DOCS\n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n          \n          @Override\n          public int docID() { return doc; }\n          \n          @Override\n          public int advance(int target) throws IOException {\n            int disiDoc, scorerDoc;\n            return doc = (disiDoc = docIdSetIterator.advance(target)) != NO_MORE_DOCS\n                && (scorerDoc = scorer.advance(disiDoc)) != NO_MORE_DOCS \n                && advanceToCommon(scorerDoc, disiDoc) != NO_MORE_DOCS ? scorer.docID() : NO_MORE_DOCS;\n          }\n\n          @Override\n          public float score() throws IOException { return getBoost() * scorer.score(); }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}