{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      final int pos;\n      if (readPositions) {\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, POS): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n        pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      } else {\n        pos = -1;\n      }\n\n      if (readOffsets) {\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, START_OFFSET): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+START_OFFSET.length, scratch.length-START_OFFSET.length, scratchUTF16_2);\n        startOffset = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, END_OFFSET): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+END_OFFSET.length, scratch.length-END_OFFSET.length, scratchUTF16_2);\n        endOffset = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      }\n\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (StringHelper.startsWith(scratch, PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      final int pos;\n      if (readPositions) {\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, POS): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n        pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      } else {\n        pos = -1;\n      }\n\n      if (readOffsets) {\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, START_OFFSET): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+START_OFFSET.length, scratch.length-START_OFFSET.length, scratchUTF16_2);\n        startOffset = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, END_OFFSET): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+END_OFFSET.length, scratch.length-END_OFFSET.length, scratchUTF16_2);\n        endOffset = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      }\n\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (StringHelper.startsWith(scratch, PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      final int pos;\n      if (readPositions) {\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, POS): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n        pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      } else {\n        pos = -1;\n      }\n\n      if (readOffsets) {\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, START_OFFSET): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+START_OFFSET.length, scratch.length-START_OFFSET.length, scratchUTF16_2);\n        startOffset = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, END_OFFSET): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+END_OFFSET.length, scratch.length-END_OFFSET.length, scratchUTF16_2);\n        endOffset = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      }\n\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (StringHelper.startsWith(scratch, PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      final int pos;\n      if (readPositions) {\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, POS): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n        pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      } else {\n        pos = -1;\n      }\n\n      if (readOffsets) {\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, START_OFFSET): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+START_OFFSET.length, scratch.length-START_OFFSET.length, scratchUTF16_2);\n        startOffset = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, END_OFFSET): \"got line=\" + scratch.utf8ToString();\n        UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+END_OFFSET.length, scratch.length-END_OFFSET.length, scratchUTF16_2);\n        endOffset = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      }\n\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (StringHelper.startsWith(scratch, PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}