{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","commits":[{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll().mjava","sourceNew":"  final synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":"  final synchronized void unlockAllAfterAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll().mjava","sourceNew":"  final synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":"  final synchronized void unlockAllAfterAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","sourceNew":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":"  final synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8881d151c969a46b4293caa77faa7ecd63239100","date":1436824297,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","sourceNew":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    perThreadPool.clearAbort();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch (Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11f03fdb6e013cb2da7aa973c84bf9de326c56d","date":1436880767,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","sourceNew":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    perThreadPool.clearAbort();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch (Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n\n    perThreadPool.clearAbort();\n  }\n\n","sourceOld":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    perThreadPool.clearAbort();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch (Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["41e6e2c132608605ce2fe847d7d20d30064a971a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41e6e2c132608605ce2fe847d7d20d30064a971a","date":1437182290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","sourceNew":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    perThreadPool.clearAbort();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch (Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    perThreadPool.clearAbort();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch (Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n\n    perThreadPool.clearAbort();\n  }\n\n","bugFix":["f11f03fdb6e013cb2da7aa973c84bf9de326c56d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c","date":1521393811,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","sourceNew":null,"sourceOld":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    perThreadPool.clearAbort();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch (Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","sourceNew":null,"sourceOld":"  synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    perThreadPool.clearAbort();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch (Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c":["41e6e2c132608605ce2fe847d7d20d30064a971a"],"7af110b00ea8df9429309d83e38e0533d82e144f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41e6e2c132608605ce2fe847d7d20d30064a971a":["f11f03fdb6e013cb2da7aa973c84bf9de326c56d"],"f11f03fdb6e013cb2da7aa973c84bf9de326c56d":["8881d151c969a46b4293caa77faa7ecd63239100"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8881d151c969a46b4293caa77faa7ecd63239100":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["41e6e2c132608605ce2fe847d7d20d30064a971a","af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["7af110b00ea8df9429309d83e38e0533d82e144f"]},"commit2Childs":{"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","c02b804ab16489b95429791a2d8fb0e0728354d4"],"41e6e2c132608605ce2fe847d7d20d30064a971a":["af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c","203e3fcf513c02ee2c07015f2ce277e26dc60907"],"f11f03fdb6e013cb2da7aa973c84bf9de326c56d":["41e6e2c132608605ce2fe847d7d20d30064a971a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"8881d151c969a46b4293caa77faa7ecd63239100":["f11f03fdb6e013cb2da7aa973c84bf9de326c56d"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["8881d151c969a46b4293caa77faa7ecd63239100"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}