{"path":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(ShapeQuery,FixedBitSet,int[]).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(ShapeQuery,FixedBitSet,int[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","sourceNew":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(ShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            visit(docID);\n          }\n        }\n\n        @Override\n        public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n          if (query.queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              visit(docID);\n            }\n          }\n        }\n\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","sourceOld":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            visit(docID);\n          }\n        }\n\n        @Override\n        public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n          if (query.queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              visit(docID);\n            }\n          }\n        }\n\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(ShapeQuery,FixedBitSet,int[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(ShapeQuery,FixedBitSet,int[]).mjava","sourceNew":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(ShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            visit(docID);\n          }\n        }\n\n        @Override\n        public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n          if (query.queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              visit(docID);\n            }\n          }\n        }\n\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","sourceOld":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(ShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            visit(docID);\n          }\n        }\n\n        @Override\n        public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n          if (query.queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              visit(docID);\n            }\n          }\n        }\n\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637ced5887480f9803707c2fc68df68ce0c0bf13","date":1568120036,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(ShapeQuery,FixedBitSet,int[]).mjava","sourceNew":null,"sourceOld":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(ShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            visit(docID);\n          }\n        }\n\n        @Override\n        public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n          if (query.queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              visit(docID);\n            }\n          }\n        }\n\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["5ed90f8ba7e7be13d155f954862178b23a324125"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["637ced5887480f9803707c2fc68df68ce0c0bf13"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}