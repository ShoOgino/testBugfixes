{"path":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#merge(NumericFieldUpdates).mjava","commits":[{"id":"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe","date":1381909398,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#merge(NumericFieldUpdates).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void merge(NumericFieldUpdates other) {\n      if (other instanceof PackedNumericFieldUpdates) {\n        PackedNumericFieldUpdates packedOther = (PackedNumericFieldUpdates) other;\n        if (size  + packedOther.size > Integer.MAX_VALUE) {\n          throw new IllegalStateException(\n              \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n                  + size + \" other.size=\" + packedOther.size);\n        }\n        docs = docs.grow(size + packedOther.size);\n        values = values.grow(size + packedOther.size);\n        int numWords = (int) (docs.size() >> 6);\n        if (docsWithField.getBits().length <= numWords) {\n          numWords = ArrayUtil.oversize(numWords + 1, RamUsageEstimator.NUM_BYTES_LONG);\n          docsWithField = new FixedBitSet(docsWithField, numWords << 6);\n        }\n        for (int i = 0; i < packedOther.size; i++) {\n          int doc = (int) packedOther.docs.get(i);\n          if (packedOther.docsWithField.get(i)) {\n            docsWithField.set(size);\n          }\n          docs.set(size, doc);\n          values.set(size, packedOther.values.get(i));\n          ++size;\n        }\n      } else {\n        UpdatesIterator iter = other.getUpdates();\n        int doc;\n        while ((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          Long value = iter.value();\n          if (value == null) {\n            value = NumericUpdate.MISSING;\n          }\n          add(doc, value);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#merge(NumericFieldUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#merge(NumericFieldUpdates).mjava","sourceNew":"    @Override\n    public void merge(NumericFieldUpdates other) {\n      if (other instanceof PackedNumericFieldUpdates) {\n        PackedNumericFieldUpdates packedOther = (PackedNumericFieldUpdates) other;\n        if (size  + packedOther.size > Integer.MAX_VALUE) {\n          throw new IllegalStateException(\n              \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n                  + size + \" other.size=\" + packedOther.size);\n        }\n        docs = docs.grow(size + packedOther.size);\n        values = values.grow(size + packedOther.size);\n        docsWithField = FixedBitSet.ensureCapacity(docsWithField, (int) docs.size());\n        for (int i = 0; i < packedOther.size; i++) {\n          int doc = (int) packedOther.docs.get(i);\n          if (packedOther.docsWithField.get(i)) {\n            docsWithField.set(size);\n          }\n          docs.set(size, doc);\n          values.set(size, packedOther.values.get(i));\n          ++size;\n        }\n      } else {\n        UpdatesIterator iter = other.getUpdates();\n        int doc;\n        while ((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          Long value = iter.value();\n          if (value == null) {\n            value = NumericUpdate.MISSING;\n          }\n          add(doc, value);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(NumericFieldUpdates other) {\n      if (other instanceof PackedNumericFieldUpdates) {\n        PackedNumericFieldUpdates packedOther = (PackedNumericFieldUpdates) other;\n        if (size  + packedOther.size > Integer.MAX_VALUE) {\n          throw new IllegalStateException(\n              \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n                  + size + \" other.size=\" + packedOther.size);\n        }\n        docs = docs.grow(size + packedOther.size);\n        values = values.grow(size + packedOther.size);\n        int numWords = (int) (docs.size() >> 6);\n        if (docsWithField.getBits().length <= numWords) {\n          numWords = ArrayUtil.oversize(numWords + 1, RamUsageEstimator.NUM_BYTES_LONG);\n          docsWithField = new FixedBitSet(docsWithField, numWords << 6);\n        }\n        for (int i = 0; i < packedOther.size; i++) {\n          int doc = (int) packedOther.docs.get(i);\n          if (packedOther.docsWithField.get(i)) {\n            docsWithField.set(size);\n          }\n          docs.set(size, doc);\n          values.set(size, packedOther.values.get(i));\n          ++size;\n        }\n      } else {\n        UpdatesIterator iter = other.getUpdates();\n        int doc;\n        while ((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          Long value = iter.value();\n          if (value == null) {\n            value = NumericUpdate.MISSING;\n          }\n          add(doc, value);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#merge(NumericFieldUpdates).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void merge(NumericFieldUpdates other) {\n      if (other instanceof PackedNumericFieldUpdates) {\n        PackedNumericFieldUpdates packedOther = (PackedNumericFieldUpdates) other;\n        if (size  + packedOther.size > Integer.MAX_VALUE) {\n          throw new IllegalStateException(\n              \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n                  + size + \" other.size=\" + packedOther.size);\n        }\n        docs = docs.grow(size + packedOther.size);\n        values = values.grow(size + packedOther.size);\n        docsWithField = FixedBitSet.ensureCapacity(docsWithField, (int) docs.size());\n        for (int i = 0; i < packedOther.size; i++) {\n          int doc = (int) packedOther.docs.get(i);\n          if (packedOther.docsWithField.get(i)) {\n            docsWithField.set(size);\n          }\n          docs.set(size, doc);\n          values.set(size, packedOther.values.get(i));\n          ++size;\n        }\n      } else {\n        UpdatesIterator iter = other.getUpdates();\n        int doc;\n        while ((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          Long value = iter.value();\n          if (value == null) {\n            value = NumericUpdate.MISSING;\n          }\n          add(doc, value);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06805da26538ed636bd89b10c2699cc3834032ae":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06805da26538ed636bd89b10c2699cc3834032ae"]},"commit2Childs":{"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["3995f83351082af8ae83bb017e63c56818fc1568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"06805da26538ed636bd89b10c2699cc3834032ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3995f83351082af8ae83bb017e63c56818fc1568":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}