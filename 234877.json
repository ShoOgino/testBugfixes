{"path":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testUnorderedDistinct().mjava","commits":[{"id":"c3480728ed564c17162fff1200a8d15c1a5f24cd","date":1527693339,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testUnorderedDistinct().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unordered(false, Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unordered(false,\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unordered(false,\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53","date":1559915156,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testUnorderedDistinct().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testUnorderedDistinct().mjava","sourceNew":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unorderedNoOverlaps(Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.term(\"porridge\"),\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"))), \"field1\", 3, new int[][]{\n        {},\n        { 1, 4, 4, 7 },\n        { 1, 4, 4, 7 },\n        {},\n        { 1, 4, 4, 7 },\n        {}\n    });\n  }\n\n","sourceOld":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unordered(false, Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unordered(false,\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unordered(false,\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testUnorderedDistinct().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testUnorderedDistinct().mjava","sourceNew":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unorderedNoOverlaps(Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.term(\"porridge\"),\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"))), \"field1\", 3, new int[][]{\n        {},\n        { 1, 4, 4, 7 },\n        { 1, 4, 4, 7 },\n        {},\n        { 1, 4, 4, 7 },\n        {}\n    });\n  }\n\n","sourceOld":"  public void testUnorderedDistinct() throws IOException {\n    checkIntervals(Intervals.unorderedNoOverlaps(Intervals.term(\"pease\"), Intervals.term(\"pease\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 0, 3, 3, 6 },\n            { 0, 3, 3, 6 },\n            {},\n            { 0, 3, 3, 6 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field1\", 3, new int[][]{\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            { 1, 5, 4, 7 },\n            {},\n            { 1, 4, 2, 7, 4, 17 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"), Intervals.term(\"hot\")),\n        Intervals.term(\"porridge\")),\n        \"field2\", 1, new int[][]{\n            {},\n            {},\n            {},\n            {},\n            { 0, 3 },\n            {}\n        });\n    checkIntervals(Intervals.unorderedNoOverlaps(\n        Intervals.term(\"porridge\"),\n        Intervals.unordered(Intervals.term(\"pease\"), Intervals.term(\"porridge\"))), \"field1\", 3, new int[][]{\n        {},\n        { 1, 4, 4, 7 },\n        { 1, 4, 4, 7 },\n        {},\n        { 1, 4, 4, 7 },\n        {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["d80eb3a3efa6c6d985fb5d0c464f95d2792ada53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["d80eb3a3efa6c6d985fb5d0c464f95d2792ada53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}