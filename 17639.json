{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoMembershipShape c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoMembershipShape c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoMembershipShape c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoMembershipShape c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"414425421ced68c7064f08c9da6a2c95399226d9","date":1460921822,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d2af739bccba3be9b36de4d0bdb45f169c0156f","date":1461802146,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp)); //??? fails\n\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp)); //??? fails\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43631d6552f924eb58c0b507e3e10215c53754f8","date":1461863675,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp)); //??? fails\n\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp)); //??? fails\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"414d7bcd2f513d7e7162dae022e9a9f3cd930277","date":1461885603,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f57114b5ef2859c0e501343c6e66f3c769d096a8","date":1461886056,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","date":1461888019,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c20c411df9b9bd89e7a3327f5fa0d3c70610cfd9","date":1462223095,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    \n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    \n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961aa3f803841184bcbd8a9d0533743be1323d63","date":1521994841,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    \n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    \n    pd = new GeoPolygonFactory.PolygonDescription(points);\n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    \n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n        \n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(new GeoPolygonFactory.PolygonDescription(points));\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b879b14da40ab73551b75835099a61e622a83d3","date":1522406622,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    //System.out.println(\"Large polygon = \"+c);\n    \n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    \n    pd = new GeoPolygonFactory.PolygonDescription(points);\n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    \n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    \n    pd = new GeoPolygonFactory.PolygonDescription(points);\n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointWithin().mjava","sourceNew":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    //System.out.println(\"Large polygon = \"+zScaling);\n    \n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    \n    pd = new GeoPolygonFactory.PolygonDescription(points);\n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointWithin() {\n    GeoPolygon c;\n    GeoPoint gp;\n    List<GeoPoint> points;\n    List<GeoPolygonFactory.PolygonDescription> shapes;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    //System.out.println(\"Large polygon = \"+c);\n    \n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.65);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Next bunch of small polygon points\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.8));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.7));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.01, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    \n    pd = new GeoPolygonFactory.PolygonDescription(points);\n        /*\n        System.out.println(\"Points: \");\n        for (GeoPoint p : points) {\n            System.out.println(\" \"+p);\n        }\n        */\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, pd);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n    // Now, same thing for large polygon\n    shapes = new ArrayList<>();\n    shapes.add(pd);\n    \n    c = GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE, shapes);\n    // Sample some points within\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.55);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.45);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertTrue(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.7);\n    assertTrue(c.isWithin(gp));\n    // Sample some nearby points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.35);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.15, -0.5);\n    assertFalse(c.isWithin(gp));\n    // Random points outside\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.0);\n    assertFalse(c.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(c.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b879b14da40ab73551b75835099a61e622a83d3":["961aa3f803841184bcbd8a9d0533743be1323d63"],"f57114b5ef2859c0e501343c6e66f3c769d096a8":["414d7bcd2f513d7e7162dae022e9a9f3cd930277"],"43631d6552f924eb58c0b507e3e10215c53754f8":["7d2af739bccba3be9b36de4d0bdb45f169c0156f"],"414425421ced68c7064f08c9da6a2c95399226d9":["40aa98241c87d86a0077beb8023713d93a0becfe"],"7d2af739bccba3be9b36de4d0bdb45f169c0156f":["414425421ced68c7064f08c9da6a2c95399226d9"],"c20c411df9b9bd89e7a3327f5fa0d3c70610cfd9":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["8b879b14da40ab73551b75835099a61e622a83d3"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["414425421ced68c7064f08c9da6a2c95399226d9","c20c411df9b9bd89e7a3327f5fa0d3c70610cfd9"],"961aa3f803841184bcbd8a9d0533743be1323d63":["c20c411df9b9bd89e7a3327f5fa0d3c70610cfd9"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["b4e444678504caf66a8060b1d514383aa4feac0c","40aa98241c87d86a0077beb8023713d93a0becfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["414425421ced68c7064f08c9da6a2c95399226d9","f57114b5ef2859c0e501343c6e66f3c769d096a8"],"414d7bcd2f513d7e7162dae022e9a9f3cd930277":["43631d6552f924eb58c0b507e3e10215c53754f8"],"40aa98241c87d86a0077beb8023713d93a0becfe":["b4e444678504caf66a8060b1d514383aa4feac0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"8b879b14da40ab73551b75835099a61e622a83d3":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"f57114b5ef2859c0e501343c6e66f3c769d096a8":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"43631d6552f924eb58c0b507e3e10215c53754f8":["414d7bcd2f513d7e7162dae022e9a9f3cd930277"],"7d2af739bccba3be9b36de4d0bdb45f169c0156f":["43631d6552f924eb58c0b507e3e10215c53754f8"],"414425421ced68c7064f08c9da6a2c95399226d9":["7d2af739bccba3be9b36de4d0bdb45f169c0156f","55b50463286869f584cf849d1587a0fcd54d1dfa","c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"c20c411df9b9bd89e7a3327f5fa0d3c70610cfd9":["55b50463286869f584cf849d1587a0fcd54d1dfa","961aa3f803841184bcbd8a9d0533743be1323d63"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4e444678504caf66a8060b1d514383aa4feac0c":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"55b50463286869f584cf849d1587a0fcd54d1dfa":[],"961aa3f803841184bcbd8a9d0533743be1323d63":["8b879b14da40ab73551b75835099a61e622a83d3"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"414d7bcd2f513d7e7162dae022e9a9f3cd930277":["f57114b5ef2859c0e501343c6e66f3c769d096a8"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["c20c411df9b9bd89e7a3327f5fa0d3c70610cfd9"],"40aa98241c87d86a0077beb8023713d93a0becfe":["414425421ced68c7064f08c9da6a2c95399226d9","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55b50463286869f584cf849d1587a0fcd54d1dfa","09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}