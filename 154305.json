{"path":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList hlResult = new SimpleOrderedMap();\n\n      Object[] arr = new Object[rb.resultIds.size() * 2];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.rsp.getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx<<1] = id;\n            arr[(idx<<1)+1] = hl.getVal(i);\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new NamedList(Arrays.asList(arr))));      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList hlResult = new SimpleOrderedMap();\n\n      Object[] arr = new Object[rb.resultIds.size() * 2];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.rsp.getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx<<1] = id;\n            arr[(idx<<1)+1] = hl.getVal(i);\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(Arrays.asList(arr))));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList hlResult = new SimpleOrderedMap();\n\n      Object[] arr = new Object[rb.resultIds.size() * 2];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.rsp.getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx<<1] = id;\n            arr[(idx<<1)+1] = hl.getVal(i);\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new NamedList(Arrays.asList(arr))));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e69935771ba8cb2303a86bf8a42be7861eaf1da","date":1216694040,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList hlResult = new SimpleOrderedMap();\n\n      Object[] arr = new Object[rb.resultIds.size() * 2];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx<<1] = id;\n            arr[(idx<<1)+1] = hl.getVal(i);\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(Arrays.asList(arr))));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList hlResult = new SimpleOrderedMap();\n\n      Object[] arr = new Object[rb.resultIds.size() * 2];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.rsp.getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx<<1] = id;\n            arr[(idx<<1)+1] = hl.getVal(i);\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(Arrays.asList(arr))));      \n    }\n  }\n\n","bugFix":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b2d92924883e6f7ae47b7654e37f54545916304","date":1235082032,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList hlResult = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList hlResult = new SimpleOrderedMap();\n\n      Object[] arr = new Object[rb.resultIds.size() * 2];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx<<1] = id;\n            arr[(idx<<1)+1] = hl.getVal(i);\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(Arrays.asList(arr))));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edd42c342df64a075758f3abb91c8448be3385b1","date":1254025195,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList hlResult = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b2d92924883e6f7ae47b7654e37f54545916304":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"edd42c342df64a075758f3abb91c8448be3385b1":["1b2d92924883e6f7ae47b7654e37f54545916304"],"da0acfe5ceed804451d76c8f887855b3d060e132":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["da0acfe5ceed804451d76c8f887855b3d060e132"],"ad94625fb8d088209f46650c8097196fec67f00c":["edd42c342df64a075758f3abb91c8448be3385b1"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1b2d92924883e6f7ae47b7654e37f54545916304":["edd42c342df64a075758f3abb91c8448be3385b1"],"edd42c342df64a075758f3abb91c8448be3385b1":["ad94625fb8d088209f46650c8097196fec67f00c"],"da0acfe5ceed804451d76c8f887855b3d060e132":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["1b2d92924883e6f7ae47b7654e37f54545916304"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["da0acfe5ceed804451d76c8f887855b3d060e132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}