{"path":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","commits":[{"id":"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e","date":1423420267,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"/dev/null","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == 0) {\n      return;\n    }\n    long diff = System.nanoTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = (int) minMsBetweenActions;\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4eb385ecd39bd1dd37ba80397e86b3c6bf229f50","date":1427031875,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = nanoTimeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == 0) {\n      return;\n    }\n    long diff = System.nanoTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = (int) minMsBetweenActions;\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = nanoTimeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == 0) {\n      return;\n    }\n    long diff = System.nanoTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = (int) minMsBetweenActions;\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = nanoTimeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = nanoTimeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = nanoTimeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = nanoTimeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.debug(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.info(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTimeNs() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.debug(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTime() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.debug(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActionThrottle#minimumWaitBetweenActions().mjava","sourceNew":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTimeNs() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.debug(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        timeSource.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  public void minimumWaitBetweenActions() {\n    if (lastActionStartedAt == null) {\n      return;\n    }\n    long diff = timeSource.getTimeNs() - lastActionStartedAt;\n    int diffMs = (int) TimeUnit.MILLISECONDS.convert(diff, TimeUnit.NANOSECONDS);\n    long minNsBetweenActions = TimeUnit.NANOSECONDS.convert(minMsBetweenActions, TimeUnit.MILLISECONDS);\n    log.debug(\"The last {} attempt started {}ms ago.\", name, diffMs);\n    int sleep = 0;\n    \n    if (diffMs > 0 && diff < minNsBetweenActions) {\n      sleep = (int) TimeUnit.MILLISECONDS.convert(minNsBetweenActions - diff, TimeUnit.NANOSECONDS);\n    } else if (diffMs == 0) {\n      sleep = minMsBetweenActions.intValue();\n    }\n    \n    if (sleep > 0) {\n      log.info(\"Throttling {} attempts - waiting for {}ms\", name, sleep);\n      try {\n        Thread.sleep(sleep);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e","4eb385ecd39bd1dd37ba80397e86b3c6bf229f50"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["4eb385ecd39bd1dd37ba80397e86b3c6bf229f50","5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["4eb385ecd39bd1dd37ba80397e86b3c6bf229f50","464244264804e3f981bf1fb4b732516d8d62dbc2"],"4eb385ecd39bd1dd37ba80397e86b3c6bf229f50":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["4eb385ecd39bd1dd37ba80397e86b3c6bf229f50"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["a4422b331d00607258b0ed3e43934306e67764aa"],"a4422b331d00607258b0ed3e43934306e67764aa":["560c18d71dad43d675158783c3840f8c80d6d39c"],"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4eb385ecd39bd1dd37ba80397e86b3c6bf229f50","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"4eb385ecd39bd1dd37ba80397e86b3c6bf229f50":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a4422b331d00607258b0ed3e43934306e67764aa":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4eb385ecd39bd1dd37ba80397e86b3c6bf229f50"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a4422b331d00607258b0ed3e43934306e67764aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}