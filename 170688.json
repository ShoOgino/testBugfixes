{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","sourceNew":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = SloppyMath.earthDiameter(StrictMath.toRadians(lat));\n    distance /= 1000.0;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","sourceOld":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = SloppyMath.earthDiameter(StrictMath.toRadians(lat));\n    distance /= 1000.0;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","sourceNew":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = SloppyMath.earthDiameter(StrictMath.toRadians(lat));\n    distance /= 1000.0;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","sourceOld":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = SloppyMath.earthDiameter(StrictMath.toRadians(lat));\n    distance /= 1000.0;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","sourceNew":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = 2 * GeoProjectionUtils.SEMIMAJOR_AXIS;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","sourceOld":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = SloppyMath.earthDiameter(StrictMath.toRadians(lat));\n    distance /= 1000.0;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","bugFix":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","sourceNew":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = 2 * GeoUtils.SEMIMAJOR_AXIS;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","sourceOld":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = 2 * GeoProjectionUtils.SEMIMAJOR_AXIS;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56","date":1458685284,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#distanceToDegreesLat(double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute the inverse haversine to determine distance in degrees longitude for provided distance in meters\n   * @param lat latitude to compute delta degrees lon\n   * @param distance distance in meters to convert to degrees lon\n   * @return Sloppy distance in degrees longitude for provided distance in meters\n   */\n  public static double distanceToDegreesLat(double lat, double distance) {\n    // get the diameter at the latitude\n    final double diameter = 2 * GeoUtils.SEMIMAJOR_AXIS;\n\n    // compute inverse haversine\n    double a = StrictMath.sin(distance/diameter);\n    double h = StrictMath.min(1, a);\n    h *= h;\n\n    return StrictMath.toDegrees(StrictMath.acos(1-(2d*h)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56"]},"commit2Childs":{"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}