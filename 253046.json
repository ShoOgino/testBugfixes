{"path":"src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","commits":[{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"/dev/null","sourceNew":"    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      BooleanQuery result = new BooleanQuery(true);\n      int count = 0;\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t); // found a match\n            tq.setBoost(query.getBoost() * enumerator.difference()); // set the boost\n            result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n            count++;\n          }\n        } while (enumerator.next());    \n      } finally {\n        enumerator.close();\n      }\n      query.incTotalNumberOfTerms(count);\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      BooleanQuery result = new BooleanQuery(true);\n      int count = 0;\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t); // found a match\n            tq.setBoost(query.getBoost() * enumerator.difference()); // set the boost\n            result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n            count++;\n          }\n        } while (enumerator.next());    \n      } finally {\n        enumerator.close();\n      }\n      query.incTotalNumberOfTerms(count);\n      return result;\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      BooleanQuery result = new BooleanQuery(true);\n      int count = 0;\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t); // found a match\n            tq.setBoost(query.getBoost() * enumerator.difference()); // set the boost\n            result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n            count++;\n          }\n        } while (enumerator.next());    \n      } finally {\n        enumerator.close();\n      }\n      query.incTotalNumberOfTerms(count);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cac733bfe923fb362d2b289b2996b0bf10ae22e","date":1260443093,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          TermQuery tq = new TermQuery(t); // found a match\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      BooleanQuery result = new BooleanQuery(true);\n      int count = 0;\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t); // found a match\n            tq.setBoost(query.getBoost() * enumerator.difference()); // set the boost\n            result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n            count++;\n          }\n        } while (enumerator.next());    \n      } finally {\n        enumerator.close();\n      }\n      query.incTotalNumberOfTerms(count);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          TermQuery tq = new TermQuery(t); // found a match\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n      final BooleanQuery result = new BooleanQuery(true);\n      query.incTotalNumberOfTerms(collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          TermQuery tq = new TermQuery(t); // found a match\n          tq.setBoost(query.getBoost() * boost); // set the boost\n          result.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          return true;\n        }\n      }));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6cac733bfe923fb362d2b289b2996b0bf10ae22e":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6cac733bfe923fb362d2b289b2996b0bf10ae22e"]},"commit2Childs":{"6cac733bfe923fb362d2b289b2996b0bf10ae22e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["6cac733bfe923fb362d2b289b2996b0bf10ae22e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}