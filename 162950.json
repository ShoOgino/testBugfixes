{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#PerThreadPKLookup(IndexReader,String).mjava","commits":[{"id":"2ec69b66d099125761703a43f01bc34f1074f1c1","date":1400148734,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#PerThreadPKLookup(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"    public PerThreadPKLookup(IndexReader r, String idFieldName) throws IOException {\n\n      List<AtomicReaderContext> leaves = new ArrayList<>(r.leaves());\n\n      // Larger segments are more likely to have the id, so we sort largest to smallest by numDocs:\n      Collections.sort(leaves, new Comparator<AtomicReaderContext>() {\n          @Override\n          public int compare(AtomicReaderContext c1, AtomicReaderContext c2) {\n            return c2.reader().numDocs() - c1.reader().numDocs();\n          }\n        });\n\n      termsEnums = new TermsEnum[leaves.size()];\n      docsEnums = new DocsEnum[leaves.size()];\n      liveDocs = new Bits[leaves.size()];\n      docBases = new int[leaves.size()];\n      int numSegs = 0;\n      boolean hasDeletions = false;\n      for(int i=0;i<leaves.size();i++) {\n        Fields fields = leaves.get(i).reader().fields();\n        if (fields != null) {\n          Terms terms = fields.terms(idFieldName);\n          if (terms != null) {\n            termsEnums[numSegs] = terms.iterator(null);\n            assert termsEnums[numSegs] != null;\n            docBases[numSegs] = leaves.get(i).docBase;\n            liveDocs[numSegs] = leaves.get(i).reader().getLiveDocs();\n            hasDeletions |= leaves.get(i).reader().hasDeletions();\n            numSegs++;\n          }\n        }\n      }\n      this.numSegs = numSegs;\n      this.hasDeletions = hasDeletions;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#PerThreadPKLookup(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"    public PerThreadPKLookup(IndexReader r, String idFieldName) throws IOException {\n\n      List<AtomicReaderContext> leaves = new ArrayList<>(r.leaves());\n\n      // Larger segments are more likely to have the id, so we sort largest to smallest by numDocs:\n      Collections.sort(leaves, new Comparator<AtomicReaderContext>() {\n          @Override\n          public int compare(AtomicReaderContext c1, AtomicReaderContext c2) {\n            return c2.reader().numDocs() - c1.reader().numDocs();\n          }\n        });\n\n      termsEnums = new TermsEnum[leaves.size()];\n      docsEnums = new DocsEnum[leaves.size()];\n      liveDocs = new Bits[leaves.size()];\n      docBases = new int[leaves.size()];\n      int numSegs = 0;\n      boolean hasDeletions = false;\n      for(int i=0;i<leaves.size();i++) {\n        Fields fields = leaves.get(i).reader().fields();\n        if (fields != null) {\n          Terms terms = fields.terms(idFieldName);\n          if (terms != null) {\n            termsEnums[numSegs] = terms.iterator(null);\n            assert termsEnums[numSegs] != null;\n            docBases[numSegs] = leaves.get(i).docBase;\n            liveDocs[numSegs] = leaves.get(i).reader().getLiveDocs();\n            hasDeletions |= leaves.get(i).reader().hasDeletions();\n            numSegs++;\n          }\n        }\n      }\n      this.numSegs = numSegs;\n      this.hasDeletions = hasDeletions;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d615ef411046679022f6728bb2b876273d13ae","date":1400253450,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#PerThreadPKLookup(IndexReader,String).mjava","sourceNew":null,"sourceOld":"    public PerThreadPKLookup(IndexReader r, String idFieldName) throws IOException {\n\n      List<AtomicReaderContext> leaves = new ArrayList<>(r.leaves());\n\n      // Larger segments are more likely to have the id, so we sort largest to smallest by numDocs:\n      Collections.sort(leaves, new Comparator<AtomicReaderContext>() {\n          @Override\n          public int compare(AtomicReaderContext c1, AtomicReaderContext c2) {\n            return c2.reader().numDocs() - c1.reader().numDocs();\n          }\n        });\n\n      termsEnums = new TermsEnum[leaves.size()];\n      docsEnums = new DocsEnum[leaves.size()];\n      liveDocs = new Bits[leaves.size()];\n      docBases = new int[leaves.size()];\n      int numSegs = 0;\n      boolean hasDeletions = false;\n      for(int i=0;i<leaves.size();i++) {\n        Fields fields = leaves.get(i).reader().fields();\n        if (fields != null) {\n          Terms terms = fields.terms(idFieldName);\n          if (terms != null) {\n            termsEnums[numSegs] = terms.iterator(null);\n            assert termsEnums[numSegs] != null;\n            docBases[numSegs] = leaves.get(i).docBase;\n            liveDocs[numSegs] = leaves.get(i).reader().getLiveDocs();\n            hasDeletions |= leaves.get(i).reader().hasDeletions();\n            numSegs++;\n          }\n        }\n      }\n      this.numSegs = numSegs;\n      this.hasDeletions = hasDeletions;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#PerThreadPKLookup(IndexReader,String).mjava","sourceNew":null,"sourceOld":"    public PerThreadPKLookup(IndexReader r, String idFieldName) throws IOException {\n\n      List<AtomicReaderContext> leaves = new ArrayList<>(r.leaves());\n\n      // Larger segments are more likely to have the id, so we sort largest to smallest by numDocs:\n      Collections.sort(leaves, new Comparator<AtomicReaderContext>() {\n          @Override\n          public int compare(AtomicReaderContext c1, AtomicReaderContext c2) {\n            return c2.reader().numDocs() - c1.reader().numDocs();\n          }\n        });\n\n      termsEnums = new TermsEnum[leaves.size()];\n      docsEnums = new DocsEnum[leaves.size()];\n      liveDocs = new Bits[leaves.size()];\n      docBases = new int[leaves.size()];\n      int numSegs = 0;\n      boolean hasDeletions = false;\n      for(int i=0;i<leaves.size();i++) {\n        Fields fields = leaves.get(i).reader().fields();\n        if (fields != null) {\n          Terms terms = fields.terms(idFieldName);\n          if (terms != null) {\n            termsEnums[numSegs] = terms.iterator(null);\n            assert termsEnums[numSegs] != null;\n            docBases[numSegs] = leaves.get(i).docBase;\n            liveDocs[numSegs] = leaves.get(i).reader().getLiveDocs();\n            hasDeletions |= leaves.get(i).reader().hasDeletions();\n            numSegs++;\n          }\n        }\n      }\n      this.numSegs = numSegs;\n      this.hasDeletions = hasDeletions;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["2ec69b66d099125761703a43f01bc34f1074f1c1","b7d615ef411046679022f6728bb2b876273d13ae"],"2ec69b66d099125761703a43f01bc34f1074f1c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7d615ef411046679022f6728bb2b876273d13ae":["2ec69b66d099125761703a43f01bc34f1074f1c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ec69b66d099125761703a43f01bc34f1074f1c1"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ec69b66d099125761703a43f01bc34f1074f1c1":["4d637064d608752565d4f9f41b2497dfdfdde50e","b7d615ef411046679022f6728bb2b876273d13ae","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ec69b66d099125761703a43f01bc34f1074f1c1","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"b7d615ef411046679022f6728bb2b876273d13ae":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}