{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ProvidedService).mjava","commits":[{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ProvidedService).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * This method retrieves a single entry from the storage. If the\n     * {@link StorageBuffer} does not contain the requested entry the\n     * underlaying storage index will be searched.\n     * <p>\n     * The Entry will be searched in a feed context specified by the given feed\n     * ID\n     * </p>\n     * \n     * @param entryId -\n     *            the entry to fetch\n     * @param feedId -\n     *            the feedid eg. feed context\n     * @param config -\n     *            the FeedInstanceConfiguration contaning extension profile used\n     *            to create the entriy instances\n     * @return - the requested {@link BaseEntry} or <code>null</code> if the\n     *         entry can not be found\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public BaseEntry singleEntryQuery(final String entryId,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        StorageEntryWrapper wrapper = this.buffer.getEntry(entryId, feedId);\n\n        if (wrapper == null) {\n            Hits hits = storageQuery(entryId);\n            if (hits.length() <= 0)\n                return null;\n            Document doc = hits.doc(0);\n\n            return buildEntryFromLuceneDocument(doc, config);\n        }\n        /*\n         * ServerBaseEntry enables the dynamic element of the entry like the\n         * links to be dynamic. BufferedEntries will be reused until they are\n         * written.\n         */\n        return wrapper.getEntry();\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ProvidedService).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ProvidedService).mjava","sourceNew":"    /**\n     * This method retrieves a single entry from the storage. If the\n     * {@link StorageBuffer} does not contain the requested entry the\n     * underlying storage index will be searched.\n     * <p>\n     * The Entry will be searched in a feed context specified by the given feed\n     * ID\n     * </p>\n     * \n     * @param entryId -\n     *            the entry to fetch\n     * @param feedId -\n     *            the feed id e.g. feed context\n     * @param config -\n     *            the FeedInstanceConfiguration containing extension profile used\n     *            to create the entry instances\n     * @return - the requested {@link BaseEntry} or <code>null</code> if the\n     *         entry can not be found\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public BaseEntry singleEntryQuery(final String entryId,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        StorageEntryWrapper wrapper = this.buffer.getEntry(entryId, feedId);\n\n        if (wrapper == null) {\n            Hits hits = storageQuery(entryId);\n            if (hits.length() <= 0)\n                return null;\n            Document doc = hits.doc(0);\n\n            return buildEntryFromLuceneDocument(doc, config);\n        }\n        /*\n         * ServerBaseEntry enables the dynamic element of the entry like the\n         * links to be dynamic. BufferedEntries will be reused until they are\n         * written.\n         */\n        return wrapper.getEntry();\n\n    }\n\n","sourceOld":"    /**\n     * This method retrieves a single entry from the storage. If the\n     * {@link StorageBuffer} does not contain the requested entry the\n     * underlaying storage index will be searched.\n     * <p>\n     * The Entry will be searched in a feed context specified by the given feed\n     * ID\n     * </p>\n     * \n     * @param entryId -\n     *            the entry to fetch\n     * @param feedId -\n     *            the feedid eg. feed context\n     * @param config -\n     *            the FeedInstanceConfiguration contaning extension profile used\n     *            to create the entriy instances\n     * @return - the requested {@link BaseEntry} or <code>null</code> if the\n     *         entry can not be found\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public BaseEntry singleEntryQuery(final String entryId,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        StorageEntryWrapper wrapper = this.buffer.getEntry(entryId, feedId);\n\n        if (wrapper == null) {\n            Hits hits = storageQuery(entryId);\n            if (hits.length() <= 0)\n                return null;\n            Document doc = hits.doc(0);\n\n            return buildEntryFromLuceneDocument(doc, config);\n        }\n        /*\n         * ServerBaseEntry enables the dynamic element of the entry like the\n         * links to be dynamic. BufferedEntries will be reused until they are\n         * written.\n         */\n        return wrapper.getEntry();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ProvidedService).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ProvidedService).mjava","sourceNew":"    /**\n     * This method retrieves a single entry from the storage. If the\n     * {@link StorageBuffer} does not contain the requested entry the\n     * underlying storage index will be searched.\n     * <p>\n     * The Entry will be searched in a feed context specified by the given feed\n     * ID\n     * </p>\n     * \n     * @param entryId -\n     *            the entry to fetch\n     * @param feedId -\n     *            the feed id e.g. feed context\n     * @param config -\n     *            the FeedInstanceConfiguration containing extension profile used\n     *            to create the entry instances\n     * @return - the requested {@link BaseEntry} or <code>null</code> if the\n     *         entry can not be found\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public BaseEntry singleEntryQuery(final String entryId,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        StorageEntryWrapper wrapper = this.buffer.getEntry(entryId, feedId);\n\n        if (wrapper == null) {\n            Hits hits = storageQuery(entryId);\n            if (hits.length() <= 0)\n                return null;\n            Document doc = hits.doc(0);\n\n            return buildEntryFromLuceneDocument(doc, config);\n        }\n        /*\n         * ServerBaseEntry enables the dynamic element of the entry like the\n         * links to be dynamic. BufferedEntries will be reused until they are\n         * written.\n         */\n        return wrapper.getEntry();\n\n    }\n\n","sourceOld":"    /**\n     * This method retrieves a single entry from the storage. If the\n     * {@link StorageBuffer} does not contain the requested entry the\n     * underlying storage index will be searched.\n     * <p>\n     * The Entry will be searched in a feed context specified by the given feed\n     * ID\n     * </p>\n     * \n     * @param entryId -\n     *            the entry to fetch\n     * @param feedId -\n     *            the feed id e.g. feed context\n     * @param config -\n     *            the FeedInstanceConfiguration containing extension profile used\n     *            to create the entry instances\n     * @return - the requested {@link BaseEntry} or <code>null</code> if the\n     *         entry can not be found\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public BaseEntry singleEntryQuery(final String entryId,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        StorageEntryWrapper wrapper = this.buffer.getEntry(entryId, feedId);\n\n        if (wrapper == null) {\n            Hits hits = storageQuery(entryId);\n            if (hits.length() <= 0)\n                return null;\n            Document doc = hits.doc(0);\n\n            return buildEntryFromLuceneDocument(doc, config);\n        }\n        /*\n         * ServerBaseEntry enables the dynamic element of the entry like the\n         * links to be dynamic. BufferedEntries will be reused until they are\n         * written.\n         */\n        return wrapper.getEntry();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["52754a40a1550056d5637c8992b4076b5ed77328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52754a40a1550056d5637c8992b4076b5ed77328"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52754a40a1550056d5637c8992b4076b5ed77328":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}