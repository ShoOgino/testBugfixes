{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#containsTaskWithRequestId(String,String).mjava","commits":[{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#containsTaskWithRequestId(String,String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#containsTaskWithRequestId(String,String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}