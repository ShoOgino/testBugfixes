{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","commits":[{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[#-extends-AtomicReader],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<? extends AtomicReader> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers.get(random().nextInt(readers.size()));\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[#-extends-AtomicReader],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<? extends AtomicReader> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers.get(random().nextInt(readers.size()));\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[#-extends-AtomicReader],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<? extends AtomicReader> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers.get(random().nextInt(readers.size()));\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[#-extends-AtomicReader],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<? extends AtomicReader> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers.get(random().nextInt(readers.size()));\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[#-extends-AtomicReader],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<? extends AtomicReader> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers.get(random().nextInt(readers.size()));\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term, true)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term, true)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term, true)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term, true)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term, true)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term, true)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term, true)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[AtomicReaderContext],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<AtomicReaderContext> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = readers.get(random().nextInt(readers.size())).reader();\n    Terms terms = indexReader.terms(field);\n    if (terms == null) {\n      return null;\n    }\n    TermsEnum iterator = terms.iterator(null);\n    if (iterator.seekExact(term)) {\n      return iterator.docs(bits, null, random().nextBoolean() ? DocsEnum.FLAG_FREQS : DocsEnum.FLAG_NONE);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b6a0e3c1c21aac8ecf75706605133012833585c7","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","4cc45c615dbb82bf79d5f9550286098367874fbf"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","b6a0e3c1c21aac8ecf75706605133012833585c7"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}