{"path":"src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","commits":[{"id":"89b8a0757fe4354bdc64c82f90886a9284b57833","date":1226690542,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"/dev/null","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(System.getProperty(\"tempDir\"));\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new FSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(System.getProperty(\"tempDir\"));\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(System.getProperty(\"tempDir\"));\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new FSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(System.getProperty(\"tempDir\"));\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":null,"bugIntro":["3741149a89925c02f14dbeef8365b896798d91fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89b8a0757fe4354bdc64c82f90886a9284b57833":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["89b8a0757fe4354bdc64c82f90886a9284b57833"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89b8a0757fe4354bdc64c82f90886a9284b57833"],"89b8a0757fe4354bdc64c82f90886a9284b57833":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}