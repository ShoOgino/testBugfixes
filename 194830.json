{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.term();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.term();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.term();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a7347509fad0711ac30cb15a746e9a3830a38ebd","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a7347509fad0711ac30cb15a746e9a3830a38ebd","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}