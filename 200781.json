{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","sourceNew":"  /** Called the first time next() or skipTo() is called to\n   * initialize <code>scorerDocQueue</code>.\n   */\n  private void initScorerDocQueue() throws IOException {\n    scorerDocQueue = new ScorerDocQueue(nrScorers);\n    for (Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        scorerDocQueue.insert(se);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called the first time next() or skipTo() is called to\n   * initialize <code>scorerDocQueue</code>.\n   */\n  private void initScorerDocQueue() throws IOException {\n    scorerDocQueue = new ScorerDocQueue(nrScorers);\n    for (Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        scorerDocQueue.insert(se);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f","date":1281110328,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","sourceNew":"  /** Called the first time nextDoc() or advance() is called to\n   * initialize <code>scorerDocQueue</code>.\n   */\n  private void initScorerDocQueue() throws IOException {\n    scorerDocQueue = new ScorerDocQueue(nrScorers);\n    for (Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        scorerDocQueue.insert(se);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called the first time next() or skipTo() is called to\n   * initialize <code>scorerDocQueue</code>.\n   */\n  private void initScorerDocQueue() throws IOException {\n    scorerDocQueue = new ScorerDocQueue(nrScorers);\n    for (Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        scorerDocQueue.insert(se);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","sourceNew":"  /** Called the first time nextDoc() or advance() is called to\n   * initialize <code>scorerDocQueue</code>.\n   */\n  private void initScorerDocQueue() throws IOException {\n    scorerDocQueue = new ScorerDocQueue(nrScorers);\n    for (Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        scorerDocQueue.insert(se);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called the first time next() or skipTo() is called to\n   * initialize <code>scorerDocQueue</code>.\n   */\n  private void initScorerDocQueue() throws IOException {\n    scorerDocQueue = new ScorerDocQueue(nrScorers);\n    for (Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        scorerDocQueue.insert(se);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2863f0982cb65443a7ee5c42e13a24213f2736d","date":1310465467,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","sourceNew":"  /** Called the first time nextDoc() or advance() is called to\n   * initialize <code>scorerDocQueue</code>.\n   * @return \n   */\n  private ScorerDocQueue initScorerDocQueue() throws IOException {\n    final ScorerDocQueue docQueue = new ScorerDocQueue(nrScorers);\n    for (final Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        docQueue.insert(se);\n      }\n    }\n    return docQueue; \n  }\n\n","sourceOld":"  /** Called the first time nextDoc() or advance() is called to\n   * initialize <code>scorerDocQueue</code>.\n   */\n  private void initScorerDocQueue() throws IOException {\n    scorerDocQueue = new ScorerDocQueue(nrScorers);\n    for (Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        scorerDocQueue.insert(se);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#initScorerDocQueue().mjava","sourceNew":"  /** Called the first time nextDoc() or advance() is called to\n   * initialize <code>scorerDocQueue</code>.\n   * @return \n   */\n  private ScorerDocQueue initScorerDocQueue() throws IOException {\n    final ScorerDocQueue docQueue = new ScorerDocQueue(nrScorers);\n    for (final Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        docQueue.insert(se);\n      }\n    }\n    return docQueue; \n  }\n\n","sourceOld":"  /** Called the first time nextDoc() or advance() is called to\n   * initialize <code>scorerDocQueue</code>.\n   * @return \n   */\n  private ScorerDocQueue initScorerDocQueue() throws IOException {\n    final ScorerDocQueue docQueue = new ScorerDocQueue(nrScorers);\n    for (final Scorer se : subScorers) {\n      if (se.nextDoc() != NO_MORE_DOCS) {\n        docQueue.insert(se);\n      }\n    }\n    return docQueue; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b2863f0982cb65443a7ee5c42e13a24213f2736d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2863f0982cb65443a7ee5c42e13a24213f2736d":["5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f":["b2863f0982cb65443a7ee5c42e13a24213f2736d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b2863f0982cb65443a7ee5c42e13a24213f2736d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}