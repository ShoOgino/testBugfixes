{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","commits":[{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      if ((getAutoGeneratePhraseQueries() || fieldAutoGenPhraseQueries) && getSplitOnWhitespace() == false) {\n        throw new QueryParserConfigurationException\n            (\"Field '\" + field + \"': autoGeneratePhraseQueries == true is disallowed when sow/splitOnWhitespace == false\");\n      }\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      if ((getAutoGeneratePhraseQueries() || fieldAutoGenPhraseQueries) && getSplitOnWhitespace() == false) {\n        throw new QueryParserConfigurationException\n            (\"Field '\" + field + \"': autoGeneratePhraseQueries == true is disallowed when sow/splitOnWhitespace == false\");\n      }\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b360a3d5b9d443b4e880d2c92724cffd7def8db","date":1490740768,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      if ((getAutoGeneratePhraseQueries() || fieldAutoGenPhraseQueries) && getSplitOnWhitespace() == false) {\n        throw new QueryParserConfigurationException\n            (\"Field '\" + field + \"': autoGeneratePhraseQueries == true is disallowed when sow/splitOnWhitespace == false\");\n      }\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d81030ef9ff5ae6820e560c0833127181c7a2c","date":1490873946,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      if ((getAutoGeneratePhraseQueries() || fieldAutoGenPhraseQueries) && getSplitOnWhitespace() == false) {\n        throw new QueryParserConfigurationException\n            (\"Field '\" + field + \"': autoGeneratePhraseQueries == true is disallowed when sow/splitOnWhitespace == false\");\n      }\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1728ac6bfc0cea61f3e27436b418295d9982a3","date":1491423806,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries, boolean enableGraphQueries)\n        throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, enableGraphQueries);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["36d81030ef9ff5ae6820e560c0833127181c7a2c"],"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["e55782fb51a6e9789542818eb2161a3247f39ace"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d81030ef9ff5ae6820e560c0833127181c7a2c":["c03778630c4604270d88c148afb8c7de35b51d3c"],"c03778630c4604270d88c148afb8c7de35b51d3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e55782fb51a6e9789542818eb2161a3247f39ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"36d81030ef9ff5ae6820e560c0833127181c7a2c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"c03778630c4604270d88c148afb8c7de35b51d3c":["36d81030ef9ff5ae6820e560c0833127181c7a2c"],"e55782fb51a6e9789542818eb2161a3247f39ace":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}