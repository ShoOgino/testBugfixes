{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,boolean,int).mjava","commits":[{"id":"68fe0b7fa3b6a69495244529754954d2ae5cf0f7","date":1385414051,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,boolean,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final boolean startDeadPool, final int roundPauseUpperLimit) {\n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is disabled and will not start\");\n      return;\n    }\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    monkeyThread = new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n    \n            Random random = LuceneTestCase.random();\n            Thread.sleep(random.nextInt(roundPauseUpperLimit));\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (jetty.isStopped() && !ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n        if (startDeadPool) {\n          // starting down nodes\n          for (CloudJettyRunner jetty : deadPool) {\n            try {\n              if (jetty.jetty.isStopped()) ChaosMonkey.start(jetty.jetty);\n            } catch (Exception e) {\n              log.error(\"\", e);\n            }\n          }\n        }\n      }\n    };\n    monkeyThread.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPauseUpperLimit) {\n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is disabled and will not start\");\n      return;\n    }\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    monkeyThread = new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n    \n            Random random = LuceneTestCase.random();\n            Thread.sleep(random.nextInt(roundPauseUpperLimit));\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (jetty.isStopped() && !ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    };\n    monkeyThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ecc0a3ce34111c2ebb18dc006e7f2f72d4162ca","date":1385777952,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPauseUpperLimit) {\n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is disabled and will not start\");\n      return;\n    }\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    monkeyThread = new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n    \n            Random random = LuceneTestCase.random();\n            Thread.sleep(random.nextInt(roundPauseUpperLimit));\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (jetty.isStopped() && !ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    };\n    monkeyThread.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final boolean startDeadPool, final int roundPauseUpperLimit) {\n    if (!MONKEY_ENABLED) {\n      monkeyLog(\"The Monkey is disabled and will not start\");\n      return;\n    }\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    monkeyThread = new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n    \n            Random random = LuceneTestCase.random();\n            Thread.sleep(random.nextInt(roundPauseUpperLimit));\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (jetty.isStopped() && !ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n        if (startDeadPool) {\n          // starting down nodes\n          for (CloudJettyRunner jetty : deadPool) {\n            try {\n              if (jetty.jetty.isStopped()) ChaosMonkey.start(jetty.jetty);\n            } catch (Exception e) {\n              log.error(\"\", e);\n            }\n          }\n        }\n      }\n    };\n    monkeyThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ecc0a3ce34111c2ebb18dc006e7f2f72d4162ca":["68fe0b7fa3b6a69495244529754954d2ae5cf0f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68fe0b7fa3b6a69495244529754954d2ae5cf0f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ecc0a3ce34111c2ebb18dc006e7f2f72d4162ca"]},"commit2Childs":{"7ecc0a3ce34111c2ebb18dc006e7f2f72d4162ca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68fe0b7fa3b6a69495244529754954d2ae5cf0f7"],"68fe0b7fa3b6a69495244529754954d2ae5cf0f7":["7ecc0a3ce34111c2ebb18dc006e7f2f72d4162ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}