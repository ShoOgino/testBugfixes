{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper,int).mjava","commits":[{"id":"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45","date":1492172132,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected PartitionAndCount sortPartition(TrackingDirectoryWrapper trackingDir, int lineCount) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile, lineCount);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      int count = 0;\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n        count++;\n      }\n\n      assert count == lineCount;\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return new PartitionAndCount(lineCount, tempFile.getName());\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return tempFile.getName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sort a single partition in-memory. */\n  protected PartitionAndCount sortPartition(TrackingDirectoryWrapper trackingDir, int lineCount) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile, lineCount);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      int count = 0;\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n        count++;\n      }\n\n      assert count == lineCount;\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return new PartitionAndCount(lineCount, tempFile.getName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dcb0432bcb41451b41e9aaaabe99f5d208258fe","date":1493203108,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper,int).mjava","sourceNew":null,"sourceOld":"  /** Sort a single partition in-memory. */\n  protected PartitionAndCount sortPartition(TrackingDirectoryWrapper trackingDir, int lineCount) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile, lineCount);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      int count = 0;\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n        count++;\n      }\n\n      assert count == lineCount;\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return new PartitionAndCount(lineCount, tempFile.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper,int).mjava","sourceNew":null,"sourceOld":"  /** Sort a single partition in-memory. */\n  protected PartitionAndCount sortPartition(TrackingDirectoryWrapper trackingDir, int lineCount) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile, lineCount);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      int count = 0;\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n        count++;\n      }\n\n      assert count == lineCount;\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return new PartitionAndCount(lineCount, tempFile.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["62e7e8f89cb6b0283f3f5d6c0945453b73f09d45"],"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","62e7e8f89cb6b0283f3f5d6c0945453b73f09d45"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}