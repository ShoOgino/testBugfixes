{"path":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","commits":[{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, String firstBeg,\n      String firstEnd, String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17d4fe0503a62f6522b1dd15204dd25cd231edf","date":1313599393,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17d4fe0503a62f6522b1dd15204dd25cd231edf"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}