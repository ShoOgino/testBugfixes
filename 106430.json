{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    instancesInfo.putAll(original.instancesInfo);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    merging = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    instancesInfo.putAll(original.instancesInfo);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    merging = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","sourceNew":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    instancesInfo.putAll(original.instancesInfo);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    maxDoc = original.maxDoc;\n    merging = true;\n  }\n\n","sourceOld":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    instancesInfo.putAll(original.instancesInfo);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    merging = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","sourceNew":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    instancesInfo.putAll(original.instancesInfo);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    maxDoc = original.maxDoc;\n    merging = true;\n  }\n\n","sourceOld":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    instancesInfo.putAll(original.instancesInfo);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    merging = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fca6c8418a91a6d30730ad418791ddf59ec3d07a","date":1418666585,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","sourceNew":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    maxDoc = original.maxDoc;\n    merging = true;\n  }\n\n","sourceOld":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    instancesInfo.putAll(original.instancesInfo);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    maxDoc = original.maxDoc;\n    merging = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(Lucene50NormsProducer).mjava","sourceNew":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    maxDoc = original.maxDoc;\n    merging = true;\n  }\n\n","sourceOld":"  // clone for merge: when merging we don't do any instances.put()s\n  Lucene50NormsProducer(Lucene50NormsProducer original) {\n    assert Thread.holdsLock(original);\n    norms.putAll(original.norms);\n    data = original.data.clone();\n    instances.putAll(original.instances);\n    ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());\n    activeCount.set(original.activeCount.get());\n    maxDoc = original.maxDoc;\n    merging = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["fca6c8418a91a6d30730ad418791ddf59ec3d07a"],"fca6c8418a91a6d30730ad418791ddf59ec3d07a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["bc8f80fee115148a0e4a0574560be06b494de821"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fca6c8418a91a6d30730ad418791ddf59ec3d07a":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["fca6c8418a91a6d30730ad418791ddf59ec3d07a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}