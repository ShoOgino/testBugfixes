{"path":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#release(G).mjava","commits":[{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#release(G).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Release the refernce previously obtained via {@link #acquire()}.\n   * <p>\n   * <b>NOTE:</b> it's safe to call this after {@link #close()}.\n   */\n  public final void release(G reference) throws IOException {\n    assert reference != null;\n    decRef(reference);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef","date":1351890270,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#release(G).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#release(G).mjava","sourceNew":"  /**\n   * Release the reference previously obtained via {@link #acquire()}.\n   * <p>\n   * <b>NOTE:</b> it's safe to call this after {@link #close()}.\n   * @throws IOException if the release operation on the given resource throws an {@link IOException}\n   */\n  public final void release(G reference) throws IOException {\n    assert reference != null;\n    decRef(reference);\n  }\n\n","sourceOld":"  /**\n   * Release the refernce previously obtained via {@link #acquire()}.\n   * <p>\n   * <b>NOTE:</b> it's safe to call this after {@link #close()}.\n   */\n  public final void release(G reference) throws IOException {\n    assert reference != null;\n    decRef(reference);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#release(G).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#release(G).mjava","sourceNew":"  /**\n   * Release the reference previously obtained via {@link #acquire()}.\n   * <p>\n   * <b>NOTE:</b> it's safe to call this after {@link #close()}.\n   * @throws IOException if the release operation on the given resource throws an {@link IOException}\n   */\n  public final void release(G reference) throws IOException {\n    assert reference != null;\n    decRef(reference);\n  }\n\n","sourceOld":"  /**\n   * Release the reference previously obtained via {@link #acquire()}.\n   * <p>\n   * <b>NOTE:</b> it's safe to call this after {@link #close()}.\n   * @throws IOException if the release operation on the given resource throws an {@link IOException}\n   */\n  public final void release(G reference) throws IOException {\n    assert reference != null;\n    decRef(reference);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#release(G).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#release(G).mjava","sourceNew":"  /**\n   * Release the reference previously obtained via {@link #acquire()}.\n   * <p>\n   * <b>NOTE:</b> it's safe to call this after {@link #close()}.\n   * @throws IOException if the release operation on the given resource throws an {@link IOException}\n   */\n  public final void release(G reference) throws IOException {\n    assert reference != null;\n    decRef(reference);\n  }\n\n","sourceOld":"  /**\n   * Release the reference previously obtained via {@link #acquire()}.\n   * <p>\n   * <b>NOTE:</b> it's safe to call this after {@link #close()}.\n   * @throws IOException if the release operation on the given resource throws an {@link IOException}\n   */\n  public final void release(G reference) throws IOException {\n    assert reference != null;\n    decRef(reference);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}