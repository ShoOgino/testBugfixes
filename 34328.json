{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriterOverflow().mjava","commits":[{"id":"f375a9203c9124207e176f4dc59bd8e832b239a0","date":1370270173,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriterOverflow().mjava","pathOld":"/dev/null","sourceNew":"  // memory hole\n  @Ignore\n  public void testPagedGrowableWriterOverflow() {\n    final long size = _TestUtil.nextLong(random(), 2 * (long) Integer.MAX_VALUE, 3 * (long) Integer.MAX_VALUE);\n    final int pageSize = 1 << (_TestUtil.nextInt(random(), 16, 30));\n    final PagedGrowableWriter writer = new PagedGrowableWriter(size, pageSize, 1, random().nextFloat());\n    final long index = _TestUtil.nextLong(random(), (long) Integer.MAX_VALUE, size - 1);\n    writer.set(index, 2);\n    assertEquals(2, writer.get(index));\n    for (int i = 0; i < 1000000; ++i) {\n      final long idx = _TestUtil.nextLong(random(), 0, size);\n      if (idx == index) {\n        assertEquals(2, writer.get(idx));\n      } else {\n        assertEquals(0, writer.get(idx));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriterOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriterOverflow().mjava","sourceNew":"  // memory hole\n  @Ignore\n  public void testPagedGrowableWriterOverflow() {\n    final long size = TestUtil.nextLong(random(), 2 * (long) Integer.MAX_VALUE, 3 * (long) Integer.MAX_VALUE);\n    final int pageSize = 1 << (TestUtil.nextInt(random(), 16, 30));\n    final PagedGrowableWriter writer = new PagedGrowableWriter(size, pageSize, 1, random().nextFloat());\n    final long index = TestUtil.nextLong(random(), (long) Integer.MAX_VALUE, size - 1);\n    writer.set(index, 2);\n    assertEquals(2, writer.get(index));\n    for (int i = 0; i < 1000000; ++i) {\n      final long idx = TestUtil.nextLong(random(), 0, size);\n      if (idx == index) {\n        assertEquals(2, writer.get(idx));\n      } else {\n        assertEquals(0, writer.get(idx));\n      }\n    }\n  }\n\n","sourceOld":"  // memory hole\n  @Ignore\n  public void testPagedGrowableWriterOverflow() {\n    final long size = _TestUtil.nextLong(random(), 2 * (long) Integer.MAX_VALUE, 3 * (long) Integer.MAX_VALUE);\n    final int pageSize = 1 << (_TestUtil.nextInt(random(), 16, 30));\n    final PagedGrowableWriter writer = new PagedGrowableWriter(size, pageSize, 1, random().nextFloat());\n    final long index = _TestUtil.nextLong(random(), (long) Integer.MAX_VALUE, size - 1);\n    writer.set(index, 2);\n    assertEquals(2, writer.get(index));\n    for (int i = 0; i < 1000000; ++i) {\n      final long idx = _TestUtil.nextLong(random(), 0, size);\n      if (idx == index) {\n        assertEquals(2, writer.get(idx));\n      } else {\n        assertEquals(0, writer.get(idx));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f375a9203c9124207e176f4dc59bd8e832b239a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}