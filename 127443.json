{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","commits":[{"id":"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58","date":1396480148,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          // if we're configured to ignoreCase, then we build the mappings with all lower           \n          List<String> vals = (List<String>)storedSyns.get(key);\n          Set<String> sortedVals = new TreeSet<>();\n          if (ignoreCase) {\n            for (String next : vals) {\n              sortedVals.add(applyCaseSetting(ignoreCase, next));\n            }\n          } else {\n            sortedVals.addAll(vals);\n          }\n          \n          synonymMappings.put(applyCaseSetting(ignoreCase, key), sortedVals);\n        }\n      }\n      \n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          // if we're configured to ignoreCase, then we build the mappings with all lower           \n          List<String> vals = (List<String>)storedSyns.get(key);\n          Set<String> sortedVals = new TreeSet<>();\n          if (ignoreCase) {\n            for (String next : vals) {\n              sortedVals.add(applyCaseSetting(ignoreCase, next));\n            }\n          } else {\n            sortedVals.addAll(vals);\n          }\n          \n          synonymMappings.put(applyCaseSetting(ignoreCase, key), sortedVals);\n        }\n      }\n      \n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c897483ab479f5d1bcdd40400d20ef417b3b837","date":1400781817,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n      \n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n          \n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));          \n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }    \n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          // if we're configured to ignoreCase, then we build the mappings with all lower           \n          List<String> vals = (List<String>)storedSyns.get(key);\n          Set<String> sortedVals = new TreeSet<>();\n          if (ignoreCase) {\n            for (String next : vals) {\n              sortedVals.add(applyCaseSetting(ignoreCase, next));\n            }\n          } else {\n            sortedVals.addAll(vals);\n          }\n          \n          synonymMappings.put(applyCaseSetting(ignoreCase, key), sortedVals);\n        }\n      }\n      \n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4da8d4c422d841c0e5a997bf16dd471c5545d3e4","date":1430889527,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));          \n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n      \n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n          \n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));          \n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));          \n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n                    \n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));          \n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n      \n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n           format+\"! Only 'solr' is supported.\");\n      }\n      \n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n          \n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);        \n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"4da8d4c422d841c0e5a997bf16dd471c5545d3e4":["3c897483ab479f5d1bcdd40400d20ef417b3b837"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["4da8d4c422d841c0e5a997bf16dd471c5545d3e4"],"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"3c897483ab479f5d1bcdd40400d20ef417b3b837":["9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4da8d4c422d841c0e5a997bf16dd471c5545d3e4","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["140be51d03394488536f4aacedace29f9b318347","b0b597c65628ca9e73913a07e81691f8229bae35"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"4da8d4c422d841c0e5a997bf16dd471c5545d3e4":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58":["5eb2511ababf862ea11e10761c70ee560cd84510","3c897483ab479f5d1bcdd40400d20ef417b3b837"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"3c897483ab479f5d1bcdd40400d20ef417b3b837":["4da8d4c422d841c0e5a997bf16dd471c5545d3e4"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}