{"path":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cec585935ebadb78352a93e4a429d2b89fb2d53e","date":1313269561,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 2, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a110e87d79276dcf4554fb1d02324feb891795","date":1313710986,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 2, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c518d12136e15c9de6fa3d2c4bf5add07311a685","date":1313718511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.setTimeUpperBound(-1);\n    tracker.setDocsUpperBound(8);\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.setTimeUpperBound(-1);\n    softTracker.setDocsUpperBound(4);\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 2, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f39780a18aae7ef039e09985b32e302d079e7f","date":1313764730,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener(TriggerOn.Hard);\n\n    core.registerNewSearcherListener(trigger);\n    \n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    updateHandler.registerCommitCallback(trigger);\n    \n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.setTimeUpperBound(-1);\n    tracker.setDocsUpperBound(8);\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener(TriggerOn.Soft);\n    updateHandler.registerSoftCommitCallback(softTrigger);\n    core.registerNewSearcherListener(softTrigger);\n    \n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.setTimeUpperBound(-1);\n    softTracker.setDocsUpperBound(4);\n\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    softTrigger.reset();\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    softTrigger.reset();\n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 2, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.setTimeUpperBound(-1);\n    tracker.setDocsUpperBound(8);\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.setTimeUpperBound(-1);\n    softTracker.setDocsUpperBound(4);\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 2, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09d02225ad8c7d4b2af4b84d1c965a791b7d4a23","date":1317007809,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener(TriggerOn.Hard);\n\n    core.registerNewSearcherListener(trigger);\n    \n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    updateHandler.registerCommitCallback(trigger);\n    \n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.setTimeUpperBound(-1);\n    tracker.setDocsUpperBound(8);\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener(TriggerOn.Soft);\n    updateHandler.registerSoftCommitCallback(softTrigger);\n    core.registerNewSearcherListener(softTrigger);\n    \n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.setTimeUpperBound(-1);\n    softTracker.setDocsUpperBound(4);\n\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    softTrigger.reset();\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    assertTrue(softTrigger.waitForNewSearcher(30000));\n    softTrigger.reset();\n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 2, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener(TriggerOn.Hard);\n\n    core.registerNewSearcherListener(trigger);\n    \n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    updateHandler.registerCommitCallback(trigger);\n    \n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.setTimeUpperBound(-1);\n    tracker.setDocsUpperBound(8);\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener(TriggerOn.Soft);\n    updateHandler.registerSoftCommitCallback(softTrigger);\n    core.registerNewSearcherListener(softTrigger);\n    \n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.setTimeUpperBound(-1);\n    softTracker.setDocsUpperBound(4);\n\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    softTrigger.reset();\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    softTrigger.reset();\n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 2, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b01e327764dff0c4e657a87afb8a11306045b76","date":1320242486,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","sourceNew":null,"sourceOld":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener(TriggerOn.Hard);\n\n    core.registerNewSearcherListener(trigger);\n    \n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    updateHandler.registerCommitCallback(trigger);\n    \n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.setTimeUpperBound(-1);\n    tracker.setDocsUpperBound(8);\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener(TriggerOn.Soft);\n    updateHandler.registerSoftCommitCallback(softTrigger);\n    core.registerNewSearcherListener(softTrigger);\n    \n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.setTimeUpperBound(-1);\n    softTracker.setDocsUpperBound(4);\n\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    softTrigger.reset();\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    assertTrue(softTrigger.waitForNewSearcher(30000));\n    softTrigger.reset();\n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 2, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09d02225ad8c7d4b2af4b84d1c965a791b7d4a23":["51f39780a18aae7ef039e09985b32e302d079e7f"],"7b01e327764dff0c4e657a87afb8a11306045b76":["09d02225ad8c7d4b2af4b84d1c965a791b7d4a23"],"16a110e87d79276dcf4554fb1d02324feb891795":["cec585935ebadb78352a93e4a429d2b89fb2d53e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f39780a18aae7ef039e09985b32e302d079e7f":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["16a110e87d79276dcf4554fb1d02324feb891795"],"cec585935ebadb78352a93e4a429d2b89fb2d53e":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b01e327764dff0c4e657a87afb8a11306045b76"]},"commit2Childs":{"09d02225ad8c7d4b2af4b84d1c965a791b7d4a23":["7b01e327764dff0c4e657a87afb8a11306045b76"],"7b01e327764dff0c4e657a87afb8a11306045b76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16a110e87d79276dcf4554fb1d02324feb891795":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cec585935ebadb78352a93e4a429d2b89fb2d53e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"51f39780a18aae7ef039e09985b32e302d079e7f":["09d02225ad8c7d4b2af4b84d1c965a791b7d4a23"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["51f39780a18aae7ef039e09985b32e302d079e7f"],"cec585935ebadb78352a93e4a429d2b89fb2d53e":["16a110e87d79276dcf4554fb1d02324feb891795"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}