{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","commits":[{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(\"name\");\n\n    if(collectionName == null)\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(\"name\");\n\n    if(collectionName == null)\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff2ea054f72177967223fb032d708ad8020e80a","date":1401922976,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","sourceNew":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(\"name\");\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","sourceOld":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(\"name\");\n\n    if(collectionName == null)\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","sourceNew":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(NAME);\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","sourceOld":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(\"name\");\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","sourceNew":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(NAME);\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","sourceOld":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(\"name\");\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2","date":1433415299,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","sourceNew":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(NAME);\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    //TODO deprecated remove this check .\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","sourceOld":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(NAME);\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#checkExclusiveMarking(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#checkExclusivity(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  public ExclusiveMarking checkExclusiveMarking(String collectionName, ZkNodeProps message) {\n    // CLUSTERSTATUS is always mutually exclusive\n    //TODO deprecated remove this check .\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return ExclusiveMarking.EXCLUSIVE;\n\n    if(collectionWip.contains(collectionName))\n      return ExclusiveMarking.NONEXCLUSIVE;\n\n    return ExclusiveMarking.NOTDETERMINED;\n  }\n\n","sourceOld":"  private boolean checkExclusivity(ZkNodeProps message, String id) throws KeeperException, InterruptedException {\n    String collectionName = message.containsKey(COLLECTION_PROP) ?\n        message.getStr(COLLECTION_PROP) : message.getStr(NAME);\n\n    if(collectionName == null)\n      return true;\n\n    // CLUSTERSTATUS is always mutually exclusive\n    //TODO deprecated remove this check .\n    if(CLUSTERSTATUS.isEqual(message.getStr(Overseer.QUEUE_OPERATION)))\n      return true;\n\n    if(collectionWip.contains(collectionName))\n      return false;\n\n    if(runningZKTasks.contains(id))\n      return false;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["85f6ce3af19fc13abaaade6799a6e8c192e9b8e2"],"8ff2ea054f72177967223fb032d708ad8020e80a":["6f26f74e4969851a019d28f10315cb1c77786f22"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["8ff2ea054f72177967223fb032d708ad8020e80a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["8ff2ea054f72177967223fb032d708ad8020e80a","1390137e395d2f07f9ba5b8c43d293befe84d563"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff2ea054f72177967223fb032d708ad8020e80a":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["85f6ce3af19fc13abaaade6799a6e8c192e9b8e2","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["8ff2ea054f72177967223fb032d708ad8020e80a","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}