{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSloppyPhraseQuery().mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSloppyPhraseQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testSloppyPhraseQuery() throws IOException {\n    PhraseQuery pq = new PhraseQuery(4, FIELD_WITH_OFFSETS, \"a\", \"sentence\");\n    checkMatches(pq, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 0, 2, 0, 17, 6, 9, 35, 59, 9, 11, 58, 75 }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSloppyPhraseQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSloppyPhraseQuery().mjava","sourceNew":"  public void testSloppyPhraseQuery() throws IOException {\n    Term a = new Term(FIELD_WITH_OFFSETS, \"a\");\n    Term s = new Term(FIELD_WITH_OFFSETS, \"sentence\");\n    PhraseQuery pq = new PhraseQuery(4, FIELD_WITH_OFFSETS, \"a\", \"sentence\");\n    checkMatches(pq, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 0, 2, 0, 17, 6, 9, 35, 59, 9, 11, 58, 75 }\n    });\n    checkTermMatches(pq, FIELD_WITH_OFFSETS, new TermMatch[][][]{\n        {}, {}, {}, {},\n        { {\n          new TermMatch(0, 0, 1), new TermMatch(2, 9, 17)\n        }, {\n          new TermMatch(9, 58, 59), new TermMatch(6, 35, 43)\n        }, {\n          new TermMatch(9, 58, 59), new TermMatch(11, 67, 75)\n        } }\n    });\n  }\n\n","sourceOld":"  public void testSloppyPhraseQuery() throws IOException {\n    PhraseQuery pq = new PhraseQuery(4, FIELD_WITH_OFFSETS, \"a\", \"sentence\");\n    checkMatches(pq, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 0, 2, 0, 17, 6, 9, 35, 59, 9, 11, 58, 75 }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSloppyPhraseQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSloppyPhraseQuery().mjava","sourceNew":"  public void testSloppyPhraseQuery() throws IOException {\n    PhraseQuery pq = new PhraseQuery(4, FIELD_WITH_OFFSETS, \"a\", \"sentence\");\n    checkMatches(pq, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 0, 2, 0, 17, 6, 9, 35, 59, 9, 11, 58, 75 }\n    });\n  }\n\n","sourceOld":"  public void testSloppyPhraseQuery() throws IOException {\n    Term a = new Term(FIELD_WITH_OFFSETS, \"a\");\n    Term s = new Term(FIELD_WITH_OFFSETS, \"sentence\");\n    PhraseQuery pq = new PhraseQuery(4, FIELD_WITH_OFFSETS, \"a\", \"sentence\");\n    checkMatches(pq, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 0, 2, 0, 17, 6, 9, 35, 59, 9, 11, 58, 75 }\n    });\n    checkTermMatches(pq, FIELD_WITH_OFFSETS, new TermMatch[][][]{\n        {}, {}, {}, {},\n        { {\n          new TermMatch(0, 0, 1), new TermMatch(2, 9, 17)\n        }, {\n          new TermMatch(9, 58, 59), new TermMatch(6, 35, 43)\n        }, {\n          new TermMatch(9, 58, 59), new TermMatch(11, 67, 75)\n        } }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSloppyPhraseQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSloppyPhraseQuery().mjava","sourceNew":"  public void testSloppyPhraseQuery() throws IOException {\n    PhraseQuery pq = new PhraseQuery(4, FIELD_WITH_OFFSETS, \"a\", \"sentence\");\n    checkMatches(pq, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 0, 2, 0, 17, 6, 9, 35, 59, 9, 11, 58, 75 }\n    });\n    assertIsLeafMatch(pq, FIELD_WITH_OFFSETS);\n  }\n\n","sourceOld":"  public void testSloppyPhraseQuery() throws IOException {\n    PhraseQuery pq = new PhraseQuery(4, FIELD_WITH_OFFSETS, \"a\", \"sentence\");\n    checkMatches(pq, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 0, 2, 0, 17, 6, 9, 35, 59, 9, 11, 58, 75 }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["3b11b9d5eaf9707760ca5151530830a825197023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}