{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#cleanInput(CharSequence,StringBuilder).mjava","commits":[{"id":"5ae9942cbee38a49d234c2f022e3a265133d1914","date":1393952688,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#cleanInput(CharSequence,StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"  CharSequence cleanInput(CharSequence input, StringBuilder reuse) {\n    reuse.setLength(0);\n    \n    for (int i = 0; i < input.length(); i++) {\n      char ch = input.charAt(i);\n      \n      if (ignore != null && Arrays.binarySearch(ignore, ch) >= 0) {\n        continue;\n      }\n      \n      if (ignoreCase && iconv == null) {\n        // if we have no input conversion mappings, do this on-the-fly\n        ch = Character.toLowerCase(ch);\n      }\n      \n      reuse.append(ch);\n    }\n    \n    if (iconv != null) {\n      try {\n        applyMappings(iconv, reuse);\n      } catch (IOException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      if (ignoreCase) {\n        for (int i = 0; i < reuse.length(); i++) {\n          reuse.setCharAt(i, Character.toLowerCase(reuse.charAt(i)));\n        }\n      }\n    }\n    \n    return reuse;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#cleanInput(CharSequence,StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"  CharSequence cleanInput(CharSequence input, StringBuilder reuse) {\n    reuse.setLength(0);\n    \n    for (int i = 0; i < input.length(); i++) {\n      char ch = input.charAt(i);\n      \n      if (ignore != null && Arrays.binarySearch(ignore, ch) >= 0) {\n        continue;\n      }\n      \n      if (ignoreCase && iconv == null) {\n        // if we have no input conversion mappings, do this on-the-fly\n        ch = Character.toLowerCase(ch);\n      }\n      \n      reuse.append(ch);\n    }\n    \n    if (iconv != null) {\n      try {\n        applyMappings(iconv, reuse);\n      } catch (IOException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      if (ignoreCase) {\n        for (int i = 0; i < reuse.length(); i++) {\n          reuse.setCharAt(i, Character.toLowerCase(reuse.charAt(i)));\n        }\n      }\n    }\n    \n    return reuse;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"422da43e6414338103dfc37b7c8c68dcbe309d87","date":1405540909,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#cleanInput(CharSequence,StringBuilder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#cleanInput(CharSequence,StringBuilder).mjava","sourceNew":"  CharSequence cleanInput(CharSequence input, StringBuilder reuse) {\n    reuse.setLength(0);\n    \n    for (int i = 0; i < input.length(); i++) {\n      char ch = input.charAt(i);\n      \n      if (ignore != null && Arrays.binarySearch(ignore, ch) >= 0) {\n        continue;\n      }\n      \n      if (ignoreCase && iconv == null) {\n        // if we have no input conversion mappings, do this on-the-fly\n        ch = caseFold(ch);\n      }\n      \n      reuse.append(ch);\n    }\n    \n    if (iconv != null) {\n      try {\n        applyMappings(iconv, reuse);\n      } catch (IOException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      if (ignoreCase) {\n        for (int i = 0; i < reuse.length(); i++) {\n          reuse.setCharAt(i, caseFold(reuse.charAt(i)));\n        }\n      }\n    }\n    \n    return reuse;\n  }\n\n","sourceOld":"  CharSequence cleanInput(CharSequence input, StringBuilder reuse) {\n    reuse.setLength(0);\n    \n    for (int i = 0; i < input.length(); i++) {\n      char ch = input.charAt(i);\n      \n      if (ignore != null && Arrays.binarySearch(ignore, ch) >= 0) {\n        continue;\n      }\n      \n      if (ignoreCase && iconv == null) {\n        // if we have no input conversion mappings, do this on-the-fly\n        ch = Character.toLowerCase(ch);\n      }\n      \n      reuse.append(ch);\n    }\n    \n    if (iconv != null) {\n      try {\n        applyMappings(iconv, reuse);\n      } catch (IOException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      if (ignoreCase) {\n        for (int i = 0; i < reuse.length(); i++) {\n          reuse.setCharAt(i, Character.toLowerCase(reuse.charAt(i)));\n        }\n      }\n    }\n    \n    return reuse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae9942cbee38a49d234c2f022e3a265133d1914"],"5ae9942cbee38a49d234c2f022e3a265133d1914":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"422da43e6414338103dfc37b7c8c68dcbe309d87":["5ae9942cbee38a49d234c2f022e3a265133d1914"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["422da43e6414338103dfc37b7c8c68dcbe309d87"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5ae9942cbee38a49d234c2f022e3a265133d1914":["96ea64d994d340044e0d57aeb6a5871539d10ca5","422da43e6414338103dfc37b7c8c68dcbe309d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","5ae9942cbee38a49d234c2f022e3a265133d1914"],"422da43e6414338103dfc37b7c8c68dcbe309d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}