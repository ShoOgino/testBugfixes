{"path":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","commits":[{"id":"7d7203a8194ca217ec527231120df075e9bec237","date":1219055463,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = name.intern();\n    fieldsData = value;\n    \n    if (store == Store.YES) {\n      isStored = true;\n      isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      isStored = true;\n      isCompressed = true;\n    }\n    else if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n    \n    isIndexed   = false;\n    isTokenized = false;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6b4065cdaf7d1be530c926dc327494bee4ffa","date":1239273470,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = name.intern();\n    fieldsData = value;\n    \n    if (store == Store.YES) {\n      isStored = true;\n      isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      isStored = true;\n      isCompressed = true;\n    }\n    else if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n    \n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = name.intern();\n    fieldsData = value;\n    \n    if (store == Store.YES) {\n      isStored = true;\n      isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      isStored = true;\n      isCompressed = true;\n    }\n    else if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n    \n    isIndexed   = false;\n    isTokenized = false;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf93f7a278746d4746fa3ebb3d53267b22fd040f","date":1249495506,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    if (store == Store.YES) {\n      isStored = true;\n      isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      isStored = true;\n      isCompressed = true;\n    }\n    else if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n    \n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = name.intern();\n    fieldsData = value;\n    \n    if (store == Store.YES) {\n      isStored = true;\n      isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      isStored = true;\n      isCompressed = true;\n    }\n    else if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n    \n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    if (store == Store.YES) {\n      isStored = true;\n    }\n    else if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n    \n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    if (store == Store.YES) {\n      isStored = true;\n      isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      isStored = true;\n      isCompressed = true;\n    }\n    else if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n    \n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11266ec2b1f515f9811446f93995423f290c40c9","date":1256153406,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    \n    isStored = store.isStored();\n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    if (store == Store.YES) {\n      isStored = true;\n    }\n    else if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n    \n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2","date":1261491902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   * @deprecated Use {@link #Field(String, byte[], int, int) instead}\n   */\n  @Deprecated\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n    this(name, value, offset, length);\n\n    if (store == Store.NO) {\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   */\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    if (store == Store.NO)\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    \n    isStored = store.isStored();\n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   * @deprecated Use {@link #Field(String, byte[], int, int) instead}\n   */\n  @Deprecated\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n    this(name, value, offset, length);\n\n    if (store == Store.NO) {\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   * @deprecated Use {@link #Field(String, byte[], int, int) instead}\n   */\n  @Deprecated\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n    this(name, value, offset, length);\n\n    if (store == Store.NO) {\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2":["11266ec2b1f515f9811446f93995423f290c40c9"],"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"7d7203a8194ca217ec527231120df075e9bec237":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11266ec2b1f515f9811446f93995423f290c40c9":["e0c804f7aa477229414a7e12882af490c241f64d"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["7d7203a8194ca217ec527231120df075e9bec237"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0c804f7aa477229414a7e12882af490c241f64d":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2"]},"commit2Childs":{"3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["e0c804f7aa477229414a7e12882af490c241f64d"],"7d7203a8194ca217ec527231120df075e9bec237":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"11266ec2b1f515f9811446f93995423f290c40c9":["3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d7203a8194ca217ec527231120df075e9bec237"],"e0c804f7aa477229414a7e12882af490c241f64d":["11266ec2b1f515f9811446f93995423f290c40c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}