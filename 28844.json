{"path":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    IndexReader r = IndexReader.open(dir);\n    final IndexSearcher s = new IndexSearcher(r);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}