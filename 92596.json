{"path":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","commits":[{"id":"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644","date":1170990980,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes, Field.Store.YES));\n    return size;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes, Field.Store.YES));\n    return size;\n  }\n\n","sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes, Field.Store.YES));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean).mjava","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes, Field.Store.YES));\n    return size;\n  }\n\n","sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes, Field.Store.YES));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes, Field.Store.YES));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["e0c804f7aa477229414a7e12882af490c241f64d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"e0c804f7aa477229414a7e12882af490c241f64d":["1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644"],"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644":["e0c804f7aa477229414a7e12882af490c241f64d"],"e0c804f7aa477229414a7e12882af490c241f64d":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}