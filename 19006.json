{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkTerms(Query,String,String[][]).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkTerms(Query,String,String[][]).mjava","pathOld":"/dev/null","sourceNew":"  void checkTerms(Query q, String field, String[][] expected) throws IOException {\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n    for (int i = 0; i < expected.length; i++) {\n      LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(i, searcher.leafContexts));\n      int doc = i - ctx.docBase;\n      Matches matches = w.matches(ctx, doc);\n      if (matches == null) {\n        assertEquals(expected[i].length, 0);\n        continue;\n      }\n      MatchesIterator it = matches.getMatches(field);\n      if (it == null) {\n        assertEquals(expected[i].length, 0);\n        continue;\n      }\n      int pos = 0;\n      while (it.next()) {\n        assertEquals(expected[i][pos], it.term().utf8ToString());\n        pos += 1;\n      }\n      assertEquals(expected[i].length, pos);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkTerms(Query,String,String[][]).mjava","pathOld":"/dev/null","sourceNew":"  void checkTerms(Query q, String field, String[][] expected) throws IOException {\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n    for (int i = 0; i < expected.length; i++) {\n      LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(i, searcher.leafContexts));\n      int doc = i - ctx.docBase;\n      Matches matches = w.matches(ctx, doc);\n      if (matches == null) {\n        assertEquals(expected[i].length, 0);\n        continue;\n      }\n      MatchesIterator it = matches.getMatches(field);\n      if (it == null) {\n        assertEquals(expected[i].length, 0);\n        continue;\n      }\n      int pos = 0;\n      while (it.next()) {\n        assertEquals(expected[i][pos], it.term().utf8ToString());\n        pos += 1;\n      }\n      assertEquals(expected[i].length, pos);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364","date":1524498677,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkTerms(Query,String,String[][]).mjava","sourceNew":null,"sourceOld":"  void checkTerms(Query q, String field, String[][] expected) throws IOException {\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n    for (int i = 0; i < expected.length; i++) {\n      LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(i, searcher.leafContexts));\n      int doc = i - ctx.docBase;\n      Matches matches = w.matches(ctx, doc);\n      if (matches == null) {\n        assertEquals(expected[i].length, 0);\n        continue;\n      }\n      MatchesIterator it = matches.getMatches(field);\n      if (it == null) {\n        assertEquals(expected[i].length, 0);\n        continue;\n      }\n      int pos = 0;\n      while (it.next()) {\n        assertEquals(expected[i][pos], it.term().utf8ToString());\n        pos += 1;\n      }\n      assertEquals(expected[i].length, pos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffb7b0a1201e65140f72d01a08b2bc34b0cfc364"]},"commit2Childs":{"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["ffb7b0a1201e65140f72d01a08b2bc34b0cfc364"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}