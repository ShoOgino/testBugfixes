{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","commits":[{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(\"event.type_s\", event.getEventType().toString());\n      doc.addField(\"event.source_s\", event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(\"stage_s\", stage.toString());\n      if (actionName != null) {\n        doc.addField(\"action_s\", actionName);\n      }\n      if (message != null) {\n        doc.addField(\"message_t\", message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(\"before\", doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(\"after\", doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      cloudSolrClient.request(req, collection);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3301c97f51316f9c9937654c07d7a6a21e7aecb8","date":1503489616,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      cloudSolrClient.request(req, collection);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(\"event.type_s\", event.getEventType().toString());\n      doc.addField(\"event.source_s\", event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(\"stage_s\", stage.toString());\n      if (actionName != null) {\n        doc.addField(\"action_s\", actionName);\n      }\n      if (message != null) {\n        doc.addField(\"message_t\", message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(\"before\", doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(\"after\", doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      cloudSolrClient.request(req, collection);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      clusterDataProvider.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      cloudSolrClient.request(req, collection);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      cloudSolrClient.request(req, collection);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      clusterDataProvider.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      cloudSolrClient.request(req, collection);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      cloudSolrClient.request(req, collection);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      dataProvider.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      cloudSolrClient.request(req, collection);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      cloudManager.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      dataProvider.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      cloudManager.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    if (!enabled) {\n      return;\n    }\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      cloudManager.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94817e0018f71a66456868be09aae5da4e4c2664","date":1546444516,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    try {\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection coll = clusterState.getCollectionOrNull(collection);\n      if (coll == null) {\n        log.debug(\"Collection {} missing, skip sending event {}\", collection, event);\n        return;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      cloudManager.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign but log this - collection still existed when we started\n        log.info(\"Collection {} missing, skip sending event {}\", collection, event);\n      } else {\n        log.warn(\"Exception sending event. Collection: {}, event: {}, exception: {}\", collection, event, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      cloudManager.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign\n        log.info(\"Collection \" + collection + \" does not exist, disabling logging.\");\n        enabled = false;\n      } else {\n        log.warn(\"Exception sending event to collection \" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    try {\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection coll = clusterState.getCollectionOrNull(collection);\n      if (coll == null) {\n        log.debug(\"Collection {} missing, skip sending event {}\", collection, event);\n        return;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      cloudManager.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign but log this - collection still existed when we started\n        log.info(\"Collection {} missing, skip sending event {}\", collection, event);\n      } else {\n        log.warn(\"Exception sending event. Collection: {}, event: {}, exception: {}\", collection, event, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    try {\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection coll = clusterState.getCollectionOrNull(collection);\n      if (coll == null) {\n        log.debug(\"Collection {} missing, skip sending event {}\", collection, event);\n        return;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      cloudManager.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign but log this - collection still existed when we started\n        log.info(\"Collection {} missing, skip sending event {}\", collection, event);\n      } else {\n        log.warn(\"Exception sending event. Collection: {}, event: {}, exception: {}\", collection, event, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context,\n               Throwable error, String message) throws Exception {\n    try {\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection coll = clusterState.getCollectionOrNull(collection);\n      if (coll == null) {\n        log.debug(\"Collection {} missing, skip sending event {}\", collection, event);\n        return;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(CommonParams.TYPE, DOC_TYPE);\n      doc.addField(SOURCE_FIELD, SOURCE);\n      doc.addField(\"id\", IdUtils.timeRandomId());\n      doc.addField(\"event.id_s\", event.getId());\n      doc.addField(EVENT_TYPE_FIELD, event.getEventType().toString());\n      doc.addField(EVENT_SOURCE_FIELD, event.getSource());\n      doc.addField(\"event.time_l\", event.getEventTime());\n      doc.addField(\"timestamp\", new Date());\n      addMap(\"event.property.\", doc, event.getProperties());\n      doc.addField(STAGE_FIELD, stage.toString());\n      if (actionName != null) {\n        doc.addField(ACTION_FIELD, actionName);\n      }\n      if (message != null) {\n        doc.addField(MESSAGE_FIELD, message);\n      }\n      addError(doc, error);\n      // add JSON versions of event and context\n      String eventJson = Utils.toJSONString(event);\n      doc.addField(\"event_str\", eventJson);\n      if (context != null) {\n        // capture specifics of operations after compute_plan action\n        addOperations(doc, (List<SolrRequest>)context.getProperties().get(\"operations\"));\n        // capture specifics of responses after execute_plan action\n        addResponses(doc, (List<NamedList<Object>>)context.getProperties().get(\"responses\"));\n        addActions(BEFORE_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.BEFORE_ACTION.toString()));\n        addActions(AFTER_ACTIONS_FIELD, doc, (List<String>)context.getProperties().get(TriggerEventProcessorStage.AFTER_ACTION.toString()));\n        String contextJson = Utils.toJSONString(context);\n        doc.addField(\"context_str\", contextJson);\n      }\n      UpdateRequest req = new UpdateRequest();\n      req.add(doc);\n      req.setParam(CollectionAdminParams.COLLECTION, collection);\n      cloudManager.request(req);\n    } catch (Exception e) {\n      if ((e instanceof SolrException) && e.getMessage().contains(\"Collection not found\")) {\n        // relatively benign but log this - collection still existed when we started\n        log.info(\"Collection {} missing, skip sending event {}\", collection, event);\n      } else {\n        log.warn(\"Exception sending event. Collection: {}, event: {}, exception: {}\", collection, event, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94817e0018f71a66456868be09aae5da4e4c2664":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["94817e0018f71a66456868be09aae5da4e4c2664"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["94817e0018f71a66456868be09aae5da4e4c2664"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"94817e0018f71a66456868be09aae5da4e4c2664":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","560c18d71dad43d675158783c3840f8c80d6d39c"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}