{"path":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  protected boolean score(HitCollector hc, int max) throws IOException {\n    // null pointer exception when next() was not called before:\n    int docNr = countingSumScorer.doc();\n    while (docNr < max) {\n      hc.collect(docNr, score());\n      if (! countingSumScorer.next()) {\n        return false;\n      }\n      docNr = countingSumScorer.doc();\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   * @deprecated use {@link #score(Collector, int)} instead.\n   */\n  protected boolean score(HitCollector hc, int max) throws IOException {\n    return score(new HitCollectorWrapper(hc), max);\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  protected boolean score(HitCollector hc, int max) throws IOException {\n    // null pointer exception when next() was not called before:\n    int docNr = countingSumScorer.doc();\n    while (docNr < max) {\n      hc.collect(docNr, score());\n      if (! countingSumScorer.next()) {\n        return false;\n      }\n      docNr = countingSumScorer.doc();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   * @deprecated use {@link #score(Collector, int)} instead.\n   */\n  protected boolean score(HitCollector hc, int max) throws IOException {\n    return score(new HitCollectorWrapper(hc), max, docID());\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   * @deprecated use {@link #score(Collector, int)} instead.\n   */\n  protected boolean score(HitCollector hc, int max) throws IOException {\n    return score(new HitCollectorWrapper(hc), max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa6b36d4f0afdb006498f433653ee214a61be4fa","date":1251387263,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   * @deprecated use {@link #score(Collector, int, int)} instead.\n   */\n  protected boolean score(HitCollector hc, int max) throws IOException {\n    return score(new HitCollectorWrapper(hc), max, docID());\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   * @deprecated use {@link #score(Collector, int)} instead.\n   */\n  protected boolean score(HitCollector hc, int max) throws IOException {\n    return score(new HitCollectorWrapper(hc), max, docID());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector,int).mjava","sourceNew":null,"sourceOld":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   * @deprecated use {@link #score(Collector, int, int)} instead.\n   */\n  protected boolean score(HitCollector hc, int max) throws IOException {\n    return score(new HitCollectorWrapper(hc), max, docID());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa6b36d4f0afdb006498f433653ee214a61be4fa":["30a558487f2298c2c19ceca9103c1b6865d64708"],"30a558487f2298c2c19ceca9103c1b6865d64708":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["aa6b36d4f0afdb006498f433653ee214a61be4fa"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61cbcf396559d597a914594d7e2830c142ecfd91"]},"commit2Childs":{"aa6b36d4f0afdb006498f433653ee214a61be4fa":["61cbcf396559d597a914594d7e2830c142ecfd91"],"30a558487f2298c2c19ceca9103c1b6865d64708":["aa6b36d4f0afdb006498f433653ee214a61be4fa"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"61cbcf396559d597a914594d7e2830c142ecfd91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}