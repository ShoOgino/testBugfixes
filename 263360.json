{"path":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","commits":[{"id":"9272dcea19192a5fb261980a4737677abfcabab3","date":1409771900,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the approprate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      Writer writer = buildWriter(outputStream, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2e54d5d0cea0a8b27773e28c44cdd733ef0685b","date":1455646297,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","sourceNew":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the approprate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      OutputStream out = new OutputStream() {\n        @Override\n        public void write(int b) throws IOException {\n          outputStream.write(b);\n        }\n        @Override\n        public void flush() throws IOException {\n          // We don't flush here, which allows us to flush below\n          // and only flush internal buffers, not the response.\n          // If we flush the response early, we trigger chunked encoding.\n          // See SOLR-8669.\n        }\n      };\n      Writer writer = buildWriter(out, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the approprate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      Writer writer = buildWriter(outputStream, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","sourceNew":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the appropriate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      OutputStream out = new OutputStream() {\n        @Override\n        public void write(int b) throws IOException {\n          outputStream.write(b);\n        }\n        @Override\n        public void flush() throws IOException {\n          // We don't flush here, which allows us to flush below\n          // and only flush internal buffers, not the response.\n          // If we flush the response early, we trigger chunked encoding.\n          // See SOLR-8669.\n        }\n      };\n      Writer writer = buildWriter(out, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the approprate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      OutputStream out = new OutputStream() {\n        @Override\n        public void write(int b) throws IOException {\n          outputStream.write(b);\n        }\n        @Override\n        public void flush() throws IOException {\n          // We don't flush here, which allows us to flush below\n          // and only flush internal buffers, not the response.\n          // If we flush the response early, we trigger chunked encoding.\n          // See SOLR-8669.\n        }\n      };\n      Writer writer = buildWriter(out, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","sourceNew":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the appropriate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      OutputStream out = new OutputStream() {\n        @Override\n        public void write(int b) throws IOException {\n          outputStream.write(b);\n        }\n        @Override\n        public void flush() throws IOException {\n          // We don't flush here, which allows us to flush below\n          // and only flush internal buffers, not the response.\n          // If we flush the response early, we trigger chunked encoding.\n          // See SOLR-8669.\n        }\n      };\n      Writer writer = buildWriter(out, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the approprate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      OutputStream out = new OutputStream() {\n        @Override\n        public void write(int b) throws IOException {\n          outputStream.write(b);\n        }\n        @Override\n        public void flush() throws IOException {\n          // We don't flush here, which allows us to flush below\n          // and only flush internal buffers, not the response.\n          // If we flush the response early, we trigger chunked encoding.\n          // See SOLR-8669.\n        }\n      };\n      Writer writer = buildWriter(out, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil#writeQueryResponse(OutputStream,QueryResponseWriter,SolrQueryRequest,SolrQueryResponse,String).mjava","sourceNew":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the appropriate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      OutputStream out = new OutputStream() {\n        @Override\n        public void write(int b) throws IOException {\n          outputStream.write(b);\n        }\n        @Override\n        public void flush() throws IOException {\n          // We don't flush here, which allows us to flush below\n          // and only flush internal buffers, not the response.\n          // If we flush the response early, we trigger chunked encoding.\n          // See SOLR-8669.\n        }\n      };\n      Writer writer = buildWriter(out, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes the response writer's result to the given output stream.\n   * This method inspects the specified writer to determine if it is a \n   * {@link BinaryQueryResponseWriter} or not to delegate to the approprate method.\n   * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)\n   * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)\n   */\n  public static void writeQueryResponse(OutputStream outputStream,\n      QueryResponseWriter responseWriter, SolrQueryRequest solrRequest,\n      SolrQueryResponse solrResponse, String contentType) throws IOException {\n    \n    if (responseWriter instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(outputStream, solrRequest, solrResponse);\n    } else {\n      OutputStream out = new OutputStream() {\n        @Override\n        public void write(int b) throws IOException {\n          outputStream.write(b);\n        }\n        @Override\n        public void flush() throws IOException {\n          // We don't flush here, which allows us to flush below\n          // and only flush internal buffers, not the response.\n          // If we flush the response early, we trigger chunked encoding.\n          // See SOLR-8669.\n        }\n      };\n      Writer writer = buildWriter(out, ContentStreamBase.getCharsetFromContentType(contentType));\n      responseWriter.write(writer, solrRequest, solrResponse);\n      writer.flush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2e54d5d0cea0a8b27773e28c44cdd733ef0685b":["9272dcea19192a5fb261980a4737677abfcabab3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9272dcea19192a5fb261980a4737677abfcabab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d2e54d5d0cea0a8b27773e28c44cdd733ef0685b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d2e54d5d0cea0a8b27773e28c44cdd733ef0685b","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["d2e54d5d0cea0a8b27773e28c44cdd733ef0685b"]},"commit2Childs":{"d2e54d5d0cea0a8b27773e28c44cdd733ef0685b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272dcea19192a5fb261980a4737677abfcabab3"],"9272dcea19192a5fb261980a4737677abfcabab3":["d2e54d5d0cea0a8b27773e28c44cdd733ef0685b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}