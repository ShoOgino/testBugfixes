{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if(!row.isLive) continue;\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard, type);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setType(type)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if(!row.isLive) continue;\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard, type);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setType(type)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","date":1498706808,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<String> collections = (Set<String>) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (collections == null || shard == null) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (String coll : collections) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Clause.Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(coll, shard, type);\n        tmpRow.violations.clear();\n\n        List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n        return CollectionAdminRequest\n            .addReplicaToShard(coll, shard)\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if(!row.isLive) continue;\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard, type);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setType(type)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"/dev/null","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2","date":1500018428,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<String> collections = (Set<String>) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (collections == null || shard == null) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (String coll : collections) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Clause.Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(coll, shard, type);\n\n        List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n        return CollectionAdminRequest\n            .addReplicaToShard(coll, shard)\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<String> collections = (Set<String>) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (collections == null || shard == null) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (String coll : collections) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Clause.Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(coll, shard, type);\n        tmpRow.violations.clear();\n\n        List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n        return CollectionAdminRequest\n            .addReplicaToShard(coll, shard)\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5088ce415a50eb8412f4942aeabe293e75c81e7","date":1504531555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Clause.Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<String> collections = (Set<String>) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (collections == null || shard == null) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (String coll : collections) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Clause.Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(coll, shard, type);\n\n        List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n        return CollectionAdminRequest\n            .addReplicaToShard(coll, shard)\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Clause.Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Clause.Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c721fca3c540a91b445e6c57e51e2fcb64af01a7","date":1508161002,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Clause.Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b04413d237e43414609f041f50db04d553d686f","date":1515761310,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitable(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitable(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!row.isLive) continue;\n        if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elemenodesnts and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session.matrix);\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String,String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elements and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Integer targetNodeIndex = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitable(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            targetNodeIndex = i;\n          }\n        }\n      }\n\n      if (targetNodeIndex != null) {// there are no rule violations\n        getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(shard.first(), shard.second(), type));\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(getMatrix().get(targetNodeIndex).node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elemenodesnts and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session.matrix);\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elemenodesnts and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session.matrix);\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through elemenodesnts and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session.matrix);\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      double[] bestDeviation = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        double[] deviation = new double[1];\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session, deviation);\n        if (!containsNewErrors(errs)) {\n          if ((errs.isEmpty() && isLessDeviant(bestDeviation, deviation)) ||//there are no violations but this is deviating less\n              isLessSerious(errs, leastSeriousViolation)) {//there are errors , but this has less serious violation\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n            bestDeviation = deviation;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n\n        if (!containsNewErrors(errs)) {\n          if (isLessSerious(errs, leastSeriousViolation)) {\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c73f63a2a7b9f4a6b21e8723912461026968d87e","date":1539669411,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n        if (!containsNewErrors(errs)) {\n          if ((errs.isEmpty() && isLessDeviant()) ||//there are no violations but this is deviating less\n              isLessSerious(errs, leastSeriousViolation)) {//there are errors , but this has less serious violation\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      double[] bestDeviation = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        double[] deviation = new double[1];\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session, deviation);\n        if (!containsNewErrors(errs)) {\n          if ((errs.isEmpty() && isLessDeviant(bestDeviation, deviation)) ||//there are no violations but this is deviating less\n              isLessSerious(errs, leastSeriousViolation)) {//there are errors , but this has less serious violation\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n            bestDeviation = deviation;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row, null)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n        if (!containsNewErrors(errs)) {\n          if ((errs.isEmpty() && isLessDeviant()) ||//there are no violations but this is deviating less\n              isLessSerious(errs, leastSeriousViolation)) {//there are errors , but this has less serious violation\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n        if (!containsNewErrors(errs)) {\n          if ((errs.isEmpty() && isLessDeviant()) ||//there are no violations but this is deviating less\n              isLessSerious(errs, leastSeriousViolation)) {//there are errors , but this has less serious violation\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest tryEachNode(boolean strict) {\n    @SuppressWarnings({\"unchecked\"})\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row, null)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n        if (!containsNewErrors(errs)) {\n          if ((errs.isEmpty() && isLessDeviant()) ||//there are no violations but this is deviating less\n              isLessSerious(errs, leastSeriousViolation)) {//there are errors , but this has less serious violation\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row, null)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n        if (!containsNewErrors(errs)) {\n          if ((errs.isEmpty() && isLessDeviant()) ||//there are no violations but this is deviating less\n              isLessSerious(errs, leastSeriousViolation)) {//there are errors , but this has less serious violation\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest tryEachNode(boolean strict) {\n    @SuppressWarnings({\"unchecked\"})\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    }\n    for (Pair<String, String> shard : shards) {\n      Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n      //iterate through  nodes and identify the least loaded\n      List<Violation> leastSeriousViolation = null;\n      Row bestNode = null;\n      for (int i = getMatrix().size() - 1; i >= 0; i--) {\n        Row row = getMatrix().get(i);\n        if (!isNodeSuitableForReplicaAddition(row, null)) continue;\n        Row tmpRow = row.addReplica(shard.first(), shard.second(), type, strict);\n        List<Violation> errs = testChangedMatrix(strict, tmpRow.session);\n        if (!containsNewErrors(errs)) {\n          if ((errs.isEmpty() && isLessDeviant()) ||//there are no violations but this is deviating less\n              isLessSerious(errs, leastSeriousViolation)) {//there are errors , but this has less serious violation\n            leastSeriousViolation = errs;\n            bestNode = tmpRow;\n          }\n        }\n      }\n\n      if (bestNode != null) {// there are no rule violations\n        this.session = bestNode.session;\n        return CollectionAdminRequest\n            .addReplicaToShard(shard.first(), shard.second())\n            .setType(type)\n            .setNode(bestNode.node);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c721fca3c540a91b445e6c57e51e2fcb64af01a7","0b04413d237e43414609f041f50db04d553d686f"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","d5088ce415a50eb8412f4942aeabe293e75c81e7"],"0b04413d237e43414609f041f50db04d553d686f":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["16a22f8085bb46850c91784e94f7714345011404"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"16a22f8085bb46850c91784e94f7714345011404":["27639bb5e041490ce599065875dd2f6d8beef62a"],"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["98f11c416d30e556e0004a9a84960702d12d35b1"],"9837f40c922407d857991971de6def18eda0857b":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2"],"27639bb5e041490ce599065875dd2f6d8beef62a":["9837f40c922407d857991971de6def18eda0857b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"0b04413d237e43414609f041f50db04d553d686f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["527adea7ce767368d7317339023e18e39702132e"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"16a22f8085bb46850c91784e94f7714345011404":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["b94236357aaa22b76c10629851fe4e376e0cea82","0b04413d237e43414609f041f50db04d553d686f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27639bb5e041490ce599065875dd2f6d8beef62a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"560c18d71dad43d675158783c3840f8c80d6d39c":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"27639bb5e041490ce599065875dd2f6d8beef62a":["16a22f8085bb46850c91784e94f7714345011404"],"98f11c416d30e556e0004a9a84960702d12d35b1":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}