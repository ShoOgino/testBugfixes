{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestEmptyDocAfterFlushingRealDoc().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestEmptyDocAfterFlushingRealDoc().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDocAfterFlushingRealDoc().mjava","sourceNew":"    // Make sure we can flush segment w/ norms, then add\n    // empty doc (no norms) and flush\n    public void xxxtestEmptyDocAfterFlushingRealDoc() throws IOException {\n      Directory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.flush();\n      writer.addDocument(new Document());\n      writer.close();\n      _TestUtil.checkIndex(dir);\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n    }\n\n","sourceOld":"    // Make sure we can flush segment w/ norms, then add\n    // empty doc (no norms) and flush\n    public void testEmptyDocAfterFlushingRealDoc() throws IOException {\n      Directory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.flush();\n      writer.addDocument(new Document());\n      writer.close();\n      _TestUtil.checkIndex(dir);\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDocAfterFlushingRealDoc().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestEmptyDocAfterFlushingRealDoc().mjava","sourceNew":"    // Make sure we can flush segment w/ norms, then add\n    // empty doc (no norms) and flush\n    public void testEmptyDocAfterFlushingRealDoc() throws IOException {\n      Directory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.flush();\n      writer.addDocument(new Document());\n      writer.close();\n      _TestUtil.checkIndex(dir);\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n    }\n\n","sourceOld":"    // Make sure we can flush segment w/ norms, then add\n    // empty doc (no norms) and flush\n    public void xxxtestEmptyDocAfterFlushingRealDoc() throws IOException {\n      Directory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.flush();\n      writer.addDocument(new Document());\n      writer.close();\n      _TestUtil.checkIndex(dir);\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}