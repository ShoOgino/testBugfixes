{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}