{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"6066dbe072ec5334ff5824f474e9d3abd1620fb7","date":1278709584,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      //nocommit we should pass the IOContext down to the TermIndexReader\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.context,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.context,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      //nocommit we should pass the IOContext down to the TermIndexReader\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.context,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.context,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.context,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.readBufferSize,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.context,\n              Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n              state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n          throws IOException {\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new AppendingTermsIndexReader(state.dir,\n              state.fieldInfos,\n              state.segmentInfo.name,\n              state.termsIndexDivisor,\n              BytesRef.getUTF8SortedAsUnicodeComparator(),\n              state.codecId, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        docsReader.close();\n      }\n    }\n    success = false;\n    try {\n      FieldsProducer ret = new AppendingTermsDictReader(indexReader,\n              state.dir, state.fieldInfos, state.segmentInfo.name,\n              docsReader,\n              state.context,\n              StandardCodec.TERMS_CACHE_SIZE,\n              state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["99cf56f3a650b908f7017a72f9d23940418f8a52","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","b6f9be74ca7baaef11857ad002cad40419979516"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}