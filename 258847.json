{"path":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","commits":[{"id":"1b30678d88259b68d3d1e3faba3ea3bccdf0c751","date":1211563231,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","pathOld":"/dev/null","sourceNew":"  public void testLRUCache() throws Exception {\r\n    final int n = 100;\r\n    Object dummy = new Object();\r\n    \r\n    Cache cache = new SimpleLRUCache(n);\r\n    \r\n    for (int i = 0; i < n; i++) {\r\n      cache.put(new Integer(i), dummy);\r\n    }\r\n    \r\n    // access every 2nd item in cache\r\n    for (int i = 0; i < n; i+=2) {\r\n      assertNotNull(cache.get(new Integer(i)));\r\n    }\r\n    \r\n    // add n/2 elements to cache, the ones that weren't\r\n    // touched in the previous loop should now be thrown away\r\n    for (int i = n; i < n + (n / 2); i++) {\r\n      cache.put(new Integer(i), dummy);\r\n    }\r\n    \r\n    // access every 4th item in cache\r\n    for (int i = 0; i < n; i+=4) {\r\n      assertNotNull(cache.get(new Integer(i)));\r\n    }\r\n\r\n    // add 3/4n elements to cache, the ones that weren't\r\n    // touched in the previous loops should now be thrown away\r\n    for (int i = n; i < n + (n * 3 / 4); i++) {\r\n      cache.put(new Integer(i), dummy);\r\n    }\r\n    \r\n    // access every 4th item in cache\r\n    for (int i = 0; i < n; i+=4) {\r\n      assertNotNull(cache.get(new Integer(i)));\r\n    }\r\n    \r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","sourceNew":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    Object dummy = new Object();\n    \n    Cache cache = new SimpleLRUCache(n);\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(new Integer(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(new Integer(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(new Integer(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(new Integer(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(new Integer(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(new Integer(i)));\n    }\n    \n  }\n\n","sourceOld":"  public void testLRUCache() throws Exception {\r\n    final int n = 100;\r\n    Object dummy = new Object();\r\n    \r\n    Cache cache = new SimpleLRUCache(n);\r\n    \r\n    for (int i = 0; i < n; i++) {\r\n      cache.put(new Integer(i), dummy);\r\n    }\r\n    \r\n    // access every 2nd item in cache\r\n    for (int i = 0; i < n; i+=2) {\r\n      assertNotNull(cache.get(new Integer(i)));\r\n    }\r\n    \r\n    // add n/2 elements to cache, the ones that weren't\r\n    // touched in the previous loop should now be thrown away\r\n    for (int i = n; i < n + (n / 2); i++) {\r\n      cache.put(new Integer(i), dummy);\r\n    }\r\n    \r\n    // access every 4th item in cache\r\n    for (int i = 0; i < n; i+=4) {\r\n      assertNotNull(cache.get(new Integer(i)));\r\n    }\r\n\r\n    // add 3/4n elements to cache, the ones that weren't\r\n    // touched in the previous loops should now be thrown away\r\n    for (int i = n; i < n + (n * 3 / 4); i++) {\r\n      cache.put(new Integer(i), dummy);\r\n    }\r\n    \r\n    // access every 4th item in cache\r\n    for (int i = 0; i < n; i+=4) {\r\n      assertNotNull(cache.get(new Integer(i)));\r\n    }\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","sourceNew":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    Object dummy = new Object();\n    \n    Cache cache = new SimpleLRUCache(n);\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n  }\n\n","sourceOld":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    Object dummy = new Object();\n    \n    Cache cache = new SimpleLRUCache(n);\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(new Integer(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(new Integer(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(new Integer(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(new Integer(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(new Integer(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(new Integer(i)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3788e811fcba5db4611c3281af4d165044ad9d6","date":1259335977,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","sourceNew":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    testCache(new SimpleLRUCache(n), n);\n  }\n\n","sourceOld":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    Object dummy = new Object();\n    \n    Cache cache = new SimpleLRUCache(n);\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e3aa95d9845392bd37bc989242f062cc0a3f5e2","date":1260538429,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","sourceNew":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    testCache(new SimpleLRUCache<Integer,Object>(n), n);\n  }\n\n","sourceOld":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    testCache(new SimpleLRUCache(n), n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestSimpleLRUCache#testLRUCache().mjava","sourceNew":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    testCache(new SimpleLRUCache<Integer,Object>(n), n);\n  }\n\n","sourceOld":"  public void testLRUCache() throws Exception {\n    final int n = 100;\n    testCache(new SimpleLRUCache<Integer,Object>(n), n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"2e3aa95d9845392bd37bc989242f062cc0a3f5e2":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2e3aa95d9845392bd37bc989242f062cc0a3f5e2"]},"commit2Childs":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["2e3aa95d9845392bd37bc989242f062cc0a3f5e2"],"6bcde5e3f23911110baa101ed062b544162825b5":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["6bcde5e3f23911110baa101ed062b544162825b5"],"2e3aa95d9845392bd37bc989242f062cc0a3f5e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}