{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b375ac28473e1310fa9ea99d95e9c6001e3719d5","date":1274116690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","b24326411db492f92ea49f6fb947c90bc73cf19e"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","b24326411db492f92ea49f6fb947c90bc73cf19e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b24326411db492f92ea49f6fb947c90bc73cf19e"]},"commit2Childs":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["b24326411db492f92ea49f6fb947c90bc73cf19e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}