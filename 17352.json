{"path":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getContext().mjava","commits":[{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getTopReaderContext().mjava","sourceNew":"  @Override\n  public final CompositeReaderContext getContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","sourceOld":"  @Override\n  public final CompositeReaderContext getTopReaderContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getTopReaderContext().mjava","sourceNew":"  @Override\n  public final CompositeReaderContext getContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","sourceOld":"  @Override\n  public final CompositeReaderContext getTopReaderContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getTopReaderContext().mjava","sourceNew":"  @Override\n  public final CompositeReaderContext getContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","sourceOld":"  @Override\n  public final CompositeReaderContext getTopReaderContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getTopReaderContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getContext().mjava","sourceNew":"  @Override\n  public final CompositeReaderContext getTopReaderContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","sourceOld":"  @Override\n  public final CompositeReaderContext getContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#getTopReaderContext().mjava","sourceNew":"  @Override\n  public final CompositeReaderContext getContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","sourceOld":"  @Override\n  public final CompositeReaderContext getTopReaderContext() {\n    ensureOpen();\n    // lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!\n    if (readerContext == null) {\n      assert getSequentialSubReaders() != null;\n      readerContext = CompositeReaderContext.create(this);\n    }\n    return readerContext;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["211b1506e56f7860762fbd4698f6d1d1b57f672c"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}