{"path":"solr/core/src/java/org/apache/solr/util/CommandOperation#readCommands(Iterable[ContentStream],SolrQueryResponse).mjava","commits":[{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#readCommands(Iterable[ContentStream],SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, SolrQueryResponse resp)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader()));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","date":1493709133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#readCommands(Iterable[ContentStream],SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#readCommands(Iterable[ContentStream],SolrQueryResponse).mjava","sourceNew":"  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, SolrQueryResponse resp) throws IOException {\n    return readCommands(streams, resp, Collections.emptySet());\n  }\n\n","sourceOld":"  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, SolrQueryResponse resp)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader()));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#readCommands(Iterable[ContentStream],NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#readCommands(Iterable[ContentStream],SolrQueryResponse).mjava","sourceNew":"  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, NamedList resp)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader()));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","sourceOld":"  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, SolrQueryResponse resp)\n      throws IOException {\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n    ArrayList<CommandOperation> ops = new ArrayList<>();\n\n    for (ContentStream stream : streams)\n      ops.addAll(parse(stream.getReader()));\n    List<Map> errList = CommandOperation.captureErrors(ops);\n    if (!errList.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS, errList);\n      return null;\n    }\n    return ops;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#readCommands(Iterable[ContentStream],SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public static List<CommandOperation> readCommands(Iterable<ContentStream> streams, SolrQueryResponse resp) throws IOException {\n    return readCommands(streams, resp, Collections.emptySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["6bdcb86c29922edae9a14852e636303bc52df094"],"6bdcb86c29922edae9a14852e636303bc52df094":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["6bdcb86c29922edae9a14852e636303bc52df094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bdcb86c29922edae9a14852e636303bc52df094":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdcb86c29922edae9a14852e636303bc52df094"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}