{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","commits":[{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * @deprecated\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n                      Map<String, DocCollection> collectionStates) {\n    this(zkClusterStateVersion, liveNodes, collectionStates,null);\n\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa9ce01331de51b8e6312750691c1c0ad1edd3b5","date":1386348068,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * @deprecated prefer another constructor\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n                      Map<String, DocCollection> collectionStates) {\n    this(zkClusterStateVersion, liveNodes, collectionStates, null);\n\n  }\n\n","sourceOld":"  /**\n   * @deprecated\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n                      Map<String, DocCollection> collectionStates) {\n    this(zkClusterStateVersion, liveNodes, collectionStates,null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * @deprecated prefer another constructor\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n                      Map<String, DocCollection> collectionStates) {\n    this(zkClusterStateVersion, liveNodes, collectionStates, null);\n\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n\n  }\n\n","sourceOld":"  /**\n   * @deprecated prefer another constructor\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n                      Map<String, DocCollection> collectionStates) {\n    this(zkClusterStateVersion, liveNodes, collectionStates, null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    assert stateReader != null;\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection],ZkStateReader).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates, ZkStateReader stateReader) {\n    assert stateReader != null;\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    this.stateReader = stateReader;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer znodeVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(liveNodes, getRefMap(collectionStates),znodeVersion);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new LinkedHashMap<>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":5,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Set<String> liveNodes, Map<String, DocCollection> collectionStates) {\n    this(getRefMap(collectionStates), liveNodes);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer znodeVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(liveNodes, getRefMap(collectionStates),znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9279b175e5e66258442d2123a50f052219a9cc1b"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5a558d54519c651068ddb202f03befefb1514a7"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["fa9ce01331de51b8e6312750691c1c0ad1edd3b5"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"c5a558d54519c651068ddb202f03befefb1514a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9","fa9ce01331de51b8e6312750691c1c0ad1edd3b5"],"fa9ce01331de51b8e6312750691c1c0ad1edd3b5":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["fa9ce01331de51b8e6312750691c1c0ad1edd3b5"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"9279b175e5e66258442d2123a50f052219a9cc1b":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fa9ce01331de51b8e6312750691c1c0ad1edd3b5":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}