{"path":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"/dev/null","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"/dev/null","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"/dev/null","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}