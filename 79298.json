{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      if (f.binaryValue() != null) {\n        final BytesRef binaryValue = f.binaryValue();\n        final byte copy[] = new byte[binaryValue.length];\n        System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n        visitor.binaryField(info, copy);\n      } else if (f.numericValue() != null) {\n        final Number numericValue = f.numericValue();\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(StoredDocument document, StoredFieldVisitor visitor) throws IOException {\n    for (StorableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      if (f.binaryValue() != null) {\n        final BytesRef binaryValue = f.binaryValue();\n        final byte copy[] = new byte[binaryValue.length];\n        System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n        visitor.binaryField(info, copy);\n      } else if (f.numericValue() != null) {\n        final Number numericValue = f.numericValue();\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        visitor.binaryField(info, toByteArrayUnwrapIfPossible(binaryValue));\n        continue;\n      }\n      Number numericValue = f.numericValue();\n      if (numericValue != null) {\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n        continue;\n      }\n      // must be String\n      if (f instanceof LargeLazyField) { // optimization to avoid premature string conversion\n        visitor.stringField(info, toByteArrayUnwrapIfPossible(((LargeLazyField) f).readBytes()));\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      if (f.binaryValue() != null) {\n        final BytesRef binaryValue = f.binaryValue();\n        final byte copy[] = new byte[binaryValue.length];\n        System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n        visitor.binaryField(info, copy);\n      } else if (f.numericValue() != null) {\n        final Number numericValue = f.numericValue();\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        visitor.binaryField(info, toByteArrayUnwrapIfPossible(binaryValue));\n        continue;\n      }\n      Number numericValue = f.numericValue();\n      if (numericValue != null) {\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n        continue;\n      }\n      // must be String\n      if (f instanceof LargeLazyField) { // optimization to avoid premature string conversion\n        visitor.stringField(info, toByteArrayUnwrapIfPossible(((LargeLazyField) f).readBytes()));\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      if (f.binaryValue() != null) {\n        final BytesRef binaryValue = f.binaryValue();\n        final byte copy[] = new byte[binaryValue.length];\n        System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n        visitor.binaryField(info, copy);\n      } else if (f.numericValue() != null) {\n        final Number numericValue = f.numericValue();\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#visitFromCached(Document,StoredFieldVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = searcher.getFieldInfos().fieldInfo(f.name());\n      final StoredFieldVisitor.Status needsField = visitor.needsField(info);\n      if (needsField == StoredFieldVisitor.Status.STOP) return;\n      if (needsField == StoredFieldVisitor.Status.NO) continue;\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        visitor.binaryField(info, toByteArrayUnwrapIfPossible(binaryValue));\n        continue;\n      }\n      Number numericValue = f.numericValue();\n      if (numericValue != null) {\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n        continue;\n      }\n      // must be String\n      if (f instanceof LargeLazyField) { // optimization to avoid premature string conversion\n        visitor.stringField(info, toByteArrayUnwrapIfPossible(((LargeLazyField) f).readBytes()));\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        visitor.binaryField(info, toByteArrayUnwrapIfPossible(binaryValue));\n        continue;\n      }\n      Number numericValue = f.numericValue();\n      if (numericValue != null) {\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n        continue;\n      }\n      // must be String\n      if (f instanceof LargeLazyField) { // optimization to avoid premature string conversion\n        visitor.stringField(info, toByteArrayUnwrapIfPossible(((LargeLazyField) f).readBytes()));\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#visitFromCached(Document,StoredFieldVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = searcher.getFieldInfos().fieldInfo(f.name());\n      final StoredFieldVisitor.Status needsField = visitor.needsField(info);\n      if (needsField == StoredFieldVisitor.Status.STOP) return;\n      if (needsField == StoredFieldVisitor.Status.NO) continue;\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        visitor.binaryField(info, toByteArrayUnwrapIfPossible(binaryValue));\n        continue;\n      }\n      Number numericValue = f.numericValue();\n      if (numericValue != null) {\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n        continue;\n      }\n      // must be String\n      if (f instanceof LargeLazyField) { // optimization to avoid premature string conversion\n        visitor.stringField(info, toByteArrayUnwrapIfPossible(((LargeLazyField) f).readBytes()));\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        visitor.binaryField(info, toByteArrayUnwrapIfPossible(binaryValue));\n        continue;\n      }\n      Number numericValue = f.numericValue();\n      if (numericValue != null) {\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n        continue;\n      }\n      // must be String\n      if (f instanceof LargeLazyField) { // optimization to avoid premature string conversion\n        visitor.stringField(info, toByteArrayUnwrapIfPossible(((LargeLazyField) f).readBytes()));\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de548de3ce5405595899f548152d4b93ac9eb9cc":["7b4eb0a25318cc756077fbde9bd3052690aed03d"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["12f7f335611574989edc8f87d25d91e89aa385b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"12f7f335611574989edc8f87d25d91e89aa385b6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["de548de3ce5405595899f548152d4b93ac9eb9cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"12f7f335611574989edc8f87d25d91e89aa385b6":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["7b4eb0a25318cc756077fbde9bd3052690aed03d","12f7f335611574989edc8f87d25d91e89aa385b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}