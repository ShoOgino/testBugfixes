{"path":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getReaderCacheHelper();\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getReaderCacheHelper();\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getReaderCacheHelper();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}