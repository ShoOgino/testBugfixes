{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","commits":[{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","pathOld":"/dev/null","sourceNew":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.getFlags();\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["550af0624fa670b816b68b2389c2aaedde2087de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ea75dee47a56cd5d6997df5198d96cdba08574","date":1461870891,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","sourceNew":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.getFlags();\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","sourceOld":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.getFlags();\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f20deebda1cf327549c84cb60464135abd31c71","date":1487004368,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","sourceNew":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","sourceOld":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.getFlags();\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","bugFix":null,"bugIntro":["550af0624fa670b816b68b2389c2aaedde2087de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","pathOld":"/dev/null","sourceNew":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","sourceNew":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"tint\":\n        case \"tlong\":\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"tfloat\":\n        case \"tdouble\":\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","sourceOld":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","sourceNew":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"tint\":\n        case \"tlong\":\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"tfloat\":\n        case \"tdouble\":\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","sourceOld":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c52eabf9563c6ddad6c19e4af424531007b0910c","date":1533859070,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","sourceNew":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"tint\":\n        case \"tlong\":\n        case \"int\":\n        case \"long\":\n        case \"pint\":\n        case \"plong\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"tfloat\":\n        case \"tdouble\":\n        case \"float\":\n        case \"double\":\n        case \"pfloat\":\n        case \"pdouble\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","sourceOld":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"tint\":\n        case \"tlong\":\n        case \"int\":\n        case \"long\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"tfloat\":\n        case \"tdouble\":\n        case \"float\":\n        case \"double\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"550af0624fa670b816b68b2389c2aaedde2087de","date":1556285267,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getRelDataType(String).mjava","sourceNew":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.Builder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      String luceneFieldType = luceneFieldInfo.getType();\n      // SOLR-13414: Luke can return a field definition with no type in rare situations\n      if(luceneFieldType == null) {\n        continue;\n      }\n\n      RelDataType type;\n      switch (luceneFieldType) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"tint\":\n        case \"tlong\":\n        case \"int\":\n        case \"long\":\n        case \"pint\":\n        case \"plong\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"tfloat\":\n        case \"tdouble\":\n        case \"float\":\n        case \"double\":\n        case \"pfloat\":\n        case \"pdouble\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      /*\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","sourceOld":"  RelProtoDataType getRelDataType(String collection) {\n    // Temporary type factory, just for the duration of this method. Allowable\n    // because we're creating a proto-type, not a type; before being used, the\n    // proto-type will be copied into a real type factory.\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n    Map<String, LukeResponse.FieldInfo> luceneFieldInfoMap = getFieldInfo(collection);\n\n    for(Map.Entry<String, LukeResponse.FieldInfo> entry : luceneFieldInfoMap.entrySet()) {\n      LukeResponse.FieldInfo luceneFieldInfo = entry.getValue();\n\n      RelDataType type;\n      switch (luceneFieldInfo.getType()) {\n        case \"string\":\n          type = typeFactory.createJavaType(String.class);\n          break;\n        case \"tint\":\n        case \"tlong\":\n        case \"int\":\n        case \"long\":\n        case \"pint\":\n        case \"plong\":\n          type = typeFactory.createJavaType(Long.class);\n          break;\n        case \"tfloat\":\n        case \"tdouble\":\n        case \"float\":\n        case \"double\":\n        case \"pfloat\":\n        case \"pdouble\":\n          type = typeFactory.createJavaType(Double.class);\n          break;\n        default:\n          type = typeFactory.createJavaType(String.class);\n      }\n\n      EnumSet<FieldFlag> flags = luceneFieldInfo.parseFlags(luceneFieldInfo.getSchema());\n      /*\n      if(flags != null && flags.contains(FieldFlag.MULTI_VALUED)) {\n        type = typeFactory.createArrayType(type, -1);\n      }\n      */\n\n      fieldInfo.add(entry.getKey(), type).nullable(true);\n    }\n    fieldInfo.add(\"_query_\",typeFactory.createJavaType(String.class));\n    fieldInfo.add(\"score\",typeFactory.createJavaType(Double.class));\n\n    return RelDataTypeImpl.proto(fieldInfo.build());\n  }\n\n","bugFix":["d984627825732e682759c22df7a3b171a80f3812","3f20deebda1cf327549c84cb60464135abd31c71"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9b741b54c163686a5fd077895a797daa9b0b95f":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"550af0624fa670b816b68b2389c2aaedde2087de":["c52eabf9563c6ddad6c19e4af424531007b0910c"],"c52eabf9563c6ddad6c19e4af424531007b0910c":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f20deebda1cf327549c84cb60464135abd31c71"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f20deebda1cf327549c84cb60464135abd31c71":["29ea75dee47a56cd5d6997df5198d96cdba08574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["550af0624fa670b816b68b2389c2aaedde2087de"]},"commit2Childs":{"a9b741b54c163686a5fd077895a797daa9b0b95f":[],"550af0624fa670b816b68b2389c2aaedde2087de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c52eabf9563c6ddad6c19e4af424531007b0910c":["550af0624fa670b816b68b2389c2aaedde2087de"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["3f20deebda1cf327549c84cb60464135abd31c71"],"d984627825732e682759c22df7a3b171a80f3812":["29ea75dee47a56cd5d6997df5198d96cdba08574"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["c52eabf9563c6ddad6c19e4af424531007b0910c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"3f20deebda1cf327549c84cb60464135abd31c71":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a9b741b54c163686a5fd077895a797daa9b0b95f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}