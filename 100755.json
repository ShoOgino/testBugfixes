{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","commits":[{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void xxxtestImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void xxxtestImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c74166a16d3b3ee2f271f4524d49bbc2d46f1","date":1260612389,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"328c74166a16d3b3ee2f271f4524d49bbc2d46f1":["09c482d1e63332617181729a225b215c452d8a79"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["328c74166a16d3b3ee2f271f4524d49bbc2d46f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"328c74166a16d3b3ee2f271f4524d49bbc2d46f1":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"09c482d1e63332617181729a225b215c452d8a79":["328c74166a16d3b3ee2f271f4524d49bbc2d46f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}