{"path":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#memSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramBytesUsed();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e1eb6b3ce884c0b9e064e112da158013ec33cd91","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["19275ba31e621f6da1b83bf13af75233876fd3d4","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}