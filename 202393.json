{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, 0);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, 0);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, 0);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, DocsEnum.FLAG_NONE);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, 0);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, DocsEnum.FLAG_NONE);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, 0);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":null,"sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, DocsEnum.FLAG_NONE);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":null,"sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newTextField(\"field\", s.toString(), Field.Store.NO);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random(), t, null, null, DocsEnum.FLAG_NONE);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a45bec74b98f6fc05f52770cfb425739e6563960":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"],"02331260bb246364779cb6f04919ca47900d01bb":["04f07771a2a7dd3a395700665ed839c3dae2def2"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}