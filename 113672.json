{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, count + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, count + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, count + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, count + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, count + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, count + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer());\n    }\n  }\n\n","sourceOld":"  private void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, count + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, count + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a870f9917149dc600c4ad4417d615c1795de5864","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a870f9917149dc600c4ad4417d615c1795de5864":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}