{"path":"solr/core/src/test/org/apache/solr/handler/admin/DaemonStreamApiTest#testAPIs().mjava","commits":[{"id":"d5fc8ecbf23873760f4072d6643a3d2e97597030","date":1555542126,"type":0,"author":"erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/DaemonStreamApiTest#testAPIs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAPIs() throws IOException, SolrServerException, InterruptedException {\n\n    checkCmdsNoDaemon(daemonOfInterest); // test no daemon defined\n\n    // Now create all our daemons.\n    for (String name : daemonNames) {\n      createDaemon(DAEMON_DEF.replace(\"DAEMON_NAME\", name), name);\n    }\n\n    List<Tuple> tuples = getTuples(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"list\"));\n    assertEquals(\"Should have all daemons listed\", numDaemons, tuples.size());\n\n    for (int idx = 0; idx < numDaemons; ++idx) {\n      assertEquals(\"Daemon should be running \", tuples.get(idx).getString(\"id\"), daemonNames.get(idx));\n    }\n\n    // Are all the daemons in a good state?\n    for (String daemon : daemonNames) {\n      checkAlive(daemon);\n    }\n\n    // We shouldn't be able to open a daemon twice without closing., leads to thread leeks.\n    Tuple tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"start\", \"id\", daemonOfInterest)\n        , DAEMON_OP);\n    assertTrue(\"Should not open twice without closing\",\n        tupleOfInterest.getString(DAEMON_OP).contains(\"There is already an open daemon named\"));\n\n    // Try stopping and check return.\n    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"stop\", \"id\", daemonOfInterest),\n        DAEMON_OP);\n    assertTrue(\"Should have been able to stop the daemon\",\n        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + \" stopped\"));\n    checkStopped();\n\n    // Are all the daemons alive? NOTE: a stopped daemon is still there, but in a TERMINATED state\n    for (String daemon : daemonNames) {\n      if (daemon.equals(daemonOfInterest) == false) {\n        checkAlive(daemon);\n      }\n    }\n\n    // Try starting and check return.\n    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"start\", \"id\", daemonOfInterest),\n        DAEMON_OP);\n    assertTrue(\"Should have been able to start the daemon\",\n        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + \" started\"));\n\n    // Are all the daemons alive?\n    for (String daemon : daemonNames) {\n      checkAlive(daemon);\n    }\n\n    // Try killing a daemon, it should be removed from lists.\n    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"kill\", \"id\", daemonOfInterest),\n        DAEMON_OP);\n    assertTrue(\"Daemon should have been killed\",\n        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + \" killed\"));\n\n    // Loop for a bit, waiting for the daemon to be removed from the list of possible entries.\n    checkDaemonKilled(daemonOfInterest);\n\n    // Should not be able to start a killed daemon\n    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"start\", \"id\", daemonOfInterest),\n        DAEMON_OP);\n    assertTrue(\"Daemon should not be found\",\n        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + \" not found\"));\n\n    // Should not be able to sop a killed daemon\n    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"stop\", \"id\", daemonOfInterest),\n        DAEMON_OP);\n    assertTrue(\"Daemon should not be found\",\n        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + \" not found\"));\n\n    // Should not be able to kill a killed daemon\n    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"kill\", \"id\", daemonOfInterest),\n        DAEMON_OP);\n    assertTrue(\"Daemon should not be found\",\n        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + \" not found\"));\n\n\n    // Let's bring the killed daemon back and see if it returns in our lists. Use the method that loops a bit to check\n    // in case there's a delay.\n    createDaemon(DAEMON_DEF.replace(\"DAEMON_NAME\", daemonOfInterest), daemonOfInterest);\n    checkAlive(daemonOfInterest);\n\n    // Now kill them all so the threads disappear.\n    for (String daemon : daemonNames) {\n        getTuples(TestSQLHandler.mapParams(\"qt\", \"/stream\", \"action\", \"kill\", \"id\", daemon));\n        checkDaemonKilled(daemon);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5fc8ecbf23873760f4072d6643a3d2e97597030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5fc8ecbf23873760f4072d6643a3d2e97597030"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"d5fc8ecbf23873760f4072d6643a3d2e97597030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}