{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,CharArraySet).mjava","commits":[{"id":"ec1acb945fb5751735f5c9482576c8760d97b6ab","date":1315370590,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,CharArraySet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new WordDelimiterFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,CharArraySet).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,CharArraySet).mjava","sourceNew":"  /**\n   * Creates a new WordDelimiterFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","sourceOld":"  /**\n   * Creates a new WordDelimiterFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}