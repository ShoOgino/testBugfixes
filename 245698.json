{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever ammounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever ammounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever ammounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever ammounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5de502b5478255493125e7e801411ba17a6682ec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","f107636c2cc82350a2607d774c092da5b73152e5"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","f107636c2cc82350a2607d774c092da5b73152e5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c9fb5f46e264daf5ba3860defe623a89d202dd87","0158ced21948b6626f733c1c42c1e18d94449789"],"f107636c2cc82350a2607d774c092da5b73152e5":["5de502b5478255493125e7e801411ba17a6682ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"0158ced21948b6626f733c1c42c1e18d94449789":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"5de502b5478255493125e7e801411ba17a6682ec":["28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}