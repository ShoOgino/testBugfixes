{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringMissingSortedFirstReverse().mjava","commits":[{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringMissingSortedFirstReverse().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringMissingSortedFirstReverse().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringMissingSortedFirstReverse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringMissingSortedFirstReverse().mjava","sourceNew":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testStringMissingSortedFirstReverse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringMissingSortedFirstReverse().mjava","sourceNew":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testStringMissingSortedFirstReverse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringMissingSortedFirstReverse().mjava","sourceNew":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testStringMissingSortedFirstReverse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringMissingSortedFirstReverse().mjava","sourceNew":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests reverse sorting on type string with a missing\n   *  value sorted first */\n  public void testStringMissingSortedFirstReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sf = new SortField(\"value\", SortField.Type.STRING, true);\n    Sort sort = new Sort(sf);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    // null comes last\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27ab7b234eab0cbc020836989b96ed430e1065bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7615b855702e008d91a95a2578bf05d27372f599"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"27ab7b234eab0cbc020836989b96ed430e1065bb":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}