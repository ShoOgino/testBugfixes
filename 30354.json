{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","sourceNew":"  public boolean getPath(int ordinal, CategoryPath result) throws CorruptIndexException, IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","sourceOld":"  public boolean getPath(int ordinal, CategoryPath result) throws CorruptIndexException, IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","sourceNew":"  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","sourceOld":"  public boolean getPath(int ordinal, CategoryPath result) throws CorruptIndexException, IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","sourceNew":"  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","sourceOld":"  public boolean getPath(int ordinal, CategoryPath result) throws CorruptIndexException, IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e3613d9274c0d98ca67d976e415c82e9f9cf46","date":1352285414,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","sourceNew":"  @Override\n  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","sourceOld":"  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","sourceNew":"  @Override\n  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label == null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","sourceNew":"  @Override\n  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label == null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label == null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int,CategoryPath).mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean getPath(int ordinal, CategoryPath result) throws IOException {\n    ensureOpen();\n    String label = getLabel(ordinal);\n    if (label == null) {\n      return false;\n    }\n    result.clear();\n    result.add(label, delimiter);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["78e3613d9274c0d98ca67d976e415c82e9f9cf46","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}