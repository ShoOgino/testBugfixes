{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","commits":[{"id":"d272632e612b90b4a624b54b5a8db565bca8d6d8","date":1279057531,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase#runFullImport(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","sourceOld":"  /**\n   * Runs a full-import using the given dataConfig and the provided request parameters.\n   *\n   * By default, debug=on, clean=true and commit=true are passed which can be overridden.\n   *\n   * @param dataConfig the data-config xml as a string\n   * @param extraParams any extra request parameters needed to be passed to DataImportHandler\n   * @throws Exception in case of any error\n   */\n  protected void runFullImport(String dataConfig, Map<String, String> extraParams) throws Exception {\n    HashMap<String, String> params = new HashMap<String, String>();\n    params.put(\"command\", \"full-import\");\n    params.put(\"debug\", \"on\");\n    params.put(\"dataConfig\", dataConfig);\n    params.put(\"clean\", \"true\");\n    params.put(\"commit\", \"true\");\n    params.putAll(extraParams);\n    NamedList l = new NamedList();\n    for (Map.Entry<String, String> e : params.entrySet()) {\n      l.add(e.getKey(),e.getValue());\n    }\n    LocalSolrQueryRequest request = new LocalSolrQueryRequest(h.getCore(), l);  \n    h.query(\"/dataimport\", request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d272632e612b90b4a624b54b5a8db565bca8d6d8","d272632e612b90b4a624b54b5a8db565bca8d6d8"],"d272632e612b90b4a624b54b5a8db565bca8d6d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["d272632e612b90b4a624b54b5a8db565bca8d6d8","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d272632e612b90b4a624b54b5a8db565bca8d6d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"d272632e612b90b4a624b54b5a8db565bca8d6d8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","5f4e87790277826a2aea119328600dfb07761f32"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d272632e612b90b4a624b54b5a8db565bca8d6d8","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}