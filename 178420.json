{"path":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      Collection<String> files = commit.getFileNames();\n      for (String fileName : files) {\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (includeConfFiles == null)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    List<Map<String, Object>> confFiles = getConfFileCache(includeConfFiles);\n    rsp.add(CONF_FILES, confFiles);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16","5cb65c1c2f90852e718f86c8be09beb1c4dba408","5cb65c1c2f90852e718f86c8be09beb1c4dba408","5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      Collection<String> files = commit.getFileNames();\n      for (String fileName : files) {\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (includeConfFiles == null)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    List<Map<String, Object>> confFiles = getConfFileCache(includeConfFiles);\n    rsp.add(CONF_FILES, confFiles);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      Collection<String> files = commit.getFileNames();\n      for (String fileName : files) {\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (includeConfFiles == null)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    List<Map<String, Object>> confFiles = getConfFileCache(includeConfFiles);\n    rsp.add(CONF_FILES, confFiles);\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      Collection<String> files = commit.getFileNames();\n      for (String fileName : files) {\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      Collection<String> files = commit.getFileNames();\n      for (String fileName : files) {\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (includeConfFiles == null)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    List<Map<String, Object>> confFiles = getConfFileCache(includeConfFiles);\n    rsp.add(CONF_FILES, confFiles);\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d9575aed7777f0d2b4bc658e97870b8de25da7b","date":1230618870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      Collection<String> files = commit.getFileNames();\n      for (String fileName : files) {\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15af188ccfffac005c91c42fecb5e365ef609da2","date":1253072362,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getFileList(SolrParams,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {\n    String v = solrParams.get(CMD_INDEX_VERSION);\n    if (v == null) {\n      rsp.add(\"status\", \"no indexversion specified\");\n      return;\n    }\n    long version = Long.parseLong(v);\n    IndexCommit commit = core.getDeletionPolicy().getCommitPoint(version);\n    if (commit == null) {\n      rsp.add(\"status\", \"invalid indexversion\");\n      return;\n    }\n    // reserve the indexcommit for sometime\n    core.getDeletionPolicy().setReserveDuration(version, reserveCommitDuration);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    try {\n      //get all the files in the commit\n      //use a set to workaround possible Lucene bug which returns same file name multiple times\n      Collection<String> files = new HashSet<String>(commit.getFileNames());\n      for (String fileName : files) {\n        if(fileName.endsWith(\".lock\")) continue;\n        File file = new File(core.getIndexDir(), fileName);\n        Map<String, Object> fileMeta = getFileInfo(file);\n        result.add(fileMeta);\n      }\n    } catch (IOException e) {\n      rsp.add(\"status\", \"unable to get file names for given indexversion\");\n      rsp.add(\"exception\", e);\n      LOG.warn(\"Unable to get file names for indexCommit version: \"\n              + version, e);\n    }\n    rsp.add(CMD_GET_FILE_LIST, result);\n    if (confFileNameAlias.size() < 1)\n      return;\n    LOG.debug(\"Adding config files to list: \" + includeConfFiles);\n    //if configuration files need to be included get their details\n    rsp.add(CONF_FILES, getConfFileInfoFromCache(confFileNameAlias, confFileInfoCache));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"15af188ccfffac005c91c42fecb5e365ef609da2":["0d9575aed7777f0d2b4bc658e97870b8de25da7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["15af188ccfffac005c91c42fecb5e365ef609da2"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d9575aed7777f0d2b4bc658e97870b8de25da7b":["9be231d18ef58129524215a1d30331523320b744"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"9be231d18ef58129524215a1d30331523320b744":["0d9575aed7777f0d2b4bc658e97870b8de25da7b"],"15af188ccfffac005c91c42fecb5e365ef609da2":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["9be231d18ef58129524215a1d30331523320b744"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0d9575aed7777f0d2b4bc658e97870b8de25da7b":["15af188ccfffac005c91c42fecb5e365ef609da2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}