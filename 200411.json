{"path":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c11575b17e97a75fa89f92c21725abb692781b46","date":1373038242,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc69bea31e5004ab57397ed305bff9bcc9c0112f","date":1373050276,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"908c8e2c79736122e37d47d73a053999c24bac65","date":1374200099,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    this.literals = new HashMap<String, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":["be5cd4bcb73378e3d5f06021287a5edc79995e4e","4f483a44e10befaaa6da11d433e2eb0f52829eec"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    this.literals = new HashMap<String, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n    this.literals = new HashMap<SchemaField, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    this.literals = new HashMap<>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    this.literals = new HashMap<String, String>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df476dd588f9e2c99c43fd9d3d896fd30221938f","date":1457020485,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    this.literals = new HashMap<>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true, \"\\n\");\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    this.literals = new HashMap<>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":["bddf871b13db29360a473667cf42e0b0e2572572"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#CSVLoaderBase(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    this.literals = new HashMap<>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true, \"\\n\");\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoaderBase(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    this.literals = new HashMap<>();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n    templateAdd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    \n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n    rowId = params.get(ROW_ID);\n    rowIdOffset = params.getInt(ROW_ID_OFFSET, 0);\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["908c8e2c79736122e37d47d73a053999c24bac65"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","908c8e2c79736122e37d47d73a053999c24bac65"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["042e4d934397657ba04c82b46cc5665076bc5c58","fc69bea31e5004ab57397ed305bff9bcc9c0112f"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"908c8e2c79736122e37d47d73a053999c24bac65":["fc69bea31e5004ab57397ed305bff9bcc9c0112f"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc69bea31e5004ab57397ed305bff9bcc9c0112f":["c11575b17e97a75fa89f92c21725abb692781b46"],"c11575b17e97a75fa89f92c21725abb692781b46":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","df476dd588f9e2c99c43fd9d3d896fd30221938f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["df476dd588f9e2c99c43fd9d3d896fd30221938f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"042e4d934397657ba04c82b46cc5665076bc5c58":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c11575b17e97a75fa89f92c21725abb692781b46"],"908c8e2c79736122e37d47d73a053999c24bac65":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"fc69bea31e5004ab57397ed305bff9bcc9c0112f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","908c8e2c79736122e37d47d73a053999c24bac65"],"c11575b17e97a75fa89f92c21725abb692781b46":["fc69bea31e5004ab57397ed305bff9bcc9c0112f"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}