{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#parse(IndexSchema,SolrParams).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#parse(IndexSchema,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#parse(IndexSchema,SolrParams).mjava","sourceNew":"  public static List<AnalyticsRequest> parse(IndexSchema schema, SolrParams params) {\n    Map<String, AnalyticsRequest> requestMap = new HashMap<>();\n    Map<String, Map<String,FieldFacetRequest>> fieldFacetMap = new HashMap<>();\n    Map<String, Set<String>> fieldFacetSet = new HashMap<>();\n    Map<String, Map<String,RangeFacetRequest>> rangeFacetMap = new HashMap<>();\n    Map<String, Set<String>> rangeFacetSet = new HashMap<>();\n    Map<String, Map<String,QueryFacetRequest>> queryFacetMap = new HashMap<>();\n    Map<String, Set<String>> queryFacetSet = new HashMap<>();\n    List<AnalyticsRequest> requestList = new ArrayList<>();\n    \n    Iterator<String> paramsIterator = params.getParameterNamesIterator();\n    while (paramsIterator.hasNext()) {\n      String param = paramsIterator.next();\n      CharSequence paramSequence = param.subSequence(0, param.length());\n      \n      // Check if stat\n      Matcher m = statPattern.matcher(paramSequence);\n      if (m.matches()) {\n        makeExpression(requestMap,m.group(1),m.group(2),params.get(param));\n      } else {\n        // Check if hidden stat\n        m = hiddenStatPattern.matcher(paramSequence);\n        if (m.matches()) {\n          makeHiddenExpression(requestMap,m.group(1),m.group(2),params.get(param));\n        } else {\n          // Check if field facet\n          m = fieldFacetPattern.matcher(paramSequence);\n          if (m.matches()) {\n            makeFieldFacet(schema,fieldFacetMap,fieldFacetSet,m.group(1),params.getParams(param));\n          } else {\n            // Check if field facet parameter\n            m = fieldFacetParamPattern.matcher(paramSequence);\n            if (m.matches()) {\n              setFieldFacetParam(schema,fieldFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n            } else {\n              // Check if range facet\n              m = rangeFacetPattern.matcher(paramSequence);\n              if (m.matches()) {\n                makeRangeFacet(schema,rangeFacetSet,m.group(1),params.getParams(param));\n              }  else {\n                // Check if range facet parameter\n                m = rangeFacetParamPattern.matcher(paramSequence);\n                if (m.matches()) {\n                  setRangeFacetParam(schema,rangeFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                }  else {\n                  // Check if query facet\n                  m = queryFacetPattern.matcher(paramSequence);\n                  if (m.matches()) {\n                    makeQueryFacet(schema,queryFacetSet,m.group(1),params.getParams(param));\n                  }  else {\n                    // Check if query\n                    m = queryFacetParamPattern.matcher(paramSequence);\n                    if (m.matches()) {\n                      setQueryFacetParam(schema,queryFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                    } \n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String reqName : requestMap.keySet()) {\n      AnalyticsRequest ar = requestMap.get(reqName);\n      List<FieldFacetRequest> ffrs = new ArrayList<>();\n      if (fieldFacetSet.get(reqName)!=null) {\n        for (String field : fieldFacetSet.get(reqName)) {\n          ffrs.add(fieldFacetMap.get(reqName).get(field));\n        }\n      }\n      ar.setFieldFacets(ffrs);\n      \n      List<RangeFacetRequest> rfrs = new ArrayList<>();\n      if (rangeFacetSet.get(reqName)!=null) {\n        for (String field : rangeFacetSet.get(reqName)) {\n          RangeFacetRequest rfr = rangeFacetMap.get(reqName).get(field);\n          if (rfr != null) {\n            rfrs.add(rfr);\n          }\n        }\n      }\n      ar.setRangeFacets(rfrs);\n      \n      List<QueryFacetRequest> qfrs = new ArrayList<>();\n      if (queryFacetSet.get(reqName)!=null) {\n        for (String name : queryFacetSet.get(reqName)) {\n          QueryFacetRequest qfr = queryFacetMap.get(reqName).get(name);\n          if (qfr != null) {\n            addQueryFacet(qfrs,qfr);\n          }\n        }\n      }\n      for (QueryFacetRequest qfr : qfrs) {\n        if (qfr.getDependencies().size()>0) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The query facet dependencies \"+qfr.getDependencies().toString()+\" either do not exist or are defined in a dependency looop.\");\n        }\n      }\n      ar.setQueryFacets(qfrs);\n      requestList.add(ar);\n    }\n    return requestList; \n  }\n\n","sourceOld":"  public static List<AnalyticsRequest> parse(IndexSchema schema, SolrParams params) {\n    Map<String, AnalyticsRequest> requestMap = new HashMap<>();\n    Map<String, Map<String,FieldFacetRequest>> fieldFacetMap = new HashMap<>();\n    Map<String, Set<String>> fieldFacetSet = new HashMap<>();\n    Map<String, Map<String,RangeFacetRequest>> rangeFacetMap = new HashMap<>();\n    Map<String, Set<String>> rangeFacetSet = new HashMap<>();\n    Map<String, Map<String,QueryFacetRequest>> queryFacetMap = new HashMap<>();\n    Map<String, Set<String>> queryFacetSet = new HashMap<>();\n    List<AnalyticsRequest> requestList = new ArrayList<>();\n    \n    Iterator<String> paramsIterator = params.getParameterNamesIterator();\n    while (paramsIterator.hasNext()) {\n      String param = paramsIterator.next();\n      CharSequence paramSequence = param.subSequence(0, param.length());\n      \n      // Check if stat\n      Matcher m = statPattern.matcher(paramSequence);\n      if (m.matches()) {\n        makeExpression(requestMap,m.group(1),m.group(2),params.get(param));\n      } else {\n        // Check if hidden stat\n        m = hiddenStatPattern.matcher(paramSequence);\n        if (m.matches()) {\n          makeHiddenExpression(requestMap,m.group(1),m.group(2),params.get(param));\n        } else {\n          // Check if field facet\n          m = fieldFacetPattern.matcher(paramSequence);\n          if (m.matches()) {\n            makeFieldFacet(schema,fieldFacetMap,fieldFacetSet,m.group(1),params.getParams(param));\n          } else {\n            // Check if field facet parameter\n            m = fieldFacetParamPattern.matcher(paramSequence);\n            if (m.matches()) {\n              setFieldFacetParam(schema,fieldFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n            } else {\n              // Check if range facet\n              m = rangeFacetPattern.matcher(paramSequence);\n              if (m.matches()) {\n                makeRangeFacet(schema,rangeFacetSet,m.group(1),params.getParams(param));\n              }  else {\n                // Check if range facet parameter\n                m = rangeFacetParamPattern.matcher(paramSequence);\n                if (m.matches()) {\n                  setRangeFacetParam(schema,rangeFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                }  else {\n                  // Check if query facet\n                  m = queryFacetPattern.matcher(paramSequence);\n                  if (m.matches()) {\n                    makeQueryFacet(schema,queryFacetSet,m.group(1),params.getParams(param));\n                  }  else {\n                    // Check if query\n                    m = queryFacetParamPattern.matcher(paramSequence);\n                    if (m.matches()) {\n                      setQueryFacetParam(schema,queryFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                    } \n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String reqName : requestMap.keySet()) {\n      AnalyticsRequest ar = requestMap.get(reqName);\n      List<FieldFacetRequest> ffrs = new ArrayList<>();\n      if (fieldFacetSet.get(reqName)!=null) {\n        for (String field : fieldFacetSet.get(reqName)) {\n          ffrs.add(fieldFacetMap.get(reqName).get(field));\n        }\n      }\n      ar.setFieldFacets(ffrs);\n      \n      List<RangeFacetRequest> rfrs = new ArrayList<>();\n      if (rangeFacetSet.get(reqName)!=null) {\n        for (String field : rangeFacetSet.get(reqName)) {\n          RangeFacetRequest rfr = rangeFacetMap.get(reqName).get(field);\n          if (rfr != null) {\n            rfrs.add(rfr);\n          }\n        }\n      }\n      ar.setRangeFacets(rfrs);\n      \n      List<QueryFacetRequest> qfrs = new ArrayList<>();\n      if (queryFacetSet.get(reqName)!=null) {\n        for (String name : queryFacetSet.get(reqName)) {\n          QueryFacetRequest qfr = queryFacetMap.get(reqName).get(name);\n          if (qfr != null) {\n            addQueryFacet(qfrs,qfr);\n          }\n        }\n      }\n      for (QueryFacetRequest qfr : qfrs) {\n        if (qfr.getDependencies().size()>0) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The query facet dependencies \"+qfr.getDependencies().toString()+\" either do not exist or are defined in a dependency looop.\");\n        }\n      }\n      ar.setQueryFacets(qfrs);\n      requestList.add(ar);\n    }\n    return requestList; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#parse(IndexSchema,SolrParams).mjava","sourceNew":null,"sourceOld":"  public static List<AnalyticsRequest> parse(IndexSchema schema, SolrParams params) {\n    Map<String, AnalyticsRequest> requestMap = new HashMap<>();\n    Map<String, Map<String,FieldFacetRequest>> fieldFacetMap = new HashMap<>();\n    Map<String, Set<String>> fieldFacetSet = new HashMap<>();\n    Map<String, Map<String,RangeFacetRequest>> rangeFacetMap = new HashMap<>();\n    Map<String, Set<String>> rangeFacetSet = new HashMap<>();\n    Map<String, Map<String,QueryFacetRequest>> queryFacetMap = new HashMap<>();\n    Map<String, Set<String>> queryFacetSet = new HashMap<>();\n    List<AnalyticsRequest> requestList = new ArrayList<>();\n    \n    Iterator<String> paramsIterator = params.getParameterNamesIterator();\n    while (paramsIterator.hasNext()) {\n      String param = paramsIterator.next();\n      CharSequence paramSequence = param.subSequence(0, param.length());\n      \n      // Check if stat\n      Matcher m = statPattern.matcher(paramSequence);\n      if (m.matches()) {\n        makeExpression(requestMap,m.group(1),m.group(2),params.get(param));\n      } else {\n        // Check if hidden stat\n        m = hiddenStatPattern.matcher(paramSequence);\n        if (m.matches()) {\n          makeHiddenExpression(requestMap,m.group(1),m.group(2),params.get(param));\n        } else {\n          // Check if field facet\n          m = fieldFacetPattern.matcher(paramSequence);\n          if (m.matches()) {\n            makeFieldFacet(schema,fieldFacetMap,fieldFacetSet,m.group(1),params.getParams(param));\n          } else {\n            // Check if field facet parameter\n            m = fieldFacetParamPattern.matcher(paramSequence);\n            if (m.matches()) {\n              setFieldFacetParam(schema,fieldFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n            } else {\n              // Check if range facet\n              m = rangeFacetPattern.matcher(paramSequence);\n              if (m.matches()) {\n                makeRangeFacet(schema,rangeFacetSet,m.group(1),params.getParams(param));\n              }  else {\n                // Check if range facet parameter\n                m = rangeFacetParamPattern.matcher(paramSequence);\n                if (m.matches()) {\n                  setRangeFacetParam(schema,rangeFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                }  else {\n                  // Check if query facet\n                  m = queryFacetPattern.matcher(paramSequence);\n                  if (m.matches()) {\n                    makeQueryFacet(schema,queryFacetSet,m.group(1),params.getParams(param));\n                  }  else {\n                    // Check if query\n                    m = queryFacetParamPattern.matcher(paramSequence);\n                    if (m.matches()) {\n                      setQueryFacetParam(schema,queryFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                    } \n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String reqName : requestMap.keySet()) {\n      AnalyticsRequest ar = requestMap.get(reqName);\n      List<FieldFacetRequest> ffrs = new ArrayList<>();\n      if (fieldFacetSet.get(reqName)!=null) {\n        for (String field : fieldFacetSet.get(reqName)) {\n          ffrs.add(fieldFacetMap.get(reqName).get(field));\n        }\n      }\n      ar.setFieldFacets(ffrs);\n      \n      List<RangeFacetRequest> rfrs = new ArrayList<>();\n      if (rangeFacetSet.get(reqName)!=null) {\n        for (String field : rangeFacetSet.get(reqName)) {\n          RangeFacetRequest rfr = rangeFacetMap.get(reqName).get(field);\n          if (rfr != null) {\n            rfrs.add(rfr);\n          }\n        }\n      }\n      ar.setRangeFacets(rfrs);\n      \n      List<QueryFacetRequest> qfrs = new ArrayList<>();\n      if (queryFacetSet.get(reqName)!=null) {\n        for (String name : queryFacetSet.get(reqName)) {\n          QueryFacetRequest qfr = queryFacetMap.get(reqName).get(name);\n          if (qfr != null) {\n            addQueryFacet(qfrs,qfr);\n          }\n        }\n      }\n      for (QueryFacetRequest qfr : qfrs) {\n        if (qfr.getDependencies().size()>0) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The query facet dependencies \"+qfr.getDependencies().toString()+\" either do not exist or are defined in a dependency looop.\");\n        }\n      }\n      ar.setQueryFacets(qfrs);\n      requestList.add(ar);\n    }\n    return requestList; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#parse(IndexSchema,SolrParams).mjava","sourceNew":null,"sourceOld":"  public static List<AnalyticsRequest> parse(IndexSchema schema, SolrParams params) {\n    Map<String, AnalyticsRequest> requestMap = new HashMap<>();\n    Map<String, Map<String,FieldFacetRequest>> fieldFacetMap = new HashMap<>();\n    Map<String, Set<String>> fieldFacetSet = new HashMap<>();\n    Map<String, Map<String,RangeFacetRequest>> rangeFacetMap = new HashMap<>();\n    Map<String, Set<String>> rangeFacetSet = new HashMap<>();\n    Map<String, Map<String,QueryFacetRequest>> queryFacetMap = new HashMap<>();\n    Map<String, Set<String>> queryFacetSet = new HashMap<>();\n    List<AnalyticsRequest> requestList = new ArrayList<>();\n    \n    Iterator<String> paramsIterator = params.getParameterNamesIterator();\n    while (paramsIterator.hasNext()) {\n      String param = paramsIterator.next();\n      CharSequence paramSequence = param.subSequence(0, param.length());\n      \n      // Check if stat\n      Matcher m = statPattern.matcher(paramSequence);\n      if (m.matches()) {\n        makeExpression(requestMap,m.group(1),m.group(2),params.get(param));\n      } else {\n        // Check if hidden stat\n        m = hiddenStatPattern.matcher(paramSequence);\n        if (m.matches()) {\n          makeHiddenExpression(requestMap,m.group(1),m.group(2),params.get(param));\n        } else {\n          // Check if field facet\n          m = fieldFacetPattern.matcher(paramSequence);\n          if (m.matches()) {\n            makeFieldFacet(schema,fieldFacetMap,fieldFacetSet,m.group(1),params.getParams(param));\n          } else {\n            // Check if field facet parameter\n            m = fieldFacetParamPattern.matcher(paramSequence);\n            if (m.matches()) {\n              setFieldFacetParam(schema,fieldFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n            } else {\n              // Check if range facet\n              m = rangeFacetPattern.matcher(paramSequence);\n              if (m.matches()) {\n                makeRangeFacet(schema,rangeFacetSet,m.group(1),params.getParams(param));\n              }  else {\n                // Check if range facet parameter\n                m = rangeFacetParamPattern.matcher(paramSequence);\n                if (m.matches()) {\n                  setRangeFacetParam(schema,rangeFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                }  else {\n                  // Check if query facet\n                  m = queryFacetPattern.matcher(paramSequence);\n                  if (m.matches()) {\n                    makeQueryFacet(schema,queryFacetSet,m.group(1),params.getParams(param));\n                  }  else {\n                    // Check if query\n                    m = queryFacetParamPattern.matcher(paramSequence);\n                    if (m.matches()) {\n                      setQueryFacetParam(schema,queryFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                    } \n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String reqName : requestMap.keySet()) {\n      AnalyticsRequest ar = requestMap.get(reqName);\n      List<FieldFacetRequest> ffrs = new ArrayList<>();\n      if (fieldFacetSet.get(reqName)!=null) {\n        for (String field : fieldFacetSet.get(reqName)) {\n          ffrs.add(fieldFacetMap.get(reqName).get(field));\n        }\n      }\n      ar.setFieldFacets(ffrs);\n      \n      List<RangeFacetRequest> rfrs = new ArrayList<>();\n      if (rangeFacetSet.get(reqName)!=null) {\n        for (String field : rangeFacetSet.get(reqName)) {\n          RangeFacetRequest rfr = rangeFacetMap.get(reqName).get(field);\n          if (rfr != null) {\n            rfrs.add(rfr);\n          }\n        }\n      }\n      ar.setRangeFacets(rfrs);\n      \n      List<QueryFacetRequest> qfrs = new ArrayList<>();\n      if (queryFacetSet.get(reqName)!=null) {\n        for (String name : queryFacetSet.get(reqName)) {\n          QueryFacetRequest qfr = queryFacetMap.get(reqName).get(name);\n          if (qfr != null) {\n            addQueryFacet(qfrs,qfr);\n          }\n        }\n      }\n      for (QueryFacetRequest qfr : qfrs) {\n        if (qfr.getDependencies().size()>0) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The query facet dependencies \"+qfr.getDependencies().toString()+\" either do not exist or are defined in a dependency looop.\");\n        }\n      }\n      ar.setQueryFacets(qfrs);\n      requestList.add(ar);\n    }\n    return requestList; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#parse(IndexSchema,SolrParams).mjava","sourceNew":null,"sourceOld":"  public static List<AnalyticsRequest> parse(IndexSchema schema, SolrParams params) {\n    Map<String, AnalyticsRequest> requestMap = new HashMap<>();\n    Map<String, Map<String,FieldFacetRequest>> fieldFacetMap = new HashMap<>();\n    Map<String, Set<String>> fieldFacetSet = new HashMap<>();\n    Map<String, Map<String,RangeFacetRequest>> rangeFacetMap = new HashMap<>();\n    Map<String, Set<String>> rangeFacetSet = new HashMap<>();\n    Map<String, Map<String,QueryFacetRequest>> queryFacetMap = new HashMap<>();\n    Map<String, Set<String>> queryFacetSet = new HashMap<>();\n    List<AnalyticsRequest> requestList = new ArrayList<>();\n    \n    Iterator<String> paramsIterator = params.getParameterNamesIterator();\n    while (paramsIterator.hasNext()) {\n      String param = paramsIterator.next();\n      CharSequence paramSequence = param.subSequence(0, param.length());\n      \n      // Check if stat\n      Matcher m = statPattern.matcher(paramSequence);\n      if (m.matches()) {\n        makeExpression(requestMap,m.group(1),m.group(2),params.get(param));\n      } else {\n        // Check if hidden stat\n        m = hiddenStatPattern.matcher(paramSequence);\n        if (m.matches()) {\n          makeHiddenExpression(requestMap,m.group(1),m.group(2),params.get(param));\n        } else {\n          // Check if field facet\n          m = fieldFacetPattern.matcher(paramSequence);\n          if (m.matches()) {\n            makeFieldFacet(schema,fieldFacetMap,fieldFacetSet,m.group(1),params.getParams(param));\n          } else {\n            // Check if field facet parameter\n            m = fieldFacetParamPattern.matcher(paramSequence);\n            if (m.matches()) {\n              setFieldFacetParam(schema,fieldFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n            } else {\n              // Check if range facet\n              m = rangeFacetPattern.matcher(paramSequence);\n              if (m.matches()) {\n                makeRangeFacet(schema,rangeFacetSet,m.group(1),params.getParams(param));\n              }  else {\n                // Check if range facet parameter\n                m = rangeFacetParamPattern.matcher(paramSequence);\n                if (m.matches()) {\n                  setRangeFacetParam(schema,rangeFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                }  else {\n                  // Check if query facet\n                  m = queryFacetPattern.matcher(paramSequence);\n                  if (m.matches()) {\n                    makeQueryFacet(schema,queryFacetSet,m.group(1),params.getParams(param));\n                  }  else {\n                    // Check if query\n                    m = queryFacetParamPattern.matcher(paramSequence);\n                    if (m.matches()) {\n                      setQueryFacetParam(schema,queryFacetMap,m.group(1),m.group(2),m.group(3),params.getParams(param));\n                    } \n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String reqName : requestMap.keySet()) {\n      AnalyticsRequest ar = requestMap.get(reqName);\n      List<FieldFacetRequest> ffrs = new ArrayList<>();\n      if (fieldFacetSet.get(reqName)!=null) {\n        for (String field : fieldFacetSet.get(reqName)) {\n          ffrs.add(fieldFacetMap.get(reqName).get(field));\n        }\n      }\n      ar.setFieldFacets(ffrs);\n      \n      List<RangeFacetRequest> rfrs = new ArrayList<>();\n      if (rangeFacetSet.get(reqName)!=null) {\n        for (String field : rangeFacetSet.get(reqName)) {\n          RangeFacetRequest rfr = rangeFacetMap.get(reqName).get(field);\n          if (rfr != null) {\n            rfrs.add(rfr);\n          }\n        }\n      }\n      ar.setRangeFacets(rfrs);\n      \n      List<QueryFacetRequest> qfrs = new ArrayList<>();\n      if (queryFacetSet.get(reqName)!=null) {\n        for (String name : queryFacetSet.get(reqName)) {\n          QueryFacetRequest qfr = queryFacetMap.get(reqName).get(name);\n          if (qfr != null) {\n            addQueryFacet(qfrs,qfr);\n          }\n        }\n      }\n      for (QueryFacetRequest qfr : qfrs) {\n        if (qfr.getDependencies().size()>0) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The query facet dependencies \"+qfr.getDependencies().toString()+\" either do not exist or are defined in a dependency looop.\");\n        }\n      }\n      ar.setQueryFacets(qfrs);\n      requestList.add(ar);\n    }\n    return requestList; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}