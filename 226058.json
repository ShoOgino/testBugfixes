{"path":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":null,"sourceOld":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd0a7f04b5a49a00149b867e7d51f632fb8a4664","date":1279497978,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57226c67441a78f21c5cdd9a34f15934919ecca","date":1287103302,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb157886ecc78f33fafd9d403e96a4a495503b3","5cb157886ecc78f33fafd9d403e96a4a495503b3","5cb157886ecc78f33fafd9d403e96a4a495503b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"333120d96aff7950e63eded51c6dfede35420cd8","date":1287351733,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb157886ecc78f33fafd9d403e96a4a495503b3","5cb157886ecc78f33fafd9d403e96a4a495503b3","5cb157886ecc78f33fafd9d403e96a4a495503b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryRequest req = req(\"q\",q,\"rows\",\"1000\");\n        SolrQueryResponse qr = h.queryAndResponse(handler, req);\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          DocList rA = ((ResultContext)qr.getValues().get(\"response\")).docs;\n          DocList rB = ((ResultContext)last.getValues().get(\"response\")).docs;\n          sameDocs( rA, rB );\n        }\n        req.close();\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["6aedf81f068e430dec27d94310415cc6ff52731c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e57226c67441a78f21c5cdd9a34f15934919ecca":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","333120d96aff7950e63eded51c6dfede35420cd8"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6aedf81f068e430dec27d94310415cc6ff52731c"],"333120d96aff7950e63eded51c6dfede35420cd8":["e57226c67441a78f21c5cdd9a34f15934919ecca"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","6aedf81f068e430dec27d94310415cc6ff52731c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["6aedf81f068e430dec27d94310415cc6ff52731c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664","333120d96aff7950e63eded51c6dfede35420cd8"],"6aedf81f068e430dec27d94310415cc6ff52731c":["333120d96aff7950e63eded51c6dfede35420cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e57226c67441a78f21c5cdd9a34f15934919ecca":["333120d96aff7950e63eded51c6dfede35420cd8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"333120d96aff7950e63eded51c6dfede35420cd8":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["e57226c67441a78f21c5cdd9a34f15934919ecca","5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}