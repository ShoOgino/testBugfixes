{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","commits":[{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","pathOld":"/dev/null","sourceNew":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.isPerNodeValue = meta.isNodeSpecificVal();\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.isHidden = meta.isHidden();\n      this.wildCards = readSet(meta.wildCards());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","sourceNew":null,"sourceOld":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.isPerNodeValue = meta.isNodeSpecificVal();\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.isHidden = meta.isHidden();\n      this.wildCards = readSet(meta.wildCards());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","pathOld":"/dev/null","sourceNew":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.isPerNodeValue = meta.isNodeSpecificVal();\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.isHidden = meta.isHidden();\n      this.wildCards = readSet(meta.wildCards());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","pathOld":"/dev/null","sourceNew":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.isPerNodeValue = meta.isNodeSpecificVal();\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.isHidden = meta.isHidden();\n      this.wildCards = readSet(meta.wildCards());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","sourceNew":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n    }\n\n","sourceOld":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.isPerNodeValue = meta.isNodeSpecificVal();\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.isHidden = meta.isHidden();\n      this.wildCards = readSet(meta.wildCards());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","sourceNew":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      if (meta.implementation() != void.class) {\n        try {\n          impl = (VarType) meta.implementation().newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"Unable to instantiate: \" + meta.implementation().getName());\n        }\n      } else {\n        impl = null;\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","sourceOld":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","sourceNew":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl= VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == Clause.ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","sourceOld":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      if (meta.implementation() != void.class) {\n        try {\n          impl = (VarType) meta.implementation().newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"Unable to instantiate: \" + meta.implementation().getName());\n        }\n      } else {\n        impl = null;\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78231225260fb5b3bf9920f203d71477d5501c65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"27639bb5e041490ce599065875dd2f6d8beef62a":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["427edb17549d4bb82462a16eec4ee0533d12d5b7"]},"commit2Childs":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","78231225260fb5b3bf9920f203d71477d5501c65"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["27639bb5e041490ce599065875dd2f6d8beef62a"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"27639bb5e041490ce599065875dd2f6d8beef62a":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}