{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","commits":[{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final void seek(long pos) throws IOException {\n    // necessary in case offset != 0 and pos < 0, but pos >= -offset\n    if (pos < 0L) {\n      throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n    }\n    pos += offset;\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      final ByteBuffer b = buffers[bi];\n      b.position((int) (pos & chunkSizeMask));\n      // write values, on exception all is unchanged\n      this.curBufIndex = bi;\n      this.curBuf = b;\n    } catch (ArrayIndexOutOfBoundsException aioobe) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (IllegalArgumentException iae) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f986320666d675a260eb4529a0c3c40595731441"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d930518685c8546474147d14ea1a67e8159a0e4","date":1401716142,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","sourceNew":"  @Override\n  public final void seek(long pos) throws IOException {\n    // necessary in case offset != 0 and pos < 0, but pos >= -offset\n    if (pos < 0L) {\n      throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n    }\n    pos += offset;\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      if (bi == curBufIndex) {\n        curBuf.position((int) (pos & chunkSizeMask));\n      } else {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      }\n    } catch (ArrayIndexOutOfBoundsException aioobe) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (IllegalArgumentException iae) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","sourceOld":"  @Override\n  public final void seek(long pos) throws IOException {\n    // necessary in case offset != 0 and pos < 0, but pos >= -offset\n    if (pos < 0L) {\n      throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n    }\n    pos += offset;\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      final ByteBuffer b = buffers[bi];\n      b.position((int) (pos & chunkSizeMask));\n      // write values, on exception all is unchanged\n      this.curBufIndex = bi;\n      this.curBuf = b;\n    } catch (ArrayIndexOutOfBoundsException aioobe) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (IllegalArgumentException iae) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f986320666d675a260eb4529a0c3c40595731441","date":1401729997,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","sourceNew":"  @Override\n  public void seek(long pos) throws IOException {\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      if (bi == curBufIndex) {\n        curBuf.position((int) (pos & chunkSizeMask));\n      } else {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      }\n    } catch (ArrayIndexOutOfBoundsException aioobe) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (IllegalArgumentException iae) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","sourceOld":"  @Override\n  public final void seek(long pos) throws IOException {\n    // necessary in case offset != 0 and pos < 0, but pos >= -offset\n    if (pos < 0L) {\n      throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n    }\n    pos += offset;\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      if (bi == curBufIndex) {\n        curBuf.position((int) (pos & chunkSizeMask));\n      } else {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      }\n    } catch (ArrayIndexOutOfBoundsException aioobe) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (IllegalArgumentException iae) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","bugFix":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6","date":1421884114,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","sourceNew":"  @Override\n  public void seek(long pos) throws IOException {\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      if (bi == curBufIndex) {\n        curBuf.position((int) (pos & chunkSizeMask));\n      } else {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      }\n    } catch (ArrayIndexOutOfBoundsException | IllegalArgumentException e) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void seek(long pos) throws IOException {\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      if (bi == curBufIndex) {\n        curBuf.position((int) (pos & chunkSizeMask));\n      } else {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      }\n    } catch (ArrayIndexOutOfBoundsException aioobe) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (IllegalArgumentException iae) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#seek(long).mjava","sourceNew":"  @Override\n  public void seek(long pos) throws IOException {\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      if (bi == curBufIndex) {\n        curBuf.position((int) (pos & chunkSizeMask));\n      } else {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        setCurBuf(b);\n      }\n    } catch (ArrayIndexOutOfBoundsException | IllegalArgumentException e) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void seek(long pos) throws IOException {\n    // we use >> here to preserve negative, so we will catch AIOOBE,\n    // in case pos + offset overflows.\n    final int bi = (int) (pos >> chunkSizePower);\n    try {\n      if (bi == curBufIndex) {\n        curBuf.position((int) (pos & chunkSizeMask));\n      } else {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      }\n    } catch (ArrayIndexOutOfBoundsException | IllegalArgumentException e) {\n      throw new EOFException(\"seek past EOF: \" + this);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6"],"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6":["f986320666d675a260eb4529a0c3c40595731441"],"f986320666d675a260eb4529a0c3c40595731441":["0d930518685c8546474147d14ea1a67e8159a0e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d930518685c8546474147d14ea1a67e8159a0e4":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["0d930518685c8546474147d14ea1a67e8159a0e4"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"f986320666d675a260eb4529a0c3c40595731441":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6"],"0d930518685c8546474147d14ea1a67e8159a0e4":["f986320666d675a260eb4529a0c3c40595731441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}