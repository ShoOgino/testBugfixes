{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#getRandomCodePoint(Random,Transition).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#getRandomCodePoint(Random,Transition).mjava","pathOld":"/dev/null","sourceNew":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    while(true) {\n      final int v = t.min+r.nextInt(t.max-t.min+1);\n      if (v < UnicodeUtil.UNI_SUR_HIGH_START ||\n          v > UnicodeUtil.UNI_SUR_LOW_END) {\n        return v;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f825da350bbcd34d73cc0b5652530554f35ea01f","f825da350bbcd34d73cc0b5652530554f35ea01f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","sourceOld":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    while(true) {\n      final int v = t.min+r.nextInt(t.max-t.min+1);\n      if (v < UnicodeUtil.UNI_SUR_HIGH_START ||\n          v > UnicodeUtil.UNI_SUR_LOW_END) {\n        return v;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f825da350bbcd34d73cc0b5652530554f35ea01f","f825da350bbcd34d73cc0b5652530554f35ea01f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69d8f9cca4a5fc4049a99ea24253b41a88b0d234","date":1277138158,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","sourceOld":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","sourceOld":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["2aafd88401639311b0404e67c94e829e123a0e45"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","69d8f9cca4a5fc4049a99ea24253b41a88b0d234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234"]},"commit2Childs":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2aafd88401639311b0404e67c94e829e123a0e45":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}