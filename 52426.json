{"path":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#KNearestNeighborDocumentClassifier(IndexReader,Similarity,Query,int,int,int,String,Map[String,Analyzer],String...).mjava","commits":[{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#KNearestNeighborDocumentClassifier(IndexReader,Similarity,Query,int,int,int,String,Map[String,Analyzer],String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#KNearestNeighborDocumentClassifier(LeafReader,Similarity,Query,int,int,int,String,Map[String,Analyzer],String...).mjava","sourceNew":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link org.apache.lucene.search.Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param field2analyzer map with key a field name and the related {org.apache.lucene.analysis.Analyzer}\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborDocumentClassifier(IndexReader indexReader, Similarity similarity, Query query, int k, int minDocsFreq,\n                                            int minTermFreq, String classFieldName, Map<String, Analyzer> field2analyzer, String... textFieldNames) {\n    super(indexReader, similarity, null, query, k, minDocsFreq, minTermFreq, classFieldName, textFieldNames);\n    this.field2analyzer = field2analyzer;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link org.apache.lucene.search.Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param field2analyzer map with key a field name and the related {org.apache.lucene.analysis.Analyzer}\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborDocumentClassifier(LeafReader leafReader, Similarity similarity, Query query, int k, int minDocsFreq,\n                                            int minTermFreq, String classFieldName, Map<String, Analyzer> field2analyzer, String... textFieldNames) {\n    super(leafReader,similarity, null, query, k, minDocsFreq, minTermFreq, classFieldName, textFieldNames);\n    this.field2analyzer = field2analyzer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#KNearestNeighborDocumentClassifier(IndexReader,Similarity,Query,int,int,int,String,Map[String,Analyzer],String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link org.apache.lucene.search.Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param field2analyzer map with key a field name and the related {org.apache.lucene.analysis.Analyzer}\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborDocumentClassifier(IndexReader indexReader, Similarity similarity, Query query, int k, int minDocsFreq,\n                                            int minTermFreq, String classFieldName, Map<String, Analyzer> field2analyzer, String... textFieldNames) {\n    super(indexReader, similarity, null, query, k, minDocsFreq, minTermFreq, classFieldName, textFieldNames);\n    this.field2analyzer = field2analyzer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c91b68f03823e7dcd7345466de76a86f8e6e16a","date":1491935804,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#KNearestNeighborDocumentClassifier(IndexReader,Similarity,Query,int,int,int,String,Map[String,Analyzer],String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#KNearestNeighborDocumentClassifier(IndexReader,Similarity,Query,int,int,int,String,Map[String,Analyzer],String...).mjava","sourceNew":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.BM25Similarity})\n   * @param query          a {@link org.apache.lucene.search.Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param field2analyzer map with key a field name and the related {org.apache.lucene.analysis.Analyzer}\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborDocumentClassifier(IndexReader indexReader, Similarity similarity, Query query, int k, int minDocsFreq,\n                                            int minTermFreq, String classFieldName, Map<String, Analyzer> field2analyzer, String... textFieldNames) {\n    super(indexReader, similarity, null, query, k, minDocsFreq, minTermFreq, classFieldName, textFieldNames);\n    this.field2analyzer = field2analyzer;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link org.apache.lucene.search.Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param field2analyzer map with key a field name and the related {org.apache.lucene.analysis.Analyzer}\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborDocumentClassifier(IndexReader indexReader, Similarity similarity, Query query, int k, int minDocsFreq,\n                                            int minTermFreq, String classFieldName, Map<String, Analyzer> field2analyzer, String... textFieldNames) {\n    super(indexReader, similarity, null, query, k, minDocsFreq, minTermFreq, classFieldName, textFieldNames);\n    this.field2analyzer = field2analyzer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#KNearestNeighborDocumentClassifier(IndexReader,Similarity,Query,int,int,int,String,Map[String,Analyzer],String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#KNearestNeighborDocumentClassifier(IndexReader,Similarity,Query,int,int,int,String,Map[String,Analyzer],String...).mjava","sourceNew":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.BM25Similarity})\n   * @param query          a {@link org.apache.lucene.search.Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param field2analyzer map with key a field name and the related {org.apache.lucene.analysis.Analyzer}\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborDocumentClassifier(IndexReader indexReader, Similarity similarity, Query query, int k, int minDocsFreq,\n                                            int minTermFreq, String classFieldName, Map<String, Analyzer> field2analyzer, String... textFieldNames) {\n    super(indexReader, similarity, null, query, k, minDocsFreq, minTermFreq, classFieldName, textFieldNames);\n    this.field2analyzer = field2analyzer;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link org.apache.lucene.search.Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param field2analyzer map with key a field name and the related {org.apache.lucene.analysis.Analyzer}\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborDocumentClassifier(IndexReader indexReader, Similarity similarity, Query query, int k, int minDocsFreq,\n                                            int minTermFreq, String classFieldName, Map<String, Analyzer> field2analyzer, String... textFieldNames) {\n    super(indexReader, similarity, null, query, k, minDocsFreq, minTermFreq, classFieldName, textFieldNames);\n    this.field2analyzer = field2analyzer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"2c91b68f03823e7dcd7345466de76a86f8e6e16a":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c91b68f03823e7dcd7345466de76a86f8e6e16a"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","2c91b68f03823e7dcd7345466de76a86f8e6e16a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"2c91b68f03823e7dcd7345466de76a86f8e6e16a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}