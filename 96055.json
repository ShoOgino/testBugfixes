{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","commits":[{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3776dccca01c11e7046323cfad46a3b4a471233":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}