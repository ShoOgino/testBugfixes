{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","commits":[{"id":"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8","date":1536142210,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, 1));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, 1));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, 1));\n  }\n\n","bugFix":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map actionContext = actionContextPropsRef.get();\n    @SuppressWarnings({\"rawtypes\"})\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map actionContext = actionContextPropsRef.get();\n    @SuppressWarnings({\"rawtypes\"})\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map actionContext = actionContextPropsRef.get();\n    @SuppressWarnings({\"rawtypes\"})\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeLostTriggerWithDeleteNodePreferredOp().mjava","sourceNew":null,"sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLostTriggerWithDeleteNodePreferredOp() throws Exception {\n    String collectionNamePrefix = \"testNodeLostTriggerWithDeleteNodePreferredOp\";\n    int numCollections = 1 + random().nextInt(3), numShards = 1 + random().nextInt(3);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'\" + AutoScalingParams.PREFERRED_OP + \"':'deletenode',\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<\" + (1 + numCollections * numShards) + \"', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    // cache the node name because it won't be available once the node is shutdown\n    String newNodeName = newNode.getNodeName();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    cluster.stopJettySolrRunner(newNode);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map actionContext = actionContextPropsRef.get();\n    @SuppressWarnings({\"rawtypes\"})\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.DeleteNode);\n      CollectionAdminRequest.DeleteNode deleteNode = (CollectionAdminRequest.DeleteNode) operation;\n      SolrParams deleteNodeParams = deleteNode.getParams();\n      assertEquals(newNodeName, deleteNodeParams.get(\"node\"));\n    }\n\n    waitForState(\"Timed out waiting for all shards to have only 1 replica\",\n        collectionNamePrefix + \"_0\", clusterShape(numShards, numShards));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"89948af0461fead48f44ba8fb7866f107ce83f22":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}