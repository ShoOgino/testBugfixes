{"path":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,TermsEnum,boolean,BytesRef).mjava","commits":[{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,TermsEnum,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     TermsEnum tenum,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(tenum);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,TermsEnum,boolean,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     TermsEnum tenum,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(tenum);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,TermsEnum,boolean,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     TermsEnum tenum,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(tenum);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95f7ab6c9bc005d456da65d8d74c5338ffc031aa","date":1297016220,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,TermsEnum,boolean,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     TermsEnum tenum,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(tenum);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,TermsEnum,boolean,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     TermsEnum tenum,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(tenum);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,TermsEnum,boolean,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     TermsEnum tenum,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(tenum);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}