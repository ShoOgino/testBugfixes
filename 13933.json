{"path":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"sandbox/contributions/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i=0; i<output.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(output[i], t.termText());\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i=0; i<output.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(output[i], t.termText());\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a1fc1d353283abc6df64b7a678f1f280c9b9730","date":1127396338,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i = 0; i < output.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(output[i], t.termText());\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i=0; i<output.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(output[i], t.termText());\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","bugFix":["8497ea87d47a78ce96caf21099e6e5fd3536b512"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken = new Token();\n    for (int i = 0; i < output.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertEquals(output[i], nextToken.term());\n    }\n    assertNull(ts.next(reusableToken));\n    ts.close();\n  }\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i = 0; i < output.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(output[i], t.termText());\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute termAtt = (TermAttribute) ts.getAttribute(TermAttribute.class);\n    for (int i = 0; i < output.length; i++) {\n      assertTrue(ts.incrementToken());\n      assertEquals(output[i], termAtt.term());\n    }\n    assertFalse(ts.incrementToken());\n    ts.close();\n  }\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken = new Token();\n    for (int i = 0; i < output.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertEquals(output[i], nextToken.term());\n    }\n    assertNull(ts.next(reusableToken));\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":null,"sourceOld":"  public void assertAnalyzesTo(Analyzer a,\n                               String input,\n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute termAtt = (TermAttribute) ts.getAttribute(TermAttribute.class);\n    for (int i = 0; i < output.length; i++) {\n      assertTrue(ts.incrementToken());\n      assertEquals(output[i], termAtt.term());\n    }\n    assertFalse(ts.incrementToken());\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["3a1fc1d353283abc6df64b7a678f1f280c9b9730"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"3a1fc1d353283abc6df64b7a678f1f280c9b9730":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["3a1fc1d353283abc6df64b7a678f1f280c9b9730"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"3a1fc1d353283abc6df64b7a678f1f280c9b9730":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}