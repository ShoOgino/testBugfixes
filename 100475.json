{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"607428da722dcb3e86bbd11c63de8986e6275c36":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}