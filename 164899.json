{"path":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testFileStream() throws IOException \n  {\n    File file = new File( \"README\" );\n    assertTrue( file.exists() ); // \"make sure you are running from: solr\\src\\test\\test-files\"\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":null,"sourceOld":"  public void testFileStream() throws IOException \n  {\n    File file = new File( \"README\" );\n    assertTrue( file.exists() ); // \"make sure you are running from: solr\\src\\test\\test-files\"\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    File file = new File( \"README\" );\n    assertTrue( file.exists() ); // \"make sure you are running from: solr\\src\\test\\test-files\"\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    File file = new File( \"README\" );\n    assertTrue( file.exists() ); // \"make sure you are running from: solr\\src\\test\\test-files\"\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testFileStream() throws IOException \n  {\n    File file = new File( \"README\" );\n    assertTrue( file.exists() ); // \"make sure you are running from: solr\\src\\test\\test-files\"\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5","date":1293562446,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    File file = new File( \"README\" );\n    assertTrue( file.exists() ); // \"make sure you are running from: solr\\src\\test\\test-files\"\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    File file = new File( \"README\" );\n    assertTrue( file.exists() ); // \"make sure you are running from: solr\\src\\test\\test-files\"\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    File file = new File( \"README\" );\n    assertTrue( file.exists() ); // \"make sure you are running from: solr\\src\\test\\test-files\"\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5"],"19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}