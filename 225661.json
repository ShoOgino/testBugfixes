{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(CharSequence).mjava","commits":[{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(CharSequence).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","sourceNew":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(CharSequence key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(CharSequence key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(CharSequence).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(CharSequence).mjava","sourceNew":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(CharSequence key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(CharSequence key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6ecc52400551de6a7d8daf646be839487911627c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ecc52400551de6a7d8daf646be839487911627c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ecc52400551de6a7d8daf646be839487911627c"],"6ecc52400551de6a7d8daf646be839487911627c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}