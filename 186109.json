{"path":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg,\n      boolean withDeletions) throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 350;\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n\n      Reader bytesReader = r.getIndexValues(byteIndexValue.name());\n//      closeables.add(bytesReader);\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = bytesReader.load();\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum.addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.bytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if(br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if(br.length != 0){\n            bytes.bytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0, br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n     \n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        \n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \" + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        \n        BytesRef br = bytes.bytes(i);\n        if(bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum.advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\"EnumRef Byte at index \" + j + \" doesn't match - \" + msg,\n              upto, enumRef.bytes[enumRef.offset + j]);      \n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \" + msg,\n              upto, br.bytes[br.offset + j]);\n           }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    \n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 350;\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = bytesReader.load();\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.bytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.bytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.bytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg,\n      boolean withDeletions) throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 350;\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n\n      Reader bytesReader = r.getIndexValues(byteIndexValue.name());\n//      closeables.add(bytesReader);\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = bytesReader.load();\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum.addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.bytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if(br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if(br.length != 0){\n            bytes.bytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0, br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n     \n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        \n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \" + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        \n        BytesRef br = bytes.bytes(i);\n        if(bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum.advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\"EnumRef Byte at index \" + j + \" doesn't match - \" + msg,\n              upto, enumRef.bytes[enumRef.offset + j]);      \n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \" + msg,\n              upto, br.bytes[br.offset + j]);\n           }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n    \n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 333 + random.nextInt(150);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 350;\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = bytesReader.load();\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.bytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.bytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.bytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0637f89202e27b25802435a9cf789fc0890c8a67","date":1288436161,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 333 + random.nextInt(150);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0637f89202e27b25802435a9cf789fc0890c8a67":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5c559c875836474bafae7243263d93b1b1965db":["0637f89202e27b25802435a9cf789fc0890c8a67"]},"commit2Childs":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0637f89202e27b25802435a9cf789fc0890c8a67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"0637f89202e27b25802435a9cf789fc0890c8a67":["b5c559c875836474bafae7243263d93b1b1965db"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b5c559c875836474bafae7243263d93b1b1965db":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b5c559c875836474bafae7243263d93b1b1965db"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}