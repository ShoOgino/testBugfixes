{"path":"src/test/org/apache/lucene/search/QueryUtils#checkEqual(Query,Query).mjava","commits":[{"id":"c5f8e44d5e9627993851287f67e8360a36cb302a","date":1132032532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#checkEqual(Query,Query).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkEqual(Query q1, Query q2) {\r\n    TestCase.assertEquals(q1, q2);\r\n    TestCase.assertEquals(q1.hashCode(), q2.hashCode());\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"492d71f81abcc186afa0074702472ecb6b7dc997","date":1177385598,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#checkEqual(Query,Query).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#checkEqual(Query,Query).mjava","sourceNew":"  public static void checkEqual(Query q1, Query q2) {\n    TestCase.assertEquals(q1, q2);\n    TestCase.assertEquals(q1.hashCode(), q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkEqual(Query q1, Query q2) {\r\n    TestCase.assertEquals(q1, q2);\r\n    TestCase.assertEquals(q1.hashCode(), q2.hashCode());\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#checkEqual(Query,Query).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#checkEqual(Query,Query).mjava","sourceNew":"  public static void checkEqual(Query q1, Query q2) {\n    Assert.assertEquals(q1, q2);\n    Assert.assertEquals(q1.hashCode(), q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkEqual(Query q1, Query q2) {\n    TestCase.assertEquals(q1, q2);\n    TestCase.assertEquals(q1.hashCode(), q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":["45fa1757f5581a10e9c63294cf292a14c92d23b1","45fa1757f5581a10e9c63294cf292a14c92d23b1","45fa1757f5581a10e9c63294cf292a14c92d23b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkEqual(Query,Query).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#checkEqual(Query,Query).mjava","sourceNew":"  public static void checkEqual(Query q1, Query q2) {\n    Assert.assertEquals(q1, q2);\n    Assert.assertEquals(q1.hashCode(), q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkEqual(Query q1, Query q2) {\n    Assert.assertEquals(q1, q2);\n    Assert.assertEquals(q1.hashCode(), q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["492d71f81abcc186afa0074702472ecb6b7dc997"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["30a558487f2298c2c19ceca9103c1b6865d64708"],"492d71f81abcc186afa0074702472ecb6b7dc997":["c5f8e44d5e9627993851287f67e8360a36cb302a"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["492d71f81abcc186afa0074702472ecb6b7dc997"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"492d71f81abcc186afa0074702472ecb6b7dc997":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}