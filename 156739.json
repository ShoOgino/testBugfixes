{"path":"solr/core/src/java/org/apache/solr/util/stats/ExponentiallyDecayingSample#ExponentiallyDecayingSample(int,double,Clock).mjava","commits":[{"id":"ce58244be71dcade436d9313669202ebc249466b","date":1357224775,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/ExponentiallyDecayingSample#ExponentiallyDecayingSample(int,double,Clock).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link ExponentiallyDecayingSample}.\n   *\n   * @param reservoirSize the number of samples to keep in the sampling reservoir\n   * @param alpha         the exponential decay factor; the higher this is, the more biased the\n   *                      sample will be towards newer values\n   */\n  public ExponentiallyDecayingSample(int reservoirSize, double alpha, Clock clock) {\n    this.values = new ConcurrentSkipListMap<Double, Long>();\n    this.lock = new ReentrantReadWriteLock();\n    this.alpha = alpha;\n    this.reservoirSize = reservoirSize;\n    this.clock = clock;\n    clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/ExponentiallyDecayingSample#ExponentiallyDecayingSample(int,double,Clock).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link ExponentiallyDecayingSample}.\n   *\n   * @param reservoirSize the number of samples to keep in the sampling reservoir\n   * @param alpha         the exponential decay factor; the higher this is, the more biased the\n   *                      sample will be towards newer values\n   */\n  public ExponentiallyDecayingSample(int reservoirSize, double alpha, Clock clock) {\n    this.values = new ConcurrentSkipListMap<Double, Long>();\n    this.lock = new ReentrantReadWriteLock();\n    this.alpha = alpha;\n    this.reservoirSize = reservoirSize;\n    this.clock = clock;\n    clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/ExponentiallyDecayingSample#ExponentiallyDecayingSample(int,double,Clock).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/ExponentiallyDecayingSample#ExponentiallyDecayingSample(int,double,Clock).mjava","sourceNew":"  /**\n   * Creates a new {@link ExponentiallyDecayingSample}.\n   *\n   * @param reservoirSize the number of samples to keep in the sampling reservoir\n   * @param alpha         the exponential decay factor; the higher this is, the more biased the\n   *                      sample will be towards newer values\n   */\n  public ExponentiallyDecayingSample(int reservoirSize, double alpha, Clock clock) {\n    this.values = new ConcurrentSkipListMap<>();\n    this.lock = new ReentrantReadWriteLock();\n    this.alpha = alpha;\n    this.reservoirSize = reservoirSize;\n    this.clock = clock;\n    clear();\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link ExponentiallyDecayingSample}.\n   *\n   * @param reservoirSize the number of samples to keep in the sampling reservoir\n   * @param alpha         the exponential decay factor; the higher this is, the more biased the\n   *                      sample will be towards newer values\n   */\n  public ExponentiallyDecayingSample(int reservoirSize, double alpha, Clock clock) {\n    this.values = new ConcurrentSkipListMap<Double, Long>();\n    this.lock = new ReentrantReadWriteLock();\n    this.alpha = alpha;\n    this.reservoirSize = reservoirSize;\n    this.clock = clock;\n    clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/stats/ExponentiallyDecayingSample#ExponentiallyDecayingSample(int,double,Clock).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link ExponentiallyDecayingSample}.\n   *\n   * @param reservoirSize the number of samples to keep in the sampling reservoir\n   * @param alpha         the exponential decay factor; the higher this is, the more biased the\n   *                      sample will be towards newer values\n   */\n  public ExponentiallyDecayingSample(int reservoirSize, double alpha, Clock clock) {\n    this.values = new ConcurrentSkipListMap<>();\n    this.lock = new ReentrantReadWriteLock();\n    this.alpha = alpha;\n    this.reservoirSize = reservoirSize;\n    this.clock = clock;\n    clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/stats/ExponentiallyDecayingSample#ExponentiallyDecayingSample(int,double,Clock).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link ExponentiallyDecayingSample}.\n   *\n   * @param reservoirSize the number of samples to keep in the sampling reservoir\n   * @param alpha         the exponential decay factor; the higher this is, the more biased the\n   *                      sample will be towards newer values\n   */\n  public ExponentiallyDecayingSample(int reservoirSize, double alpha, Clock clock) {\n    this.values = new ConcurrentSkipListMap<>();\n    this.lock = new ReentrantReadWriteLock();\n    this.alpha = alpha;\n    this.reservoirSize = reservoirSize;\n    this.clock = clock;\n    clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce58244be71dcade436d9313669202ebc249466b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ce58244be71dcade436d9313669202ebc249466b"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"727bb765ff2542275f6d31f67be18d7104bae148":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce58244be71dcade436d9313669202ebc249466b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","727bb765ff2542275f6d31f67be18d7104bae148"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ce58244be71dcade436d9313669202ebc249466b"],"ce58244be71dcade436d9313669202ebc249466b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}