{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","sourceNew":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    flushDeletesCount++;\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","sourceOld":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    flushDeletesCount++;\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f58dd714e47e4b20e7ddf69802a24d8278a50d3d","date":1270583819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","sourceNew":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    if (infoStream != null) {\n      message(\"applyDeletes\");\n    }\n    flushDeletesCount++;\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","sourceOld":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    flushDeletesCount++;\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1085ea837da8f1e96697e17cf73e1d08e7329261","date":1281469548,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","sourceNew":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    if (infoStream != null) {\n      message(\"applyDeletes\");\n    }\n    flushDeletesCount++;\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception flushing deletes\");\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","sourceOld":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    if (infoStream != null) {\n      message(\"applyDeletes\");\n    }\n    flushDeletesCount++;\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","bugFix":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","sourceNew":null,"sourceOld":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    if (infoStream != null) {\n      message(\"applyDeletes\");\n    }\n    flushDeletesCount++;\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception flushing deletes\");\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","sourceNew":null,"sourceOld":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    if (infoStream != null) {\n      message(\"applyDeletes\");\n    }\n    flushDeletesCount++;\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception flushing deletes\");\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","sourceNew":null,"sourceOld":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    if (infoStream != null) {\n      message(\"applyDeletes\");\n    }\n    flushDeletesCount++;\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"f58dd714e47e4b20e7ddf69802a24d8278a50d3d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1085ea837da8f1e96697e17cf73e1d08e7329261","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"f58dd714e47e4b20e7ddf69802a24d8278a50d3d":["1085ea837da8f1e96697e17cf73e1d08e7329261","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}