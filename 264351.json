{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}