{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"/dev/null","sourceNew":"  public void testProperty() throws Exception{\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    RestTestHarness harness = restTestHarness;\n    String response = harness.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"solrConfig\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    response = harness.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n    map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    runConfigCommand( harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"solrConfig\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception{\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    RestTestHarness harness = restTestHarness;\n    String response = harness.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"solrConfig\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    response = harness.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n    map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a5f13e4e6b3c60912dc0911227739fe2f371c2","date":1420449490,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    runConfigCommand( harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    runConfigCommand( harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"solrConfig\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a6b799f9d59f607df4b994cd143a0586f9cf896","date":1420614480,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    Map confMap =  getRespMap(\"/config?wt=json\" ,harness);\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/luke\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/system\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/mbeans\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/plugins\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/threads\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/properties\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/logging\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/file\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/ping\")));\n\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    runConfigCommand( harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    runConfigCommand( harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    Map confMap =  getRespMap(\"/config?wt=json\" ,harness);\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/luke\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/system\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/mbeans\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/plugins\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/threads\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/properties\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/logging\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/file\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/ping\")));\n\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    runConfigCommand( harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    Map confMap =  getRespMap(\"/config?wt=json\" ,harness);\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/luke\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/system\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/mbeans\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/plugins\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/threads\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/properties\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/logging\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/file\")));\n    assertNotNull( getObjectByPath(confMap,false,Arrays.asList(\"config\",\"requestHandler\",\"/admin/ping\")));\n\n    String payload= \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 } \\n\" +\n        \" }\";\n    runConfigCommand( harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")) ));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\")) ));\n\n    m = (Map) getRespMap(\"/config?wt=json\" ,harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals( \"100\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals( \"10\",String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    payload= \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\",  String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e67d822ef40fc7c6d19c37f7dafce7d836aaea4","date":1431530166,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler?wt=json\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f61095165f6e01b4e8fe8c4f9f8670b64718908c","date":1431584859,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler?wt=json\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxTime\")));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler?wt=json\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxTime\")));\n\n    m = (Map) getRespMap(\"/config\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler?wt=json\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxTime\")));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxTime\")));\n\n    m = (Map) getRespMap(\"/config\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler?wt=json\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxTime\")));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxTime\")));\n\n    m = (Map) getRespMap(\"/config\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config?wt=json\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler?wt=json\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxTime\")));\n\n    m = (Map) getRespMap(\"/config?wt=json\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    MapWriter confMap = getRespMap(\"/config\", harness);\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/luke\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/system\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/mbeans\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/plugins\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/threads\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/properties\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/logging\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/file\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/ping\"), null));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    MapWriter m = getRespMap(\"/config/overlay\", harness);\n    MapWriter props =null;\n    assertEquals(\"100\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxDocs\", null));\n    assertEquals(\"10\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxTime\",null));\n\n    m =  getRespMap(\"/config/updateHandler\", harness);\n    assertNotNull(m._get(\"config/updateHandler/commitWithin/softCommit\",null));\n    assertNotNull(m._get(\"config/updateHandler/autoCommit/maxDocs\",null));\n    assertNotNull(m._get(\"config/updateHandler/autoCommit/maxTime\",null));\n\n    m =  getRespMap(\"/config\", harness);\n    assertNotNull(m);\n\n    assertEquals(\"100\", m._getStr(\"config/updateHandler/autoCommit/maxDocs\",null));\n    assertEquals(\"10\", m._getStr(\"config/updateHandler/autoCommit/maxTime\",null));\n    assertEquals(\"true\", m._getStr(\"config/requestDispatcher/requestParsers/addHttpRequestToContext\",null));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    m =  getRespMap(\"/config/overlay\", harness);\n    assertNull(m._get(\"overlay/props/updateHandler/autoCommit/maxDocs\",null));\n    assertEquals(\"10\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxTime\",null));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    Map confMap = getRespMap(\"/config\", harness);\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/luke\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/system\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/mbeans\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/plugins\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/threads\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/properties\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/logging\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/file\")));\n    assertNotNull(getObjectByPath(confMap, false, Arrays.asList(\"config\", \"requestHandler\", \"/admin/ping\")));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertEquals(\"100\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n\n    m =  getRespMap(\"/config/updateHandler\", harness);\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"commitWithin\", \"softCommit\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertNotNull(getObjectByPath(m, true, ImmutableList.of(\"config\",\"updateHandler\", \"autoCommit\", \"maxTime\")));\n\n    m = (Map) getRespMap(\"/config\", harness).get(\"config\");\n    assertNotNull(m);\n\n    assertEquals(\"100\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\"))));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n    assertEquals(\"true\", String.valueOf(getObjectByPath(m, true, ImmutableList.of(\"requestDispatcher\", \"requestParsers\", \"addHttpRequestToContext\"))));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    props = (Map) m.get(\"props\");\n    assertNotNull(props);\n    assertNull(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxDocs\")));\n    assertEquals(\"10\", String.valueOf(getObjectByPath(props, true, ImmutableList.of(\"updateHandler\", \"autoCommit\", \"maxTime\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","date":1571689506,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testProperty().mjava","sourceNew":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    MapWriter confMap = getRespMap(\"/config\", harness);\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/luke\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/system\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/mbeans\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/plugins\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/threads\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/properties\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/logging\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/file\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/ping\"), null));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    MapWriter m = getRespMap(\"/config/overlay\", harness);\n    MapWriter props =null;\n    assertEquals(\"100\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxDocs\", null));\n    assertEquals(\"10\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxTime\",null));\n\n    m =  getRespMap(\"/config/updateHandler\", harness);\n    assertNotNull(m._get(\"config/updateHandler/commitWithin/softCommit\",null));\n    assertNotNull(m._get(\"config/updateHandler/autoCommit/maxDocs\",null));\n    assertNotNull(m._get(\"config/updateHandler/autoCommit/maxTime\",null));\n\n    m =  getRespMap(\"/config\", harness);\n    assertNotNull(m);\n\n    assertEquals(\"100\", m._getStr(\"config/updateHandler/autoCommit/maxDocs\",null));\n    assertEquals(\"10\", m._getStr(\"config/updateHandler/autoCommit/maxTime\",null));\n    assertEquals(\"true\", m._getStr(\"config/requestDispatcher/requestParsers/addHttpRequestToContext\",null));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs' \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    m =  getRespMap(\"/config/overlay\", harness);\n    assertNull(m._get(\"overlay/props/updateHandler/autoCommit/maxDocs\",null));\n    assertEquals(\"10\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxTime\",null));\n  }\n\n","sourceOld":"  public void testProperty() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    MapWriter confMap = getRespMap(\"/config\", harness);\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/luke\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/system\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/mbeans\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/plugins\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/threads\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/properties\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/logging\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/file\"), null));\n    assertNotNull(confMap._get(asList(\"config\", \"requestHandler\", \"/admin/ping\"), null));\n\n    String payload = \"{\\n\" +\n        \" 'set-property' : { 'updateHandler.autoCommit.maxDocs':100, 'updateHandler.autoCommit.maxTime':10 , 'requestDispatcher.requestParsers.addHttpRequestToContext':true} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    MapWriter m = getRespMap(\"/config/overlay\", harness);\n    MapWriter props =null;\n    assertEquals(\"100\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxDocs\", null));\n    assertEquals(\"10\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxTime\",null));\n\n    m =  getRespMap(\"/config/updateHandler\", harness);\n    assertNotNull(m._get(\"config/updateHandler/commitWithin/softCommit\",null));\n    assertNotNull(m._get(\"config/updateHandler/autoCommit/maxDocs\",null));\n    assertNotNull(m._get(\"config/updateHandler/autoCommit/maxTime\",null));\n\n    m =  getRespMap(\"/config\", harness);\n    assertNotNull(m);\n\n    assertEquals(\"100\", m._getStr(\"config/updateHandler/autoCommit/maxDocs\",null));\n    assertEquals(\"10\", m._getStr(\"config/updateHandler/autoCommit/maxTime\",null));\n    assertEquals(\"true\", m._getStr(\"config/requestDispatcher/requestParsers/addHttpRequestToContext\",null));\n    payload = \"{\\n\" +\n        \" 'unset-property' :  'updateHandler.autoCommit.maxDocs'} \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    m =  getRespMap(\"/config/overlay\", harness);\n    assertNull(m._get(\"overlay/props/updateHandler/autoCommit/maxDocs\",null));\n    assertEquals(\"10\", m._getStr(\"overlay/props/updateHandler/autoCommit/maxTime\",null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f61095165f6e01b4e8fe8c4f9f8670b64718908c":["5e67d822ef40fc7c6d19c37f7dafce7d836aaea4"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"1a6b799f9d59f607df4b994cd143a0586f9cf896":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["f61095165f6e01b4e8fe8c4f9f8670b64718908c","ac1e7fa558287a811ea07634d815ee7b1c541284"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["a52341299179de5479672f7cf518bf4b173f34b3"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["1a6b799f9d59f607df4b994cd143a0586f9cf896"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["1a6b799f9d59f607df4b994cd143a0586f9cf896","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a52341299179de5479672f7cf518bf4b173f34b3":["f61095165f6e01b4e8fe8c4f9f8670b64718908c","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e67d822ef40fc7c6d19c37f7dafce7d836aaea4":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["f61095165f6e01b4e8fe8c4f9f8670b64718908c"]},"commit2Childs":{"531fe719c7218235a679452eb3d137bfd8fc6af1":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"f61095165f6e01b4e8fe8c4f9f8670b64718908c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a6b799f9d59f607df4b994cd143a0586f9cf896":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["1a6b799f9d59f607df4b994cd143a0586f9cf896"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5e67d822ef40fc7c6d19c37f7dafce7d836aaea4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"5e67d822ef40fc7c6d19c37f7dafce7d836aaea4":["f61095165f6e01b4e8fe8c4f9f8670b64718908c"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}