{"path":"src/java/org/apache/lucene/index/TermVectorsReader#rawDocs(int[],int[],int,int).mjava","commits":[{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#rawDocs(int[],int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Retrieve the length (in bytes) of the tvd and tvf\n   *  entries for the next numDocs starting with\n   *  startDocID.  This is used for bulk copying when\n   *  merging segments, if the field numbers are\n   *  congruent.  Once this returns, the tvf & tvd streams\n   *  are seeked to the startDocID. */\n  final void rawDocs(int[] tvdLengths, int[] tvfLengths, int startDocID, int numDocs) throws IOException {\n\n    if (tvx == null) {\n      Arrays.fill(tvdLengths, 0);\n      Arrays.fill(tvfLengths, 0);\n      return;\n    }\n\n    // SegmentMerger calls canReadRawDocs() first and should\n    // not call us if that returns false.\n    if (format < FORMAT_VERSION2)\n      throw new IllegalStateException(\"cannot read raw docs with older term vector formats\");\n\n    seekTvx(startDocID);\n\n    long tvdPosition = tvx.readLong();\n    tvd.seek(tvdPosition);\n\n    long tvfPosition = tvx.readLong();\n    tvf.seek(tvfPosition);\n\n    long lastTvdPosition = tvdPosition;\n    long lastTvfPosition = tvfPosition;\n\n    int count = 0;\n    while (count < numDocs) {\n      final int docID = startDocID + count + 1;\n      if (docID < numTotalDocs)  {\n        tvdPosition = tvx.readLong();\n        tvfPosition = tvx.readLong();\n      } else {\n        tvdPosition = tvd.length();\n        tvfPosition = tvf.length();\n      }\n      tvdLengths[count] = (int) (tvdPosition-lastTvdPosition);\n      tvfLengths[count] = (int) (tvfPosition-lastTvfPosition);\n      count++;\n      lastTvdPosition = tvdPosition;\n      lastTvfPosition = tvfPosition;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7439af33438ca32496b7ce4a341617a480b7137a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7439af33438ca32496b7ce4a341617a480b7137a","date":1202418816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#rawDocs(int[],int[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#rawDocs(int[],int[],int,int).mjava","sourceNew":"  /** Retrieve the length (in bytes) of the tvd and tvf\n   *  entries for the next numDocs starting with\n   *  startDocID.  This is used for bulk copying when\n   *  merging segments, if the field numbers are\n   *  congruent.  Once this returns, the tvf & tvd streams\n   *  are seeked to the startDocID. */\n  final void rawDocs(int[] tvdLengths, int[] tvfLengths, int startDocID, int numDocs) throws IOException {\n\n    if (tvx == null) {\n      Arrays.fill(tvdLengths, 0);\n      Arrays.fill(tvfLengths, 0);\n      return;\n    }\n\n    // SegmentMerger calls canReadRawDocs() first and should\n    // not call us if that returns false.\n    if (format < FORMAT_VERSION2)\n      throw new IllegalStateException(\"cannot read raw docs with older term vector formats\");\n\n    seekTvx(startDocID);\n\n    long tvdPosition = tvx.readLong();\n    tvd.seek(tvdPosition);\n\n    long tvfPosition = tvx.readLong();\n    tvf.seek(tvfPosition);\n\n    long lastTvdPosition = tvdPosition;\n    long lastTvfPosition = tvfPosition;\n\n    int count = 0;\n    while (count < numDocs) {\n      final int docID = docStoreOffset + startDocID + count + 1;\n      assert docID <= numTotalDocs;\n      if (docID < numTotalDocs)  {\n        tvdPosition = tvx.readLong();\n        tvfPosition = tvx.readLong();\n      } else {\n        tvdPosition = tvd.length();\n        tvfPosition = tvf.length();\n      }\n      tvdLengths[count] = (int) (tvdPosition-lastTvdPosition);\n      tvfLengths[count] = (int) (tvfPosition-lastTvfPosition);\n      count++;\n      lastTvdPosition = tvdPosition;\n      lastTvfPosition = tvfPosition;\n    }\n  }\n\n","sourceOld":"  /** Retrieve the length (in bytes) of the tvd and tvf\n   *  entries for the next numDocs starting with\n   *  startDocID.  This is used for bulk copying when\n   *  merging segments, if the field numbers are\n   *  congruent.  Once this returns, the tvf & tvd streams\n   *  are seeked to the startDocID. */\n  final void rawDocs(int[] tvdLengths, int[] tvfLengths, int startDocID, int numDocs) throws IOException {\n\n    if (tvx == null) {\n      Arrays.fill(tvdLengths, 0);\n      Arrays.fill(tvfLengths, 0);\n      return;\n    }\n\n    // SegmentMerger calls canReadRawDocs() first and should\n    // not call us if that returns false.\n    if (format < FORMAT_VERSION2)\n      throw new IllegalStateException(\"cannot read raw docs with older term vector formats\");\n\n    seekTvx(startDocID);\n\n    long tvdPosition = tvx.readLong();\n    tvd.seek(tvdPosition);\n\n    long tvfPosition = tvx.readLong();\n    tvf.seek(tvfPosition);\n\n    long lastTvdPosition = tvdPosition;\n    long lastTvfPosition = tvfPosition;\n\n    int count = 0;\n    while (count < numDocs) {\n      final int docID = startDocID + count + 1;\n      if (docID < numTotalDocs)  {\n        tvdPosition = tvx.readLong();\n        tvfPosition = tvx.readLong();\n      } else {\n        tvdPosition = tvd.length();\n        tvfPosition = tvf.length();\n      }\n      tvdLengths[count] = (int) (tvdPosition-lastTvdPosition);\n      tvfLengths[count] = (int) (tvfPosition-lastTvfPosition);\n      count++;\n      lastTvdPosition = tvdPosition;\n      lastTvfPosition = tvfPosition;\n    }\n  }\n\n","bugFix":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#rawDocs(int[],int[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#rawDocs(int[],int[],int,int).mjava","sourceNew":"  /** Retrieve the length (in bytes) of the tvd and tvf\n   *  entries for the next numDocs starting with\n   *  startDocID.  This is used for bulk copying when\n   *  merging segments, if the field numbers are\n   *  congruent.  Once this returns, the tvf & tvd streams\n   *  are seeked to the startDocID. */\n  final void rawDocs(int[] tvdLengths, int[] tvfLengths, int startDocID, int numDocs) throws IOException {\n\n    if (tvx == null) {\n      Arrays.fill(tvdLengths, 0);\n      Arrays.fill(tvfLengths, 0);\n      return;\n    }\n\n    // SegmentMerger calls canReadRawDocs() first and should\n    // not call us if that returns false.\n    if (format < FORMAT_VERSION2)\n      throw new IllegalStateException(\"cannot read raw docs with older term vector formats\");\n\n    seekTvx(startDocID);\n\n    long tvdPosition = tvx.readLong();\n    tvd.seek(tvdPosition);\n\n    long tvfPosition = tvx.readLong();\n    tvf.seek(tvfPosition);\n\n    long lastTvdPosition = tvdPosition;\n    long lastTvfPosition = tvfPosition;\n\n    int count = 0;\n    while (count < numDocs) {\n      final int docID = docStoreOffset + startDocID + count + 1;\n      assert docID <= numTotalDocs;\n      if (docID < numTotalDocs)  {\n        tvdPosition = tvx.readLong();\n        tvfPosition = tvx.readLong();\n      } else {\n        tvdPosition = tvd.length();\n        tvfPosition = tvf.length();\n        assert count == numDocs-1;\n      }\n      tvdLengths[count] = (int) (tvdPosition-lastTvdPosition);\n      tvfLengths[count] = (int) (tvfPosition-lastTvfPosition);\n      count++;\n      lastTvdPosition = tvdPosition;\n      lastTvfPosition = tvfPosition;\n    }\n  }\n\n","sourceOld":"  /** Retrieve the length (in bytes) of the tvd and tvf\n   *  entries for the next numDocs starting with\n   *  startDocID.  This is used for bulk copying when\n   *  merging segments, if the field numbers are\n   *  congruent.  Once this returns, the tvf & tvd streams\n   *  are seeked to the startDocID. */\n  final void rawDocs(int[] tvdLengths, int[] tvfLengths, int startDocID, int numDocs) throws IOException {\n\n    if (tvx == null) {\n      Arrays.fill(tvdLengths, 0);\n      Arrays.fill(tvfLengths, 0);\n      return;\n    }\n\n    // SegmentMerger calls canReadRawDocs() first and should\n    // not call us if that returns false.\n    if (format < FORMAT_VERSION2)\n      throw new IllegalStateException(\"cannot read raw docs with older term vector formats\");\n\n    seekTvx(startDocID);\n\n    long tvdPosition = tvx.readLong();\n    tvd.seek(tvdPosition);\n\n    long tvfPosition = tvx.readLong();\n    tvf.seek(tvfPosition);\n\n    long lastTvdPosition = tvdPosition;\n    long lastTvfPosition = tvfPosition;\n\n    int count = 0;\n    while (count < numDocs) {\n      final int docID = docStoreOffset + startDocID + count + 1;\n      assert docID <= numTotalDocs;\n      if (docID < numTotalDocs)  {\n        tvdPosition = tvx.readLong();\n        tvfPosition = tvx.readLong();\n      } else {\n        tvdPosition = tvd.length();\n        tvfPosition = tvf.length();\n      }\n      tvdLengths[count] = (int) (tvdPosition-lastTvdPosition);\n      tvfLengths[count] = (int) (tvfPosition-lastTvfPosition);\n      count++;\n      lastTvdPosition = tvdPosition;\n      lastTvfPosition = tvfPosition;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#rawDocs(int[],int[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#rawDocs(int[],int[],int,int).mjava","sourceNew":"  /** Retrieve the length (in bytes) of the tvd and tvf\n   *  entries for the next numDocs starting with\n   *  startDocID.  This is used for bulk copying when\n   *  merging segments, if the field numbers are\n   *  congruent.  Once this returns, the tvf & tvd streams\n   *  are seeked to the startDocID. */\n  final void rawDocs(int[] tvdLengths, int[] tvfLengths, int startDocID, int numDocs) throws IOException {\n\n    if (tvx == null) {\n      Arrays.fill(tvdLengths, 0);\n      Arrays.fill(tvfLengths, 0);\n      return;\n    }\n\n    // SegmentMerger calls canReadRawDocs() first and should\n    // not call us if that returns false.\n    if (format < FORMAT_VERSION2)\n      throw new IllegalStateException(\"cannot read raw docs with older term vector formats\");\n\n    seekTvx(startDocID);\n\n    long tvdPosition = tvx.readLong();\n    tvd.seek(tvdPosition);\n\n    long tvfPosition = tvx.readLong();\n    tvf.seek(tvfPosition);\n\n    long lastTvdPosition = tvdPosition;\n    long lastTvfPosition = tvfPosition;\n\n    int count = 0;\n    while (count < numDocs) {\n      final int docID = docStoreOffset + startDocID + count + 1;\n      assert docID <= numTotalDocs;\n      if (docID < numTotalDocs)  {\n        tvdPosition = tvx.readLong();\n        tvfPosition = tvx.readLong();\n      } else {\n        tvdPosition = tvd.length();\n        tvfPosition = tvf.length();\n        assert count == numDocs-1;\n      }\n      tvdLengths[count] = (int) (tvdPosition-lastTvdPosition);\n      tvfLengths[count] = (int) (tvfPosition-lastTvfPosition);\n      count++;\n      lastTvdPosition = tvdPosition;\n      lastTvfPosition = tvfPosition;\n    }\n  }\n\n","sourceOld":"  /** Retrieve the length (in bytes) of the tvd and tvf\n   *  entries for the next numDocs starting with\n   *  startDocID.  This is used for bulk copying when\n   *  merging segments, if the field numbers are\n   *  congruent.  Once this returns, the tvf & tvd streams\n   *  are seeked to the startDocID. */\n  final void rawDocs(int[] tvdLengths, int[] tvfLengths, int startDocID, int numDocs) throws IOException {\n\n    if (tvx == null) {\n      Arrays.fill(tvdLengths, 0);\n      Arrays.fill(tvfLengths, 0);\n      return;\n    }\n\n    // SegmentMerger calls canReadRawDocs() first and should\n    // not call us if that returns false.\n    if (format < FORMAT_VERSION2)\n      throw new IllegalStateException(\"cannot read raw docs with older term vector formats\");\n\n    seekTvx(startDocID);\n\n    long tvdPosition = tvx.readLong();\n    tvd.seek(tvdPosition);\n\n    long tvfPosition = tvx.readLong();\n    tvf.seek(tvfPosition);\n\n    long lastTvdPosition = tvdPosition;\n    long lastTvfPosition = tvfPosition;\n\n    int count = 0;\n    while (count < numDocs) {\n      final int docID = docStoreOffset + startDocID + count + 1;\n      assert docID <= numTotalDocs;\n      if (docID < numTotalDocs)  {\n        tvdPosition = tvx.readLong();\n        tvfPosition = tvx.readLong();\n      } else {\n        tvdPosition = tvd.length();\n        tvfPosition = tvf.length();\n        assert count == numDocs-1;\n      }\n      tvdLengths[count] = (int) (tvdPosition-lastTvdPosition);\n      tvfLengths[count] = (int) (tvfPosition-lastTvfPosition);\n      count++;\n      lastTvdPosition = tvdPosition;\n      lastTvfPosition = tvfPosition;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7439af33438ca32496b7ce4a341617a480b7137a":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["7439af33438ca32496b7ce4a341617a480b7137a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"]},"commit2Childs":{"7439af33438ca32496b7ce4a341617a480b7137a":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["7439af33438ca32496b7ce4a341617a480b7137a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}