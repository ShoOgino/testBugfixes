{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","sourceOld":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62dce719f7b1e83e0b4020f146a516e5cf618884","date":1286643323,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    if (outputUnigramsIfNoShingles && noShingleOutput \n        && gramSize.minValue > 1 && inputWindow.size() < minShingleSize) {\n      gramSize.minValue = 1;\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","sourceOld":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    if (outputUnigramsIfNoShingles && noShingleOutput \n        && gramSize.minValue > 1 && inputWindow.size() < minShingleSize) {\n      gramSize.minValue = 1;\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","sourceOld":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    if (outputUnigramsIfNoShingles && noShingleOutput \n        && gramSize.minValue > 1 && inputWindow.size() < minShingleSize) {\n      gramSize.minValue = 1;\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","sourceOld":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    if (outputUnigramsIfNoShingles && noShingleOutput \n        && gramSize.minValue > 1 && inputWindow.size() < minShingleSize) {\n      gramSize.minValue = 1;\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["62dce719f7b1e83e0b4020f146a516e5cf618884"],"62dce719f7b1e83e0b4020f146a516e5cf618884":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","62dce719f7b1e83e0b4020f146a516e5cf618884"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62dce719f7b1e83e0b4020f146a516e5cf618884":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["62dce719f7b1e83e0b4020f146a516e5cf618884","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}