{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @param SolrCore - optional - sometimes null\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @param SolrCore - optional - sometimes null\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @param SolrCore - optional - sometimes null\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97bf7e60e8b1531f7e992482be43dd563dde04e","date":1327594643,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @param SolrCore - optional - sometimes null\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @param SolrCore - optional - sometimes null\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @param SolrCore - optional - sometimes null\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context, SolrCore core) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false, core);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,SolrCore).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context, SolrCore core) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false, core);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["a6378064655e76cd7b908b1cab4ce425b384b508"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f97bf7e60e8b1531f7e992482be43dd563dde04e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"f97bf7e60e8b1531f7e992482be43dd563dde04e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","f97bf7e60e8b1531f7e992482be43dd563dde04e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"d82832af39f94dbb58a3130fd216ff1d49435589":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["f97bf7e60e8b1531f7e992482be43dd563dde04e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a6378064655e76cd7b908b1cab4ce425b384b508"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"f97bf7e60e8b1531f7e992482be43dd563dde04e":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a6378064655e76cd7b908b1cab4ce425b384b508":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["f97bf7e60e8b1531f7e992482be43dd563dde04e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9813dd0748537c429b7c0a9b4723ea1ba496c047","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","db4fdbf3d262768eabc027cd8321edca0cd11fa8","fd92b8bcc88e969302510acf77bd6970da3994c4","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}