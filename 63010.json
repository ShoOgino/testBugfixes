{"path":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#validUTF16String(CharSequence).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#validUTF16String(CharSequence).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#validUTF16String(CharSequence).mjava","sourceNew":"  // Only called from assert\n  /*\n  private static boolean matches(char[] source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = new String(source, offset, length);\n      String s2 = new String(result, 0, upto, \"UTF-8\");\n      if (!s1.equals(s2)) {\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n\n  // Only called from assert\n  private static boolean matches(String source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = source.substring(offset, offset+length);\n      String s2 = new String(result, 0, upto, \"UTF-8\");\n      if (!s1.equals(s2)) {\n        // Allow a difference if s1 is not valid UTF-16\n\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"  s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n  */\n  public static boolean validUTF16String(CharSequence s) {\n    final int size = s.length();\n    for(int i=0;i<size;i++) {\n      char ch = s.charAt(i);\n      if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n        if (i < size-1) {\n          i++;\n          char nextCH = s.charAt(i);\n          if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n            // Unmatched high surrogate\n            return false;\n        } else\n          // Unmatched high surrogate\n          return false;\n      } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END)\n        // Unmatched low surrogate\n        return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // Only called from assert\n  /*\n  private static boolean matches(char[] source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = new String(source, offset, length);\n      String s2 = new String(result, 0, upto, \"UTF-8\");\n      if (!s1.equals(s2)) {\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n\n  // Only called from assert\n  private static boolean matches(String source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = source.substring(offset, offset+length);\n      String s2 = new String(result, 0, upto, \"UTF-8\");\n      if (!s1.equals(s2)) {\n        // Allow a difference if s1 is not valid UTF-16\n\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"  s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n  */\n  public static boolean validUTF16String(CharSequence s) {\n    final int size = s.length();\n    for(int i=0;i<size;i++) {\n      char ch = s.charAt(i);\n      if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n        if (i < size-1) {\n          i++;\n          char nextCH = s.charAt(i);\n          if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n            // Unmatched high surrogate\n            return false;\n        } else\n          // Unmatched high surrogate\n          return false;\n      } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END)\n        // Unmatched low surrogate\n        return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#validUTF16String(CharSequence).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#validUTF16String(CharSequence).mjava","sourceNew":"  // Only called from assert\n  /*\n  private static boolean matches(char[] source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = new String(source, offset, length);\n      String s2 = new String(result, 0, upto, StandardCharsets.UTF_8);\n      if (!s1.equals(s2)) {\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n\n  // Only called from assert\n  private static boolean matches(String source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = source.substring(offset, offset+length);\n      String s2 = new String(result, 0, upto, StandardCharsets.UTF_8);\n      if (!s1.equals(s2)) {\n        // Allow a difference if s1 is not valid UTF-16\n\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"  s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n  */\n  public static boolean validUTF16String(CharSequence s) {\n    final int size = s.length();\n    for(int i=0;i<size;i++) {\n      char ch = s.charAt(i);\n      if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n        if (i < size-1) {\n          i++;\n          char nextCH = s.charAt(i);\n          if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n            // Unmatched high surrogate\n            return false;\n        } else\n          // Unmatched high surrogate\n          return false;\n      } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END)\n        // Unmatched low surrogate\n        return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // Only called from assert\n  /*\n  private static boolean matches(char[] source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = new String(source, offset, length);\n      String s2 = new String(result, 0, upto, \"UTF-8\");\n      if (!s1.equals(s2)) {\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n\n  // Only called from assert\n  private static boolean matches(String source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = source.substring(offset, offset+length);\n      String s2 = new String(result, 0, upto, \"UTF-8\");\n      if (!s1.equals(s2)) {\n        // Allow a difference if s1 is not valid UTF-16\n\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"  s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n  */\n  public static boolean validUTF16String(CharSequence s) {\n    final int size = s.length();\n    for(int i=0;i<size;i++) {\n      char ch = s.charAt(i);\n      if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n        if (i < size-1) {\n          i++;\n          char nextCH = s.charAt(i);\n          if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n            // Unmatched high surrogate\n            return false;\n        } else\n          // Unmatched high surrogate\n          return false;\n      } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END)\n        // Unmatched low surrogate\n        return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#validUTF16String(CharSequence).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#validUTF16String(CharSequence).mjava","sourceNew":"  // Only called from assert\n  /*\n  private static boolean matches(char[] source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = new String(source, offset, length);\n      String s2 = new String(result, 0, upto, StandardCharsets.UTF_8);\n      if (!s1.equals(s2)) {\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n\n  // Only called from assert\n  private static boolean matches(String source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = source.substring(offset, offset+length);\n      String s2 = new String(result, 0, upto, StandardCharsets.UTF_8);\n      if (!s1.equals(s2)) {\n        // Allow a difference if s1 is not valid UTF-16\n\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"  s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n  */\n  public static boolean validUTF16String(CharSequence s) {\n    final int size = s.length();\n    for(int i=0;i<size;i++) {\n      char ch = s.charAt(i);\n      if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n        if (i < size-1) {\n          i++;\n          char nextCH = s.charAt(i);\n          if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n            // Unmatched high surrogate\n            return false;\n        } else\n          // Unmatched high surrogate\n          return false;\n      } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END)\n        // Unmatched low surrogate\n        return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // Only called from assert\n  /*\n  private static boolean matches(char[] source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = new String(source, offset, length);\n      String s2 = new String(result, 0, upto, \"UTF-8\");\n      if (!s1.equals(s2)) {\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n\n  // Only called from assert\n  private static boolean matches(String source, int offset, int length, byte[] result, int upto) {\n    try {\n      String s1 = source.substring(offset, offset+length);\n      String s2 = new String(result, 0, upto, \"UTF-8\");\n      if (!s1.equals(s2)) {\n        // Allow a difference if s1 is not valid UTF-16\n\n        //System.out.println(\"DIFF: s1 len=\" + s1.length());\n        //for(int i=0;i<s1.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s1.charAt(i));\n        //System.out.println(\"  s2 len=\" + s2.length());\n        //for(int i=0;i<s2.length();i++)\n        //  System.out.println(\"    \" + i + \": \" + (int) s2.charAt(i));\n\n        // If the input string was invalid, then the\n        // difference is OK\n        if (!validUTF16String(s1))\n          return true;\n\n        return false;\n      }\n      return s1.equals(s2);\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n  }\n  */\n  public static boolean validUTF16String(CharSequence s) {\n    final int size = s.length();\n    for(int i=0;i<size;i++) {\n      char ch = s.charAt(i);\n      if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n        if (i < size-1) {\n          i++;\n          char nextCH = s.charAt(i);\n          if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n            // Unmatched high surrogate\n            return false;\n        } else\n          // Unmatched high surrogate\n          return false;\n      } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END)\n        // Unmatched low surrogate\n        return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d3d365762604952e436b51980101dfc84cc1b3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d3d365762604952e436b51980101dfc84cc1b3e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d3d365762604952e436b51980101dfc84cc1b3e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}