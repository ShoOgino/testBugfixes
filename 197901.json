{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":null,"sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}