{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","commits":[{"id":"00c8a312269787ad677745cd5fc2631d61dff78d","date":1326209731,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output.\n   * @throws UnsupportedEncodingException \n   */\n  public void postFile(File file, OutputStream output, String type) {\n\n    InputStream is = null;\n    try {\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type);\n    } catch (IOException e) {\n      fatal(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n\n    InputStream is = null;\n    try {\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type);\n    } catch (IOException e) {\n      fatal(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output.\n   * @throws UnsupportedEncodingException \n   */\n  public void postFile(File file, OutputStream output, String type) {\n\n    InputStream is = null;\n    try {\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type);\n    } catch (IOException e) {\n      fatal(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n\n    InputStream is = null;\n    try {\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type);\n    } catch (IOException e) {\n      fatal(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output.\n   * @throws UnsupportedEncodingException \n   */\n  public void postFile(File file, OutputStream output, String type) {\n\n    InputStream is = null;\n    try {\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type);\n    } catch (IOException e) {\n      fatal(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","date":1343692569,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = url.getProtocol() + \"://\" + url.getAuthority() + url.getPath() + \"/extract\" + (url.getQuery() != null ? \"?\"+url.getQuery() : \"\");\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n//            info(\"Indexing to ExtractingRequestHandler with URL \"+url);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n\n    InputStream is = null;\n    try {\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type);\n    } catch (IOException e) {\n      fatal(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9d7089f288bed284e929e86d0122ee510d2f2613","e532c1aa07e07cf092a64ac30577062f3b16e4c5","7ded7f336122df7671eaad33d3164a701e13744d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = url.getProtocol() + \"://\" + url.getAuthority() + url.getPath() + \"/extract\" + (url.getQuery() != null ? \"?\"+url.getQuery() : \"\");\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n//            info(\"Indexing to ExtractingRequestHandler with URL \"+url);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n\n    InputStream is = null;\n    try {\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type);\n    } catch (IOException e) {\n      fatal(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = url.getProtocol() + \"://\" + url.getAuthority() + url.getPath() + \"/extract\" + (url.getQuery() != null ? \"?\"+url.getQuery() : \"\");\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n//            info(\"Indexing to ExtractingRequestHandler with URL \"+url);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n\n    InputStream is = null;\n    try {\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type);\n    } catch (IOException e) {\n      fatal(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = appendUrlPath(solrUrl, \"/extract\").toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = url.getProtocol() + \"://\" + url.getAuthority() + url.getPath() + \"/extract\" + (url.getQuery() != null ? \"?\"+url.getQuery() : \"\");\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n//            info(\"Indexing to ExtractingRequestHandler with URL \"+url);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = appendUrlPath(solrUrl, \"/extract\").toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = url.getProtocol() + \"://\" + url.getAuthority() + url.getPath() + \"/extract\" + (url.getQuery() != null ? \"?\"+url.getQuery() : \"\");\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n//            info(\"Indexing to ExtractingRequestHandler with URL \"+url);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = appendUrlPath(solrUrl, \"/extract\").toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = url.getProtocol() + \"://\" + url.getAuthority() + url.getPath() + \"/extract\" + (url.getQuery() != null ? \"?\"+url.getQuery() : \"\");\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n//            info(\"Indexing to ExtractingRequestHandler with URL \"+url);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = appendUrlPath(solrUrl, \"/extract\").toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts it's contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = appendUrlPath(solrUrl, \"/extract\").toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6279c1e4df4ee026df0d7d7f27cb2a8faf4008b","date":1421022827,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            suffix = \"/extract\";\n            String urlStr = appendUrlPath(solrUrl, suffix).toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            String urlStr = appendUrlPath(solrUrl, \"/extract\").toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e532c1aa07e07cf092a64ac30577062f3b16e4c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7089f288bed284e929e86d0122ee510d2f2613","date":1421030190,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            suffix = \"/extract\";\n            String urlStr = appendUrlPath(solrUrl, suffix).toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"text/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            suffix = \"/extract\";\n            String urlStr = appendUrlPath(solrUrl, suffix).toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"bugIntro":["e532c1aa07e07cf092a64ac30577062f3b16e4c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e532c1aa07e07cf092a64ac30577062f3b16e4c5","date":1431964304,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if(type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        if(type != null) {\n          if(type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n            // Default handler\n          } else {\n            // SolrCell\n            suffix = \"/extract\";\n            String urlStr = appendUrlPath(solrUrl, suffix).toString();\n            if(urlStr.indexOf(\"resource.name\")==-1)\n              urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            if(urlStr.indexOf(\"literal.id\")==-1)\n              urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n            url = new URL(urlStr);\n          }\n        } else {\n          warn(\"Skipping \"+file.getName()+\". Unsupported file type for auto mode.\");\n          return;\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","f6279c1e4df4ee026df0d7d7f27cb2a8faf4008b","9d7089f288bed284e929e86d0122ee510d2f2613"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ded7f336122df7671eaad33d3164a701e13744d","date":1452097400,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if(type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if(type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, (int)file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ed1f5038d985eaf26ae779edc703a309549ac24","date":1452367821,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if (type.equals(\"application/json\") && !\"solr\".equals(format))  {\n          suffix = \"/json/docs\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          url = new URL(urlStr);\n        } else if (type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if(type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06c53fdb787c249799e6655451c48ef29c717557","date":1494098950,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if (type.equals(\"application/json\") && !\"solr\".equals(format))  {\n          suffix = \"/json/docs\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          url = new URL(urlStr);\n        } else if (type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix + (mockMode ? \" MOCK!\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if (type.equals(\"application/json\") && !\"solr\".equals(format))  {\n          suffix = \"/json/docs\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          url = new URL(urlStr);\n        } else if (type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if (type.equals(\"application/json\") && !\"solr\".equals(format))  {\n          suffix = \"/json/docs\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          url = new URL(urlStr);\n        } else if (type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix + (mockMode ? \" MOCK!\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if (type.equals(\"application/json\") && !\"solr\".equals(format))  {\n          suffix = \"/json/docs\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          url = new URL(urlStr);\n        } else if (type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix);\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFile(File,OutputStream,String).mjava","sourceNew":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output.\n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if (type.equals(\"application/json\") && !\"solr\".equals(format))  {\n          suffix = \"/json/docs\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          url = new URL(urlStr);\n        } else if (type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix + (mockMode ? \" MOCK!\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens the file and posts its contents to the solrUrl,\n   * writes to response to output. \n   */\n  public void postFile(File file, OutputStream output, String type) {\n    InputStream is = null;\n    try {\n      URL url = solrUrl;\n      String suffix = \"\";\n      if(auto) {\n        if(type == null) {\n          type = guessType(file);\n        }\n        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files\n        // TODO: from being interpreted as Solr documents internally\n        if (type.equals(\"application/json\") && !\"solr\".equals(format))  {\n          suffix = \"/json/docs\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          url = new URL(urlStr);\n        } else if (type.equals(\"application/xml\") || type.equals(\"text/csv\") || type.equals(\"application/json\")) {\n          // Default handler\n        } else {\n          // SolrCell\n          suffix = \"/extract\";\n          String urlStr = appendUrlPath(solrUrl, suffix).toString();\n          if(urlStr.indexOf(\"resource.name\")==-1)\n            urlStr = appendParam(urlStr, \"resource.name=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          if(urlStr.indexOf(\"literal.id\")==-1)\n            urlStr = appendParam(urlStr, \"literal.id=\" + URLEncoder.encode(file.getAbsolutePath(), \"UTF-8\"));\n          url = new URL(urlStr);\n        }\n      } else {\n        if(type == null) type = DEFAULT_CONTENT_TYPE;\n      }\n      info(\"POSTing file \" + file.getName() + (auto?\" (\"+type+\")\":\"\") + \" to [base]\" + suffix + (mockMode ? \" MOCK!\":\"\"));\n      is = new FileInputStream(file);\n      postData(is, file.length(), output, type, url);\n    } catch (IOException e) {\n      e.printStackTrace();\n      warn(\"Can't open/read file: \" + file);\n    } finally {\n      try {\n        if(is!=null) is.close();\n      } catch (IOException e) {\n        fatal(\"IOException while closing file: \"+ e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ed1f5038d985eaf26ae779edc703a309549ac24":["7ded7f336122df7671eaad33d3164a701e13744d"],"f6279c1e4df4ee026df0d7d7f27cb2a8faf4008b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"00c8a312269787ad677745cd5fc2631d61dff78d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["d6f074e73200c07d54f242d3880a8da5a35ff97b","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"7ded7f336122df7671eaad33d3164a701e13744d":["e532c1aa07e07cf092a64ac30577062f3b16e4c5"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["4ed1f5038d985eaf26ae779edc703a309549ac24","06c53fdb787c249799e6655451c48ef29c717557"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["c2c3a504730329ae644b009dee43024116605d47"],"9d7089f288bed284e929e86d0122ee510d2f2613":["f6279c1e4df4ee026df0d7d7f27cb2a8faf4008b"],"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["00c8a312269787ad677745cd5fc2631d61dff78d"],"e532c1aa07e07cf092a64ac30577062f3b16e4c5":["9d7089f288bed284e929e86d0122ee510d2f2613"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["00c8a312269787ad677745cd5fc2631d61dff78d","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","c2c3a504730329ae644b009dee43024116605d47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"06c53fdb787c249799e6655451c48ef29c717557":["4ed1f5038d985eaf26ae779edc703a309549ac24"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["06c53fdb787c249799e6655451c48ef29c717557"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"4ed1f5038d985eaf26ae779edc703a309549ac24":["e9017cf144952056066919f1ebc7897ff9bd71b1","06c53fdb787c249799e6655451c48ef29c717557"],"f6279c1e4df4ee026df0d7d7f27cb2a8faf4008b":["9d7089f288bed284e929e86d0122ee510d2f2613"],"00c8a312269787ad677745cd5fc2631d61dff78d":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"7ded7f336122df7671eaad33d3164a701e13744d":["4ed1f5038d985eaf26ae779edc703a309549ac24"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f6279c1e4df4ee026df0d7d7f27cb2a8faf4008b"],"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["c2c3a504730329ae644b009dee43024116605d47","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"9d7089f288bed284e929e86d0122ee510d2f2613":["e532c1aa07e07cf092a64ac30577062f3b16e4c5"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"e532c1aa07e07cf092a64ac30577062f3b16e4c5":["7ded7f336122df7671eaad33d3164a701e13744d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00c8a312269787ad677745cd5fc2631d61dff78d"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"06c53fdb787c249799e6655451c48ef29c717557":["e9017cf144952056066919f1ebc7897ff9bd71b1","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","e9017cf144952056066919f1ebc7897ff9bd71b1","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}