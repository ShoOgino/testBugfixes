{"path":"lucene/backwards/src/java/org/apache/lucene/util/ArrayUtil#parseInt(char[],int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/ArrayUtil#parseInt(char[],int,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/ArrayUtil#parseInt(char[],int,int,int).mjava","sourceNew":"  /**\n   * Parses the string argument as if it was an int value and returns the\n   * result. Throws NumberFormatException if the string does not represent an\n   * int quantity. The second argument specifies the radix to use when parsing\n   * the value.\n   *\n   * @param chars a string representation of an int quantity.\n   * @param radix the base to use for conversion.\n   * @return int the value represented by the argument\n   * @throws NumberFormatException if the argument could not be parsed as an int quantity.\n   */\n  public static int parseInt(char[] chars, int offset, int len, int radix)\n          throws NumberFormatException {\n    if (chars == null || radix < Character.MIN_RADIX\n            || radix > Character.MAX_RADIX) {\n      throw new NumberFormatException();\n    }\n    int  i = 0;\n    if (len == 0) {\n      throw new NumberFormatException(\"chars length is 0\");\n    }\n    boolean negative = chars[offset + i] == '-';\n    if (negative && ++i == len) {\n      throw new NumberFormatException(\"can't convert to an int\");\n    }\n    if (negative == true){\n      offset++;\n      len--;\n    }\n    return parse(chars, offset, len, radix, negative);\n  }\n\n","sourceOld":"  /**\n   * Parses the string argument as if it was an int value and returns the\n   * result. Throws NumberFormatException if the string does not represent an\n   * int quantity. The second argument specifies the radix to use when parsing\n   * the value.\n   *\n   * @param chars a string representation of an int quantity.\n   * @param radix the base to use for conversion.\n   * @return int the value represented by the argument\n   * @throws NumberFormatException if the argument could not be parsed as an int quantity.\n   */\n  public static int parseInt(char[] chars, int offset, int len, int radix)\n          throws NumberFormatException {\n    if (chars == null || radix < Character.MIN_RADIX\n            || radix > Character.MAX_RADIX) {\n      throw new NumberFormatException();\n    }\n    int  i = 0;\n    if (len == 0) {\n      throw new NumberFormatException(\"chars length is 0\");\n    }\n    boolean negative = chars[offset + i] == '-';\n    if (negative && ++i == len) {\n      throw new NumberFormatException(\"can't convert to an int\");\n    }\n    if (negative == true){\n      offset++;\n      len--;\n    }\n    return parse(chars, offset, len, radix, negative);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/ArrayUtil#parseInt(char[],int,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses the string argument as if it was an int value and returns the\n   * result. Throws NumberFormatException if the string does not represent an\n   * int quantity. The second argument specifies the radix to use when parsing\n   * the value.\n   *\n   * @param chars a string representation of an int quantity.\n   * @param radix the base to use for conversion.\n   * @return int the value represented by the argument\n   * @throws NumberFormatException if the argument could not be parsed as an int quantity.\n   */\n  public static int parseInt(char[] chars, int offset, int len, int radix)\n          throws NumberFormatException {\n    if (chars == null || radix < Character.MIN_RADIX\n            || radix > Character.MAX_RADIX) {\n      throw new NumberFormatException();\n    }\n    int  i = 0;\n    if (len == 0) {\n      throw new NumberFormatException(\"chars length is 0\");\n    }\n    boolean negative = chars[offset + i] == '-';\n    if (negative && ++i == len) {\n      throw new NumberFormatException(\"can't convert to an int\");\n    }\n    if (negative == true){\n      offset++;\n      len--;\n    }\n    return parse(chars, offset, len, radix, negative);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}