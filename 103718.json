{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","commits":[{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","pathOld":"/dev/null","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<BytesRef>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(_TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","pathOld":"/dev/null","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<BytesRef>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(_TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<BytesRef>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<BytesRef>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(_TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<BytesRef>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    LightAutomaton union = BasicAutomata.makeStringUnionLight(strings);\n    assertTrue(BasicOperations.isDeterministic(union));\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    LightAutomaton union = BasicAutomata.makeStringUnionLight(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    LightAutomaton union = BasicAutomata.makeStringUnionLight(strings);\n    assertTrue(BasicOperations.isDeterministic(union));\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(Operations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    LightAutomaton union = BasicAutomata.makeStringUnionLight(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testStringUnion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testStringUnion().mjava","sourceNew":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = Automata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(Operations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","sourceOld":"  /** Test string union. */\n  public void testStringUnion() {\n    List<BytesRef> strings = new ArrayList<>();\n    for (int i = RandomInts.randomIntBetween(random(), 0, 1000); --i >= 0;) {\n      strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n\n    Collections.sort(strings);\n    Automaton union = BasicAutomata.makeStringUnion(strings);\n    assertTrue(union.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(union, naiveUnion(strings)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"6613659748fe4411a7dcf85266e55db1f95f7315":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}