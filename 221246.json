{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = NumericField.getFieldType(NumericField.DataType.INT, true);\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = NumericField.getFieldType(NumericField.DataType.INT, false);\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    NumericField\n      field8 = new NumericField(\"field8\", 0, storedInt8),\n      field4 = new NumericField(\"field4\", 0, storedInt4),\n      field2 = new NumericField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new NumericField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new NumericField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new NumericField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setValue(val);\n      field4.setValue(val);\n      field2.setValue(val);\n      fieldNoTrie.setValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setValue(val);\n      ascfield4.setValue(val);\n      ascfield2.setValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = NumericField.getFieldType(NumericField.DataType.INT, true);\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = NumericField.getFieldType(NumericField.DataType.INT, false);\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    NumericField\n      field8 = new NumericField(\"field8\", 0, storedInt8),\n      field4 = new NumericField(\"field4\", 0, storedInt4),\n      field2 = new NumericField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new NumericField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new NumericField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new NumericField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setValue(val);\n      field4.setValue(val);\n      field2.setValue(val);\n      fieldNoTrie.setValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setValue(val);\n      ascfield4.setValue(val);\n      ascfield2.setValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = NumericField.getFieldType(NumericField.DataType.INT, true);\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = NumericField.getFieldType(NumericField.DataType.INT, false);\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    NumericField\n      field8 = new NumericField(\"field8\", 0, storedInt8),\n      field4 = new NumericField(\"field4\", 0, storedInt4),\n      field2 = new NumericField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new NumericField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new NumericField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new NumericField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setValue(val);\n      field4.setValue(val);\n      field2.setValue(val);\n      fieldNoTrie.setValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setValue(val);\n      ascfield4.setValue(val);\n      ascfield2.setValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":["6462d89a9840dd623bfbd36483d84abce975e31a","fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(IntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = IntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    IntField\n      field8 = new IntField(\"field8\", 0, storedInt8),\n      field4 = new IntField(\"field4\", 0, storedInt4),\n      field2 = new IntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new IntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new IntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new IntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new IntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["770342641f7b505eaa8dccdc666158bff2419109"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}