{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRRescorer#extractFeaturesInfo(LTRScoringQuery.ModelWeight,int,Float,List[LeafReaderContext]).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRRescorer#extractFeaturesInfo(LTRScoringQuery.ModelWeight,int,Float,List[LeafReaderContext]).mjava","pathOld":"/dev/null","sourceNew":"  public static LTRScoringQuery.FeatureInfo[] extractFeaturesInfo(LTRScoringQuery.ModelWeight modelWeight,\n      int docid,\n      Float originalDocScore,\n      List<LeafReaderContext> leafContexts)\n          throws IOException {\n    final int n = ReaderUtil.subIndex(docid, leafContexts);\n    final LeafReaderContext atomicContext = leafContexts.get(n);\n    final int deBasedDoc = docid - atomicContext.docBase;\n    final LTRScoringQuery.ModelWeight.ModelScorer r = modelWeight.scorer(atomicContext);\n    if ( (r == null) || (r.iterator().advance(deBasedDoc) != deBasedDoc) ) {\n      return new LTRScoringQuery.FeatureInfo[0];\n    } else {\n      if (originalDocScore != null) {\n        // If results have not been reranked, the score passed in is the original query's\n        // score, which some features can use instead of recalculating it\n        r.getDocInfo().setOriginalDocScore(originalDocScore);\n      }\n      r.score();\n      return modelWeight.getFeaturesInfo();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRRescorer#extractFeaturesInfo(LTRScoringQuery.ModelWeight,int,Float,List[LeafReaderContext]).mjava","pathOld":"/dev/null","sourceNew":"  public static LTRScoringQuery.FeatureInfo[] extractFeaturesInfo(LTRScoringQuery.ModelWeight modelWeight,\n      int docid,\n      Float originalDocScore,\n      List<LeafReaderContext> leafContexts)\n          throws IOException {\n    final int n = ReaderUtil.subIndex(docid, leafContexts);\n    final LeafReaderContext atomicContext = leafContexts.get(n);\n    final int deBasedDoc = docid - atomicContext.docBase;\n    final LTRScoringQuery.ModelWeight.ModelScorer r = modelWeight.scorer(atomicContext);\n    if ( (r == null) || (r.iterator().advance(deBasedDoc) != deBasedDoc) ) {\n      return new LTRScoringQuery.FeatureInfo[0];\n    } else {\n      if (originalDocScore != null) {\n        // If results have not been reranked, the score passed in is the original query's\n        // score, which some features can use instead of recalculating it\n        r.getDocInfo().setOriginalDocScore(originalDocScore);\n      }\n      r.score();\n      return modelWeight.getFeaturesInfo();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}