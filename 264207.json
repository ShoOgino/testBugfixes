{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.shutdown();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.shutdown();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.shutdown();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.shutdown();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          PostingsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          DocsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          PostingsEnum.FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          PostingsEnum.FLAG_FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          null,\n          PostingsEnum.FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          MultiFields.getLiveDocs(reader),\n          null,\n          PostingsEnum.FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"  public void testHighFreqTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                         .setRAMBufferSizeMB(0.01));\n    // Massive doc that has 128 K a's\n    StringBuilder b = new StringBuilder(1024*1024);\n    for(int i=0;i<4096;i++) {\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n    }\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", b.toString(), customType));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.maxDoc());\n    assertEquals(1, reader.numDocs());\n    Term t = new Term(\"field\", \"a\");\n    assertEquals(1, reader.docFreq(t));\n    PostingsEnum td = TestUtil.docs(random(), reader,\n                                    \"field\",\n                                    new BytesRef(\"a\"),\n                                    null,\n                                    PostingsEnum.FREQS);\n    td.nextDoc();\n    assertEquals(128*1024, td.freq());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          null,\n          PostingsEnum.FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"  public void testHighFreqTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                         .setRAMBufferSizeMB(0.01));\n    // Massive doc that has 128 K a's\n    StringBuilder b = new StringBuilder(1024*1024);\n    for(int i=0;i<4096;i++) {\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n    }\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", b.toString(), customType));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.maxDoc());\n    assertEquals(1, reader.numDocs());\n    Term t = new Term(\"field\", \"a\");\n    assertEquals(1, reader.docFreq(t));\n    PostingsEnum td = TestUtil.docs(random(), reader,\n                                    \"field\",\n                                    new BytesRef(\"a\"),\n                                    null,\n                                    PostingsEnum.FREQS);\n    td.nextDoc();\n    assertEquals(128*1024, td.freq());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          null,\n          PostingsEnum.FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"  public void testHighFreqTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                         .setRAMBufferSizeMB(0.01));\n    // Massive doc that has 128 K a's\n    StringBuilder b = new StringBuilder(1024*1024);\n    for(int i=0;i<4096;i++) {\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n    }\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", b.toString(), customType));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.maxDoc());\n    assertEquals(1, reader.numDocs());\n    Term t = new Term(\"field\", \"a\");\n    assertEquals(1, reader.docFreq(t));\n    PostingsEnum td = TestUtil.docs(random(), reader,\n                                    \"field\",\n                                    new BytesRef(\"a\"),\n                                    null,\n                                    PostingsEnum.FREQS);\n    td.nextDoc();\n    assertEquals(128*1024, td.freq());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          null,\n          PostingsEnum.FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"  public void testHighFreqTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                         .setRAMBufferSizeMB(0.01));\n    // Massive doc that has 128 K a's\n    StringBuilder b = new StringBuilder(1024*1024);\n    for(int i=0;i<4096;i++) {\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n      b.append(\" a a a a a a a a\");\n    }\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", b.toString(), customType));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.maxDoc());\n    assertEquals(1, reader.numDocs());\n    Term t = new Term(\"field\", \"a\");\n    assertEquals(1, reader.docFreq(t));\n    PostingsEnum td = TestUtil.docs(random(), reader,\n                                    \"field\",\n                                    new BytesRef(\"a\"),\n                                    null,\n                                    PostingsEnum.FREQS);\n    td.nextDoc();\n    assertEquals(128*1024, td.freq());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      PostingsEnum td = TestUtil.docs(random(), reader,\n          \"field\",\n          new BytesRef(\"a\"),\n          null,\n          PostingsEnum.FREQS);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["0f4464508ee83288c8c4585b533f9faaa93aa314","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["0f4464508ee83288c8c4585b533f9faaa93aa314","b470f36a9372c97283360b1304eacbde22df6c0d"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["0f4464508ee83288c8c4585b533f9faaa93aa314","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","02331260bb246364779cb6f04919ca47900d01bb"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","02331260bb246364779cb6f04919ca47900d01bb"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"],"02331260bb246364779cb6f04919ca47900d01bb":["d19974432be9aed28ee7dca73bdf01d139e763a9"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","02331260bb246364779cb6f04919ca47900d01bb"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"02331260bb246364779cb6f04919ca47900d01bb":["6613659748fe4411a7dcf85266e55db1f95f7315","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}