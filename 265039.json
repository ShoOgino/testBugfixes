{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  public Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  public Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  public Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  public Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["519435fc0d6082a1b8081f9492b714f716877437"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["519435fc0d6082a1b8081f9492b714f716877437","6616b1fd222bb5a60f7f7856ace312252bc97890"],"519435fc0d6082a1b8081f9492b714f716877437":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["519435fc0d6082a1b8081f9492b714f716877437","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["4cc45c615dbb82bf79d5f9550286098367874fbf","db4fdbf3d262768eabc027cd8321edca0cd11fa8","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"519435fc0d6082a1b8081f9492b714f716877437":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["519435fc0d6082a1b8081f9492b714f716877437"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}