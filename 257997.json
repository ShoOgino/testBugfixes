{"path":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","commits":[{"id":"5e32619a05801247e931ce6b9998721600e247b0","date":1570166014,"type":0,"author":"Igor Motov","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntersectOptimization() {\n    byte[] minTriangle = box(0, 0, 10, 5);\n    byte[] maxTriangle = box(20, 10, 30, 15);\n\n    Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 10.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, 4.9, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 20.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(9.9, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(5, 25, 3, 13));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntersectOptimization() {\n    byte[] minTriangle = box(0, 0, 10, 5);\n    byte[] maxTriangle = box(20, 10, 30, 15);\n\n    Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 10.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, 4.9, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 20.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(9.9, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(5, 25, 3, 13));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","sourceNew":"  public void testIntersectOptimization() {\n    byte[] minTriangle = box(0, 0, 10, 5);\n    byte[] maxTriangle = box(20, 10, 30, 15);\n\n    Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 10.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, 4.9, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 20.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(9.9, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(5, 25, 3, 13));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n  }\n\n","sourceOld":"  public void testIntersectOptimization() {\n    byte[] minTriangle = box(0, 0, 10, 5);\n    byte[] maxTriangle = box(20, 10, 30, 15);\n\n    Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 10.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, 4.9, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 20.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(9.9, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(5, 25, 3, 13));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5e32619a05801247e931ce6b9998721600e247b0"],"5e32619a05801247e931ce6b9998721600e247b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e32619a05801247e931ce6b9998721600e247b0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e32619a05801247e931ce6b9998721600e247b0","b0b597c65628ca9e73913a07e81691f8229bae35"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e32619a05801247e931ce6b9998721600e247b0":["09c1e6d465800c73af60624bf9d4459a19f7940c","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}