{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasMetadata(String,String,String).mjava","commits":[{"id":"215e40821821b2df2e69355e208532c05ef095a5","date":1510858642,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasMetadata(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the value for some metadata on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param metadataKey the key for the metadata\n   * @param metadataValue the metadata to add/replace, null to remove the key.\n   *                      @return An immutable copy of the aliases with the new metadata.\n   */\n  public Aliases cloneWithCollectionAliasMetadata(String alias, String metadataKey, String metadataValue){\n    if (!collectionAliases.containsKey(alias)) {\n      throw new IllegalArgumentException(alias + \" is not a valid alias\");\n    }\n    if (metadataKey == null) {\n      throw new IllegalArgumentException(\"Null is not a valid metadata key\");\n    }\n    Map<String,Map<String,String>> newColMetadata = new LinkedHashMap<>(this.collectionAliasMetadata);//clone to modify\n    Map<String, String> newMetaMap = new LinkedHashMap<>(newColMetadata.getOrDefault(alias, Collections.emptyMap()));\n    if (metadataValue != null) {\n      newMetaMap.put(metadataKey, metadataValue);\n    } else {\n      newMetaMap.remove(metadataKey);\n    }\n    newColMetadata.put(alias, Collections.unmodifiableMap(newMetaMap));\n    return new Aliases(collectionAliases, newColMetadata, zNodeVersion);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691","date":1516909549,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasMetadata(String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasMetadata(String,String,String).mjava","sourceNew":"  /**\n   * Set the value for some metadata on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param metadataKey the key for the metadata\n   * @param metadataValue the metadata to add/replace, null to remove the key.\n   *                      @return An immutable copy of the aliases with the new metadata.\n   */\n  public Aliases cloneWithCollectionAliasMetadata(String alias, String metadataKey, String metadataValue) {\n    return cloneWithCollectionAliasMetadata(alias, Collections.singletonMap(metadataKey,metadataValue));\n  }\n\n","sourceOld":"  /**\n   * Set the value for some metadata on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param metadataKey the key for the metadata\n   * @param metadataValue the metadata to add/replace, null to remove the key.\n   *                      @return An immutable copy of the aliases with the new metadata.\n   */\n  public Aliases cloneWithCollectionAliasMetadata(String alias, String metadataKey, String metadataValue){\n    if (!collectionAliases.containsKey(alias)) {\n      throw new IllegalArgumentException(alias + \" is not a valid alias\");\n    }\n    if (metadataKey == null) {\n      throw new IllegalArgumentException(\"Null is not a valid metadata key\");\n    }\n    Map<String,Map<String,String>> newColMetadata = new LinkedHashMap<>(this.collectionAliasMetadata);//clone to modify\n    Map<String, String> newMetaMap = new LinkedHashMap<>(newColMetadata.getOrDefault(alias, Collections.emptyMap()));\n    if (metadataValue != null) {\n      newMetaMap.put(metadataKey, metadataValue);\n    } else {\n      newMetaMap.remove(metadataKey);\n    }\n    newColMetadata.put(alias, Collections.unmodifiableMap(newMetaMap));\n    return new Aliases(collectionAliases, newColMetadata, zNodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","date":1520865397,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasProperties(String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasMetadata(String,String,String).mjava","sourceNew":"  /**\n   * Set the value for some properties on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param propertiesKey the key for the properties\n   * @param propertiesValue the properties to add/replace, null to remove the key.\n   * @return An immutable copy of the aliases with the new properties.\n   */\n  public Aliases cloneWithCollectionAliasProperties(String alias, String propertiesKey, String propertiesValue) {\n    return cloneWithCollectionAliasProperties(alias, Collections.singletonMap(propertiesKey,propertiesValue));\n  }\n\n","sourceOld":"  /**\n   * Set the value for some metadata on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param metadataKey the key for the metadata\n   * @param metadataValue the metadata to add/replace, null to remove the key.\n   *                      @return An immutable copy of the aliases with the new metadata.\n   */\n  public Aliases cloneWithCollectionAliasMetadata(String alias, String metadataKey, String metadataValue) {\n    return cloneWithCollectionAliasMetadata(alias, Collections.singletonMap(metadataKey,metadataValue));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"215e40821821b2df2e69355e208532c05ef095a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["215e40821821b2df2e69355e208532c05ef095a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"]},"commit2Childs":{"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"215e40821821b2df2e69355e208532c05ef095a5":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["215e40821821b2df2e69355e208532c05ef095a5"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}