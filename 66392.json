{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testBackgroundOptimize().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testBackgroundOptimize().mjava","pathOld":"/dev/null","sourceNew":"    // Test calling optimize(false) whereby optimize is kicked\n    // off but we don't wait for it to finish (but\n    // writer.close()) does wait\n    public void testBackgroundOptimize() throws IOException {\n\n      Directory dir = new MockRAMDirectory();\n      for(int pass=0;pass<2;pass++) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergeScheduler(new ConcurrentMergeScheduler());\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(101);\n        for(int i=0;i<200;i++)\n          writer.addDocument(doc);\n        writer.optimize(false);\n\n        if (0 == pass) {\n          writer.close();\n          IndexReader reader = IndexReader.open(dir, true);\n          assertTrue(reader.isOptimized());\n          reader.close();\n        } else {\n          // Get another segment to flush so we can verify it is\n          // NOT included in the optimization\n          writer.addDocument(doc);\n          writer.addDocument(doc);\n          writer.close();\n\n          IndexReader reader = IndexReader.open(dir, true);\n          assertTrue(!reader.isOptimized());\n          reader.close();\n\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          assertEquals(2, infos.size());\n        }\n      }      \n\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testBackgroundOptimize().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testBackgroundOptimize().mjava","sourceNew":"    // Test calling optimize(false) whereby optimize is kicked\n    // off but we don't wait for it to finish (but\n    // writer.close()) does wait\n    public void testBackgroundOptimize() throws IOException {\n\n      Directory dir = new MockRAMDirectory();\n      for(int pass=0;pass<2;pass++) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergeScheduler(new ConcurrentMergeScheduler());\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(101);\n        for(int i=0;i<200;i++)\n          writer.addDocument(doc);\n        writer.optimize(false);\n\n        if (0 == pass) {\n          writer.close();\n          IndexReader reader = IndexReader.open(dir, true);\n          assertTrue(reader.isOptimized());\n          reader.close();\n        } else {\n          // Get another segment to flush so we can verify it is\n          // NOT included in the optimization\n          writer.addDocument(doc);\n          writer.addDocument(doc);\n          writer.close();\n\n          IndexReader reader = IndexReader.open(dir, true);\n          assertTrue(!reader.isOptimized());\n          reader.close();\n\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          assertEquals(2, infos.size());\n        }\n      }      \n\n      dir.close();\n    }\n\n","sourceOld":"    // Test calling optimize(false) whereby optimize is kicked\n    // off but we don't wait for it to finish (but\n    // writer.close()) does wait\n    public void testBackgroundOptimize() throws IOException {\n\n      Directory dir = new MockRAMDirectory();\n      for(int pass=0;pass<2;pass++) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergeScheduler(new ConcurrentMergeScheduler());\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(101);\n        for(int i=0;i<200;i++)\n          writer.addDocument(doc);\n        writer.optimize(false);\n\n        if (0 == pass) {\n          writer.close();\n          IndexReader reader = IndexReader.open(dir, true);\n          assertTrue(reader.isOptimized());\n          reader.close();\n        } else {\n          // Get another segment to flush so we can verify it is\n          // NOT included in the optimization\n          writer.addDocument(doc);\n          writer.addDocument(doc);\n          writer.close();\n\n          IndexReader reader = IndexReader.open(dir, true);\n          assertTrue(!reader.isOptimized());\n          reader.close();\n\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          assertEquals(2, infos.size());\n        }\n      }      \n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}