{"path":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","commits":[{"id":"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","date":1262055526,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180\n   * @param latLon A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double [] latLon, String latLonStr) {\n    if (latLon == null){\n      latLon = new double[2];\n    }\n    String[] toks = DistanceUtils.parsePoint(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4289a1f64dea17529773bb2e2b0565818bc289df","date":1262618826,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    String[] toks = DistanceUtils.parsePoint(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180\n   * @param latLon A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double [] latLon, String latLonStr) {\n    if (latLon == null){\n      latLon = new double[2];\n    }\n    String[] toks = DistanceUtils.parsePoint(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"705f33e5fdd5faefb06e318ed968763f66e8a2b0","date":1262624396,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    String[] toks = DistanceUtils.parsePoint(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"705f33e5fdd5faefb06e318ed968763f66e8a2b0":["4289a1f64dea17529773bb2e2b0565818bc289df"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4289a1f64dea17529773bb2e2b0565818bc289df":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"ad94625fb8d088209f46650c8097196fec67f00c":["705f33e5fdd5faefb06e318ed968763f66e8a2b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"705f33e5fdd5faefb06e318ed968763f66e8a2b0":["ad94625fb8d088209f46650c8097196fec67f00c"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["4289a1f64dea17529773bb2e2b0565818bc289df"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4289a1f64dea17529773bb2e2b0565818bc289df":["705f33e5fdd5faefb06e318ed968763f66e8a2b0"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}