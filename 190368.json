{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","commits":[{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context) throws IOException {\n\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5b41794e5cd740aabac0bb2c3b20522a44e8769","date":1314211674,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   * <p>\n   * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["f5b41794e5cd740aabac0bb2c3b20522a44e8769"],"67aadace85f701c87a4e0721eedcda25d8415a70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f5b41794e5cd740aabac0bb2c3b20522a44e8769":["67aadace85f701c87a4e0721eedcda25d8415a70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"67aadace85f701c87a4e0721eedcda25d8415a70":["f5b41794e5cd740aabac0bb2c3b20522a44e8769"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67aadace85f701c87a4e0721eedcda25d8415a70"],"f5b41794e5cd740aabac0bb2c3b20522a44e8769":["24230fe54121f9be9d85f2c2067536296785e421"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}