{"path":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","commits":[{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(otherVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} Failing due to needing too many updates:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(otherVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} Failing due to needing too many updates:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(otherVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} Failing due to needing too many updates:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"425c2986e128f9e4aadd629cdf3b04e7aacb7c80","date":1536202585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","sourceNew":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(otherVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} PeerSync will fail because number of missed updates is more than:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","sourceOld":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(otherVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} Failing due to needing too many updates:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce70cdb9511a671e0e15d4dc93b8334c86b6e681","date":1542017422,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","sourceNew":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh && ourHighest >= otherHighest) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(otherVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} PeerSync will fail because number of missed updates is more than:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","sourceOld":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(otherVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} PeerSync will fail because number of missed updates is more than:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","bugFix":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38d3299f414132db022cec9d60b2dafc244a7c3","date":1597046674,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","sourceNew":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh && ourHighest >= otherHighest) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} PeerSync will fail because number of missed updates is more than:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","sourceOld":"    public MissedUpdatesRequest find(List<Long> otherVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      otherVersions.sort(absComparator);\n      if (debug) {\n        log.debug(\"{} sorted versions from {} = {}\", logPrefix, otherVersions, updateFrom);\n      }\n\n      long otherHigh = percentile(otherVersions, .2f);\n      long otherLow = percentile(otherVersions, .8f);\n      long otherHighest = otherVersions.get(0);\n\n      if (ourHighThreshold < otherLow) {\n        // Small overlap between version windows and ours is older\n        // This means that we might miss updates if we attempted to use this method.\n        // Since there exists just one replica that is so much newer, we must\n        // fail the sync.\n        log.info(\"{} Our versions are too old. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (ourLowThreshold > otherHigh && ourHighest >= otherHighest) {\n        // Small overlap between windows and ours is newer.\n        // Using this list to sync would result in requesting/replaying results we don't need\n        // and possibly bringing deleted docs back to life.\n        log.info(\"{} Our versions are newer. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n\n        // Because our versions are newer, IndexFingerprint with the remote would not match us.\n        // We return true on our side, but the remote peersync with us should fail.\n        return MissedUpdatesRequest.ALREADY_IN_SYNC;\n      }\n\n      boolean completeList = otherVersions.size() < nUpdates;\n\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(otherVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(otherVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} PeerSync will fail because number of missed updates is more than:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested. ourHighThreshold={} otherLowThreshold={} ourHighest={} otherHighest={}\",\n            logPrefix, ourHighThreshold, otherLow, ourHighest, otherHighest);\n      }\n\n      return updatesRequest;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c38d3299f414132db022cec9d60b2dafc244a7c3":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"425c2986e128f9e4aadd629cdf3b04e7aacb7c80":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["425c2986e128f9e4aadd629cdf3b04e7aacb7c80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"c38d3299f414132db022cec9d60b2dafc244a7c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"425c2986e128f9e4aadd629cdf3b04e7aacb7c80":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["425c2986e128f9e4aadd629cdf3b04e7aacb7c80","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}