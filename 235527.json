{"path":"lucene/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","commits":[{"id":"ef5cb5bb242392bf1b62f64e8645c090d51cc77a","date":1316168618,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef5cb5bb242392bf1b62f64e8645c090d51cc77a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ef5cb5bb242392bf1b62f64e8645c090d51cc77a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ef5cb5bb242392bf1b62f64e8645c090d51cc77a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef5cb5bb242392bf1b62f64e8645c090d51cc77a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}