{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}