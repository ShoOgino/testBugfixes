{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b96ebf39aa5127497a01b3456891ab9a50957ce","date":1334631103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \", df));\n  }\n\n","bugFix":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0b96ebf39aa5127497a01b3456891ab9a50957ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b96ebf39aa5127497a01b3456891ab9a50957ce":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["0b96ebf39aa5127497a01b3456891ab9a50957ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"0b96ebf39aa5127497a01b3456891ab9a50957ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}