{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#generateTupleList(Tuple).mjava","commits":[{"id":"d492b24eb91b29b3fb6bca5b158bec326fbc12df","date":1490042446,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#generateTupleList(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  private LinkedList<Tuple> generateTupleList(Tuple original) throws IOException{\n    Map<String, Object> evaluatedValues = new HashMap<>();\n    \n    for(NamedEvaluator evaluator : evaluators){\n      evaluatedValues.put(evaluator.getName(), evaluator.getEvaluator().evaluate(original));\n    }\n    \n    // use an array list internally because it has better sort performance\n    // in Java 8. We do pay a conversion to a linked list but ..... oh well\n    ArrayList<Tuple> generatedTupleList = new ArrayList<>();\n    \n    int[] workingIndexes = new int[evaluators.size()]; // java language spec ensures all values are 0\n    do{\n      Tuple generated = original.clone();\n      for(int offset = 0; offset < workingIndexes.length; ++offset){\n        String fieldName = evaluators.get(offset).getName();\n        Object evaluatedValue = evaluatedValues.get(fieldName);\n        if(evaluatedValue instanceof Collection){\n          // because of the way a FieldEvaluator works we know that \n          // any collection is a list.\n          generated.put(fieldName, ((List<Object>)evaluatedValue).get(workingIndexes[offset]));\n        }\n      }\n      generatedTupleList.add(generated);\n    }while(iterate(evaluators, workingIndexes, evaluatedValues));\n    \n    // order if we need to\n    if(null != orderBy){\n      generatedTupleList.sort(orderBy);\n    }\n    \n    return new LinkedList<>(generatedTupleList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"869bbd0c59fee20268facd5a2e0d3c77e34500ed","date":1490280012,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#generateTupleList(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  private LinkedList<Tuple> generateTupleList(Tuple original) throws IOException{\n    Map<String, Object> evaluatedValues = new HashMap<>();\n    \n    for(NamedEvaluator evaluator : evaluators){\n      evaluatedValues.put(evaluator.getName(), evaluator.getEvaluator().evaluate(original));\n    }\n    \n    // use an array list internally because it has better sort performance\n    // in Java 8. We do pay a conversion to a linked list but ..... oh well\n    ArrayList<Tuple> generatedTupleList = new ArrayList<>();\n    \n    int[] workingIndexes = new int[evaluators.size()]; // java language spec ensures all values are 0\n    do{\n      Tuple generated = original.clone();\n      for(int offset = 0; offset < workingIndexes.length; ++offset){\n        String fieldName = evaluators.get(offset).getName();\n        Object evaluatedValue = evaluatedValues.get(fieldName);\n        if(evaluatedValue instanceof Collection){\n          // because of the way a FieldEvaluator works we know that \n          // any collection is a list.\n          generated.put(fieldName, ((List<Object>)evaluatedValue).get(workingIndexes[offset]));\n        }\n      }\n      generatedTupleList.add(generated);\n    }while(iterate(evaluators, workingIndexes, evaluatedValues));\n    \n    // order if we need to\n    if(null != orderBy){\n      generatedTupleList.sort(orderBy);\n    }\n    \n    return new LinkedList<>(generatedTupleList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#generateTupleList(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#generateTupleList(Tuple).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private LinkedList<Tuple> generateTupleList(Tuple original) throws IOException{\n    Map<String, Object> evaluatedValues = new HashMap<>();\n    \n    for(NamedEvaluator evaluator : evaluators){\n      evaluatedValues.put(evaluator.getName(), evaluator.getEvaluator().evaluate(original));\n    }\n    \n    // use an array list internally because it has better sort performance\n    // in Java 8. We do pay a conversion to a linked list but ..... oh well\n    ArrayList<Tuple> generatedTupleList = new ArrayList<>();\n    \n    int[] workingIndexes = new int[evaluators.size()]; // java language spec ensures all values are 0\n    do{\n      Tuple generated = original.clone();\n      for(int offset = 0; offset < workingIndexes.length; ++offset){\n        String fieldName = evaluators.get(offset).getName();\n        Object evaluatedValue = evaluatedValues.get(fieldName);\n        if(evaluatedValue instanceof Collection){\n          // because of the way a FieldEvaluator works we know that \n          // any collection is a list.\n          generated.put(fieldName, ((List<Object>)evaluatedValue).get(workingIndexes[offset]));\n        }\n      }\n      generatedTupleList.add(generated);\n    }while(iterate(evaluators, workingIndexes, evaluatedValues));\n    \n    // order if we need to\n    if(null != orderBy){\n      generatedTupleList.sort(orderBy);\n    }\n    \n    return new LinkedList<>(generatedTupleList);\n  }\n\n","sourceOld":"  private LinkedList<Tuple> generateTupleList(Tuple original) throws IOException{\n    Map<String, Object> evaluatedValues = new HashMap<>();\n    \n    for(NamedEvaluator evaluator : evaluators){\n      evaluatedValues.put(evaluator.getName(), evaluator.getEvaluator().evaluate(original));\n    }\n    \n    // use an array list internally because it has better sort performance\n    // in Java 8. We do pay a conversion to a linked list but ..... oh well\n    ArrayList<Tuple> generatedTupleList = new ArrayList<>();\n    \n    int[] workingIndexes = new int[evaluators.size()]; // java language spec ensures all values are 0\n    do{\n      Tuple generated = original.clone();\n      for(int offset = 0; offset < workingIndexes.length; ++offset){\n        String fieldName = evaluators.get(offset).getName();\n        Object evaluatedValue = evaluatedValues.get(fieldName);\n        if(evaluatedValue instanceof Collection){\n          // because of the way a FieldEvaluator works we know that \n          // any collection is a list.\n          generated.put(fieldName, ((List<Object>)evaluatedValue).get(workingIndexes[offset]));\n        }\n      }\n      generatedTupleList.add(generated);\n    }while(iterate(evaluators, workingIndexes, evaluatedValues));\n    \n    // order if we need to\n    if(null != orderBy){\n      generatedTupleList.sort(orderBy);\n    }\n    \n    return new LinkedList<>(generatedTupleList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"869bbd0c59fee20268facd5a2e0d3c77e34500ed":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["869bbd0c59fee20268facd5a2e0d3c77e34500ed","d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["869bbd0c59fee20268facd5a2e0d3c77e34500ed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}