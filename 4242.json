{"path":"lucene/src/java/org/apache/lucene/index/IndexReaderPool#get(SegmentInfo,boolean,int,int).mjava","commits":[{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Obtain a SegmentReader from the readerPool.  The reader\n   * must be returned by calling {@link #release(SegmentReader)}\n   * \n   * @see #release(SegmentReader)\n   * @param info\n   * @param doOpenStores\n   * @param readBufferSize\n   * @param termsIndexDivisor\n   * @throws IOException\n   */\n  public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n    if (writer.poolReaders) {\n      readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n    }\n\n    SegmentReader sr = readerMap.get(info);\n    if (sr == null) {\n      // TODO: we may want to avoid doing this while\n      // synchronized\n      // Returns a ref, which we xfer to readerMap:\n      sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor, config.getCodecProvider());\n\n      if (info.dir == directory) {\n        // Only pool if reader is not external\n        readerMap.put(info, sr);\n      }\n    } else {\n      if (doOpenStores) {\n        sr.openDocStores();\n      }\n      if (termsIndexDivisor != -1) {\n        // If this reader was originally opened because we\n        // needed to merge it, we didn't load the terms\n        // index.  But now, if the caller wants the terms\n        // index (eg because it's doing deletes, or an NRT\n        // reader is being opened) we ask the reader to\n        // load its terms index.\n        sr.loadTermsIndex(termsIndexDivisor);\n      }\n    }\n\n    // Return a ref to our caller\n    if (info.dir == directory) {\n      // Only incRef if we pooled (reader is not external)\n      sr.incRef();\n    }\n    return sr;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ca38aecd0204be91049ec782668f642a68d9935","date":1292975343,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Obtain a SegmentReader from the readerPool.  The reader\n   * must be returned by calling {@link #release(SegmentReader)}\n   * \n   * @see #release(SegmentReader)\n   * @param info\n   * @param doOpenStores\n   * @param readBufferSize\n   * @param termsIndexDivisor\n   * @throws IOException\n   */\n  public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n    if (writer.poolReaders) {\n      readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n    }\n\n    SegmentReader sr = readerMap.get(info);\n    if (sr == null) {\n      // TODO: we may want to avoid doing this while\n      // synchronized\n      // Returns a ref, which we xfer to readerMap:\n      sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor, config.getCodecProvider());\n\n      if (info.dir == directory) {\n        // Only pool if reader is not external\n        readerMap.put(info, sr);\n      }\n    } else {\n      if (doOpenStores) {\n        sr.openDocStores();\n      }\n      if (termsIndexDivisor != -1) {\n        // If this reader was originally opened because we\n        // needed to merge it, we didn't load the terms\n        // index.  But now, if the caller wants the terms\n        // index (eg because it's doing deletes, or an NRT\n        // reader is being opened) we ask the reader to\n        // load its terms index.\n        sr.loadTermsIndex(termsIndexDivisor);\n      }\n    }\n\n    // Return a ref to our caller\n    if (info.dir == directory) {\n      // Only incRef if we pooled (reader is not external)\n      sr.incRef();\n    }\n    return sr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ca38aecd0204be91049ec782668f642a68d9935":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1ca38aecd0204be91049ec782668f642a68d9935":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ef87af8c7bd0f8429622b83aa74202383f2e757","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["1ca38aecd0204be91049ec782668f642a68d9935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ca38aecd0204be91049ec782668f642a68d9935","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}