{"path":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin.LTRQParser#parse().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin.LTRQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Query parse() throws SyntaxError {\n      // ReRanking Model\n      final String modelName = localParams.get(LTRQParserPlugin.MODEL);\n      if ((modelName == null) || modelName.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Must provide model in the request\");\n      }\n\n      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);\n      if (ltrScoringModel == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"cannot find \" + LTRQParserPlugin.MODEL + \" \" + modelName);\n      }\n\n      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();\n      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);\n      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      // Check if features are requested and if the model feature store and feature-transform feature store are the same\n      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;\n\n      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,\n          extractEFIParams(localParams),\n          featuresRequestedFromSameStore, threadManager);\n\n      // Enable the feature vector caching if we are extracting features, and the features\n      // we requested are the same ones we are reranking with\n      if (featuresRequestedFromSameStore) {\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);\n\n      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);\n      reRankDocs = Math.max(1, reRankDocs);\n\n      // External features\n      scoringQuery.setRequest(req);\n\n      return new LTRQuery(scoringQuery, reRankDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin.LTRQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Query parse() throws SyntaxError {\n      // ReRanking Model\n      final String modelName = localParams.get(LTRQParserPlugin.MODEL);\n      if ((modelName == null) || modelName.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Must provide model in the request\");\n      }\n\n      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);\n      if (ltrScoringModel == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"cannot find \" + LTRQParserPlugin.MODEL + \" \" + modelName);\n      }\n\n      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();\n      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);\n      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      // Check if features are requested and if the model feature store and feature-transform feature store are the same\n      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;\n\n      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,\n          extractEFIParams(localParams),\n          featuresRequestedFromSameStore, threadManager);\n\n      // Enable the feature vector caching if we are extracting features, and the features\n      // we requested are the same ones we are reranking with\n      if (featuresRequestedFromSameStore) {\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);\n\n      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);\n      reRankDocs = Math.max(1, reRankDocs);\n\n      // External features\n      scoringQuery.setRequest(req);\n\n      return new LTRQuery(scoringQuery, reRankDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c47b34f7e188983bde2e285d3a8318970b5fda8","date":1478891879,"type":3,"author":"Michael Nilsson","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin.LTRQParser#parse().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin.LTRQParser#parse().mjava","sourceNew":"    @Override\n    public Query parse() throws SyntaxError {\n      // ReRanking Model\n      final String modelName = localParams.get(LTRQParserPlugin.MODEL);\n      if ((modelName == null) || modelName.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Must provide model in the request\");\n      }\n\n      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);\n      if (ltrScoringModel == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"cannot find \" + LTRQParserPlugin.MODEL + \" \" + modelName);\n      }\n\n      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();\n      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);\n      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      // Check if features are requested and if the model feature store and feature-transform feature store are the same\n      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;\n\n      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,\n          extractEFIParams(localParams),\n          featuresRequestedFromSameStore, threadManager);\n\n      // Enable the feature vector caching if we are extracting features, and the features\n      // we requested are the same ones we are reranking with\n      if (featuresRequestedFromSameStore) {\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);\n\n      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);\n      if (reRankDocs <= 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Must rerank at least 1 document\");\n      }\n\n      // External features\n      scoringQuery.setRequest(req);\n\n      return new LTRQuery(scoringQuery, reRankDocs);\n    }\n\n","sourceOld":"    @Override\n    public Query parse() throws SyntaxError {\n      // ReRanking Model\n      final String modelName = localParams.get(LTRQParserPlugin.MODEL);\n      if ((modelName == null) || modelName.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Must provide model in the request\");\n      }\n\n      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);\n      if (ltrScoringModel == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"cannot find \" + LTRQParserPlugin.MODEL + \" \" + modelName);\n      }\n\n      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();\n      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);\n      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      // Check if features are requested and if the model feature store and feature-transform feature store are the same\n      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;\n\n      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,\n          extractEFIParams(localParams),\n          featuresRequestedFromSameStore, threadManager);\n\n      // Enable the feature vector caching if we are extracting features, and the features\n      // we requested are the same ones we are reranking with\n      if (featuresRequestedFromSameStore) {\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);\n\n      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);\n      reRankDocs = Math.max(1, reRankDocs);\n\n      // External features\n      scoringQuery.setRequest(req);\n\n      return new LTRQuery(scoringQuery, reRankDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e","date":1478891880,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/search/LTRQParserPlugin.LTRQParser#parse().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin.LTRQParser#parse().mjava","sourceNew":"    @Override\n    public Query parse() throws SyntaxError {\n      // ReRanking Model\n      final String modelName = localParams.get(LTRQParserPlugin.MODEL);\n      if ((modelName == null) || modelName.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Must provide model in the request\");\n      }\n\n      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);\n      if (ltrScoringModel == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"cannot find \" + LTRQParserPlugin.MODEL + \" \" + modelName);\n      }\n\n      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();\n      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);\n      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      // Check if features are requested and if the model feature store and feature-transform feature store are the same\n      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;\n\n      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,\n          extractEFIParams(localParams),\n          featuresRequestedFromSameStore, threadManager);\n\n      // Enable the feature vector caching if we are extracting features, and the features\n      // we requested are the same ones we are reranking with\n      if (featuresRequestedFromSameStore) {\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);\n\n      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);\n      if (reRankDocs <= 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Must rerank at least 1 document\");\n      }\n\n      // External features\n      scoringQuery.setRequest(req);\n\n      return new LTRQuery(scoringQuery, reRankDocs);\n    }\n\n","sourceOld":"    @Override\n    public Query parse() throws SyntaxError {\n      // ReRanking Model\n      final String modelName = localParams.get(LTRQParserPlugin.MODEL);\n      if ((modelName == null) || modelName.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Must provide model in the request\");\n      }\n\n      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);\n      if (ltrScoringModel == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"cannot find \" + LTRQParserPlugin.MODEL + \" \" + modelName);\n      }\n\n      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();\n      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);\n      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      // Check if features are requested and if the model feature store and feature-transform feature store are the same\n      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;\n\n      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,\n          extractEFIParams(localParams),\n          featuresRequestedFromSameStore, threadManager);\n\n      // Enable the feature vector caching if we are extracting features, and the features\n      // we requested are the same ones we are reranking with\n      if (featuresRequestedFromSameStore) {\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);\n\n      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);\n      if (reRankDocs <= 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Must rerank at least 1 document\");\n      }\n\n      // External features\n      scoringQuery.setRequest(req);\n\n      return new LTRQuery(scoringQuery, reRankDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2459db523605752a3affcf444fb717d625904488","date":1478970978,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/search/LTRQParserPlugin.LTRQParser#parse().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin.LTRQParser#parse().mjava","sourceNew":"    @Override\n    public Query parse() throws SyntaxError {\n      // ReRanking Model\n      final String modelName = localParams.get(LTRQParserPlugin.MODEL);\n      if ((modelName == null) || modelName.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Must provide model in the request\");\n      }\n\n      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);\n      if (ltrScoringModel == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"cannot find \" + LTRQParserPlugin.MODEL + \" \" + modelName);\n      }\n\n      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();\n      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);\n      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      // Check if features are requested and if the model feature store and feature-transform feature store are the same\n      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;\n\n      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,\n          extractEFIParams(localParams),\n          featuresRequestedFromSameStore, threadManager);\n\n      // Enable the feature vector caching if we are extracting features, and the features\n      // we requested are the same ones we are reranking with\n      if (featuresRequestedFromSameStore) {\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);\n\n      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);\n      if (reRankDocs <= 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Must rerank at least 1 document\");\n      }\n\n      // External features\n      scoringQuery.setRequest(req);\n\n      return new LTRQuery(scoringQuery, reRankDocs);\n    }\n\n","sourceOld":"    @Override\n    public Query parse() throws SyntaxError {\n      // ReRanking Model\n      final String modelName = localParams.get(LTRQParserPlugin.MODEL);\n      if ((modelName == null) || modelName.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Must provide model in the request\");\n      }\n\n      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);\n      if (ltrScoringModel == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"cannot find \" + LTRQParserPlugin.MODEL + \" \" + modelName);\n      }\n\n      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();\n      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);\n      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      // Check if features are requested and if the model feature store and feature-transform feature store are the same\n      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;\n\n      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,\n          extractEFIParams(localParams),\n          featuresRequestedFromSameStore, threadManager);\n\n      // Enable the feature vector caching if we are extracting features, and the features\n      // we requested are the same ones we are reranking with\n      if (featuresRequestedFromSameStore) {\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);\n\n      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);\n      reRankDocs = Math.max(1, reRankDocs);\n\n      // External features\n      scoringQuery.setRequest(req);\n\n      return new LTRQuery(scoringQuery, reRankDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c47b34f7e188983bde2e285d3a8318970b5fda8":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e":["2c47b34f7e188983bde2e285d3a8318970b5fda8"],"2459db523605752a3affcf444fb717d625904488":["9720b151fde2073f4e401450f4574e5f31c2d0ff","eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["2c47b34f7e188983bde2e285d3a8318970b5fda8","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"2c47b34f7e188983bde2e285d3a8318970b5fda8":["eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["2459db523605752a3affcf444fb717d625904488"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e":["2459db523605752a3affcf444fb717d625904488","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2459db523605752a3affcf444fb717d625904488":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2459db523605752a3affcf444fb717d625904488","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}