{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":"  /**\n   * \n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int mergeFields() throws CorruptIndexException, IOException {\n\n    if (!mergeDocStores) {\n      // When we are not merging by doc stores, their field\n      // name -> number mapping are the same.  So, we start\n      // with the fieldInfos of the last segment in this\n      // case, to keep that numbering.\n      final SegmentReader sr = (SegmentReader) readers.get(readers.size()-1);\n      fieldInfos = (FieldInfos) sr.core.fieldInfos.clone();\n    } else {\n      fieldInfos = new FieldInfos();\t\t  // merge field names\n    }\n\n    for (IndexReader reader : readers) {\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        FieldInfos readerFieldInfos = segmentReader.fieldInfos();\n        int numReaderFieldInfos = readerFieldInfos.size();\n        for (int j = 0; j < numReaderFieldInfos; j++) {\n          FieldInfo fi = readerFieldInfos.fieldInfo(j);\n          fieldInfos.add(fi.name, fi.isIndexed, fi.storeTermVector,\n              fi.storePositionWithTermVector, fi.storeOffsetWithTermVector,\n              !reader.hasNorms(fi.name), fi.storePayloads,\n              fi.omitTermFreqAndPositions);\n        }\n      } else {\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), true, true, true, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_POSITION), true, true, false, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_OFFSET), true, false, true, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR), true, false, false, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.OMIT_TERM_FREQ_AND_POSITIONS), false, false, false, false, true);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.STORES_PAYLOADS), false, false, false, true, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.INDEXED), false, false, false, false, false);\n        fieldInfos.add(reader.getFieldNames(FieldOption.UNINDEXED), false);\n      }\n    }\n    fieldInfos.write(directory, segment + \".fnm\");\n\n    int docCount = 0;\n\n    setMatchingSegmentReaders();\n\n    if (mergeDocStores) {\n      // merge field values\n      final FieldsWriter fieldsWriter = new FieldsWriter(directory, segment, fieldInfos);\n\n      try {\n        int idx = 0;\n        for (IndexReader reader : readers) {\n          final SegmentReader matchingSegmentReader = matchingSegmentReaders[idx++];\n          FieldsReader matchingFieldsReader = null;\n          if (matchingSegmentReader != null) {\n            final FieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n            if (fieldsReader != null && fieldsReader.canReadRawDocs()) {            \n              matchingFieldsReader = fieldsReader;\n            }\n          }\n          if (reader.hasDeletions()) {\n            docCount += copyFieldsWithDeletions(fieldsWriter,\n                                                reader, matchingFieldsReader);\n          } else {\n            docCount += copyFieldsNoDeletions(fieldsWriter,\n                                              reader, matchingFieldsReader);\n          }\n        }\n      } finally {\n        fieldsWriter.close();\n      }\n\n      final String fileName = segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION;\n      final long fdxFileLength = directory.fileLength(fileName);\n\n      if (4+((long) docCount)*8 != fdxFileLength)\n        // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n        // we detect that the bug has struck, here, and\n        // throw an exception to prevent the corruption from\n        // entering the index.  See LUCENE-1282 for\n        // details.\n        throw new RuntimeException(\"mergeFields produced an invalid result: docCount is \" + docCount + \" but fdx file size is \" + fdxFileLength + \" file=\" + fileName + \" file exists?=\" + directory.fileExists(fileName) + \"; now aborting this merge to prevent index corruption\");\n\n    } else\n      // If we are skipping the doc stores, that means there\n      // are no deletions in any of these segments, so we\n      // just sum numDocs() of each segment to get total docCount\n      for (final IndexReader reader : readers) {\n        docCount += reader.numDocs();\n      }\n\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * \n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int mergeFields() throws CorruptIndexException, IOException {\n\n    if (!mergeDocStores) {\n      // When we are not merging by doc stores, their field\n      // name -> number mapping are the same.  So, we start\n      // with the fieldInfos of the last segment in this\n      // case, to keep that numbering.\n      final SegmentReader sr = (SegmentReader) readers.get(readers.size()-1);\n      fieldInfos = (FieldInfos) sr.core.fieldInfos.clone();\n    } else {\n      fieldInfos = new FieldInfos();\t\t  // merge field names\n    }\n\n    for (IndexReader reader : readers) {\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        FieldInfos readerFieldInfos = segmentReader.fieldInfos();\n        int numReaderFieldInfos = readerFieldInfos.size();\n        for (int j = 0; j < numReaderFieldInfos; j++) {\n          FieldInfo fi = readerFieldInfos.fieldInfo(j);\n          fieldInfos.add(fi.name, fi.isIndexed, fi.storeTermVector,\n              fi.storePositionWithTermVector, fi.storeOffsetWithTermVector,\n              !reader.hasNorms(fi.name), fi.storePayloads,\n              fi.omitTermFreqAndPositions);\n        }\n      } else {\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), true, true, true, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_POSITION), true, true, false, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_OFFSET), true, false, true, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR), true, false, false, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.OMIT_TERM_FREQ_AND_POSITIONS), false, false, false, false, true);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.STORES_PAYLOADS), false, false, false, true, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.INDEXED), false, false, false, false, false);\n        fieldInfos.add(reader.getFieldNames(FieldOption.UNINDEXED), false);\n      }\n    }\n    fieldInfos.write(directory, segment + \".fnm\");\n\n    int docCount = 0;\n\n    setMatchingSegmentReaders();\n\n    if (mergeDocStores) {\n      // merge field values\n      final FieldsWriter fieldsWriter = new FieldsWriter(directory, segment, fieldInfos);\n\n      try {\n        int idx = 0;\n        for (IndexReader reader : readers) {\n          final SegmentReader matchingSegmentReader = matchingSegmentReaders[idx++];\n          FieldsReader matchingFieldsReader = null;\n          if (matchingSegmentReader != null) {\n            final FieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n            if (fieldsReader != null && fieldsReader.canReadRawDocs()) {            \n              matchingFieldsReader = fieldsReader;\n            }\n          }\n          if (reader.hasDeletions()) {\n            docCount += copyFieldsWithDeletions(fieldsWriter,\n                                                reader, matchingFieldsReader);\n          } else {\n            docCount += copyFieldsNoDeletions(fieldsWriter,\n                                              reader, matchingFieldsReader);\n          }\n        }\n      } finally {\n        fieldsWriter.close();\n      }\n\n      final String fileName = segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION;\n      final long fdxFileLength = directory.fileLength(fileName);\n\n      if (4+((long) docCount)*8 != fdxFileLength)\n        // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n        // we detect that the bug has struck, here, and\n        // throw an exception to prevent the corruption from\n        // entering the index.  See LUCENE-1282 for\n        // details.\n        throw new RuntimeException(\"mergeFields produced an invalid result: docCount is \" + docCount + \" but fdx file size is \" + fdxFileLength + \" file=\" + fileName + \" file exists?=\" + directory.fileExists(fileName) + \"; now aborting this merge to prevent index corruption\");\n\n    } else\n      // If we are skipping the doc stores, that means there\n      // are no deletions in any of these segments, so we\n      // just sum numDocs() of each segment to get total docCount\n      for (final IndexReader reader : readers) {\n        docCount += reader.numDocs();\n      }\n\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeFields().mjava","sourceNew":null,"sourceOld":"  /**\n   * \n   * @return The number of documents in all of the readers\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int mergeFields() throws CorruptIndexException, IOException {\n\n    if (!mergeDocStores) {\n      // When we are not merging by doc stores, their field\n      // name -> number mapping are the same.  So, we start\n      // with the fieldInfos of the last segment in this\n      // case, to keep that numbering.\n      final SegmentReader sr = (SegmentReader) readers.get(readers.size()-1);\n      fieldInfos = (FieldInfos) sr.core.fieldInfos.clone();\n    } else {\n      fieldInfos = new FieldInfos();\t\t  // merge field names\n    }\n\n    for (IndexReader reader : readers) {\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        FieldInfos readerFieldInfos = segmentReader.fieldInfos();\n        int numReaderFieldInfos = readerFieldInfos.size();\n        for (int j = 0; j < numReaderFieldInfos; j++) {\n          FieldInfo fi = readerFieldInfos.fieldInfo(j);\n          fieldInfos.add(fi.name, fi.isIndexed, fi.storeTermVector,\n              fi.storePositionWithTermVector, fi.storeOffsetWithTermVector,\n              !reader.hasNorms(fi.name), fi.storePayloads,\n              fi.omitTermFreqAndPositions);\n        }\n      } else {\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), true, true, true, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_POSITION), true, true, false, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR_WITH_OFFSET), true, false, true, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.TERMVECTOR), true, false, false, false, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.OMIT_TERM_FREQ_AND_POSITIONS), false, false, false, false, true);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.STORES_PAYLOADS), false, false, false, true, false);\n        addIndexed(reader, fieldInfos, reader.getFieldNames(FieldOption.INDEXED), false, false, false, false, false);\n        fieldInfos.add(reader.getFieldNames(FieldOption.UNINDEXED), false);\n      }\n    }\n    fieldInfos.write(directory, segment + \".fnm\");\n\n    int docCount = 0;\n\n    setMatchingSegmentReaders();\n\n    if (mergeDocStores) {\n      // merge field values\n      final FieldsWriter fieldsWriter = new FieldsWriter(directory, segment, fieldInfos);\n\n      try {\n        int idx = 0;\n        for (IndexReader reader : readers) {\n          final SegmentReader matchingSegmentReader = matchingSegmentReaders[idx++];\n          FieldsReader matchingFieldsReader = null;\n          if (matchingSegmentReader != null) {\n            final FieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n            if (fieldsReader != null && fieldsReader.canReadRawDocs()) {            \n              matchingFieldsReader = fieldsReader;\n            }\n          }\n          if (reader.hasDeletions()) {\n            docCount += copyFieldsWithDeletions(fieldsWriter,\n                                                reader, matchingFieldsReader);\n          } else {\n            docCount += copyFieldsNoDeletions(fieldsWriter,\n                                              reader, matchingFieldsReader);\n          }\n        }\n      } finally {\n        fieldsWriter.close();\n      }\n\n      final String fileName = segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION;\n      final long fdxFileLength = directory.fileLength(fileName);\n\n      if (4+((long) docCount)*8 != fdxFileLength)\n        // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n        // we detect that the bug has struck, here, and\n        // throw an exception to prevent the corruption from\n        // entering the index.  See LUCENE-1282 for\n        // details.\n        throw new RuntimeException(\"mergeFields produced an invalid result: docCount is \" + docCount + \" but fdx file size is \" + fdxFileLength + \" file=\" + fileName + \" file exists?=\" + directory.fileExists(fileName) + \"; now aborting this merge to prevent index corruption\");\n\n    } else\n      // If we are skipping the doc stores, that means there\n      // are no deletions in any of these segments, so we\n      // just sum numDocs() of each segment to get total docCount\n      for (final IndexReader reader : readers) {\n        docCount += reader.numDocs();\n      }\n\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}