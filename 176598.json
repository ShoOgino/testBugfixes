{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","commits":[{"id":"dddb2c2ed096135b31cff8907f24ca2f5db46562","date":1413882711,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms aren't cached, so we can change the Similarity\n    mi.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["03f665d0b9240c1ee79baeac03a20def3275d816"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms aren't cached, so we can change the Similarity\n    mi.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f657d9837900f4519ca1cbd5e98d86d4bba4dab","date":1417790596,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms aren't cached, so we can change the Similarity\n    mi.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03f665d0b9240c1ee79baeac03a20def3275d816","date":1428405689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n\n  }\n\n","bugFix":["dddb2c2ed096135b31cff8907f24ca2f5db46562"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    float n1 = reader.getNormValues(\"f1\").get(0);\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    float n2 = reader.getNormValues(\"f1\").get(0);\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new Similarity() {\n\n      @Override\n      public long computeNorm(FieldInvertState state) {\n        return 74;\n      }\n\n      @Override\n      public SimWeight computeWeight(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new Similarity() {\n\n      @Override\n      public long computeNorm(FieldInvertState state) {\n        return 74;\n      }\n\n      @Override\n      public SimWeight computeWeight(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float lengthNorm(FieldInvertState state) {\n        return 74;\n      }\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new Similarity() {\n\n      @Override\n      public long computeNorm(FieldInvertState state) {\n        return 74;\n      }\n\n      @Override\n      public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {\n        throw new UnsupportedOperationException();\n      }\n\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new Similarity() {\n\n      @Override\n      public long computeNorm(FieldInvertState state) {\n        return 74;\n      }\n\n      @Override\n      public SimWeight computeWeight(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSimilarities().mjava","sourceNew":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new Similarity() {\n\n      @Override\n      public long computeNorm(FieldInvertState state) {\n        return 74;\n      }\n\n      @Override\n      public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {\n        throw new UnsupportedOperationException();\n      }\n\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @Test\n  public void testSimilarities() throws IOException {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"a long text field that contains many many terms\", analyzer);\n\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    NumericDocValues norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n1 = norms.longValue();\n\n    // Norms are re-computed when we change the Similarity\n    mi.setSimilarity(new Similarity() {\n\n      @Override\n      public long computeNorm(FieldInvertState state) {\n        return 74;\n      }\n\n      @Override\n      public SimWeight computeWeight(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n    });\n    norms = reader.getNormValues(\"f1\");\n    assertEquals(0, norms.nextDoc());\n    float n2 = norms.longValue();\n\n    assertTrue(n1 != n2);\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["615370d2b876c3435773b5174df2e2242ad7981a","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"03f665d0b9240c1ee79baeac03a20def3275d816":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["03f665d0b9240c1ee79baeac03a20def3275d816"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["dddb2c2ed096135b31cff8907f24ca2f5db46562"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["615370d2b876c3435773b5174df2e2242ad7981a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","615370d2b876c3435773b5174df2e2242ad7981a"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dddb2c2ed096135b31cff8907f24ca2f5db46562"],"615370d2b876c3435773b5174df2e2242ad7981a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dddb2c2ed096135b31cff8907f24ca2f5db46562":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81d0720146de53dd3a4a023d2a3d1089d86d748d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03f665d0b9240c1ee79baeac03a20def3275d816":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["03f665d0b9240c1ee79baeac03a20def3275d816"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"615370d2b876c3435773b5174df2e2242ad7981a":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6","e9017cf144952056066919f1ebc7897ff9bd71b1"],"dddb2c2ed096135b31cff8907f24ca2f5db46562":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","dddb2c2ed096135b31cff8907f24ca2f5db46562"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}