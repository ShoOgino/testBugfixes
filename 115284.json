{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestBugInSomething#testWrapping().mjava","commits":[{"id":"2602029912c6a4c1b72fa240b2973eca21d0b09c","date":1334576616,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestBugInSomething#testWrapping().mjava","pathOld":"/dev/null","sourceNew":"  public void testWrapping() throws Exception {\n    CharStream cs = new TestRandomChains.CheckThatYouDidntReadAnythingReaderWrapper(wrappedStream);\n    try {\n      cs.mark(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"mark(int)\", e.getMessage());\n    }\n    \n    try {\n      cs.markSupported();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"markSupported()\", e.getMessage());\n    }\n    \n    try {\n      cs.read();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read()\", e.getMessage());\n    }\n    \n    try {\n      cs.read(new char[0]);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(char[])\", e.getMessage());\n    }\n    \n    try {\n      cs.read(CharBuffer.wrap(new char[0]));\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(CharBuffer)\", e.getMessage());\n    }\n    \n    try {\n      cs.reset();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"reset()\", e.getMessage());\n    }\n    \n    try {\n      cs.skip(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"skip(long)\", e.getMessage());\n    }\n    \n    try {\n      cs.correctOffset(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"correctOffset(int)\", e.getMessage());\n    }\n    \n    try {\n      cs.close();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"close()\", e.getMessage());\n    }\n    \n    try {\n      cs.read(new char[0], 0, 0);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(char[], int, int)\", e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestBugInSomething#testWrapping().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestBugInSomething#testWrapping().mjava","sourceNew":"  public void testWrapping() throws Exception {\n    CharStream cs = new TestRandomChains.CheckThatYouDidntReadAnythingReaderWrapper(wrappedStream);\n    try {\n      cs.mark(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"mark(int)\", e.getMessage());\n    }\n    \n    try {\n      cs.markSupported();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"markSupported()\", e.getMessage());\n    }\n    \n    try {\n      cs.read();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read()\", e.getMessage());\n    }\n    \n    try {\n      cs.read(new char[0]);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(char[])\", e.getMessage());\n    }\n    \n    try {\n      cs.read(CharBuffer.wrap(new char[0]));\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(CharBuffer)\", e.getMessage());\n    }\n    \n    try {\n      cs.reset();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"reset()\", e.getMessage());\n    }\n    \n    try {\n      cs.skip(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"skip(long)\", e.getMessage());\n    }\n    \n    try {\n      cs.correctOffset(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"correctOffset(int)\", e.getMessage());\n    }\n    \n    try {\n      cs.close();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"close()\", e.getMessage());\n    }\n    \n    try {\n      cs.read(new char[0], 0, 0);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(char[], int, int)\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  public void testWrapping() throws Exception {\n    CharStream cs = new TestRandomChains.CheckThatYouDidntReadAnythingReaderWrapper(wrappedStream);\n    try {\n      cs.mark(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"mark(int)\", e.getMessage());\n    }\n    \n    try {\n      cs.markSupported();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"markSupported()\", e.getMessage());\n    }\n    \n    try {\n      cs.read();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read()\", e.getMessage());\n    }\n    \n    try {\n      cs.read(new char[0]);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(char[])\", e.getMessage());\n    }\n    \n    try {\n      cs.read(CharBuffer.wrap(new char[0]));\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(CharBuffer)\", e.getMessage());\n    }\n    \n    try {\n      cs.reset();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"reset()\", e.getMessage());\n    }\n    \n    try {\n      cs.skip(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"skip(long)\", e.getMessage());\n    }\n    \n    try {\n      cs.correctOffset(1);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"correctOffset(int)\", e.getMessage());\n    }\n    \n    try {\n      cs.close();\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"close()\", e.getMessage());\n    }\n    \n    try {\n      cs.read(new char[0], 0, 0);\n      fail();\n    } catch (Exception e) {\n      assertEquals(\"read(char[], int, int)\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2602029912c6a4c1b72fa240b2973eca21d0b09c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2602029912c6a4c1b72fa240b2973eca21d0b09c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2602029912c6a4c1b72fa240b2973eca21d0b09c"],"2602029912c6a4c1b72fa240b2973eca21d0b09c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}