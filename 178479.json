{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<PathNode>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<Integer>();\n    List<SegToken> resultPath = new ArrayList<SegToken>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<PathNode>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<Integer>();\n    List<SegToken> resultPath = new ArrayList<SegToken>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<>();\n    List<SegToken> resultPath = new ArrayList<>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<PathNode>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<Integer>();\n    List<SegToken> resultPath = new ArrayList<SegToken>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}