{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","commits":[{"id":"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9","date":1344119834,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer t = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer t = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer t = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","sourceOld":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer t = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer();\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","sourceOld":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","sourceOld":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer();\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer();\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","sourceOld":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer();\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n    a.close();\n  }\n\n","sourceOld":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer();\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKBigramFilter#testUnigramsAndBigramsHanOnly().mjava","sourceNew":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer();\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n    a.close();\n  }\n\n","sourceOld":"  public void testUnigramsAndBigramsHanOnly() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new StandardTokenizer();\n        return new TokenStreamComponents(t, new CJKBigramFilter(t, CJKBigramFilter.HAN, true));\n      }\n    };\n    assertAnalyzesTo(a, \"多くの学生が試験に落ちた。\",\n        new String[] { \"多\", \"く\", \"の\",  \"学\", \"学生\", \"生\", \"が\",  \"試\", \"試験\", \"験\", \"に\",  \"落\", \"ち\", \"た\" },\n        new int[] { 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11 },\n        new int[] { 1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12 },\n        new String[] { \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \n                       \"<SINGLE>\", \"<HIRAGANA>\", \"<SINGLE>\", \"<DOUBLE>\", \"<SINGLE>\", \n                       \"<HIRAGANA>\", \"<SINGLE>\", \"<HIRAGANA>\", \"<HIRAGANA>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9":["c7869f64c874ebf7f317d22c00baf2b6857797a6","ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}