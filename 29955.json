{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.WhitelistHostChecker#checkWhitelist(ClusterState,String,List[String]).mjava","commits":[{"id":"4d51e7db479b42602c7e23ba871b177387268179","date":1547581497,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.WhitelistHostChecker#checkWhitelist(ClusterState,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Checks that all the hosts for all the shards requested in shards parameter exist in the configured whitelist\n     * or in the ClusterState (in case of cloud mode)\n     * \n     * @param clusterState The up to date ClusterState, can be null in case of non-cloud mode\n     * @param shardsParamValue The original shards parameter\n     * @param shardUrls The list of cores generated from the shards parameter. \n     */\n    protected void checkWhitelist(ClusterState clusterState, String shardsParamValue, List<String> shardUrls) {\n      if (!whitelistHostCheckingEnabled) {\n        return;\n      }\n      Set<String> localWhitelistHosts;\n      if (whitelistHosts == null && clusterState != null) {\n        // TODO: We could implement caching, based on the version of the live_nodes znode\n        localWhitelistHosts = generateWhitelistFromLiveNodes(clusterState);\n      } else if (whitelistHosts != null) {\n        localWhitelistHosts = whitelistHosts;\n      } else {\n        localWhitelistHosts = Collections.emptySet();\n      }\n      \n      shardUrls.stream().map(String::trim).forEach((shardUrl) -> {\n        URL url;\n        try {\n          if (!shardUrl.startsWith(\"http://\") && !shardUrl.startsWith(\"https://\")) {\n            // It doesn't really matter which protocol we set here because we are not going to use it. We just need a full URL.\n            url = new URL(\"http://\" + shardUrl);\n          } else {\n            url = new URL(shardUrl);\n          }\n        } catch (MalformedURLException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue, e);\n        }\n        if (url.getHost() == null || url.getPort() < 0) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue);\n        }\n        if (!localWhitelistHosts.contains(url.getHost() + \":\" + url.getPort())) {\n          log.warn(\"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist (\"+localWhitelistHosts+\"), shardUrl:\" + shardUrl);\n          throw new SolrException(ErrorCode.FORBIDDEN,\n              \"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist. shardUrl:\" + shardUrl + \".\" +\n                  HttpShardHandlerFactory.SET_SOLR_DISABLE_SHARDS_WHITELIST_CLUE);\n        }\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.WhitelistHostChecker#checkWhitelist(ClusterState,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.WhitelistHostChecker#checkWhitelist(ClusterState,String,List[String]).mjava","sourceNew":"    /**\n     * Checks that all the hosts for all the shards requested in shards parameter exist in the configured whitelist\n     * or in the ClusterState (in case of cloud mode)\n     *\n     * @param clusterState The up to date ClusterState, can be null in case of non-cloud mode\n     * @param shardsParamValue The original shards parameter\n     * @param shardUrls The list of cores generated from the shards parameter.\n     */\n    protected void checkWhitelist(ClusterState clusterState, String shardsParamValue, List<String> shardUrls) {\n      if (!whitelistHostCheckingEnabled) {\n        return;\n      }\n      Set<String> localWhitelistHosts;\n      if (whitelistHosts == null && clusterState != null) {\n        // TODO: We could implement caching, based on the version of the live_nodes znode\n        localWhitelistHosts = generateWhitelistFromLiveNodes(clusterState);\n      } else if (whitelistHosts != null) {\n        localWhitelistHosts = whitelistHosts;\n      } else {\n        localWhitelistHosts = Collections.emptySet();\n      }\n\n      shardUrls.stream().map(String::trim).forEach((shardUrl) -> {\n        URL url;\n        try {\n          if (!shardUrl.startsWith(\"http://\") && !shardUrl.startsWith(\"https://\")) {\n            // It doesn't really matter which protocol we set here because we are not going to use it. We just need a full URL.\n            url = new URL(\"http://\" + shardUrl);\n          } else {\n            url = new URL(shardUrl);\n          }\n        } catch (MalformedURLException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue, e);\n        }\n        if (url.getHost() == null || url.getPort() < 0) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue);\n        }\n        if (!localWhitelistHosts.contains(url.getHost() + \":\" + url.getPort())) {\n          log.warn(\"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist (\"+localWhitelistHosts+\"), shardUrl:\" + shardUrl);\n          throw new SolrException(ErrorCode.FORBIDDEN,\n              \"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist. shardUrl:\" + shardUrl + \".\" +\n                  HttpShardHandlerFactory.SET_SOLR_DISABLE_SHARDS_WHITELIST_CLUE);\n        }\n      });\n    }\n\n","sourceOld":"    /**\n     * Checks that all the hosts for all the shards requested in shards parameter exist in the configured whitelist\n     * or in the ClusterState (in case of cloud mode)\n     * \n     * @param clusterState The up to date ClusterState, can be null in case of non-cloud mode\n     * @param shardsParamValue The original shards parameter\n     * @param shardUrls The list of cores generated from the shards parameter. \n     */\n    protected void checkWhitelist(ClusterState clusterState, String shardsParamValue, List<String> shardUrls) {\n      if (!whitelistHostCheckingEnabled) {\n        return;\n      }\n      Set<String> localWhitelistHosts;\n      if (whitelistHosts == null && clusterState != null) {\n        // TODO: We could implement caching, based on the version of the live_nodes znode\n        localWhitelistHosts = generateWhitelistFromLiveNodes(clusterState);\n      } else if (whitelistHosts != null) {\n        localWhitelistHosts = whitelistHosts;\n      } else {\n        localWhitelistHosts = Collections.emptySet();\n      }\n      \n      shardUrls.stream().map(String::trim).forEach((shardUrl) -> {\n        URL url;\n        try {\n          if (!shardUrl.startsWith(\"http://\") && !shardUrl.startsWith(\"https://\")) {\n            // It doesn't really matter which protocol we set here because we are not going to use it. We just need a full URL.\n            url = new URL(\"http://\" + shardUrl);\n          } else {\n            url = new URL(shardUrl);\n          }\n        } catch (MalformedURLException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue, e);\n        }\n        if (url.getHost() == null || url.getPort() < 0) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue);\n        }\n        if (!localWhitelistHosts.contains(url.getHost() + \":\" + url.getPort())) {\n          log.warn(\"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist (\"+localWhitelistHosts+\"), shardUrl:\" + shardUrl);\n          throw new SolrException(ErrorCode.FORBIDDEN,\n              \"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist. shardUrl:\" + shardUrl + \".\" +\n                  HttpShardHandlerFactory.SET_SOLR_DISABLE_SHARDS_WHITELIST_CLUE);\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.WhitelistHostChecker#checkWhitelist(ClusterState,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.WhitelistHostChecker#checkWhitelist(ClusterState,String,List[String]).mjava","sourceNew":"    /**\n     * Checks that all the hosts for all the shards requested in shards parameter exist in the configured whitelist\n     * or in the ClusterState (in case of cloud mode)\n     *\n     * @param clusterState The up to date ClusterState, can be null in case of non-cloud mode\n     * @param shardsParamValue The original shards parameter\n     * @param shardUrls The list of cores generated from the shards parameter.\n     */\n    protected void checkWhitelist(ClusterState clusterState, String shardsParamValue, List<String> shardUrls) {\n      if (!whitelistHostCheckingEnabled) {\n        return;\n      }\n      Set<String> localWhitelistHosts;\n      if (whitelistHosts == null && clusterState != null) {\n        // TODO: We could implement caching, based on the version of the live_nodes znode\n        localWhitelistHosts = generateWhitelistFromLiveNodes(clusterState);\n      } else if (whitelistHosts != null) {\n        localWhitelistHosts = whitelistHosts;\n      } else {\n        localWhitelistHosts = Collections.emptySet();\n      }\n\n      shardUrls.stream().map(String::trim).forEach((shardUrl) -> {\n        URL url;\n        try {\n          if (!shardUrl.startsWith(\"http://\") && !shardUrl.startsWith(\"https://\")) {\n            // It doesn't really matter which protocol we set here because we are not going to use it. We just need a full URL.\n            url = new URL(\"http://\" + shardUrl);\n          } else {\n            url = new URL(shardUrl);\n          }\n        } catch (MalformedURLException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue, e);\n        }\n        if (url.getHost() == null || url.getPort() < 0) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue);\n        }\n        if (!localWhitelistHosts.contains(url.getHost() + \":\" + url.getPort())) {\n          log.warn(\"The '{}' parameter value '{}' contained value(s) not on the shards whitelist ({}), shardUrl: '{}'\"\n              , ShardParams.SHARDS, shardsParamValue, localWhitelistHosts, shardUrl);\n          throw new SolrException(ErrorCode.FORBIDDEN,\n              \"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist. shardUrl:\" + shardUrl + \".\" +\n                  HttpShardHandlerFactory.SET_SOLR_DISABLE_SHARDS_WHITELIST_CLUE);\n        }\n      });\n    }\n\n","sourceOld":"    /**\n     * Checks that all the hosts for all the shards requested in shards parameter exist in the configured whitelist\n     * or in the ClusterState (in case of cloud mode)\n     *\n     * @param clusterState The up to date ClusterState, can be null in case of non-cloud mode\n     * @param shardsParamValue The original shards parameter\n     * @param shardUrls The list of cores generated from the shards parameter.\n     */\n    protected void checkWhitelist(ClusterState clusterState, String shardsParamValue, List<String> shardUrls) {\n      if (!whitelistHostCheckingEnabled) {\n        return;\n      }\n      Set<String> localWhitelistHosts;\n      if (whitelistHosts == null && clusterState != null) {\n        // TODO: We could implement caching, based on the version of the live_nodes znode\n        localWhitelistHosts = generateWhitelistFromLiveNodes(clusterState);\n      } else if (whitelistHosts != null) {\n        localWhitelistHosts = whitelistHosts;\n      } else {\n        localWhitelistHosts = Collections.emptySet();\n      }\n\n      shardUrls.stream().map(String::trim).forEach((shardUrl) -> {\n        URL url;\n        try {\n          if (!shardUrl.startsWith(\"http://\") && !shardUrl.startsWith(\"https://\")) {\n            // It doesn't really matter which protocol we set here because we are not going to use it. We just need a full URL.\n            url = new URL(\"http://\" + shardUrl);\n          } else {\n            url = new URL(shardUrl);\n          }\n        } catch (MalformedURLException e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue, e);\n        }\n        if (url.getHost() == null || url.getPort() < 0) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid URL syntax in \\\"shards\\\" parameter: \" + shardsParamValue);\n        }\n        if (!localWhitelistHosts.contains(url.getHost() + \":\" + url.getPort())) {\n          log.warn(\"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist (\"+localWhitelistHosts+\"), shardUrl:\" + shardUrl);\n          throw new SolrException(ErrorCode.FORBIDDEN,\n              \"The '\"+ShardParams.SHARDS+\"' parameter value '\"+shardsParamValue+\"' contained value(s) not on the shards whitelist. shardUrl:\" + shardUrl + \".\" +\n                  HttpShardHandlerFactory.SET_SOLR_DISABLE_SHARDS_WHITELIST_CLUE);\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["4d51e7db479b42602c7e23ba871b177387268179"],"4d51e7db479b42602c7e23ba871b177387268179":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["833432c363468a5df50f87446a68015404b1fbcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["575e66bd4b2349209027f6801184da7fc3cba13f"],"4d51e7db479b42602c7e23ba871b177387268179":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d51e7db479b42602c7e23ba871b177387268179"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}