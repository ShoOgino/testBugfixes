{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/DefaultPassageFormatter#format(Passage[],String).mjava","commits":[{"id":"116a468ed771d87fd94eb1350dd2d42bbf0b262f","date":1365791134,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/DefaultPassageFormatter#format(Passage[],String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.endOffset));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/DefaultPassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/DefaultPassageFormatter#format(Passage[],String).mjava","sourceNew":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if it's the first one, or if it's connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // it's possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // it's possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.endOffset));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.endOffset));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/DefaultPassageFormatter#format(Passage[],String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if it's the first one, or if it's connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // it's possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // it's possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.endOffset));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/DefaultPassageFormatter#format(Passage[],String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if it's the first one, or if it's connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // it's possible to have overlapping terms\n        if (start > pos) {\n          append(sb, content, pos, start);\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          append(sb, content, Math.max(pos, start), end);\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // it's possible a \"term\" from the analyzer could span a sentence boundary.\n      append(sb, content, pos, Math.max(pos, passage.endOffset));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","381618eac2691bb34ab9a3fca76ad55c6274517e"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["116a468ed771d87fd94eb1350dd2d42bbf0b262f"],"116a468ed771d87fd94eb1350dd2d42bbf0b262f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"116a468ed771d87fd94eb1350dd2d42bbf0b262f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116a468ed771d87fd94eb1350dd2d42bbf0b262f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}