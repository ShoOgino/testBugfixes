{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","commits":[{"id":"51cd38b90c674ebecc798654e3574d5790a9aced","date":1202762089,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         false, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.UN_TOKENIZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             false, new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34e2c71b6406443562df54db233fde0728502f64","date":1209294850,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         false, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.UN_TOKENIZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             false, new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         false, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.UN_TOKENIZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             false, new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         false, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             false, new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         false, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.UN_TOKENIZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             false, new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         false, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             false, new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void xxxtestExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void xxxtestExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(TEST_VERSION_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(2).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(TEST_VERSION_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(TEST_VERSION_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(2).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(TEST_VERSION_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"34e2c71b6406443562df54db233fde0728502f64":["51cd38b90c674ebecc798654e3574d5790a9aced"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"51cd38b90c674ebecc798654e3574d5790a9aced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["34e2c71b6406443562df54db233fde0728502f64"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"34e2c71b6406443562df54db233fde0728502f64":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"51cd38b90c674ebecc798654e3574d5790a9aced":["34e2c71b6406443562df54db233fde0728502f64"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51cd38b90c674ebecc798654e3574d5790a9aced"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}