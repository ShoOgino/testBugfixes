{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(10);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(10);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(20);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(10);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(20);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(10);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(20);\n    for (int i = 0; i < n; i++) {\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(20);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(20);\n    for (int i = 0; i < n; i++) {\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq.build(), null);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    // because the first page has a null 'after', we get a normal collector.\n    // so we need to run the test a few times to ensure we will collect multiple\n    // pages.\n    int n = atLeast(20);\n    for (int i = 0; i < n; i++) {\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","ef0d8a69209261514c5739c770bba706c2308450"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}