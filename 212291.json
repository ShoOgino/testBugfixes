{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","commits":[{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.ValidateInfo#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b04413d237e43414609f041f50db04d553d686f","date":1515761310,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && !vals.isEmpty() && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && !vals.isEmpty() && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && !vals.isEmpty() && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && !vals.isEmpty() && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, (Double) min) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, (Double) max) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && vals != null && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#validate(String,Object,boolean).mjava","sourceNew":null,"sourceOld":"    public Object validate(String name, Object val, boolean isRuleVal) {\n      if (val instanceof Clause.Condition) {\n        Clause.Condition condition = (Clause.Condition) val;\n        val = condition.op.readRuleValue(condition);\n        if (val != condition.val) return val;\n      }\n      if (name == null) name = this.tagName;\n      if (type == Double.class) {\n        Double num = Clause.parseDouble(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (Double.compare(num, min.doubleValue()) == -1)\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (Double.compare(num, max.doubleValue()) == 1)\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == Long.class) {\n        Long num = Clause.parseLong(name, val);\n        if (isRuleVal) {\n          if (min != null)\n            if (num < min.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be greater than \" + min);\n          if (max != null)\n            if (num > max.longValue())\n              throw new RuntimeException(name + \": \" + val + \" must be less than \" + max);\n        }\n        return num;\n      } else if (type == String.class) {\n        if (isRuleVal && !vals.isEmpty() && !vals.contains(val))\n          throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(vals, ','));\n        return val;\n      } else {\n        throw new RuntimeException(\"Invalid type \");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1bbcda32e5cd37ef61ea1190bacd080308e22070","0b04413d237e43414609f041f50db04d553d686f"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0b04413d237e43414609f041f50db04d553d686f":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78231225260fb5b3bf9920f203d71477d5501c65":["9837f40c922407d857991971de6def18eda0857b"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9837f40c922407d857991971de6def18eda0857b":["b94236357aaa22b76c10629851fe4e376e0cea82"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0b04413d237e43414609f041f50db04d553d686f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["b94236357aaa22b76c10629851fe4e376e0cea82","0b04413d237e43414609f041f50db04d553d686f"],"9837f40c922407d857991971de6def18eda0857b":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}