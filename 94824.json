{"path":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","commits":[{"id":"743529d70cac4697e6dfdafc9e7b3b8b7f684994","date":1092688862,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only \n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like GermanAnalyzer).\n   * \n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile) throws IOException {\n    HashSet result = new HashSet();\n    FileReader freader = null;\n    LineNumberReader lnr = null;\n    try {\n      freader = new FileReader(wordfile);\n      lnr = new LineNumberReader(freader);\n      String word = null;\n      while ((word = lnr.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (lnr != null)\n        lnr.close();\n      if (freader != null)\n        freader.close();\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63b7fe6e1c2acf43cade5bbea6c01319860f7e08","date":1119407493,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like GermanAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile) throws IOException {\n    HashSet result = new HashSet();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only \n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like GermanAnalyzer).\n   * \n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile) throws IOException {\n    HashSet result = new HashSet();\n    FileReader freader = null;\n    LineNumberReader lnr = null;\n    try {\n      freader = new FileReader(wordfile);\n      lnr = new LineNumberReader(freader);\n      String word = null;\n      while ((word = lnr.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (lnr != null)\n        lnr.close();\n      if (freader != null)\n        freader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47729c9dd8f9bf48f1695df6007073022ea001ed","date":1119470343,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile) throws IOException {\n    HashSet result = new HashSet();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like GermanAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile) throws IOException {\n    HashSet result = new HashSet();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile) throws IOException {\n    HashSet result = new HashSet();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47729c9dd8f9bf48f1695df6007073022ea001ed":["63b7fe6e1c2acf43cade5bbea6c01319860f7e08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["47729c9dd8f9bf48f1695df6007073022ea001ed"],"63b7fe6e1c2acf43cade5bbea6c01319860f7e08":["743529d70cac4697e6dfdafc9e7b3b8b7f684994"],"ddc5fbfd4c64963aba52713a4496522540294d69":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"743529d70cac4697e6dfdafc9e7b3b8b7f684994":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ddc5fbfd4c64963aba52713a4496522540294d69"]},"commit2Childs":{"47729c9dd8f9bf48f1695df6007073022ea001ed":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["743529d70cac4697e6dfdafc9e7b3b8b7f684994"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["ddc5fbfd4c64963aba52713a4496522540294d69"],"63b7fe6e1c2acf43cade5bbea6c01319860f7e08":["47729c9dd8f9bf48f1695df6007073022ea001ed"],"ddc5fbfd4c64963aba52713a4496522540294d69":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"743529d70cac4697e6dfdafc9e7b3b8b7f684994":["63b7fe6e1c2acf43cade5bbea6c01319860f7e08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}