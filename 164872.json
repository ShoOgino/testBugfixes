{"path":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f75f48c085fef413b3f0a367729532875ea058","date":1310391882,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered - offset;\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69fed1d5a6c2d7a30a935fcb5f39f93df561d744","date":1310501814,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered - offset;int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered - offset;\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738f7d06920ae25ab2884f4efd80c42e95d6271","date":1312707753,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered - offset;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered - offset;int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":["27e851527ef490dd0b790e19b7c62602b5778eb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27e851527ef490dd0b790e19b7c62602b5778eb1","date":1337344101,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered - offset;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":["3738f7d06920ae25ab2884f4efd80c42e95d6271"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered - offset;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<>();\n      List<Float> scores = new ArrayList<>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<>();\n      List<Float> scores = new ArrayList<>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NaN;\n\n      outer:\n      for (GroupDocs group : groups) {\n        maxScore = maxAvoidNaN(maxScore, group.maxScore);\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<>();\n      List<Float> scores = new ArrayList<>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<>();\n      List<Float> scores = new ArrayList<>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NaN;\n\n      outer:\n      for (GroupDocs group : groups) {\n        maxScore = maxAvoidNaN(maxScore, group.maxScore);\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore, TotalHits.Relation.EQUAL_TO);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<>();\n      List<Float> scores = new ArrayList<>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NaN;\n\n      outer:\n      for (GroupDocs group : groups) {\n        maxScore = maxAvoidNaN(maxScore, group.maxScore);\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      @SuppressWarnings({\"rawtypes\"})\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<>();\n      List<Float> scores = new ArrayList<>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NaN;\n\n      outer:\n      for (@SuppressWarnings({\"rawtypes\"})GroupDocs group : groups) {\n        maxScore = maxAvoidNaN(maxScore, group.maxScore);\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore, TotalHits.Relation.EQUAL_TO);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<>();\n      List<Float> scores = new ArrayList<>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NaN;\n\n      outer:\n      for (GroupDocs group : groups) {\n        maxScore = maxAvoidNaN(maxScore, group.maxScore);\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = docsGathered > offset ? docsGathered - offset : 0;\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore, TotalHits.Relation.EQUAL_TO);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27e851527ef490dd0b790e19b7c62602b5778eb1":["3738f7d06920ae25ab2884f4efd80c42e95d6271"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["27e851527ef490dd0b790e19b7c62602b5778eb1","19275ba31e621f6da1b83bf13af75233876fd3d4"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"69fed1d5a6c2d7a30a935fcb5f39f93df561d744":["41f75f48c085fef413b3f0a367729532875ea058"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["27e851527ef490dd0b790e19b7c62602b5778eb1"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3738f7d06920ae25ab2884f4efd80c42e95d6271":["69fed1d5a6c2d7a30a935fcb5f39f93df561d744"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"41f75f48c085fef413b3f0a367729532875ea058":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef0d8a69209261514c5739c770bba706c2308450":["3738f7d06920ae25ab2884f4efd80c42e95d6271","27e851527ef490dd0b790e19b7c62602b5778eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"27e851527ef490dd0b790e19b7c62602b5778eb1":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4","ef0d8a69209261514c5739c770bba706c2308450"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"c26f00b574427b55127e869b935845554afde1fa":["41f75f48c085fef413b3f0a367729532875ea058"],"69fed1d5a6c2d7a30a935fcb5f39f93df561d744":["3738f7d06920ae25ab2884f4efd80c42e95d6271"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"3738f7d06920ae25ab2884f4efd80c42e95d6271":["27e851527ef490dd0b790e19b7c62602b5778eb1","ef0d8a69209261514c5739c770bba706c2308450"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"41f75f48c085fef413b3f0a367729532875ea058":["69fed1d5a6c2d7a30a935fcb5f39f93df561d744"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}