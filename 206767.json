{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","commits":[{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1020);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockRAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory(random);\n    // auxiliary directory\n    Directory aux = newDirectory(random);\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockRAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new MockRAMDirectory();\n    // auxiliary directory\n    Directory aux = new MockRAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockRAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory(random);\n    // auxiliary directory\n    Directory aux = newDirectory(random);\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory(random);\n    // auxiliary directory\n    Directory aux = newDirectory(random);\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockRAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory(random);\n    // auxiliary directory\n    Directory aux = newDirectory(random);\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(4));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexes(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, IOContext.DEFAULT)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, IOContext.DEFAULT)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux)));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":null,"sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e","date":1323363624,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"/dev/null","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 20; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 20; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 20; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 20; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now addIndexes\");\n    }\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 20; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 20; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now addIndexes\");\n    }\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    setUpDirs(dir, aux, true);\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(aux, dontMergeConfig);\n    for (int i = 0; i < 20; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + i));\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(aux);\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    writer = newWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(4).\n            setMergePolicy(newLogMergePolicy(4))\n    );\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now addIndexes\");\n    }\n    writer.addIndexes(aux, new MockDirectoryWrapper(random, new RAMDirectory(aux, newIOContext(random))));\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ddc4c914be86e34b54f70023f45a60fa7f04e929","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["cfd641edd796340315609425e9f70819e6d9ef0e"],"53a31399f2471493d67b19a95c028a74e0113b6a":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","cfd641edd796340315609425e9f70819e6d9ef0e"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f2c5f0cb44df114db4228c8f77861714b5cabaea","b6f9be74ca7baaef11857ad002cad40419979516"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cfd641edd796340315609425e9f70819e6d9ef0e"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["1f653cfcf159baeaafe5d01682a911e95bba4012","53a31399f2471493d67b19a95c028a74e0113b6a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cfd641edd796340315609425e9f70819e6d9ef0e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["cfd641edd796340315609425e9f70819e6d9ef0e","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ddc4c914be86e34b54f70023f45a60fa7f04e929","ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["53a31399f2471493d67b19a95c028a74e0113b6a"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5d004d0e0b3f65bb40da76d476d659d7888270e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"cfd641edd796340315609425e9f70819e6d9ef0e":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cfd641edd796340315609425e9f70819e6d9ef0e","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5d004d0e0b3f65bb40da76d476d659d7888270e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}