{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosWriter#write(SegmentInfo,FieldInfos).mjava","commits":[{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosWriter#write(SegmentInfo,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(SegmentInfo si, FieldInfos fis) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    // nocommit what ioctxt to pass?  cannot call .sizeInBytes()!\n    final IndexOutput output = si.dir.createOutput(fileName, new IOContext(new FlushInfo(si.docCount, 0)));\n\n    boolean success = false;\n    try {\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.docCount);\n      // we still need to write this in 4.0 since we can open a 3.x with shared docStores\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n\n      // nocommit remove (4.0 doesn't write normGen)...\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeInt(entry.getKey());\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      output.writeStringStringMap(si.getDiagnostics());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352763be0465236f8e2ac188aa1b761cb3e1c9ee","date":1337516554,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosWriter#write(SegmentInfo,FieldInfos).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.docCount);\n\n      assert si.getDocStoreOffset() == -1;\n      assert si.getNormGen() == null;\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(SegmentInfo si, FieldInfos fis) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    // nocommit what ioctxt to pass?  cannot call .sizeInBytes()!\n    final IndexOutput output = si.dir.createOutput(fileName, new IOContext(new FlushInfo(si.docCount, 0)));\n\n    boolean success = false;\n    try {\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.docCount);\n      // we still need to write this in 4.0 since we can open a 3.x with shared docStores\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n\n      // nocommit remove (4.0 doesn't write normGen)...\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeInt(entry.getKey());\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      output.writeStringStringMap(si.getDiagnostics());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4356000e349e38c9fb48034695b7c309abd54557":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["4356000e349e38c9fb48034695b7c309abd54557"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4356000e349e38c9fb48034695b7c309abd54557":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4356000e349e38c9fb48034695b7c309abd54557","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["352763be0465236f8e2ac188aa1b761cb3e1c9ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}