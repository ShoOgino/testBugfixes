{"path":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public final void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    final LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces =\n      getAttributeInterfaces(clazz);\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (WeakReference<Class<? extends Attribute>> curInterfaceRef : foundInterfaces) {\n      final Class<? extends Attribute> curInterface = curInterfaceRef.get();\n      assert (curInterface != null) :\n        \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState[0] = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public final void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    final LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces =\n      getAttributeInterfaces(clazz);\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (WeakReference<Class<? extends Attribute>> curInterfaceRef : foundInterfaces) {\n      final Class<? extends Attribute> curInterface = curInterfaceRef.get();\n      assert (curInterface != null) :\n        \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState[0] = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93124590c6e2a8b45898cbae46f96c3a05d9bce0","date":1399415098,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public final void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Reference<Class<? extends Attribute>> curInterfaceRef : getAttributeInterfaces(clazz)) {\n      final Class<? extends Attribute> curInterface = curInterfaceRef.get();\n      assert (curInterface != null) :\n        \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState[0] = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public final void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    final LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces =\n      getAttributeInterfaces(clazz);\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (WeakReference<Class<? extends Attribute>> curInterfaceRef : foundInterfaces) {\n      final Class<? extends Attribute> curInterface = curInterfaceRef.get();\n      assert (curInterface != null) :\n        \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState[0] = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fce186d877ee988f82c708a92d9e21343e3bfe","date":1408099813,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public final void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (final Class<? extends Attribute> curInterface : getAttributeInterfaces(clazz)) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState[0] = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public final void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Reference<Class<? extends Attribute>> curInterfaceRef : getAttributeInterfaces(clazz)) {\n      final Class<? extends Attribute> curInterface = curInterfaceRef.get();\n      assert (curInterface != null) :\n        \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState[0] = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d036f8d7224b70bd199d46c58c48085d66cf1bf7","date":1417144716,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><b>NOTE:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </p>\n   */\n  public final void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (final Class<? extends Attribute> curInterface : getAttributeInterfaces(clazz)) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState[0] = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public final void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (final Class<? extends Attribute> curInterface : getAttributeInterfaces(clazz)) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState[0] = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d036f8d7224b70bd199d46c58c48085d66cf1bf7":["38fce186d877ee988f82c708a92d9e21343e3bfe"],"38fce186d877ee988f82c708a92d9e21343e3bfe":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d036f8d7224b70bd199d46c58c48085d66cf1bf7"]},"commit2Childs":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["38fce186d877ee988f82c708a92d9e21343e3bfe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d036f8d7224b70bd199d46c58c48085d66cf1bf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38fce186d877ee988f82c708a92d9e21343e3bfe":["d036f8d7224b70bd199d46c58c48085d66cf1bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}