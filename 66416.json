{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      int termCount = 0;\n      final Bits liveDocs = reader.getLiveDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      int termCount = 0;\n      final Bits liveDocs = reader.getLiveDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      int termCount = 0;\n      final Bits liveDocs = reader.getLiveDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a FixedBitSet\n      final FixedBitSet bitSet = new FixedBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits liveDocs = reader.getLiveDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      int termCount = 0;\n      final Bits liveDocs = reader.getLiveDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a FixedBitSet\n      final FixedBitSet bitSet = new FixedBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(acceptDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a FixedBitSet\n      final FixedBitSet bitSet = new FixedBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits liveDocs = reader.getLiveDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["29ef99d61cda9641b6250bf9567329a6e65f901d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["6620df8541b174097b1133a4fc370adb2e570524"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}