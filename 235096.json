{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(TermsEnum,int,String).mjava","commits":[{"id":"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea","date":1574601528,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(TermsEnum,int,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(TermsEnum,int).mjava","sourceNew":"  static MatchesIterator matches(TermsEnum te, int doc, String field) throws IOException {\n    TermQuery query = new TermQuery(new Term(field, te.term()));\n    PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n    if (pe.advance(doc) != doc) {\n      return null;\n    }\n    return new MatchesIterator() {\n\n      int upto = pe.freq();\n      int pos = -1;\n\n      @Override\n      public boolean next() throws IOException {\n        if (upto <= 0) {\n          pos = IntervalIterator.NO_MORE_INTERVALS;\n          return false;\n        }\n        upto--;\n        pos = pe.nextPosition();\n        return true;\n      }\n\n      @Override\n      public int startPosition() {\n        return pos;\n      }\n\n      @Override\n      public int endPosition() {\n        return pos;\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return pe.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return pe.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() {\n        return null;\n      }\n\n      @Override\n      public Query getQuery() {\n        return query;\n      }\n    };\n  }\n\n","sourceOld":"  static MatchesIterator matches(TermsEnum te, int doc) throws IOException {\n    PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n    if (pe.advance(doc) != doc) {\n      return null;\n    }\n    return new MatchesIterator() {\n\n      int upto = pe.freq();\n      int pos = -1;\n\n      @Override\n      public boolean next() throws IOException {\n        if (upto <= 0) {\n          pos = IntervalIterator.NO_MORE_INTERVALS;\n          return false;\n        }\n        upto--;\n        pos = pe.nextPosition();\n        return true;\n      }\n\n      @Override\n      public int startPosition() {\n        return pos;\n      }\n\n      @Override\n      public int endPosition() {\n        return pos;\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return pe.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return pe.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() {\n        return null;\n      }\n\n      @Override\n      public Query getQuery() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c78dc09f599cd42c186ddd94084249c8db1ede","date":1581000287,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(TermsEnum,int,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(TermsEnum,int,String).mjava","sourceNew":"  static IntervalMatchesIterator matches(TermsEnum te, int doc, String field) throws IOException {\n    TermQuery query = new TermQuery(new Term(field, te.term()));\n    PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n    if (pe.advance(doc) != doc) {\n      return null;\n    }\n    return new IntervalMatchesIterator() {\n\n      @Override\n      public int gaps() {\n        return 0;\n      }\n\n      @Override\n      public int width() {\n        return 1;\n      }\n\n      int upto = pe.freq();\n      int pos = -1;\n\n      @Override\n      public boolean next() throws IOException {\n        if (upto <= 0) {\n          pos = IntervalIterator.NO_MORE_INTERVALS;\n          return false;\n        }\n        upto--;\n        pos = pe.nextPosition();\n        return true;\n      }\n\n      @Override\n      public int startPosition() {\n        return pos;\n      }\n\n      @Override\n      public int endPosition() {\n        return pos;\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return pe.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return pe.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() {\n        return null;\n      }\n\n      @Override\n      public Query getQuery() {\n        return query;\n      }\n    };\n  }\n\n","sourceOld":"  static MatchesIterator matches(TermsEnum te, int doc, String field) throws IOException {\n    TermQuery query = new TermQuery(new Term(field, te.term()));\n    PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n    if (pe.advance(doc) != doc) {\n      return null;\n    }\n    return new MatchesIterator() {\n\n      int upto = pe.freq();\n      int pos = -1;\n\n      @Override\n      public boolean next() throws IOException {\n        if (upto <= 0) {\n          pos = IntervalIterator.NO_MORE_INTERVALS;\n          return false;\n        }\n        upto--;\n        pos = pe.nextPosition();\n        return true;\n      }\n\n      @Override\n      public int startPosition() {\n        return pos;\n      }\n\n      @Override\n      public int endPosition() {\n        return pos;\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return pe.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return pe.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() {\n        return null;\n      }\n\n      @Override\n      public Query getQuery() {\n        return query;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30c78dc09f599cd42c186ddd94084249c8db1ede":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c78dc09f599cd42c186ddd94084249c8db1ede"]},"commit2Childs":{"30c78dc09f599cd42c186ddd94084249c8db1ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["30c78dc09f599cd42c186ddd94084249c8db1ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}