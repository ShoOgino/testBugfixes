{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getUniqueTermCount());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getUniqueTermCount());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newField(\"f1\", \"v1\", StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newField(\"f2\", \"v2\", StringField.TYPE_STORED));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.close();\n\n    TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.shutdown();\n\n    TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.close();\n\n    TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\\\"f1\\\")\",\n                   iae.getMessage());\n    }\n    writer.shutdown();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.shutdown();\n\n    TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\\\"f1\\\")\",\n                   iae.getMessage());\n    }\n    writer.shutdown();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.shutdown();\n\n    TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\\\"f1\\\")\",\n                   iae.getMessage());\n    }\n    writer.shutdown();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.addDocument(doc);\n    writer.shutdown();\n\n    TestUtil.checkIndex(dir);\n\n    IndexReader reader = DirectoryReader.open(dir);\n    // f1\n    Terms tfv1 = reader.getTermVectors(0).terms(\"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.size());\n    // f2\n    Terms tfv2 = reader.getTermVectors(0).terms(\"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.size());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"886b245a7e0c18a498eaf26ec32d5833ede16d53","date":1398961714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(newStringField(\"f1\", \"v1\", Field.Store.YES));\n    FieldType customType2 = new FieldType(StringField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorOffsets(true);\n    customType2.setStoreTermVectorPositions(true);\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 first with tv then without tv\n    doc.add(newField(\"f2\", \"v1\", customType2));\n    doc.add(newStringField(\"f2\", \"v2\", Field.Store.YES));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\\\"f1\\\")\",\n                   iae.getMessage());\n    }\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","3394716f52b34ab259ad5247e7595d9f9db6e935"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5a238fc456663f685a9db1ed8d680e348bb45171":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","52c7e49be259508735752fba88085255014a6ecf"],"886b245a7e0c18a498eaf26ec32d5833ede16d53":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"52c7e49be259508735752fba88085255014a6ecf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["886b245a7e0c18a498eaf26ec32d5833ede16d53"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","886b245a7e0c18a498eaf26ec32d5833ede16d53"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"886b245a7e0c18a498eaf26ec32d5833ede16d53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}