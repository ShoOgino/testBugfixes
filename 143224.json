{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#compareToNoLeaf(Cell).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#compareToNoLeaf(Cell).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compareToNoLeaf(Cell fromCell) {\n      final NRCell nrCell = (NRCell) fromCell;\n      assert term != nrCell.term;\n      //trick to re-use bytesref; provided that we re-instate it\n      int myLastLen = term.length;\n      int otherLastLen = nrCell.term.length;\n      term.length = termLenByLevel[getLevel()];\n      nrCell.term.length = termLenByLevel[nrCell.getLevel()];\n      int answer = term.compareTo(nrCell.term);\n      term.length = myLastLen;\n      nrCell.term.length = otherLastLen;\n      return answer;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#compareToNoLeaf(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#compareToNoLeaf(Cell).mjava","sourceNew":"    @Override\n    public int compareToNoLeaf(Cell fromCell) {\n      final NRCell nrCell = (NRCell) fromCell;\n      assert term != nrCell.term;\n      //trick to re-use bytesref; provided that we re-instate it\n      int myLastLen = term.length;\n      int otherLastLen = nrCell.term.length;\n      term.length = termLenByLevel[getLevel()];\n      nrCell.term.length = termLenByLevel[nrCell.getLevel()];\n      int answer = term.compareTo(nrCell.term);\n      term.length = myLastLen;\n      nrCell.term.length = otherLastLen;\n      return answer;\n    }\n\n","sourceOld":"    @Override\n    public int compareToNoLeaf(Cell fromCell) {\n      final NRCell nrCell = (NRCell) fromCell;\n      assert term != nrCell.term;\n      //trick to re-use bytesref; provided that we re-instate it\n      int myLastLen = term.length;\n      int otherLastLen = nrCell.term.length;\n      term.length = termLenByLevel[getLevel()];\n      nrCell.term.length = termLenByLevel[nrCell.getLevel()];\n      int answer = term.compareTo(nrCell.term);\n      term.length = myLastLen;\n      nrCell.term.length = otherLastLen;\n      return answer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#compareToNoLeaf(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#compareToNoLeaf(Cell).mjava","sourceNew":"    @Override\n    public int compareToNoLeaf(Cell fromCell) {\n      final NRCell nrCell = (NRCell) fromCell;\n      assert term != nrCell.term;\n      //trick to re-use bytesref; provided that we re-instate it\n      int myLastLen = term.length;\n      int otherLastLen = nrCell.term.length;\n      term.length = termLenByLevel[getLevel()];\n      nrCell.term.length = termLenByLevel[nrCell.getLevel()];\n      int answer = term.compareTo(nrCell.term);\n      term.length = myLastLen;\n      nrCell.term.length = otherLastLen;\n      return answer;\n    }\n\n","sourceOld":"    @Override\n    public int compareToNoLeaf(Cell fromCell) {\n      final NRCell nrCell = (NRCell) fromCell;\n      assert term != nrCell.term;\n      //trick to re-use bytesref; provided that we re-instate it\n      int myLastLen = term.length;\n      int otherLastLen = nrCell.term.length;\n      term.length = termLenByLevel[getLevel()];\n      nrCell.term.length = termLenByLevel[nrCell.getLevel()];\n      int answer = term.compareTo(nrCell.term);\n      term.length = myLastLen;\n      nrCell.term.length = otherLastLen;\n      return answer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}