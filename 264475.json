{"path":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanWeight.Postings).mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanWeight.Postings).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanCollector).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanWeight.Postings requiredPostings) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = spanQuery.createWeight(searcher, false);\n\n    return w.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), requiredPostings);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanCollector collector) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(spanQuery, false);\n\n    return w.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanWeight.Postings).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanWeight.Postings).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanWeight.Postings requiredPostings) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = spanQuery.createWeight(searcher, false);\n\n    return w.getSpans(lrContext, requiredPostings);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanWeight.Postings requiredPostings) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = spanQuery.createWeight(searcher, false);\n\n    return w.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), requiredPostings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanWeight.Postings).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanWeight.Postings).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanWeight.Postings requiredPostings) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = spanQuery.createWeight(searcher, false);\n\n    return w.getSpans(lrContext, requiredPostings);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanWeight.Postings requiredPostings) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = spanQuery.createWeight(searcher, false);\n\n    return w.getSpans(lrContext, requiredPostings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"29aea3139c4326c0501d75d51059855463220279":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}