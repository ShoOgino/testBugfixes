{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock().mjava","commits":[{"id":"f8dfd02cf03e7a1810924be21cddfdde6d265c14","date":1273590676,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock() {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock().mjava","sourceNew":null,"sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock() {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock().mjava","pathOld":"/dev/null","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock() {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock().mjava","sourceNew":null,"sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock() {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock().mjava","sourceNew":null,"sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock() {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"8fe956d65251358d755c56f14fe8380644790e47":[],"334c1175813aea771a71728cd2c4ee4754fd0603":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["8fe956d65251358d755c56f14fe8380644790e47","9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8fe956d65251358d755c56f14fe8380644790e47","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}