{"path":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":null,"sourceOld":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","sourceOld":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce83f0d72db4660fd277a9d357698004d8f4336","date":1269047368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","sourceOld":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","sourceOld":"  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df18b2465217a237531d0d944c22ea4a4316411e","date":1278157467,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","bugFix":["06aac04eefdea12e25b74f574393532f90a7d590","3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertTrue(doc.size() + \" does not equal: \" + 2, doc.size() == 2);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4eacd50421fb83ad5dbe90a00984962e7ec0df7c","date":1287151800,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );    \n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );    \n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );    \n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    // System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.getVal(0);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList offtv = (NamedList) doc.get(\"test_posofftv\");\n    assertTrue(\"offtv is null and it shouldn't be\", offtv != null);\n    assertTrue(\"offtv Size: \" + offtv.size() + \" is not: \" + 2, offtv.size() == 2);\n    NamedList another = (NamedList) offtv.get(\"anoth\");\n    NamedList offsets = (NamedList) another.get(\"offsets\");\n    assertTrue(\"offsets is null and it shouldn't be\", offsets != null);\n    assertTrue(\"offsets Size: \" + offsets.size() + \" is not greater than: \" + 0, offsets.size() > 0);\n    NamedList pos = (NamedList) another.get(\"positions\");\n    assertTrue(\"pos is null and it shouldn't be\", pos != null);\n    assertTrue(\"pos Size: \" + pos.size() + \" is not greater than: \" + 0, pos.size() > 0);\n    Integer df = (Integer) another.get(\"df\");\n    assertTrue(\"df is null and it shouldn't be\", df != null);\n    assertTrue(df + \" does not equal: \" + 2, df == 2);\n    Double tfIdf = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", tfIdf != null);\n    assertTrue(tfIdf + \" does not equal: \" + 0.5, tfIdf == 0.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48b42b82c149773b4ccb139507e9bd29da91ca2","date":1309410544,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["b48b42b82c149773b4ccb139507e9bd29da91ca2","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["afeb033b2bd36d8ce9d82142b197da4dde13068b","df18b2465217a237531d0d944c22ea4a4316411e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4eacd50421fb83ad5dbe90a00984962e7ec0df7c"],"b48b42b82c149773b4ccb139507e9bd29da91ca2":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c"],"df18b2465217a237531d0d944c22ea4a4316411e":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c","b48b42b82c149773b4ccb139507e9bd29da91ca2"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c","b48b42b82c149773b4ccb139507e9bd29da91ca2"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"4eacd50421fb83ad5dbe90a00984962e7ec0df7c":["df18b2465217a237531d0d944c22ea4a4316411e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b48b42b82c149773b4ccb139507e9bd29da91ca2"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["df18b2465217a237531d0d944c22ea4a4316411e","4eacd50421fb83ad5dbe90a00984962e7ec0df7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b48b42b82c149773b4ccb139507e9bd29da91ca2":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"df18b2465217a237531d0d944c22ea4a4316411e":["5f4e87790277826a2aea119328600dfb07761f32","4eacd50421fb83ad5dbe90a00984962e7ec0df7c","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"1da8d55113b689b06716246649de6f62430f15c0":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"4eacd50421fb83ad5dbe90a00984962e7ec0df7c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b48b42b82c149773b4ccb139507e9bd29da91ca2","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["5f4e87790277826a2aea119328600dfb07761f32","df18b2465217a237531d0d944c22ea4a4316411e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}