{"path":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}