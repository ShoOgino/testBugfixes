{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testReuseUnchangedLeafReader().mjava","commits":[{"id":"cb0130363fa13c53e4e78317c35b3b45a3089276","date":1523267438,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testReuseUnchangedLeafReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testReuseUnchangedLeafReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    String softDeletesField = \"soft_delete\";\n    indexWriterConfig.setSoftDeletesField(softDeletesField);\n    indexWriterConfig.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader reader = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);\n    assertEquals(2, reader.numDocs());\n    assertEquals(2, reader.maxDoc());\n    assertEquals(0, reader.numDeletedDocs());\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(\"soft_delete\", 1));\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n    assertNotSame(newReader, reader);\n    reader.close();\n    reader = newReader;\n    assertEquals(3, reader.numDocs());\n    assertEquals(4, reader.maxDoc());\n    assertEquals(1, reader.numDeletedDocs());\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.commit();\n\n    newReader = DirectoryReader.openIfChanged(reader);\n    assertNotSame(newReader, reader);\n    assertEquals(3, newReader.getSequentialSubReaders().size());\n    assertEquals(2, reader.getSequentialSubReaders().size());\n    assertSame(reader.getSequentialSubReaders().get(0), newReader.getSequentialSubReaders().get(0));\n    assertNotSame(reader.getSequentialSubReaders().get(1), newReader.getSequentialSubReaders().get(1));\n    assertTrue(isWrapped(reader.getSequentialSubReaders().get(0)));\n    // last one has no soft deletes\n    assertFalse(isWrapped(reader.getSequentialSubReaders().get(1)));\n\n    assertTrue(isWrapped(newReader.getSequentialSubReaders().get(0)));\n    assertTrue(isWrapped(newReader.getSequentialSubReaders().get(1)));\n    // last one has no soft deletes\n    assertFalse(isWrapped(newReader.getSequentialSubReaders().get(2)));\n    reader.close();\n    reader = newReader;\n    assertEquals(3, reader.numDocs());\n    assertEquals(5, reader.maxDoc());\n    assertEquals(2, reader.numDeletedDocs());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testReuseUnchangedLeafReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testReuseUnchangedLeafReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    String softDeletesField = \"soft_delete\";\n    indexWriterConfig.setSoftDeletesField(softDeletesField);\n    indexWriterConfig.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader reader = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);\n    assertEquals(2, reader.numDocs());\n    assertEquals(2, reader.maxDoc());\n    assertEquals(0, reader.numDeletedDocs());\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(\"soft_delete\", 1));\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n    assertNotSame(newReader, reader);\n    reader.close();\n    reader = newReader;\n    assertEquals(3, reader.numDocs());\n    assertEquals(4, reader.maxDoc());\n    assertEquals(1, reader.numDeletedDocs());\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.commit();\n\n    newReader = DirectoryReader.openIfChanged(reader);\n    assertNotSame(newReader, reader);\n    assertEquals(3, newReader.getSequentialSubReaders().size());\n    assertEquals(2, reader.getSequentialSubReaders().size());\n    assertSame(reader.getSequentialSubReaders().get(0), newReader.getSequentialSubReaders().get(0));\n    assertNotSame(reader.getSequentialSubReaders().get(1), newReader.getSequentialSubReaders().get(1));\n    assertTrue(isWrapped(reader.getSequentialSubReaders().get(0)));\n    // last one has no soft deletes\n    assertFalse(isWrapped(reader.getSequentialSubReaders().get(1)));\n\n    assertTrue(isWrapped(newReader.getSequentialSubReaders().get(0)));\n    assertTrue(isWrapped(newReader.getSequentialSubReaders().get(1)));\n    // last one has no soft deletes\n    assertFalse(isWrapped(newReader.getSequentialSubReaders().get(2)));\n    reader.close();\n    reader = newReader;\n    assertEquals(3, reader.numDocs());\n    assertEquals(5, reader.maxDoc());\n    assertEquals(2, reader.numDeletedDocs());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb0130363fa13c53e4e78317c35b3b45a3089276"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb0130363fa13c53e4e78317c35b3b45a3089276":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d58e44159788900f4a2113b84463dc3fbbf80f20","cb0130363fa13c53e4e78317c35b3b45a3089276"],"cb0130363fa13c53e4e78317c35b3b45a3089276":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}