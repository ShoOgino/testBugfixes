{"path":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","commits":[{"id":"ee299c4e4c019174aa433f564b5de03a7a40e00d","date":1456264115,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = StringHelper.compare(bytesPerDim, minPackedValue, offset, pointBytes, offset);\n        if (cmpMin > 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = StringHelper.compare(bytesPerDim, maxPackedValue, offset, pointBytes, offset);\n        if (cmpMax < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        // nocommit make sure tests hit this case:\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9ccce763ea3c7e51eff749e584c061d8744b72d","date":1456395668,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = StringHelper.compare(bytesPerDim, minPackedValue, offset, pointBytes, offset);\n        if (cmpMin > 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = StringHelper.compare(bytesPerDim, maxPackedValue, offset, pointBytes, offset);\n        if (cmpMax < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = StringHelper.compare(bytesPerDim, minPackedValue, offset, pointBytes, offset);\n        if (cmpMin > 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = StringHelper.compare(bytesPerDim, maxPackedValue, offset, pointBytes, offset);\n        if (cmpMax < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        // nocommit make sure tests hit this case:\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = StringHelper.compare(bytesPerDim, minPackedValue, offset, pointBytes, offset);\n        if (cmpMin > 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = StringHelper.compare(bytesPerDim, maxPackedValue, offset, pointBytes, offset);\n        if (cmpMax < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMin > 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMax < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = StringHelper.compare(bytesPerDim, minPackedValue, offset, pointBytes, offset);\n        if (cmpMin > 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = StringHelper.compare(bytesPerDim, maxPackedValue, offset, pointBytes, offset);\n        if (cmpMax < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.SinglePointVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMin > 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMax < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMin > 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMax < 0) {\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"ee299c4e4c019174aa433f564b5de03a7a40e00d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b9ccce763ea3c7e51eff749e584c061d8744b72d"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["ee299c4e4c019174aa433f564b5de03a7a40e00d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee299c4e4c019174aa433f564b5de03a7a40e00d":["b9ccce763ea3c7e51eff749e584c061d8744b72d"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee299c4e4c019174aa433f564b5de03a7a40e00d","868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}