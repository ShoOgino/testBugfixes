{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    BigDecimal value = (BigDecimal)first;\n    BigDecimal exponent = (BigDecimal)second;\n        \n    return Math.pow(value.doubleValue(), exponent.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    BigDecimal value = (BigDecimal)first;\n    BigDecimal exponent = (BigDecimal)second;\n        \n    return Math.pow(value.doubleValue(), exponent.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    BigDecimal value = (BigDecimal)first;\n    BigDecimal exponent = (BigDecimal)second;\n        \n    return Math.pow(value.doubleValue(), exponent.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9762899335811430bb7c7864b00b3da95888510c","date":1518826057,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n\n    if(first instanceof Number) {\n      Number value = (Number) first;\n      Number exponent = (Number) second;\n      return Math.pow(value.doubleValue(), exponent.doubleValue());\n    } else {\n      List<Number> values = (List<Number>) first;\n      Number exponent = (Number) second;\n\n      List<Number> out = new ArrayList(values.size());\n      for(Number value : values) {\n        out.add(Math.pow(value.doubleValue(), exponent.doubleValue()));\n      }\n\n      return out;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    BigDecimal value = (BigDecimal)first;\n    BigDecimal exponent = (BigDecimal)second;\n        \n    return Math.pow(value.doubleValue(), exponent.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dbfb7607695772861351cc38d495b6a7efe744a","date":1539632823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException {\n    \n    if(null == first || null == second) {\n      return null;\n    }\n\n    if(first instanceof Number) {\n      Number value = (Number) first;\n      if(second instanceof Number) {\n        Number exponent = (Number) second;\n        return Math.pow(value.doubleValue(), exponent.doubleValue());\n      } else if(second instanceof List)  {\n        List<Number> exponents = (List<Number>) second;\n        List<Number> pows = new ArrayList();\n        for(Number exponent : exponents) {\n          pows.add(Math.pow(value.doubleValue(), exponent.doubleValue()));\n        }\n        return pows;\n      } else {\n        throw new IOException(\"The second parameter to the pow function must either be a scalar or list of scalars\");\n      }\n    } else if(first instanceof List) {\n      List<Number> values = (List<Number>) first;\n      if(second instanceof Number) {\n        Number exponent = (Number) second;\n\n        List<Number> out = new ArrayList(values.size());\n        for (Number value : values) {\n          out.add(Math.pow(value.doubleValue(), exponent.doubleValue()));\n        }\n\n        return out;\n      } else if(second instanceof List) {\n\n        List<Number> out = new ArrayList(values.size());\n        List<Number> exponents = (List<Number>)second;\n        if(values.size() != exponents.size()) {\n          throw new IOException(\"The pow function requires vectors of equal size if two vectors are provided.\");\n        }\n\n        for(int i=0; i<exponents.size(); i++) {\n          out.add(Math.pow(values.get(i).doubleValue(), exponents.get(i).doubleValue()));\n        }\n\n        return out;\n      } else {\n        throw new IOException(\"The second parameter to the pow function must either be a scalar or list of scalars\");\n      }\n    } else {\n      throw new IOException(\"The first parameter to the pow function must either be a scalar or list of scalars\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n\n    if(first instanceof Number) {\n      Number value = (Number) first;\n      Number exponent = (Number) second;\n      return Math.pow(value.doubleValue(), exponent.doubleValue());\n    } else {\n      List<Number> values = (List<Number>) first;\n      Number exponent = (Number) second;\n\n      List<Number> out = new ArrayList(values.size());\n      for(Number value : values) {\n        out.add(Math.pow(value.doubleValue(), exponent.doubleValue()));\n      }\n\n      return out;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PowerEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException {\n    \n    if(null == first || null == second) {\n      return null;\n    }\n\n    if(first instanceof Number) {\n      Number value = (Number) first;\n      if(second instanceof Number) {\n        Number exponent = (Number) second;\n        return Math.pow(value.doubleValue(), exponent.doubleValue());\n      } else if(second instanceof List)  {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> exponents = (List<Number>) second;\n        List<Number> pows = new ArrayList<>();\n        for(Number exponent : exponents) {\n          pows.add(Math.pow(value.doubleValue(), exponent.doubleValue()));\n        }\n        return pows;\n      } else {\n        throw new IOException(\"The second parameter to the pow function must either be a scalar or list of scalars\");\n      }\n    } else if(first instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values = (List<Number>) first;\n      if(second instanceof Number) {\n        Number exponent = (Number) second;\n\n        List<Number> out = new ArrayList<>(values.size());\n        for (Number value : values) {\n          out.add(Math.pow(value.doubleValue(), exponent.doubleValue()));\n        }\n\n        return out;\n      } else if(second instanceof List) {\n\n        List<Number> out = new ArrayList<>(values.size());\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> exponents = (List<Number>)second;\n        if(values.size() != exponents.size()) {\n          throw new IOException(\"The pow function requires vectors of equal size if two vectors are provided.\");\n        }\n\n        for(int i=0; i<exponents.size(); i++) {\n          out.add(Math.pow(values.get(i).doubleValue(), exponents.get(i).doubleValue()));\n        }\n\n        return out;\n      } else {\n        throw new IOException(\"The second parameter to the pow function must either be a scalar or list of scalars\");\n      }\n    } else {\n      throw new IOException(\"The first parameter to the pow function must either be a scalar or list of scalars\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException {\n    \n    if(null == first || null == second) {\n      return null;\n    }\n\n    if(first instanceof Number) {\n      Number value = (Number) first;\n      if(second instanceof Number) {\n        Number exponent = (Number) second;\n        return Math.pow(value.doubleValue(), exponent.doubleValue());\n      } else if(second instanceof List)  {\n        List<Number> exponents = (List<Number>) second;\n        List<Number> pows = new ArrayList();\n        for(Number exponent : exponents) {\n          pows.add(Math.pow(value.doubleValue(), exponent.doubleValue()));\n        }\n        return pows;\n      } else {\n        throw new IOException(\"The second parameter to the pow function must either be a scalar or list of scalars\");\n      }\n    } else if(first instanceof List) {\n      List<Number> values = (List<Number>) first;\n      if(second instanceof Number) {\n        Number exponent = (Number) second;\n\n        List<Number> out = new ArrayList(values.size());\n        for (Number value : values) {\n          out.add(Math.pow(value.doubleValue(), exponent.doubleValue()));\n        }\n\n        return out;\n      } else if(second instanceof List) {\n\n        List<Number> out = new ArrayList(values.size());\n        List<Number> exponents = (List<Number>)second;\n        if(values.size() != exponents.size()) {\n          throw new IOException(\"The pow function requires vectors of equal size if two vectors are provided.\");\n        }\n\n        for(int i=0; i<exponents.size(); i++) {\n          out.add(Math.pow(values.get(i).doubleValue(), exponents.get(i).doubleValue()));\n        }\n\n        return out;\n      } else {\n        throw new IOException(\"The second parameter to the pow function must either be a scalar or list of scalars\");\n      }\n    } else {\n      throw new IOException(\"The first parameter to the pow function must either be a scalar or list of scalars\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["8dbfb7607695772861351cc38d495b6a7efe744a"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8dbfb7607695772861351cc38d495b6a7efe744a":["9762899335811430bb7c7864b00b3da95888510c"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"9762899335811430bb7c7864b00b3da95888510c":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"8dbfb7607695772861351cc38d495b6a7efe744a":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","9762899335811430bb7c7864b00b3da95888510c"],"9762899335811430bb7c7864b00b3da95888510c":["8dbfb7607695772861351cc38d495b6a7efe744a"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}