{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVInt((int) (curDocPointer - lastSkipDocPointer[level]));\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVInt((int) (curPosPointer - lastSkipPosPointer[level]));\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVInt((int) (curPayPointer - lastSkipPayPointer[level]));\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVInt((int) (curDocPointer - lastSkipDocPointer[level]));\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVInt((int) (curPosPointer - lastSkipPosPointer[level]));\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVInt((int) (curPayPointer - lastSkipPayPointer[level]));\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dc8be2c5b545425a053cb3d15608d0dbfd37bac","date":1421857988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVInt((int) (curDocPointer - lastSkipDocPointer[level]));\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVInt((int) (curPosPointer - lastSkipPosPointer[level]));\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVInt((int) (curPayPointer - lastSkipPayPointer[level]));\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveFreqNormAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.getFilePointer()));\n    freqNormOut.writeTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.getFilePointer()));\n    freqNormOut.writeTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveFreqNormAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.getFilePointer()));\n    freqNormOut.writeTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, DataOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.size()));\n    freqNormOut.copyTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.getFilePointer()));\n    freqNormOut.writeTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dc8be2c5b545425a053cb3d15608d0dbfd37bac":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["2dc8be2c5b545425a053cb3d15608d0dbfd37bac"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"2dc8be2c5b545425a053cb3d15608d0dbfd37bac":["622a708571e534680618b3c5e0c28ac539a47776"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["2dc8be2c5b545425a053cb3d15608d0dbfd37bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}