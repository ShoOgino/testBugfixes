{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testEscapedStuff().mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testEscapedStuff().mjava","pathOld":"/dev/null","sourceNew":"  /** parse a syn file with some escaped syntax chars */\n  public void testEscapedStuff() throws Exception {\n    String testFile = \n      \"a\\\\=>a => b\\\\=>b\\n\" +\n      \"a\\\\,a => b\\\\,b\";\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.KEYWORD, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ball\", \n        new String[] { \"ball\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a=>a\",\n        new String[] { \"b=>b\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a,a\",\n        new String[] { \"b,b\" },\n        new int[] { 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testEscapedStuff().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testEscapedStuff().mjava","sourceNew":"  /** parse a syn file with some escaped syntax chars */\n  public void testEscapedStuff() throws Exception {\n    String testFile = \n      \"a\\\\=>a => b\\\\=>b\\n\" +\n      \"a\\\\,a => b\\\\,b\";\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.KEYWORD, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ball\", \n        new String[] { \"ball\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a=>a\",\n        new String[] { \"b=>b\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a,a\",\n        new String[] { \"b,b\" },\n        new int[] { 1 });\n  }\n\n","sourceOld":"  /** parse a syn file with some escaped syntax chars */\n  public void testEscapedStuff() throws Exception {\n    String testFile = \n      \"a\\\\=>a => b\\\\=>b\\n\" +\n      \"a\\\\,a => b\\\\,b\";\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.KEYWORD, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ball\", \n        new String[] { \"ball\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a=>a\",\n        new String[] { \"b=>b\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a,a\",\n        new String[] { \"b,b\" },\n        new int[] { 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testEscapedStuff().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testEscapedStuff().mjava","sourceNew":"  /** parse a syn file with some escaped syntax chars */\n  public void testEscapedStuff() throws Exception {\n    String testFile = \n      \"a\\\\=>a => b\\\\=>b\\n\" +\n      \"a\\\\,a => b\\\\,b\";\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.KEYWORD, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ball\", \n        new String[] { \"ball\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a=>a\",\n        new String[] { \"b=>b\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a,a\",\n        new String[] { \"b,b\" },\n        new int[] { 1 });\n  }\n\n","sourceOld":"  /** parse a syn file with some escaped syntax chars */\n  public void testEscapedStuff() throws Exception {\n    String testFile = \n      \"a\\\\=>a => b\\\\=>b\\n\" +\n      \"a\\\\,a => b\\\\,b\";\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.KEYWORD, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ball\", \n        new String[] { \"ball\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a=>a\",\n        new String[] { \"b=>b\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a,a\",\n        new String[] { \"b,b\" },\n        new int[] { 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testEscapedStuff().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testEscapedStuff().mjava","sourceNew":"  /** parse a syn file with some escaped syntax chars */\n  public void testEscapedStuff() throws Exception {\n    String testFile = \n      \"a\\\\=>a => b\\\\=>b\\n\" +\n      \"a\\\\,a => b\\\\,b\";\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.KEYWORD, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ball\", \n        new String[] { \"ball\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a=>a\",\n        new String[] { \"b=>b\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a,a\",\n        new String[] { \"b,b\" },\n        new int[] { 1 });\n  }\n\n","sourceOld":"  /** parse a syn file with some escaped syntax chars */\n  public void testEscapedStuff() throws Exception {\n    String testFile = \n      \"a\\\\=>a => b\\\\=>b\\n\" +\n      \"a\\\\,a => b\\\\,b\";\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.KEYWORD, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ball\", \n        new String[] { \"ball\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a=>a\",\n        new String[] { \"b=>b\" },\n        new int[] { 1 });\n    \n    assertAnalyzesTo(analyzer, \"a,a\",\n        new String[] { \"b,b\" },\n        new int[] { 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["2f49143da0a5d278a72f741432047fcfa6da996e"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"2f49143da0a5d278a72f741432047fcfa6da996e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["2f49143da0a5d278a72f741432047fcfa6da996e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}