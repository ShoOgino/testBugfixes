{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","commits":[{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                          double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                          double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73ab989727307be90eb75c2ce4ef41d383974f3","date":1580322291,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                          double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by, true)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy, true)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay, true)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                          double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                          double aX, double aY, boolean ab, double bX, double bY, boolean bc, double cX, double cY, boolean ca) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(aX, aY) || contains(bX, bY) || contains(cX, cY)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (tree.crossesLine(minX, maxX, minY, maxY, aX, aY, bX, bY, true)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (tree.crossesLine(minX, maxX, minY, maxY, bX, bY, cX, cY, true)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (tree.crossesLine(minX, maxX, minY, maxY, cX, cY, aX, aY, true)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, aX, aY, bX, bY, cX, cY) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                          double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by, true)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy, true)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay, true)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b73ab989727307be90eb75c2ce4ef41d383974f3":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"c568a1e2a5125c2245150eebb030a81baa158b31":["b73ab989727307be90eb75c2ce4ef41d383974f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"b73ab989727307be90eb75c2ce4ef41d383974f3":["c568a1e2a5125c2245150eebb030a81baa158b31"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["b73ab989727307be90eb75c2ce4ef41d383974f3","6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}