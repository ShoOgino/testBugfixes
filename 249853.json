{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#decodeMetaData().mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":null,"sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}