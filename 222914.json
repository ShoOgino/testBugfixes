{"path":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testDefinedGaps().mjava","commits":[{"id":"f272fe1542bca669076ff8ed44b298b316ab4aa5","date":1546365319,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testDefinedGaps().mjava","pathOld":"/dev/null","sourceNew":"  public void testDefinedGaps() throws IOException {\n    IntervalsSource source = Intervals.phrase(\n        Intervals.term(\"pease\"),\n        Intervals.extend(Intervals.term(\"cold\"), 1, 1),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 7 },\n        { 0, 4 },\n        {},\n        { 3, 7 },\n        {}\n    });\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 7, 20, 55);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 6, 35, 39);\n    assertMatch(sub, 7, 7, 47, 55);\n\n    source = Intervals.extend(Intervals.term(\"w1\"), 5, Integer.MAX_VALUE);\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, Integer.MAX_VALUE - 1, 0, Integer.MAX_VALUE - 1, 5, Integer.MAX_VALUE - 1 }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"362cb5d910af28f1dadaddc4c7670d7d166b23c2","date":1547647156,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testDefinedGaps().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testDefinedGaps().mjava","sourceNew":"  public void testDefinedGaps() throws IOException {\n    IntervalsSource source = Intervals.phrase(\n        Intervals.term(\"pease\"),\n        Intervals.extend(Intervals.term(\"cold\"), 1, 1),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 7 },\n        { 0, 4 },\n        {},\n        { 3, 7 },\n        {}\n    });\n    assertEquals(5, source.minExtent());\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 7, 20, 55);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 6, 35, 39);\n    assertMatch(sub, 7, 7, 47, 55);\n\n    source = Intervals.extend(Intervals.term(\"w1\"), 5, Integer.MAX_VALUE);\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, Integer.MAX_VALUE - 1, 0, Integer.MAX_VALUE - 1, 5, Integer.MAX_VALUE - 1 }\n    });\n\n    assertEquals(Integer.MAX_VALUE, source.minExtent());\n  }\n\n","sourceOld":"  public void testDefinedGaps() throws IOException {\n    IntervalsSource source = Intervals.phrase(\n        Intervals.term(\"pease\"),\n        Intervals.extend(Intervals.term(\"cold\"), 1, 1),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 7 },\n        { 0, 4 },\n        {},\n        { 3, 7 },\n        {}\n    });\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 7, 20, 55);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 6, 35, 39);\n    assertMatch(sub, 7, 7, 47, 55);\n\n    source = Intervals.extend(Intervals.term(\"w1\"), 5, Integer.MAX_VALUE);\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, Integer.MAX_VALUE - 1, 0, Integer.MAX_VALUE - 1, 5, Integer.MAX_VALUE - 1 }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testDefinedGaps().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testDefinedGaps().mjava","sourceNew":"  public void testDefinedGaps() throws IOException {\n    IntervalsSource source = Intervals.phrase(\n        Intervals.term(\"pease\"),\n        Intervals.extend(Intervals.term(\"cold\"), 1, 1),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 7 },\n        { 0, 4 },\n        {},\n        { 3, 7 },\n        {}\n    });\n    assertEquals(5, source.minExtent());\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 7, 20, 55);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 6, 35, 39);\n    assertMatch(sub, 7, 7, 47, 55);\n\n    source = Intervals.extend(Intervals.term(\"w1\"), 5, Integer.MAX_VALUE);\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, Integer.MAX_VALUE - 1, 0, Integer.MAX_VALUE - 1, 5, Integer.MAX_VALUE - 1 }\n    });\n\n    assertEquals(Integer.MAX_VALUE, source.minExtent());\n  }\n\n","sourceOld":"  public void testDefinedGaps() throws IOException {\n    IntervalsSource source = Intervals.phrase(\n        Intervals.term(\"pease\"),\n        Intervals.extend(Intervals.term(\"cold\"), 1, 1),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 7 },\n        { 0, 4 },\n        {},\n        { 3, 7 },\n        {}\n    });\n    assertEquals(5, source.minExtent());\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 7, 20, 55);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 6, 35, 39);\n    assertMatch(sub, 7, 7, 47, 55);\n\n    source = Intervals.extend(Intervals.term(\"w1\"), 5, Integer.MAX_VALUE);\n    checkIntervals(source, \"field2\", 1, new int[][]{\n        {}, {}, {}, {}, {},\n        { 0, Integer.MAX_VALUE - 1, 0, Integer.MAX_VALUE - 1, 5, Integer.MAX_VALUE - 1 }\n    });\n\n    assertEquals(Integer.MAX_VALUE, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}