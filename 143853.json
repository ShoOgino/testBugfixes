{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0)^3.0 +(b:two^5.0 t:two^10.0)^4.0\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"(b:one)^5.0 (t:one)^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+((b:one)^5.0 (t:one)^10.0) +((b:two)^5.0 (t:two)^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"((b:one)^5.0 (t:one)^10.0) ((b:two)^5.0 (t:two)^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+((b:one)^5.0 (t:one)^10.0) +((b:two)^5.0 (t:two)^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one)^5.0 (t:one)^10.0)^3.0 +((b:two)^5.0 (t:two)^10.0)^4.0\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0)^3.0 +(b:two^5.0 t:two^10.0)^4.0\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0cdf628dda21ad509f09608c835dc27541d1ca3"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}