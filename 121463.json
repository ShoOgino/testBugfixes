{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","pathOld":"/dev/null","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","c5a558d54519c651068ddb202f03befefb1514a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65","date":1509551229,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","sourceNew":"  private List<Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = zkController.getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","344b0840364d990b29b97467bfcc766ff8325d11"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}