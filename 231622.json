{"path":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#basicTest().mjava","commits":[{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#basicTest().mjava","pathOld":"/dev/null","sourceNew":"  public void basicTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, COLLECTION);\n\n    {\n      UpdateHandler updateHandler = getSolrCore(true).get(0).getUpdateHandler();\n      RefCounted<IndexWriter> iwRef = updateHandler.getSolrCoreState().getIndexWriter(null);\n      assertTrue(\"IndexWriter at leader must see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    checkRTG(1, 4, cluster.getJettySolrRunners());\n\n    new UpdateRequest()\n        .deleteById(\"1\")\n        .deleteByQuery(\"id:2\")\n        .process(cloudClient, COLLECTION);\n\n    // The DBQ is not processed at replicas, so we still can get doc2 and other docs by RTG\n    checkRTG(2,4, getSolrRunner(false));\n\n    new UpdateRequest()\n        .commit(cloudClient, COLLECTION);\n\n    checkShardConsistency(2, 1);\n\n    // Update log roll over\n    for (SolrCore solrCore : getSolrCore(false)) {\n      UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n      assertFalse(updateLog.hasUncommittedChanges());\n    }\n\n    // UpdateLog copy over old updates\n    for (int i = 15; i <= 150; i++) {\n      cloudClient.add(COLLECTION, sdoc(\"id\",String.valueOf(i)));\n      if (random().nextInt(100) < 15 & i != 150) {\n        cloudClient.commit(COLLECTION);\n      }\n    }\n    checkRTG(120,150, cluster.getJettySolrRunners());\n    waitForReplicasCatchUp(20);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04ecf884544ff74add5faa452748f160c4af904b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#basicTest().mjava","pathOld":"/dev/null","sourceNew":"  public void basicTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, COLLECTION);\n\n    {\n      UpdateHandler updateHandler = getSolrCore(true).get(0).getUpdateHandler();\n      RefCounted<IndexWriter> iwRef = updateHandler.getSolrCoreState().getIndexWriter(null);\n      assertTrue(\"IndexWriter at leader must see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    checkRTG(1, 4, cluster.getJettySolrRunners());\n\n    new UpdateRequest()\n        .deleteById(\"1\")\n        .deleteByQuery(\"id:2\")\n        .process(cloudClient, COLLECTION);\n\n    // The DBQ is not processed at replicas, so we still can get doc2 and other docs by RTG\n    checkRTG(2,4, getSolrRunner(false));\n\n    new UpdateRequest()\n        .commit(cloudClient, COLLECTION);\n\n    checkShardConsistency(2, 1);\n\n    // Update log roll over\n    for (SolrCore solrCore : getSolrCore(false)) {\n      UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n      assertFalse(updateLog.hasUncommittedChanges());\n    }\n\n    // UpdateLog copy over old updates\n    for (int i = 15; i <= 150; i++) {\n      cloudClient.add(COLLECTION, sdoc(\"id\",String.valueOf(i)));\n      if (random().nextInt(100) < 15 & i != 150) {\n        cloudClient.commit(COLLECTION);\n      }\n    }\n    checkRTG(120,150, cluster.getJettySolrRunners());\n    waitForReplicasCatchUp(20);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#basicTest().mjava","pathOld":"/dev/null","sourceNew":"  public void basicTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, COLLECTION);\n\n    {\n      UpdateHandler updateHandler = getSolrCore(true).get(0).getUpdateHandler();\n      RefCounted<IndexWriter> iwRef = updateHandler.getSolrCoreState().getIndexWriter(null);\n      assertTrue(\"IndexWriter at leader must see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    checkRTG(1, 4, cluster.getJettySolrRunners());\n\n    new UpdateRequest()\n        .deleteById(\"1\")\n        .deleteByQuery(\"id:2\")\n        .process(cloudClient, COLLECTION);\n\n    // The DBQ is not processed at replicas, so we still can get doc2 and other docs by RTG\n    checkRTG(2,4, getSolrRunner(false));\n\n    new UpdateRequest()\n        .commit(cloudClient, COLLECTION);\n\n    checkShardConsistency(2, 1);\n\n    // Update log roll over\n    for (SolrCore solrCore : getSolrCore(false)) {\n      UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n      assertFalse(updateLog.hasUncommittedChanges());\n    }\n\n    // UpdateLog copy over old updates\n    for (int i = 15; i <= 150; i++) {\n      cloudClient.add(COLLECTION, sdoc(\"id\",String.valueOf(i)));\n      if (random().nextInt(100) < 15 & i != 150) {\n        cloudClient.commit(COLLECTION);\n      }\n    }\n    checkRTG(120,150, cluster.getJettySolrRunners());\n    waitForReplicasCatchUp(20);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testOnlyLeaderIndexes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#basicTest().mjava","sourceNew":"  public void testOnlyLeaderIndexes() throws Exception {\n    createAndWaitForCollection(1, 0, 2, 0);\n    \n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n\n    {\n      UpdateHandler updateHandler = getSolrCore(true).get(0).getUpdateHandler();\n      RefCounted<IndexWriter> iwRef = updateHandler.getSolrCoreState().getIndexWriter(null);\n      assertTrue(\"IndexWriter at leader must see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    checkRTG(1, 4, cluster.getJettySolrRunners());\n\n    new UpdateRequest()\n        .deleteById(\"1\")\n        .deleteByQuery(\"id:2\")\n        .process(cloudClient, collectionName);\n\n    // The DBQ is not processed at replicas, so we still can get doc2 and other docs by RTG\n    checkRTG(2,4, getSolrRunner(false));\n\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n\n    waitForNumDocsInAllActiveReplicas(2);\n\n    // Update log roll over\n    for (SolrCore solrCore : getSolrCore(false)) {\n      UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n      assertFalse(updateLog.hasUncommittedChanges());\n    }\n\n    // UpdateLog copy over old updates\n    for (int i = 15; i <= 150; i++) {\n      cloudClient.add(collectionName, sdoc(\"id\",String.valueOf(i)));\n      if (random().nextInt(100) < 15 & i != 150) {\n        cloudClient.commit(collectionName);\n      }\n    }\n    checkRTG(120,150, cluster.getJettySolrRunners());\n    waitForReplicasCatchUp(20);\n  }\n\n","sourceOld":"  public void basicTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, COLLECTION);\n\n    {\n      UpdateHandler updateHandler = getSolrCore(true).get(0).getUpdateHandler();\n      RefCounted<IndexWriter> iwRef = updateHandler.getSolrCoreState().getIndexWriter(null);\n      assertTrue(\"IndexWriter at leader must see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    checkRTG(1, 4, cluster.getJettySolrRunners());\n\n    new UpdateRequest()\n        .deleteById(\"1\")\n        .deleteByQuery(\"id:2\")\n        .process(cloudClient, COLLECTION);\n\n    // The DBQ is not processed at replicas, so we still can get doc2 and other docs by RTG\n    checkRTG(2,4, getSolrRunner(false));\n\n    new UpdateRequest()\n        .commit(cloudClient, COLLECTION);\n\n    checkShardConsistency(2, 1);\n\n    // Update log roll over\n    for (SolrCore solrCore : getSolrCore(false)) {\n      UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n      assertFalse(updateLog.hasUncommittedChanges());\n    }\n\n    // UpdateLog copy over old updates\n    for (int i = 15; i <= 150; i++) {\n      cloudClient.add(COLLECTION, sdoc(\"id\",String.valueOf(i)));\n      if (random().nextInt(100) < 15 & i != 150) {\n        cloudClient.commit(COLLECTION);\n      }\n    }\n    checkRTG(120,150, cluster.getJettySolrRunners());\n    waitForReplicasCatchUp(20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#basicTest().mjava","sourceNew":null,"sourceOld":"  public void basicTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, COLLECTION);\n\n    {\n      UpdateHandler updateHandler = getSolrCore(true).get(0).getUpdateHandler();\n      RefCounted<IndexWriter> iwRef = updateHandler.getSolrCoreState().getIndexWriter(null);\n      assertTrue(\"IndexWriter at leader must see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    for (SolrCore solrCore : getSolrCore(false)) {\n      RefCounted<IndexWriter> iwRef = solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      assertFalse(\"IndexWriter at replicas must not see updates \", iwRef.get().hasUncommittedChanges());\n      iwRef.decref();\n    }\n\n    checkRTG(1, 4, cluster.getJettySolrRunners());\n\n    new UpdateRequest()\n        .deleteById(\"1\")\n        .deleteByQuery(\"id:2\")\n        .process(cloudClient, COLLECTION);\n\n    // The DBQ is not processed at replicas, so we still can get doc2 and other docs by RTG\n    checkRTG(2,4, getSolrRunner(false));\n\n    new UpdateRequest()\n        .commit(cloudClient, COLLECTION);\n\n    checkShardConsistency(2, 1);\n\n    // Update log roll over\n    for (SolrCore solrCore : getSolrCore(false)) {\n      UpdateLog updateLog = solrCore.getUpdateHandler().getUpdateLog();\n      assertFalse(updateLog.hasUncommittedChanges());\n    }\n\n    // UpdateLog copy over old updates\n    for (int i = 15; i <= 150; i++) {\n      cloudClient.add(COLLECTION, sdoc(\"id\",String.valueOf(i)));\n      if (random().nextInt(100) < 15 & i != 150) {\n        cloudClient.commit(COLLECTION);\n      }\n    }\n    checkRTG(120,150, cluster.getJettySolrRunners());\n    waitForReplicasCatchUp(20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be320990bdc77e643388fa801e75017f19289c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}