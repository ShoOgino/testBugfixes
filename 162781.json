{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      Bits docsWithField = getDocsWithField(reader, field, parser);\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator(docsWithField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}