{"path":"backwards/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"/dev/null","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}