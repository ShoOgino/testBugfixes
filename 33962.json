{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map[Object,Object],LeafReaderContext).mjava","commits":[{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues ifVals = ifSource.getValues(context, readerContext);\n    final FunctionValues trueVals = trueSource.getValues(context, readerContext);\n    final FunctionValues falseVals = falseSource.getValues(context, readerContext);\n\n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.byteVal(doc) : falseVals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.shortVal(doc) : falseVals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.floatVal(doc) : falseVals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.intVal(doc) : falseVals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.longVal(doc) : falseVals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.doubleVal(doc) : falseVals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.strVal(doc) : falseVals.strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.boolVal(doc) : falseVals.boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.bytesVal(doc, target) : falseVals.bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.objectVal(doc) : falseVals.objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.exists(doc) : falseVals.exists(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: we need types of trueSource / falseSource to handle this\n        // for now, use float.\n        return super.getValueFiller();\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"if(\" + ifVals.toString(doc) + ',' + trueVals.toString(doc) + ',' + falseVals.toString(doc) + ')';\n      }\n    };\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues ifVals = ifSource.getValues(context, readerContext);\n    final FunctionValues trueVals = trueSource.getValues(context, readerContext);\n    final FunctionValues falseVals = falseSource.getValues(context, readerContext);\n\n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.byteVal(doc) : falseVals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.shortVal(doc) : falseVals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.floatVal(doc) : falseVals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.intVal(doc) : falseVals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.longVal(doc) : falseVals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.doubleVal(doc) : falseVals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.strVal(doc) : falseVals.strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.boolVal(doc) : falseVals.boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.bytesVal(doc, target) : falseVals.bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.objectVal(doc) : falseVals.objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return ifVals.boolVal(doc) ? trueVals.exists(doc) : falseVals.exists(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: we need types of trueSource / falseSource to handle this\n        // for now, use float.\n        return super.getValueFiller();\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"if(\" + ifVals.toString(doc) + ',' + trueVals.toString(doc) + ',' + falseVals.toString(doc) + ')';\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}