{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForNewShard(String,String).mjava","sourceNew":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    long startTime = System.currentTimeMillis();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {} seconds for slice {} of collection {} to be available\",\n            (System.currentTimeMillis() - startTime) / 1000, sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState();\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + (System.currentTimeMillis() - startTime) / 1000 + \" seconds\"\n    );\n  }\n\n","sourceOld":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    long startTime = System.currentTimeMillis();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {} seconds for slice {} of collection {} to be available\",\n            (System.currentTimeMillis() - startTime) / 1000, sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState();\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + (System.currentTimeMillis() - startTime) / 1000 + \" seconds\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState();\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    long startTime = System.currentTimeMillis();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {} seconds for slice {} of collection {} to be available\",\n            (System.currentTimeMillis() - startTime) / 1000, sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState();\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + (System.currentTimeMillis() - startTime) / 1000 + \" seconds\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState();\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","bugFix":null,"bugIntro":["1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28","1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.debug(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.debug(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.debug(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.debug(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.debug(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.debug(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.debug(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.debug(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.debug(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.debug(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","sourceNew":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.debug(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.debug(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","sourceOld":"  void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.debug(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    RTimer timer = new RTimer();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.debug(\"Waited for {}ms for slice {} of collection {} to be available\",\n            timer.getTime(), sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + timer.getTime() + \"ms\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962cd4f5e313777f35da8f521265323e84184929":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","962cd4f5e313777f35da8f521265323e84184929"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}