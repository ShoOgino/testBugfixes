{"path":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\", IOContext.DEFAULT);\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = dir.createCompoundOutput(\"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName);\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = dir.createCompoundOutput(\"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName);\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\", newIOContext(random));\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\", IOContext.DEFAULT);\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = dir.createCompoundOutput(\"f.comp\", newIOContext(random));\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName, newIOContext(random));\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileWriter cw = new CompoundFileWriter(dir, \"f.comp\", newIOContext(random));\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            cw.addFile(\"f\" + i);\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = dir.createCompoundOutput(\"f.comp\", newIOContext(random));\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName, newIOContext(random));\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = dir.createCompoundOutput(\"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName);\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = dir.createCompoundOutput(\"f.comp\", newIOContext(random));\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName, newIOContext(random));\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = dir.createCompoundOutput(\"f.comp\");\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName);\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), true);\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName, newIOContext(random));\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = dir.createCompoundOutput(\"f.comp\", newIOContext(random));\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName, newIOContext(random));\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#setUp_2().mjava","sourceNew":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), true);\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName, newIOContext(random));\n        }\n        cw.close();\n    }\n\n","sourceOld":"    /** Setup a larger compound file with a number of components, each of\n     *  which is a sequential file (so that we can easily tell that we are\n     *  reading in the right byte). The methods sets up 20 files - f0 to f19,\n     *  the size of each file is 1000 bytes.\n     */\n    private void setUp_2() throws IOException {\n        CompoundFileDirectory cw = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), true);\n        for (int i=0; i<20; i++) {\n            createSequenceFile(dir, \"f\" + i, (byte) 0, 2000);\n            String fileName = \"f\" + i;\n            dir.copy(cw, fileName, fileName, newIOContext(random));\n        }\n        cw.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["67aadace85f701c87a4e0721eedcda25d8415a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2553b00f699380c64959ccb27991289aae87be2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}