{"path":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","commits":[{"id":"7540b2d98e89684a4076a7e99ba2f8ec7983de7c","date":1483428128,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,CloudJettyRunner,boolean).mjava","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner leaderJetty, CloudJettyRunner nodeToBringUp,\n      boolean disableFingerprint) throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    long numRequestsBefore = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    long numRequestsAfter = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    assertEquals(\"PeerSync failed. Had to fail back to replication\", numRequestsBefore, numRequestsAfter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919560b37ad88ad944e3073977d184fd663f2981","date":1487792657,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    IndexInBackGround iib = new IndexInBackGround(50);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56fa6695578129446663f523f13cc1c89f17f4b7","date":1502361381,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n    // we wait a little bit, so socket between leader -> replica will be timeout\n    Thread.sleep(3000);\n    IndexInBackGround iib = new IndexInBackGround(50, nodeToBringUp);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    IndexInBackGround iib = new IndexInBackGround(50);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n    // we wait a little bit, so socket between leader -> replica will be timeout\n    Thread.sleep(3000);\n    IndexInBackGround iib = new IndexInBackGround(50, nodeToBringUp);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    IndexInBackGround iib = new IndexInBackGround(50);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n    // we wait a little bit, so socket between leader -> replica will be timeout\n    Thread.sleep(3000);\n    IndexInBackGround iib = new IndexInBackGround(50, nodeToBringUp);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    IndexInBackGround iib = new IndexInBackGround(50);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n    // we wait a little bit, so socket between leader -> replica will be timeout\n    Thread.sleep(3000);\n    IndexInBackGround iib = new IndexInBackGround(50, nodeToBringUp);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    nodeToBringUp.jetty.start();\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n    // we wait a little bit, so socket between leader -> replica will be timeout\n    Thread.sleep(3000);\n    IndexInBackGround iib = new IndexInBackGround(50, nodeToBringUp);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","bugFix":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n    // we wait a little bit, so socket between leader -> replica will be timeout\n    Thread.sleep(3000);\n    IndexInBackGround iib = new IndexInBackGround(50, nodeToBringUp);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    nodeToBringUp.jetty.start();\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n    // we wait a little bit, so socket between leader -> replica will be timeout\n    Thread.sleep(3000);\n    IndexInBackGround iib = new IndexInBackGround(50, nodeToBringUp);\n    iib.start();\n    \n    // bring back dead node and ensure it recovers\n    nodeToBringUp.jetty.start();\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    waitForThingsToLevelOut(30);\n    \n    iib.join();\n    \n    cloudClient.commit();\n    \n    checkShardConsistency(false, false);\n    \n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56fa6695578129446663f523f13cc1c89f17f4b7":["919560b37ad88ad944e3073977d184fd663f2981"],"919560b37ad88ad944e3073977d184fd663f2981":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["919560b37ad88ad944e3073977d184fd663f2981","56fa6695578129446663f523f13cc1c89f17f4b7"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["56fa6695578129446663f523f13cc1c89f17f4b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["919560b37ad88ad944e3073977d184fd663f2981","56fa6695578129446663f523f13cc1c89f17f4b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"]},"commit2Childs":{"56fa6695578129446663f523f13cc1c89f17f4b7":["58884af1f68e9d61c217c753fbd6266d86a63b14","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"919560b37ad88ad944e3073977d184fd663f2981":["56fa6695578129446663f523f13cc1c89f17f4b7","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["919560b37ad88ad944e3073977d184fd663f2981","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}