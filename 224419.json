{"path":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testSortedBytes().mjava","commits":[{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testSortedBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedBytes() throws IOException {\n    Type[] types = new Type[] { Type.BYTES_FIXED_SORTED, Type.BYTES_VAR_SORTED };\n    for (Type type : types) {\n      boolean fixed = type == Type.BYTES_FIXED_SORTED;\n      final Directory d = newDirectory();\n      IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(d, cfg);\n      int numDocs = atLeast(100);\n      BytesRefHash hash = new BytesRefHash();\n      Map<String, String> docToString = new HashMap<String, String>();\n      int len = 1 + random().nextInt(50);\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        doc.add(newTextField(\"id\", \"\" + i, Field.Store.YES));\n        String string = fixed ? _TestUtil.randomFixedByteLengthUnicodeString(random(),\n            len) : _TestUtil.randomRealisticUnicodeString(random(), 1, len);\n        BytesRef br = new BytesRef(string);\n        doc.add(new SortedBytesDocValuesField(\"field\", br, type == Type.BYTES_FIXED_SORTED));\n        hash.add(br);\n        docToString.put(\"\" + i, string);\n        w.addDocument(doc);\n      }\n      if (rarely()) {\n        w.commit();\n      }\n      int numDocsNoValue = atLeast(10);\n      for (int i = 0; i < numDocsNoValue; i++) {\n        Document doc = new Document();\n        doc.add(newTextField(\"id\", \"noValue\", Field.Store.YES));\n        w.addDocument(doc);\n      }\n      BytesRef bytesRef = new BytesRef(fixed ? len : 0);\n      bytesRef.offset = 0;\n      bytesRef.length = fixed ? len : 0;\n      hash.add(bytesRef); // add empty value for the gaps\n      if (rarely()) {\n        w.commit();\n      }\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        String id = \"\" + i + numDocs;\n        doc.add(newTextField(\"id\", id, Field.Store.YES));\n        String string = fixed ? _TestUtil.randomFixedByteLengthUnicodeString(random(),\n            len) : _TestUtil.randomRealisticUnicodeString(random(), 1, len);\n        BytesRef br = new BytesRef(string);\n        hash.add(br);\n        docToString.put(id, string);\n        doc.add(new SortedBytesDocValuesField(\"field\", br, type == Type.BYTES_FIXED_SORTED));\n        w.addDocument(doc);\n      }\n      w.commit();\n      IndexReader reader = w.getReader();\n      DocValues docValues = MultiDocValues.getDocValues(reader, \"field\");\n      Source source = getSource(docValues);\n      SortedSource asSortedSource = source.asSortedSource();\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      BytesRef expected = new BytesRef();\n      BytesRef actual = new BytesRef();\n      assertEquals(hash.size(), asSortedSource.getValueCount());\n      for (int i = 0; i < hash.size(); i++) {\n        hash.get(sort[i], expected);\n        asSortedSource.getByOrd(i, actual);\n        assertEquals(expected.utf8ToString(), actual.utf8ToString());\n        int ord = asSortedSource.getOrdByValue(expected, actual);\n        assertEquals(i, ord);\n      }\n      AtomicReader slowR = SlowCompositeReaderWrapper.wrap(reader);\n      Set<Entry<String, String>> entrySet = docToString.entrySet();\n\n      for (Entry<String, String> entry : entrySet) {\n        int docId = docId(slowR, new Term(\"id\", entry.getKey()));\n        expected = new BytesRef(entry.getValue());\n        assertEquals(expected, asSortedSource.getBytes(docId, actual));\n      }\n\n      reader.close();\n      w.close();\n      d.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b156d846032fbeed5bbb6c45481d6dcab2339ec6","date":1358288319,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testSortedBytes().mjava","sourceNew":null,"sourceOld":"  public void testSortedBytes() throws IOException {\n    Type[] types = new Type[] { Type.BYTES_FIXED_SORTED, Type.BYTES_VAR_SORTED };\n    for (Type type : types) {\n      boolean fixed = type == Type.BYTES_FIXED_SORTED;\n      final Directory d = newDirectory();\n      IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(d, cfg);\n      int numDocs = atLeast(100);\n      BytesRefHash hash = new BytesRefHash();\n      Map<String, String> docToString = new HashMap<String, String>();\n      int len = 1 + random().nextInt(50);\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        doc.add(newTextField(\"id\", \"\" + i, Field.Store.YES));\n        String string = fixed ? _TestUtil.randomFixedByteLengthUnicodeString(random(),\n            len) : _TestUtil.randomRealisticUnicodeString(random(), 1, len);\n        BytesRef br = new BytesRef(string);\n        doc.add(new SortedBytesDocValuesField(\"field\", br, type == Type.BYTES_FIXED_SORTED));\n        hash.add(br);\n        docToString.put(\"\" + i, string);\n        w.addDocument(doc);\n      }\n      if (rarely()) {\n        w.commit();\n      }\n      int numDocsNoValue = atLeast(10);\n      for (int i = 0; i < numDocsNoValue; i++) {\n        Document doc = new Document();\n        doc.add(newTextField(\"id\", \"noValue\", Field.Store.YES));\n        w.addDocument(doc);\n      }\n      BytesRef bytesRef = new BytesRef(fixed ? len : 0);\n      bytesRef.offset = 0;\n      bytesRef.length = fixed ? len : 0;\n      hash.add(bytesRef); // add empty value for the gaps\n      if (rarely()) {\n        w.commit();\n      }\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        String id = \"\" + i + numDocs;\n        doc.add(newTextField(\"id\", id, Field.Store.YES));\n        String string = fixed ? _TestUtil.randomFixedByteLengthUnicodeString(random(),\n            len) : _TestUtil.randomRealisticUnicodeString(random(), 1, len);\n        BytesRef br = new BytesRef(string);\n        hash.add(br);\n        docToString.put(id, string);\n        doc.add(new SortedBytesDocValuesField(\"field\", br, type == Type.BYTES_FIXED_SORTED));\n        w.addDocument(doc);\n      }\n      w.commit();\n      IndexReader reader = w.getReader();\n      DocValues docValues = MultiDocValues.getDocValues(reader, \"field\");\n      Source source = getSource(docValues);\n      SortedSource asSortedSource = source.asSortedSource();\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      BytesRef expected = new BytesRef();\n      BytesRef actual = new BytesRef();\n      assertEquals(hash.size(), asSortedSource.getValueCount());\n      for (int i = 0; i < hash.size(); i++) {\n        hash.get(sort[i], expected);\n        asSortedSource.getByOrd(i, actual);\n        assertEquals(expected.utf8ToString(), actual.utf8ToString());\n        int ord = asSortedSource.getOrdByValue(expected, actual);\n        assertEquals(i, ord);\n      }\n      AtomicReader slowR = SlowCompositeReaderWrapper.wrap(reader);\n      Set<Entry<String, String>> entrySet = docToString.entrySet();\n\n      for (Entry<String, String> entry : entrySet) {\n        int docId = docId(slowR, new Term(\"id\", entry.getKey()));\n        expected = new BytesRef(entry.getValue());\n        assertEquals(expected, asSortedSource.getBytes(docId, actual));\n      }\n\n      reader.close();\n      w.close();\n      d.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55d38708477d49511977195bad066d9ced001005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b156d846032fbeed5bbb6c45481d6dcab2339ec6":["55d38708477d49511977195bad066d9ced001005"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55d38708477d49511977195bad066d9ced001005","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55d38708477d49511977195bad066d9ced001005":["b156d846032fbeed5bbb6c45481d6dcab2339ec6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b156d846032fbeed5bbb6c45481d6dcab2339ec6":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b156d846032fbeed5bbb6c45481d6dcab2339ec6"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}