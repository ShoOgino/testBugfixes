{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","commits":[{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:2 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ae69e36b15b227a219d4e334ccf5f58fb8affd","date":1562804219,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    final JettySolrRunner jetty = cluster.getRandomJetty(random());\n    final String jettyNodeName = jetty.getNodeName();\n    final int port = jetty.getLocalPort();\n\n    final String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    final String collectionName = \"testCreateCollectionAddReplica\";\n    log.info(\"Creating collection {}\", collectionName);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Should have found exactly one replica, only on expected jetty: \" +\n                 jettyNodeName + \"/\" + port,\n                 collectionName, expectAllReplicasOnSpecificNode(jettyNodeName, 1, 1),\n                 120, TimeUnit.SECONDS);\n\n    log.info(\"Adding replica to {}\", collectionName);\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n      .process(cluster.getSolrClient());\n    \n    waitForState(\"Should have found exactly two replicas, only on expected jetty: \" +\n                 jettyNodeName + \"/\" + port,\n                 collectionName, expectAllReplicasOnSpecificNode(jettyNodeName, 1, 2),\n                 120, TimeUnit.SECONDS);\n\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    final JettySolrRunner jetty = cluster.getRandomJetty(random());\n    final String jettyNodeName = jetty.getNodeName();\n    final int port = jetty.getLocalPort();\n\n    final String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    final String collectionName = \"testCreateCollectionAddReplica\";\n    log.info(\"Creating collection {}\", collectionName);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Should have found exactly one replica, only on expected jetty: \" +\n                 jettyNodeName + \"/\" + port,\n                 collectionName, expectAllReplicasOnSpecificNode(jettyNodeName, 1, 1),\n                 120, TimeUnit.SECONDS);\n\n    log.info(\"Adding replica to {}\", collectionName);\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n      .process(cluster.getSolrClient());\n    \n    waitForState(\"Should have found exactly two replicas, only on expected jetty: \" +\n                 jettyNodeName + \"/\" + port,\n                 collectionName, expectAllReplicasOnSpecificNode(jettyNodeName, 1, 2),\n                 120, TimeUnit.SECONDS);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25e4a4cddd699db6cce60282e747c7705897e821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"197bbedf08450ade98a11f4a0001448059666bec":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"3f504512a03d978990cbff30db0522b354e846db":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["89948af0461fead48f44ba8fb7866f107ce83f22"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25e4a4cddd699db6cce60282e747c7705897e821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"25e4a4cddd699db6cce60282e747c7705897e821":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25e4a4cddd699db6cce60282e747c7705897e821","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"560c18d71dad43d675158783c3840f8c80d6d39c":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}