{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.<String,String>emptyMap();\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      diagnostics = Collections.<String,String>emptyMap();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.<String,String>emptyMap();\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      diagnostics = Collections.<String,String>emptyMap();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.<String,String>emptyMap();\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      diagnostics = Collections.<String,String>emptyMap();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}