{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpURLConnectionTimeout#HostsEquals(URL,URL).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpURLConnectionTimeout#HostsEquals(URL,URL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *  Description of the Method\n     *\n     *@param  u1  Description of Parameter\n     *@param  u2  Description of Parameter\n     *@return     Description of the Returned Value\n     */\n    static boolean HostsEquals(URL u1, URL u2) {\n        final String h1 = u1.getHost();\n        final String h2 = u2.getHost();\n\n        if (h1 == null) {\n            return h2 == null;\n        }\n        else if (h2 == null) {\n            return false;\n        }\n        else if (h1.equalsIgnoreCase(h2)) {\n            return true;\n        }\n        // Have to resolve addresses before comparing, otherwise\n        // names like tachyon and tachyon.eng would compare different\n        final boolean result[] = {false};\n\n        java.security.AccessController.doPrivileged(\n            new java.security.PrivilegedAction() {\n                /**\n                 *  Main processing method for the HttpURLConnectionTimeout object\n                 *\n                 *@return    Description of the Returned Value\n                 */\n                public Object run() {\n                    try {\n                        InetAddress a1 = InetAddress.getByName(h1);\n                        InetAddress a2 = InetAddress.getByName(h2);\n                        result[0] = a1.equals(a2);\n                    }\n                    catch (UnknownHostException e) {\n                    }\n                    catch (SecurityException e) {\n                    }\n                    return null;\n                }\n            });\n        return result[0];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpURLConnectionTimeout#HostsEquals(URL,URL).mjava","sourceNew":null,"sourceOld":"    /**\n     *  Description of the Method\n     *\n     *@param  u1  Description of Parameter\n     *@param  u2  Description of Parameter\n     *@return     Description of the Returned Value\n     */\n    static boolean HostsEquals(URL u1, URL u2) {\n        final String h1 = u1.getHost();\n        final String h2 = u2.getHost();\n\n        if (h1 == null) {\n            return h2 == null;\n        }\n        else if (h2 == null) {\n            return false;\n        }\n        else if (h1.equalsIgnoreCase(h2)) {\n            return true;\n        }\n        // Have to resolve addresses before comparing, otherwise\n        // names like tachyon and tachyon.eng would compare different\n        final boolean result[] = {false};\n\n        java.security.AccessController.doPrivileged(\n            new java.security.PrivilegedAction() {\n                /**\n                 *  Main processing method for the HttpURLConnectionTimeout object\n                 *\n                 *@return    Description of the Returned Value\n                 */\n                public Object run() {\n                    try {\n                        InetAddress a1 = InetAddress.getByName(h1);\n                        InetAddress a2 = InetAddress.getByName(h2);\n                        result[0] = a1.equals(a2);\n                    }\n                    catch (UnknownHostException e) {\n                    }\n                    catch (SecurityException e) {\n                    }\n                    return null;\n                }\n            });\n        return result[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}