{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,OpenBitSet).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,OpenBitSet).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,OpenBitSet).mjava","sourceNew":"  /**\n   * Clear all deleted documents from a given open-bit-set according to a given reader \n   */\n  private static void clearDeleted(final IndexReader reader, \n      final OpenBitSet set) throws IOException {\n\n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    Bits bits = MultiFields.getLiveDocs(reader);\n\n    DocIdSetIterator it = set.iterator();\n    int doc = DocIdSetIterator.NO_MORE_DOCS;\n    while ((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (!bits.get(doc)) {\n        set.fastClear(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Clear all deleted documents from a given open-bit-set according to a given reader \n   */\n  private static void clearDeleted(final IndexReader reader, \n      final OpenBitSet set) throws IOException {\n\n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    Bits bits = MultiFields.getLiveDocs(reader);\n\n    DocIdSetIterator it = set.iterator();\n    int doc = DocIdSetIterator.NO_MORE_DOCS;\n    while ((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (!bits.get(doc)) {\n        set.fastClear(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,OpenBitSet).mjava","sourceNew":null,"sourceOld":"  /**\n   * Clear all deleted documents from a given open-bit-set according to a given reader \n   */\n  private static void clearDeleted(final IndexReader reader, \n      final OpenBitSet set) throws IOException {\n\n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    Bits bits = MultiFields.getLiveDocs(reader);\n\n    DocIdSetIterator it = set.iterator();\n    int doc = DocIdSetIterator.NO_MORE_DOCS;\n    while ((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (!bits.get(doc)) {\n        set.fastClear(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,OpenBitSet).mjava","sourceNew":null,"sourceOld":"  /**\n   * Clear all deleted documents from a given open-bit-set according to a given reader \n   */\n  private static void clearDeleted(final IndexReader reader, \n      final OpenBitSet set) throws IOException {\n\n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    Bits bits = MultiFields.getLiveDocs(reader);\n\n    DocIdSetIterator it = set.iterator();\n    int doc = DocIdSetIterator.NO_MORE_DOCS;\n    while ((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (!bits.get(doc)) {\n        set.fastClear(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b89678825b68eccaf09e6ab71675fc0b0af1e099","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}