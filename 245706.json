{"path":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","commits":[{"id":"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","date":1355410999,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<Object,SolrDocumentList>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 20);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c464a33a41a74ada47869a7372815aafb469df1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095","date":1356979334,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<Object,SolrDocumentList>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<Object,SolrDocumentList>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 20);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<Object,SolrDocumentList>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<Object,SolrDocumentList>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c3d088739fca447f2b8455a020c68bc2c74f14b","date":1477570285,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, MoreLikeThisParams.DEFAULT_DOC_COUNT);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, MoreLikeThisParams.DEFAULT_DOC_COUNT);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e24ef15e7e97c77f0829a62180966fccd2e94b5","date":1477623326,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, MoreLikeThisParams.DEFAULT_DOC_COUNT);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c464a33a41a74ada47869a7372815aafb469df1a","date":1558062703,"type":3,"author":"Alessandro Benedetti","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, MoreLikeThisParams.DEFAULT_DOC_COUNT);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, MoreLikeThisParams.DEFAULT_DOC_COUNT);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n//            if (log.isDebugEnabled()) {\n//              for (SolrDocument doc : shardDocList) {\n//                doc.addField(\"shard\", \"=\" + r.getShard());\n//              }\n//            }\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","bugFix":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, MoreLikeThisParams.DEFAULT_DOC_COUNT);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            if (log.isDebugEnabled()) {\n              log.debug(\"ShardRequest.response.shard: {}\", r.getShard());\n            }\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n\n            log.info(\"MLT: results added for key: {} documents: {}\", key, shardDocList);\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: {}\", key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    \n    // Handling Responses in finishStage, because solrResponse will put\n    // moreLikeThis xml\n    // segment ahead of result/response.\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      Map<Object,SolrDocumentList> tempResults = new LinkedHashMap<>();\n      \n      int mltcount = rb.req.getParams().getInt(MoreLikeThisParams.DOC_COUNT, MoreLikeThisParams.DEFAULT_DOC_COUNT);\n      String keyName = rb.req.getSchema().getUniqueKeyField().getName();\n      \n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n          for (ShardResponse r : sreq.responses) {\n            log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n            String key = r.getShardRequest().params\n                .get(MoreLikeThisComponent.DIST_DOC_ID);\n            SolrDocumentList shardDocList =  (SolrDocumentList) r.getSolrResponse().getResponse().get(\"response\");\n\n            if (shardDocList == null) {\n              continue;\n            }\n \n            log.info(\"MLT: results added for key: \" + key + \" documents: \"\n                + shardDocList.toString());\n            SolrDocumentList mergedDocList = tempResults.get(key);\n \n            if (mergedDocList == null) {\n              mergedDocList = new SolrDocumentList();\n              mergedDocList.addAll(shardDocList);\n              mergedDocList.setNumFound(shardDocList.getNumFound());\n              mergedDocList.setStart(shardDocList.getStart());\n              mergedDocList.setMaxScore(shardDocList.getMaxScore());\n            } else {\n              mergedDocList = mergeSolrDocumentList(mergedDocList,\n                  shardDocList, mltcount, keyName);\n            }\n            log.debug(\"Adding docs for key: \" + key);\n            tempResults.put(key, mergedDocList);\n          }\n        }\n      }\n\n      NamedList<SolrDocumentList> list = buildMoreLikeThisNamed(tempResults,\n          rb.resultIds);\n     \n      rb.rsp.add(\"moreLikeThis\", list);\n      \n    }\n    super.finishStage(rb);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"c464a33a41a74ada47869a7372815aafb469df1a":["7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"575e66bd4b2349209027f6801184da7fc3cba13f":["c464a33a41a74ada47869a7372815aafb469df1a"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e24ef15e7e97c77f0829a62180966fccd2e94b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"8c3d088739fca447f2b8455a020c68bc2c74f14b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7e24ef15e7e97c77f0829a62180966fccd2e94b5","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"c464a33a41a74ada47869a7372815aafb469df1a":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e24ef15e7e97c77f0829a62180966fccd2e94b5":["c464a33a41a74ada47869a7372815aafb469df1a"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8c3d088739fca447f2b8455a020c68bc2c74f14b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}