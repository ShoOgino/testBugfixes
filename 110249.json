{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactoryTest[TestCommonGramsFilterFactory]#testInform().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactoryTest[TestCommonGramsFilterFactory]#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactoryTest[TestCommonGramsFilterFactory]#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"280bf88d9ed3d9923e393961b594d9553970e4fd":["3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"280bf88d9ed3d9923e393961b594d9553970e4fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3241e06e642196396b80bb293acd9c0814d079e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["280bf88d9ed3d9923e393961b594d9553970e4fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}