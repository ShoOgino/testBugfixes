{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"e8be4ed7ae45ceed621fa6227c0ee604c81a3638","date":1375254900,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = index;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = index.outputs;\n        this.fsa = compiled.runAutomaton;\n        /*\n        PrintWriter pw1 = new PrintWriter(new File(\"../temp/fst.txt\"));\n        Util.toDot(dict,pw1, false, false);\n        pw1.close();\n        PrintWriter pw2 = new PrintWriter(new File(\"../temp/fsa.txt\"));\n        pw2.write(compiled.toDot());\n        pw2.close();\n        */\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = !startTerm.equals(term) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = index;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = index.outputs;\n        this.fsa = compiled.runAutomaton;\n        /*\n        PrintWriter pw1 = new PrintWriter(new File(\"../temp/fst.txt\"));\n        Util.toDot(dict,pw1, false, false);\n        pw1.close();\n        PrintWriter pw2 = new PrintWriter(new File(\"../temp/fsa.txt\"));\n        pw2.write(compiled.toDot());\n        pw2.close();\n        */\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = !startTerm.equals(term) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","sourceOld":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = index;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = index.outputs;\n        this.fsa = compiled.runAutomaton;\n        /*\n        PrintWriter pw1 = new PrintWriter(new File(\"../temp/fst.txt\"));\n        Util.toDot(dict,pw1, false, false);\n        pw1.close();\n        PrintWriter pw2 = new PrintWriter(new File(\"../temp/fsa.txt\"));\n        pw2.write(compiled.toDot());\n        pw2.close();\n        */\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = !startTerm.equals(term) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["e8be4ed7ae45ceed621fa6227c0ee604c81a3638"],"e8be4ed7ae45ceed621fa6227c0ee604c81a3638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8be4ed7ae45ceed621fa6227c0ee604c81a3638","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"e8be4ed7ae45ceed621fa6227c0ee604c81a3638":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}