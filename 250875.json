{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random, 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random, 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random, 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      if (supportsDocValues) {\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"intdocvalues\", SortField.Type.INT, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed))}));\n      }\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      if (supportsDocValues) {\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"intdocvalues\", SortField.Type.INT, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed))}));\n      }\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random(), 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"intdocvalues\", SortField.Type.INT, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed))}));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      if (supportsDocValues) {\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"intdocvalues\", SortField.Type.INT, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed))}));\n        assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed))}));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"intdocvalues\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed)}));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"intdocvalues\", SortField.Type.INT, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed))}));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"intdocvalues\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed)}));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"intdocvalues\", SortField.Type.INT, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed))}));\n      assertQuery(query, filter, new Sort(new SortField[] {useDocValues(new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed))}));\n    }\n  }\n\n","bugFix":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"intdocvalues\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed)}));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"intdocvalues\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed)}));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"intdocvalues\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed)}));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"byte\", SortField.Type.BYTE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"short\", SortField.Type.SHORT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"intdocvalues\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed)}));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(SortField sortField : allSortFields) {\n      assertQuery(query, filter, new Sort(new SortField[] {sortField}));\n    }\n    for(int i=0;i<20;i++) {\n      assertQuery(query, filter, getRandomSort());\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"intdocvalues\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed)}));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(SortField sortField : allSortFields) {\n      assertQuery(query, filter, new Sort(new SortField[] {sortField}));\n    }\n    for(int i=0;i<20;i++) {\n      assertQuery(query, filter, getRandomSort());\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(int rev=0;rev<2;rev++) {\n      boolean reversed = rev == 1;\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"int\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"long\", SortField.Type.LONG, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"float\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"double\", SortField.Type.DOUBLE, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytes\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"bytesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"intdocvalues\", SortField.Type.INT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvalues\", SortField.Type.STRING, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"sortedbytesdocvaluesval\", SortField.Type.STRING_VAL, reversed)}));\n      assertQuery(query, filter, new Sort(new SortField[] {new SortField(\"straightbytesdocvalues\", SortField.Type.STRING_VAL, reversed)}));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":null,"sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    assertQuery(query, filter, null);\n    assertQuery(query, filter, Sort.RELEVANCE);\n    assertQuery(query, filter, Sort.INDEXORDER);\n    for(SortField sortField : allSortFields) {\n      assertQuery(query, filter, new Sort(new SortField[] {sortField}));\n    }\n    for(int i=0;i<20;i++) {\n      assertQuery(query, filter, getRandomSort());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["59a0020b413d44dd79d85d7a66ed5004265fb453","7615b855702e008d91a95a2578bf05d27372f599"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7615b855702e008d91a95a2578bf05d27372f599":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ef0d8a69209261514c5739c770bba706c2308450":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"27ab7b234eab0cbc020836989b96ed430e1065bb":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8","ef0d8a69209261514c5739c770bba706c2308450"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358","d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}