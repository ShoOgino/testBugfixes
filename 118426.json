{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.shutdown();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.shutdown();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.shutdown();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.shutdown();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","date":1416362965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    doc.add (new SortedDocValuesField(\"sorter\", new BytesRef(\"b\")));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    doc.add (new SortedDocValuesField(\"sorter\", new BytesRef(\"d\")));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    doc.add (new SortedDocValuesField(\"sorter\", new BytesRef(\"a\")));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    doc.add (new SortedDocValuesField(\"sorter\", new BytesRef(\"c\")));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"b\", Field.Store.YES));\n    doc.add (new SortedDocValuesField(\"sorter\", new BytesRef(\"b\")));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three four\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"d\", Field.Store.YES));\n    doc.add (new SortedDocValuesField(\"sorter\", new BytesRef(\"d\")));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two three y\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"a\", Field.Store.YES));\n    doc.add (new SortedDocValuesField(\"sorter\", new BytesRef(\"a\")));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newTextField(\"field\", \"one two x\", Field.Store.YES));\n    doc.add (newTextField(\"sorter\", \"c\", Field.Store.YES));\n    doc.add (new SortedDocValuesField(\"sorter\", new BytesRef(\"c\")));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1db68e96dd908fcd79ef809095822736aa601d08":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["1db68e96dd908fcd79ef809095822736aa601d08"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}