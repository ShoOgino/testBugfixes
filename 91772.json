{"path":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testFsyncDoesntCreateNewFiles().mjava","commits":[{"id":"e830b36b587d781f855eaf64af7a8a39965c4483","date":1396635670,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testFsyncDoesntCreateNewFiles().mjava","pathOld":"/dev/null","sourceNew":"  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = TestUtil.getTempDir(\"nocreate\");\n    Directory fsdir = new SimpleFSDirectory(path);\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testFsyncDoesntCreateNewFiles().mjava","pathOld":"/dev/null","sourceNew":"  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = TestUtil.getTempDir(\"nocreate\");\n    Directory fsdir = new SimpleFSDirectory(path);\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = createTempDir(\"nocreate\");\n    System.out.println(path.getAbsolutePath());\n    Directory fsdir = new SimpleFSDirectory(path);\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = TestUtil.getTempDir(\"nocreate\");\n    Directory fsdir = new SimpleFSDirectory(path);\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a8943eb15df4a89f924a7bcea7fec04688d304c","date":1397578332,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if its using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = createTempDir(\"nocreate\");\n    System.out.println(path.getAbsolutePath());\n    Directory fsdir = new SimpleFSDirectory(path);\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["e830b36b587d781f855eaf64af7a8a39965c4483","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"0a8943eb15df4a89f924a7bcea7fec04688d304c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e830b36b587d781f855eaf64af7a8a39965c4483"],"e830b36b587d781f855eaf64af7a8a39965c4483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a8943eb15df4a89f924a7bcea7fec04688d304c"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["0a8943eb15df4a89f924a7bcea7fec04688d304c"],"0a8943eb15df4a89f924a7bcea7fec04688d304c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"e830b36b587d781f855eaf64af7a8a39965c4483":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","e830b36b587d781f855eaf64af7a8a39965c4483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}