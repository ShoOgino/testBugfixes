{"path":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see IndexReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      return searcher.getIndexReader().isCurrent();\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see IndexReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      return searcher.getIndexReader().isCurrent();\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see CompositeIndexReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof CompositeIndexReader ?\n        ((CompositeIndexReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see IndexReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      return searcher.getIndexReader().isCurrent();\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see CompositeIndexReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof CompositeIndexReader ?\n        ((CompositeIndexReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see IndexReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      return searcher.getIndexReader().isCurrent();\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["df16fc2e9b615e0138edac46655ae628f5d098ad","893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}