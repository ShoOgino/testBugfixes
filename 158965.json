{"path":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 1000000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\"};\n    for (int i = 0; i < atLeast(5000); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s_dv\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i_dv\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l_dv\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f_dv\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d_dv\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss_dv\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is_dv\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls_dv\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs_dv\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds_dv\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(1000); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b271c46c3637c193cc37983fc38592b1b99d5f1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6d7fd8888854b7c6f30f35246057c92ddf5a750","date":1429938426,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 1000000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\"};\n    for (int i = 0; i < atLeast(5000); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s_dv\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i_dv\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l_dv\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f_dv\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d_dv\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss_dv\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is_dv\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls_dv\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs_dv\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds_dv\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(1000); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["b271c46c3637c193cc37983fc38592b1b99d5f1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["b271c46c3637c193cc37983fc38592b1b99d5f1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b271c46c3637c193cc37983fc38592b1b99d5f1c","date":1502322303,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 10000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\", \"test_dt_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_dts_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_dt\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\", \"test_dts\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\", \"test_dts_p\"\n        };\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 12 + 14];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i * (random().nextBoolean()?1:-1)); // in the queries we do positive and negative\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(randomInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(randomInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(randomLong(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(randomFloat(cardinality));\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(raondomDouble(cardinality));\n      docFields[12] = \"test_dt\";\n      docFields[13] = dateFormat.format(new Date(randomMs(cardinality)));\n      for (int j = 14; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(randomInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(randomInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(randomLong(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(randomFloat(cardinality));\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(raondomDouble(cardinality));\n        docFields[j++] = \"test_dts\";\n        docFields[j++] = dateFormat.format(new Date(randomMs(cardinality)));\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(10000); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","bugFix":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","a6d7fd8888854b7c6f30f35246057c92ddf5a750","897b06b1364bd1f658a8be7591e43f0851458e7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 10000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\", \"test_dt_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_dts_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_dt\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\", \"test_dts\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\", \"test_dts_p\"\n        };\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 12 + 14];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i * (random().nextBoolean()?1:-1)); // in the queries we do positive and negative\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(randomInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(randomInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(randomLong(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(randomFloat(cardinality));\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(raondomDouble(cardinality));\n      docFields[12] = \"test_dt\";\n      docFields[13] = dateFormat.format(new Date(randomMs(cardinality)));\n      for (int j = 14; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(randomInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(randomInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(randomLong(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(randomFloat(cardinality));\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(raondomDouble(cardinality));\n        docFields[j++] = \"test_dts\";\n        docFields[j++] = dateFormat.format(new Date(randomMs(cardinality)));\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(10000); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testRandom().mjava","sourceNew":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 10000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\", \"test_dt_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_dts_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_dt\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\", \"test_dts\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\", \"test_dts_p\"\n        };\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 12 + 14];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i * (random().nextBoolean()?1:-1)); // in the queries we do positive and negative\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(randomInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(randomInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(randomLong(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(randomFloat(cardinality));\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(raondomDouble(cardinality));\n      docFields[12] = \"test_dt\";\n      docFields[13] = dateFormat.format(new Date(randomMs(cardinality)));\n      for (int j = 14; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(randomInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(randomInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(randomLong(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(randomFloat(cardinality));\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(raondomDouble(cardinality));\n        docFields[j++] = \"test_dts\";\n        docFields[j++] = dateFormat.format(new Date(randomMs(cardinality)));\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(10000); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testRandom() throws Exception {\n    // All field values will be a number between 0 and cardinality\n    int cardinality = 100000;\n    // Fields to use for interval faceting\n    String[] fields = new String[]{\n        \"test_s_dv\", \"test_i_dv\", \"test_l_dv\", \"test_f_dv\", \"test_d_dv\",\n        \"test_ss_dv\", \"test_is_dv\", \"test_fs_dv\", \"test_ls_dv\", \"test_ds_dv\", \"test_s\", \"test_i\", \n        \"test_l\", \"test_f\", \"test_d\", \"test_ss\", \"test_is\", \"test_fs\", \"test_ls\", \"test_ds\",\n        \"test_i_p\", \"test_is_p\", \"test_l_p\", \"test_ls_p\", \"test_f_p\", \"test_fs_p\", \"test_d_p\", \"test_ds_p\"};\n    for (int i = 0; i < atLeast(500); i++) {\n      if (random().nextInt(50) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(100) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      String[] docFields = new String[(random().nextInt(5)) * 10 + 12];\n      docFields[0] = \"id\";\n      docFields[1] = String.valueOf(i);\n      docFields[2] = \"test_s\";\n      docFields[3] = String.valueOf(random().nextInt(cardinality));\n      docFields[4] = \"test_i\";\n      docFields[5] = String.valueOf(random().nextInt(cardinality));\n      docFields[6] = \"test_l\";\n      docFields[7] = String.valueOf(random().nextInt(cardinality));\n      docFields[8] = \"test_f\";\n      docFields[9] = String.valueOf(random().nextFloat() * cardinality);\n      docFields[10] = \"test_d\";\n      docFields[11] = String.valueOf(random().nextDouble() * cardinality);\n      for (int j = 12; j < docFields.length; ) {\n        docFields[j++] = \"test_ss\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_is\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_ls\";\n        docFields[j++] = String.valueOf(random().nextInt(cardinality));\n        docFields[j++] = \"test_fs\";\n        docFields[j++] = String.valueOf(random().nextFloat() * cardinality);\n        docFields[j++] = \"test_ds\";\n        docFields[j++] = String.valueOf(random().nextDouble() * cardinality);\n      }\n      assertU(adoc(docFields));\n      if (random().nextInt(50) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i = 0; i < atLeast(100); i++) {\n      doTestQuery(cardinality, fields);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["a6d7fd8888854b7c6f30f35246057c92ddf5a750","744b111b17d15d490a648eb021bfa240e7f11556"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["897b06b1364bd1f658a8be7591e43f0851458e7f","b271c46c3637c193cc37983fc38592b1b99d5f1c"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"b271c46c3637c193cc37983fc38592b1b99d5f1c":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["897b06b1364bd1f658a8be7591e43f0851458e7f","b271c46c3637c193cc37983fc38592b1b99d5f1c"],"a6d7fd8888854b7c6f30f35246057c92ddf5a750":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"744b111b17d15d490a648eb021bfa240e7f11556":["a6d7fd8888854b7c6f30f35246057c92ddf5a750"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b271c46c3637c193cc37983fc38592b1b99d5f1c"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"897b06b1364bd1f658a8be7591e43f0851458e7f":["58884af1f68e9d61c217c753fbd6266d86a63b14","b271c46c3637c193cc37983fc38592b1b99d5f1c","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"b271c46c3637c193cc37983fc38592b1b99d5f1c":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"a6d7fd8888854b7c6f30f35246057c92ddf5a750":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a6d7fd8888854b7c6f30f35246057c92ddf5a750"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}