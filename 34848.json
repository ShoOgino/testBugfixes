{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","commits":[{"id":"b1176cc473fd402233610120f0af6fca86314bcc","date":1274270317,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    Reader reader = getHyphenationReader();\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n      .getHyphenationTree(reader);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217","date":1288533406,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    Reader reader = getHyphenationReader();\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n      .getHyphenationTree(reader);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":["b1176cc473fd402233610120f0af6fca86314bcc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    Reader reader = getHyphenationReader();\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n      .getHyphenationTree(reader);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    Reader reader = getHyphenationReader();\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n      .getHyphenationTree(reader);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":["b1176cc473fd402233610120f0af6fca86314bcc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"basketballkurv\")),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217":["b1176cc473fd402233610120f0af6fca86314bcc"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["85a883878c0af761245ab048babc63d099f835f3","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"b1176cc473fd402233610120f0af6fca86314bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c8b28a7124e9fa13cdb9b0c79da424c3d05f4217","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["b1176cc473fd402233610120f0af6fca86314bcc","c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b1176cc473fd402233610120f0af6fca86314bcc","c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a3776dccca01c11e7046323cfad46a3b4a471233","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"b1176cc473fd402233610120f0af6fca86314bcc":["c8b28a7124e9fa13cdb9b0c79da424c3d05f4217","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"85a883878c0af761245ab048babc63d099f835f3":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1176cc473fd402233610120f0af6fca86314bcc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}