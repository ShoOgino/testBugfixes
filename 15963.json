{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","sourceNew":"  /**\n   * @param clazz\n   */\n  private static void load(Class<? extends NLS> clazz) {\n    final Field[] fieldArray = clazz.getDeclaredFields();\n\n    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;\n\n    // build a map of field names to Field objects\n    final int len = fieldArray.length;\n    Map<String, Field> fields = new HashMap<String, Field>(len * 2);\n    for (int i = 0; i < len; i++) {\n      fields.put(fieldArray[i].getName(), fieldArray[i]);\n      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param clazz\n   */\n  private static void load(Class<? extends NLS> clazz) {\n    final Field[] fieldArray = clazz.getDeclaredFields();\n\n    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;\n\n    // build a map of field names to Field objects\n    final int len = fieldArray.length;\n    Map<String, Field> fields = new HashMap<String, Field>(len * 2);\n    for (int i = 0; i < len; i++) {\n      fields.put(fieldArray[i].getName(), fieldArray[i]);\n      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","sourceNew":"  private static void load(Class<? extends NLS> clazz) {\n    final Field[] fieldArray = clazz.getDeclaredFields();\n\n    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;\n\n    // build a map of field names to Field objects\n    final int len = fieldArray.length;\n    Map<String, Field> fields = new HashMap<String, Field>(len * 2);\n    for (int i = 0; i < len; i++) {\n      fields.put(fieldArray[i].getName(), fieldArray[i]);\n      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param clazz\n   */\n  private static void load(Class<? extends NLS> clazz) {\n    final Field[] fieldArray = clazz.getDeclaredFields();\n\n    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;\n\n    // build a map of field names to Field objects\n    final int len = fieldArray.length;\n    Map<String, Field> fields = new HashMap<String, Field>(len * 2);\n    for (int i = 0; i < len; i++) {\n      fields.put(fieldArray[i].getName(), fieldArray[i]);\n      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","sourceNew":"  private static void load(Class<? extends NLS> clazz) {\n    final Field[] fieldArray = clazz.getDeclaredFields();\n\n    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;\n\n    // build a map of field names to Field objects\n    final int len = fieldArray.length;\n    Map<String, Field> fields = new HashMap<>(len * 2);\n    for (int i = 0; i < len; i++) {\n      fields.put(fieldArray[i].getName(), fieldArray[i]);\n      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);\n    }\n  }\n\n","sourceOld":"  private static void load(Class<? extends NLS> clazz) {\n    final Field[] fieldArray = clazz.getDeclaredFields();\n\n    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;\n\n    // build a map of field names to Field objects\n    final int len = fieldArray.length;\n    Map<String, Field> fields = new HashMap<String, Field>(len * 2);\n    for (int i = 0; i < len; i++) {\n      fields.put(fieldArray[i].getName(), fieldArray[i]);\n      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f27641d17cfd674c750ad0fe2f801c2216f38de","date":1441851864,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#load(Class[#-extends-NLS]).mjava","sourceNew":"  private static void load(Class<? extends NLS> clazz) {\n    final Field[] fieldArray = clazz.getDeclaredFields();\n\n    // build a map of field names to Field objects\n    final int len = fieldArray.length;\n    Map<String, Field> fields = new HashMap<>(len * 2);\n    for (int i = 0; i < len; i++) {\n      fields.put(fieldArray[i].getName(), fieldArray[i]);\n      loadfieldValue(fieldArray[i], clazz);\n    }\n  }\n\n","sourceOld":"  private static void load(Class<? extends NLS> clazz) {\n    final Field[] fieldArray = clazz.getDeclaredFields();\n\n    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;\n\n    // build a map of field names to Field objects\n    final int len = fieldArray.length;\n    Map<String, Field> fields = new HashMap<>(len * 2);\n    for (int i = 0; i < len; i++) {\n      fields.put(fieldArray[i].getName(), fieldArray[i]);\n      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f27641d17cfd674c750ad0fe2f801c2216f38de":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f27641d17cfd674c750ad0fe2f801c2216f38de"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f27641d17cfd674c750ad0fe2f801c2216f38de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0f27641d17cfd674c750ad0fe2f801c2216f38de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}