{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetParser.FacetFieldParser#parse(Object).mjava","commits":[{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser.FacetFieldParser#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetFieldParser#parse(Object).mjava","sourceNew":"    public FacetField parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n      if (arg instanceof String) {\n        // just the field name...\n        facet.field = (String)arg;\n\n      } else if (arg instanceof Map) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> m = (Map<String, Object>) arg;\n        facet.field = getField(m);\n        facet.offset = getLong(m, \"offset\", facet.offset);\n        facet.limit = getLong(m, \"limit\", facet.limit);\n        facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n        facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n        if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n        facet.mincount = getLong(m, \"mincount\", facet.mincount);\n        facet.missing = getBoolean(m, \"missing\", facet.missing);\n        facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n        facet.prefix = getString(m, \"prefix\", facet.prefix);\n        facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n        facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n        facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n        // TODO: pull up to higher level?\n        facet.refine = FacetRequest.RefineMethod.fromObj(m.get(\"refine\"));\n\n        facet.perSeg = getBooleanOrNull(m, \"perSeg\");\n\n        // facet.sort may depend on a facet stat...\n        // should we be parsing / validating this here, or in the execution environment?\n        Object o = m.get(\"facet\");\n        parseSubs(o);\n\n        facet.sort = parseAndValidateSort(facet, m, SORT);\n        facet.prelim_sort = parseAndValidateSort(facet, m, \"prelim_sort\");\n      } else if (arg != null) {\n        // something like json.facet.facet.field=2\n        throw err(\"Expected string/map for facet field, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n      }\n\n      if (null == facet.sort) {\n        facet.sort = FacetRequest.FacetSort.COUNT_DESC;\n      }\n\n      return facet;\n    }\n\n","sourceOld":"    public FacetField parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n      if (arg instanceof String) {\n        // just the field name...\n        facet.field = (String)arg;\n\n      } else if (arg instanceof Map) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> m = (Map<String, Object>) arg;\n        facet.field = getField(m);\n        facet.offset = getLong(m, \"offset\", facet.offset);\n        facet.limit = getLong(m, \"limit\", facet.limit);\n        facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n        facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n        if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n        facet.mincount = getLong(m, \"mincount\", facet.mincount);\n        facet.missing = getBoolean(m, \"missing\", facet.missing);\n        facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n        facet.prefix = getString(m, \"prefix\", facet.prefix);\n        facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n        facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n        facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n        // TODO: pull up to higher level?\n        facet.refine = RefineMethod.fromObj(m.get(\"refine\"));\n\n        facet.perSeg = getBooleanOrNull(m, \"perSeg\");\n\n        // facet.sort may depend on a facet stat...\n        // should we be parsing / validating this here, or in the execution environment?\n        Object o = m.get(\"facet\");\n        parseSubs(o);\n\n        facet.sort = parseAndValidateSort(facet, m, SORT);\n        facet.prelim_sort = parseAndValidateSort(facet, m, \"prelim_sort\");\n      } else if (arg != null) {\n        // something like json.facet.facet.field=2\n        throw err(\"Expected string/map for facet field, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n      }\n\n      if (null == facet.sort) {\n        facet.sort = FacetSort.COUNT_DESC;\n      }\n\n      return facet;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}