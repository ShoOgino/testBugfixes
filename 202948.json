{"path":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setRAMBufferSizeMB(0.2));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setRAMBufferSizeMB(0.2));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.2));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    writer.setRAMBufferSizeMB(0.2);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.2));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n\n    if (VERBOSE)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.2));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n\n    if (DEBUG)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptionsThreads().mjava","sourceNew":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.2));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n\n    if (VERBOSE)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","sourceOld":"  public void testRandomExceptionsThreads() throws Throwable {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter writer  = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.2));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n\n    if (VERBOSE)\n      writer.setInfoStream(System.out);\n\n    final int NUM_THREADS = 4;\n\n    final IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new IndexerThread(i, writer);\n      threads[i].start();\n    }\n\n    for(int i=0;i<NUM_THREADS;i++)\n      threads[i].join();\n\n    for(int i=0;i<NUM_THREADS;i++)\n      if (threads[i].failure != null)\n        fail(\"thread \" + threads[i].getName() + \": hit unexpected failure\");\n\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir, true);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    _TestUtil.checkIndex(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5350389bf83287111f7760b9e3db3af8e3648474"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["5350389bf83287111f7760b9e3db3af8e3648474","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5350389bf83287111f7760b9e3db3af8e3648474":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}