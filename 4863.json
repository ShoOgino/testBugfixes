{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader();\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader();\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader();\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader();\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.arcIdx == Integer.MIN_VALUE) {\n          arc = doSeekFloorArrayWithGaps(arc, targetLabel, in);\n        } else {\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader();\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc, fstReader) < targetLabel) {\n                fst.readNextArc(arc, fstReader);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc, fstReader) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc, fstReader);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.arcIdx() == Integer.MIN_VALUE) {\n          arc = doSeekFloorArrayWithGaps(arc, targetLabel, in);\n        } else {\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","sourceOld":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.arcIdx == Integer.MIN_VALUE) {\n          arc = doSeekFloorArrayWithGaps(arc, targetLabel, in);\n        } else {\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b115f25f829e48473723bb73c2c09e29f0a3ed0d","date":1564170556,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.arcIdx() == Integer.MIN_VALUE) {\n          arc = doSeekFloorArrayWithGaps(arc, targetLabel, in);\n        } else {\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","sourceOld":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.arcIdx() == Integer.MIN_VALUE) {\n          arc = doSeekFloorArrayWithGaps(arc, targetLabel, in);\n        } else {\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.arcIdx() == Integer.MIN_VALUE) {\n          arc = doSeekFloorArrayWithGaps(arc, targetLabel, in);\n        } else {\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","sourceOld":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.arcIdx == Integer.MIN_VALUE) {\n          arc = doSeekFloorArrayWithGaps(arc, targetLabel, in);\n        } else {\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {\n          arc = doSeekFloorArrayDirectAddressing(arc, targetLabel, in);\n        } else {\n          assert arc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH;\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","sourceOld":"  // Todo: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's &lt;= target. */\n  void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while (arc != null) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast() + \" bba=\" + arc.bytesPerArc);\n      int targetLabel = getTargetLabel();\n\n      if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {\n        // Arcs are in an array\n        final FST.BytesReader in = fst.getBytesReader();\n        if (arc.arcIdx() == Integer.MIN_VALUE) {\n          arc = doSeekFloorArrayWithGaps(arc, targetLabel, in);\n        } else {\n          arc = doSeekFloorArrayPacked(arc, targetLabel, in);\n        }\n      } else {\n        arc = doSeekFloorList(arc, targetLabel);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"71d31a7d5773508492505519bb5230b87c8937ad":["b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["b1eb427f2c6beed80d1724555fc1db003ccf3030","c4015cd39dff8d4dec562d909f9766debac53aa6"],"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["82557a475db3e0849171dc0be5b02e3ae0745ddb","8917bfede3b4ca30f4305c1e391e9218959cd723"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["f8061ddd97f3352007d927dae445884a6f3d857b","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}