{"path":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrServer,String,String).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\"));\n    NamedList rsp = solr.request(qr);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrServer solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\"));\n    NamedList rsp = solr.request(qr);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"120dcb9902dc31423bf7d82c10c5439b88325390","date":1442349554,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\"));\n    NamedList rsp = solr.request(qr);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), docId);\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), docId);\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), docId);\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["120dcb9902dc31423bf7d82c10c5439b88325390"],"120dcb9902dc31423bf7d82c10c5439b88325390":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["120dcb9902dc31423bf7d82c10c5439b88325390","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["120dcb9902dc31423bf7d82c10c5439b88325390","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"120dcb9902dc31423bf7d82c10c5439b88325390":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"bafca15d8e408346a67f4282ad1143b88023893b":["120dcb9902dc31423bf7d82c10c5439b88325390"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}