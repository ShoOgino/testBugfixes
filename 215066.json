{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestStemmer#assertStemsTo(String,String...).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestStemmer#assertStemsTo(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertStemsTo(String s, String... expected) {\n    Arrays.sort(expected);\n    \n    List<Stem> stems = stemmer.stem(s);\n    String actual[] = new String[stems.size()];\n    for (int i = 0; i < actual.length; i++) {\n      actual[i] = stems.get(i).getStemString();\n    }\n    Arrays.sort(actual);\n    \n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378fdc1eb541e8a672a95d6c660c81d606145d1d","date":1393358825,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestStemmer#assertStemsTo(String,String...).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestStemmer#assertStemsTo(String,String...).mjava","sourceNew":"  private void assertStemsTo(String s, String... expected) {\n    Arrays.sort(expected);\n    \n    List<CharsRef> stems = stemmer.stem(s);\n    String actual[] = new String[stems.size()];\n    for (int i = 0; i < actual.length; i++) {\n      actual[i] = stems.get(i).toString();\n    }\n    Arrays.sort(actual);\n    \n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void assertStemsTo(String s, String... expected) {\n    Arrays.sort(expected);\n    \n    List<Stem> stems = stemmer.stem(s);\n    String actual[] = new String[stems.size()];\n    for (int i = 0; i < actual.length; i++) {\n      actual[i] = stems.get(i).getStemString();\n    }\n    Arrays.sort(actual);\n    \n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestCaseInsensitive#assertStemsTo(String,String...).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestStemmer#assertStemsTo(String,String...).mjava","sourceNew":"  private void assertStemsTo(String s, String... expected) {\n    Arrays.sort(expected);\n    \n    List<CharsRef> stems = stemmer.stem(s);\n    String actual[] = new String[stems.size()];\n    for (int i = 0; i < actual.length; i++) {\n      actual[i] = stems.get(i).toString();\n    }\n    Arrays.sort(actual);\n    \n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void assertStemsTo(String s, String... expected) {\n    Arrays.sort(expected);\n    \n    List<CharsRef> stems = stemmer.stem(s);\n    String actual[] = new String[stems.size()];\n    for (int i = 0; i < actual.length; i++) {\n      actual[i] = stems.get(i).toString();\n    }\n    Arrays.sort(actual);\n    \n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestStemmer#assertStemsTo(String,String...).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestStemmer#assertStemsTo(String,String...).mjava","sourceNew":"  private void assertStemsTo(String s, String... expected) {\n    Arrays.sort(expected);\n    \n    List<CharsRef> stems = stemmer.stem(s);\n    String actual[] = new String[stems.size()];\n    for (int i = 0; i < actual.length; i++) {\n      actual[i] = stems.get(i).toString();\n    }\n    Arrays.sort(actual);\n    \n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void assertStemsTo(String s, String... expected) {\n    Arrays.sort(expected);\n    \n    List<CharsRef> stems = stemmer.stem(s);\n    String actual[] = new String[stems.size()];\n    for (int i = 0; i < actual.length; i++) {\n      actual[i] = stems.get(i).toString();\n    }\n    Arrays.sort(actual);\n    \n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}