{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestISOLatin1AccentFilter#testU().mjava","commits":[{"id":"967b81abdda07e0975b376eff34820e8adb6270d","date":1272916926,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestISOLatin1AccentFilter#testU().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestISOLatin1AccentFilter#testU().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["967b81abdda07e0975b376eff34820e8adb6270d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"967b81abdda07e0975b376eff34820e8adb6270d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["967b81abdda07e0975b376eff34820e8adb6270d"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"967b81abdda07e0975b376eff34820e8adb6270d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}