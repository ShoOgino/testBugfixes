{"path":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query\tthe query string to be parsed.\n   *  @param field\tthe default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    try {\n      QueryParser parser = new QueryParser(field, analyzer);\n      return parser.parse(query);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3029a7a46013b533900f159ca12ee4f27e0de5c","date":1065150762,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  Default locale is used for date range parsing.\n   *  Use {@link #parse(String, String, Analyzer, Locale)} for non-default locale handling.\n   *  @param query\tthe query string to be parsed.\n   *  @param field\tthe default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    try {\n      QueryParser parser = new QueryParser(field, analyzer);\n      return parser.parse(query);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query\tthe query string to be parsed.\n   *  @param field\tthe default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    try {\n      QueryParser parser = new QueryParser(field, analyzer);\n      return parser.parse(query);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9bdafc45175f108b0e45b1335f905caeb5786f","date":1065194037,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query\tthe query string to be parsed.\n   *  @param field\tthe default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    try {\n      QueryParser parser = new QueryParser(field, analyzer);\n      return parser.parse(query);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  Default locale is used for date range parsing.\n   *  Use {@link #parse(String, String, Analyzer, Locale)} for non-default locale handling.\n   *  @param query\tthe query string to be parsed.\n   *  @param field\tthe default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    try {\n      QueryParser parser = new QueryParser(field, analyzer);\n      return parser.parse(query);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d287fd9dfd8a046227860be51793208e76a86a8f","date":1068723746,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query\tthe query string to be parsed.\n   *  @param field\tthe default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    QueryParser parser = new QueryParser(field, analyzer);\n    return parser.parse(query);\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query\tthe query string to be parsed.\n   *  @param field\tthe default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    try {\n      QueryParser parser = new QueryParser(field, analyzer);\n      return parser.parse(query);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c","date":1078315633,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @param field  the default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    QueryParser parser = new QueryParser(field, analyzer);\n    return parser.parse(query);\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query\tthe query string to be parsed.\n   *  @param field\tthe default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    QueryParser parser = new QueryParser(field, analyzer);\n    return parser.parse(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27b4efdbd90269b912a78421b7c2b776d4e11fc7","date":1121286842,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @param field  the default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   *\n   *  @deprecated Use an instance of QueryParser and the {@link #parse(String)} method instead.\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    QueryParser parser = new QueryParser(field, analyzer);\n    return parser.parse(query);\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @param field  the default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    QueryParser parser = new QueryParser(field, analyzer);\n    return parser.parse(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String,String,Analyzer).mjava","sourceNew":null,"sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @param field  the default field for query terms.\n   *  @param analyzer   used to find terms in the query text.\n   *  @throws ParseException if the parsing fails\n   *\n   *  @deprecated Use an instance of QueryParser and the {@link #parse(String)} method instead.\n   */\n  static public Query parse(String query, String field, Analyzer analyzer)\n       throws ParseException {\n    QueryParser parser = new QueryParser(field, analyzer);\n    return parser.parse(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd9bdafc45175f108b0e45b1335f905caeb5786f":["f3029a7a46013b533900f159ca12ee4f27e0de5c"],"f3029a7a46013b533900f159ca12ee4f27e0de5c":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["27b4efdbd90269b912a78421b7c2b776d4e11fc7"],"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c":["d287fd9dfd8a046227860be51793208e76a86a8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d287fd9dfd8a046227860be51793208e76a86a8f":["bd9bdafc45175f108b0e45b1335f905caeb5786f"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27b4efdbd90269b912a78421b7c2b776d4e11fc7":["f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"bd9bdafc45175f108b0e45b1335f905caeb5786f":["d287fd9dfd8a046227860be51793208e76a86a8f"],"f3029a7a46013b533900f159ca12ee4f27e0de5c":["bd9bdafc45175f108b0e45b1335f905caeb5786f"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c":["27b4efdbd90269b912a78421b7c2b776d4e11fc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"d287fd9dfd8a046227860be51793208e76a86a8f":["f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["f3029a7a46013b533900f159ca12ee4f27e0de5c"],"27b4efdbd90269b912a78421b7c2b776d4e11fc7":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}