{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setAllowCompression(boolean).mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setAllowCompression(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Allow server->client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      final DefaultHttpClient client = (DefaultHttpClient) httpClient;\n      client\n          .removeRequestInterceptorByClass(UseCompressionRequestInterceptor.class);\n      client\n          .removeResponseInterceptorByClass(UseCompressionResponseInterceptor.class);\n      if (allowCompression) {\n        client.addRequestInterceptor(new UseCompressionRequestInterceptor());\n        client.addResponseInterceptor(new UseCompressionResponseInterceptor());\n      }\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setAllowCompression(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setAllowCompression(boolean).mjava","sourceNew":"  /**\n   * Allow server->client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed. This method is only allowed if the http client is of type\n   * DefatulHttpClient.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      HttpClientUtil.setAllowCompression((DefaultHttpClient) httpClient, allowCompression);\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Allow server->client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      final DefaultHttpClient client = (DefaultHttpClient) httpClient;\n      client\n          .removeRequestInterceptorByClass(UseCompressionRequestInterceptor.class);\n      client\n          .removeResponseInterceptorByClass(UseCompressionResponseInterceptor.class);\n      if (allowCompression) {\n        client.addRequestInterceptor(new UseCompressionRequestInterceptor());\n        client.addResponseInterceptor(new UseCompressionResponseInterceptor());\n      }\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#setAllowCompression(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setAllowCompression(boolean).mjava","sourceNew":"  /**\n   * Allow server->client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed. This method is only allowed if the http client is of type\n   * DefatulHttpClient.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      HttpClientUtil.setAllowCompression((DefaultHttpClient) httpClient, allowCompression);\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Allow server->client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed. This method is only allowed if the http client is of type\n   * DefatulHttpClient.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      HttpClientUtil.setAllowCompression((DefaultHttpClient) httpClient, allowCompression);\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}