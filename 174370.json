{"path":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#findPending(DocumentsWriterFlushControl,ArrayList[ThreadState],ArrayList[ThreadState]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#findPending(DocumentsWriterFlushControl,ArrayList[ThreadState],ArrayList[ThreadState]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#findPending(DocumentsWriterFlushControl,ArrayList[ThreadState],ArrayList[ThreadState]).mjava","sourceNew":"  static void findPending(DocumentsWriterFlushControl flushControl,\n      ArrayList<ThreadState> pending, ArrayList<ThreadState> notPending) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreads();\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.flushPending) {\n        pending.add(next);\n      } else {\n        notPending.add(next);\n      }\n    }\n  }\n\n","sourceOld":"  static void findPending(DocumentsWriterFlushControl flushControl,\n      ArrayList<ThreadState> pending, ArrayList<ThreadState> notPending) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreads();\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.flushPending) {\n        pending.add(next);\n      } else {\n        notPending.add(next);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#findPending(DocumentsWriterFlushControl,ArrayList[ThreadState],ArrayList[ThreadState]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#findPending(DocumentsWriterFlushControl,ArrayList[ThreadState],ArrayList[ThreadState]).mjava","sourceNew":"  static void findPending(DocumentsWriterFlushControl flushControl,\n      ArrayList<ThreadState> pending, ArrayList<ThreadState> notPending) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.flushPending) {\n        pending.add(next);\n      } else {\n        notPending.add(next);\n      }\n    }\n  }\n\n","sourceOld":"  static void findPending(DocumentsWriterFlushControl flushControl,\n      ArrayList<ThreadState> pending, ArrayList<ThreadState> notPending) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreads();\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.flushPending) {\n        pending.add(next);\n      } else {\n        notPending.add(next);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#findPending(DocumentsWriterFlushControl,ArrayList[DocumentsWriterPerThread],ArrayList[DocumentsWriterPerThread]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#findPending(DocumentsWriterFlushControl,ArrayList[ThreadState],ArrayList[ThreadState]).mjava","sourceNew":"  static void findPending(DocumentsWriterFlushControl flushControl,\n      ArrayList<DocumentsWriterPerThread> pending, ArrayList<DocumentsWriterPerThread> notPending) {\n    Iterator<DocumentsWriterPerThread> allActiveThreads = flushControl.allActiveWriters();\n    while (allActiveThreads.hasNext()) {\n      DocumentsWriterPerThread next = allActiveThreads.next();\n      if (next.isFlushPending()) {\n        pending.add(next);\n      } else {\n        notPending.add(next);\n      }\n    }\n  }\n\n","sourceOld":"  static void findPending(DocumentsWriterFlushControl flushControl,\n      ArrayList<ThreadState> pending, ArrayList<ThreadState> notPending) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.flushPending) {\n        pending.add(next);\n      } else {\n        notPending.add(next);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}