{"path":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    Searcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#getValues(String)} method for a Document retrieved\n   * from an index.\n   * \n   * @throws Exception on error\n   */\n  public void testGetValuesForIndexedDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(makeDocumentWithFields());\n    IndexReader reader = writer.getReader();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for something that does exists\n    Query query = new TermQuery(new Term(\"keyword\", \"test1\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    doAssert(searcher.doc(hits[0].doc), true);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1f653cfcf159baeaafe5d01682a911e95bba4012","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["790e1fde4caa765b3faaad3fbcd25c6973450336","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}