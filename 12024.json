{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","commits":[{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else\n          reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else\n          reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806","406e7055a3e99d3fa6ce49a555a51dd18b321806","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else\n          reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else\n          reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void xxxtestDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void xxxtestDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          while (true)\n            try {\n              threads[t].join();\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }            \n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["09c482d1e63332617181729a225b215c452d8a79"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"09c482d1e63332617181729a225b215c452d8a79":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}