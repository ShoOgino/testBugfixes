{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","commits":[{"id":"c652f4c2c731f462e41a528ed4f97245915206d5","date":1530728194,"type":0,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.segmentInfos.size());\n    SegmentCommitInfo si = writer.segmentInfos.info(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["631ea3d1607299c59f33edef140ffc19a81f07a0","b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.segmentInfos.size());\n    SegmentCommitInfo si = writer.segmentInfos.info(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.segmentInfos.size());\n    SegmentCommitInfo si = writer.segmentInfos.info(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"631ea3d1607299c59f33edef140ffc19a81f07a0","date":1532450367,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","sourceNew":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    SegmentCommitInfo si = writer.listOfSegmentCommitInfos().get(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.segmentInfos.size());\n    SegmentCommitInfo si = writer.segmentInfos.info(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":["c652f4c2c731f462e41a528ed4f97245915206d5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","sourceNew":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits.value);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    SegmentCommitInfo si = writer.listOfSegmentCommitInfos().get(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    SegmentCommitInfo si = writer.listOfSegmentCommitInfos().get(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8","date":1535113998,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","sourceNew":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new IncludeSoftDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits.value);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    SegmentCommitInfo si = writer.listOfSegmentCommitInfos().get(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits.value);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    SegmentCommitInfo si = writer.listOfSegmentCommitInfos().get(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":["c652f4c2c731f462e41a528ed4f97245915206d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testMergeSoftDeleteAndHardDelete().mjava","sourceNew":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new IncludeSoftDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits.value);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.cloneSegmentInfos().size());\n    SegmentCommitInfo si = writer.cloneSegmentInfos().info(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":"  public void testMergeSoftDeleteAndHardDelete() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig()\n        .setSoftDeletesField(softDelete)\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n            MatchAllDocsQuery::new, new LogDocMergePolicy()));\n    config.setReaderPooling(true);\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    d.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.addDocument(d);\n    try (DirectoryReader reader = writer.getReader()) {\n      assertEquals(2, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n    }\n    while (true) {\n      try (DirectoryReader reader = writer.getReader()) {\n        TopDocs topDocs = new IndexSearcher(new IncludeSoftDeletesWrapper(reader)).search(new TermQuery(new Term(\"id\", \"1\")), 1);\n        assertEquals(1, topDocs.totalHits.value);\n        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {\n          break;\n        }\n      }\n    }\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    SegmentCommitInfo si = writer.listOfSegmentCommitInfos().get(0);\n    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete\n    assertEquals(0, si.getDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c652f4c2c731f462e41a528ed4f97245915206d5"],"631ea3d1607299c59f33edef140ffc19a81f07a0":["c652f4c2c731f462e41a528ed4f97245915206d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"c652f4c2c731f462e41a528ed4f97245915206d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c652f4c2c731f462e41a528ed4f97245915206d5"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"631ea3d1607299c59f33edef140ffc19a81f07a0":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c652f4c2c731f462e41a528ed4f97245915206d5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c652f4c2c731f462e41a528ed4f97245915206d5":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","631ea3d1607299c59f33edef140ffc19a81f07a0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}