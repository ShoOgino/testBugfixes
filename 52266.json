{"path":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    String intLongRange = getFacetXML(response, \"mi\", \"rangeFacets\", \"long_ld\");\n    ArrayList<Double> intLong = (ArrayList<Double>)xmlToList(intLongRange, \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(intLong,intLongTest);\n    //Int Double\n    String intDoubleRange = getFacetXML(response, \"mi\", \"rangeFacets\", \"double_dd\");    \n    ArrayList<Double> intDouble = (ArrayList<Double>)xmlToList(intDoubleRange, \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(intDouble,intDoubleTest);\n    //Int Date\n    String intDateRange = getFacetXML(response, \"mi\", \"rangeFacets\", \"date_dtd\");\n    ArrayList<Long> intDate = (ArrayList<Long>)xmlToList(intDateRange, \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(intDate,intDateTest);\n    \n    //Float Long\n    String floatLongRange = getFacetXML(response, \"mf\", \"rangeFacets\", \"long_ld\");\n    ArrayList<Double> floatLong = (ArrayList<Double>)xmlToList(floatLongRange, \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(floatLong,floatLongTest);\n    //Float Double\n    String floatDoubleRange = getFacetXML(response, \"mf\", \"rangeFacets\", \"double_dd\");    \n    ArrayList<Long> floatDouble = (ArrayList<Long>)xmlToList(floatDoubleRange, \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(floatDouble,floatDoubleTest);\n    //Float Date                      \n    String floatDateRange = getFacetXML(response, \"mf\", \"rangeFacets\", \"date_dtd\");\n    ArrayList<Double> floatDate = (ArrayList<Double>)xmlToList(floatDateRange, \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(floatDate,floatDateTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c0586e0570de2261142e339891d57c0f36f45c6","date":1385565864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    String intLongRange = getFacetXML(response, \"mi\", \"rangeFacets\", \"long_ld\");\n    ArrayList<Double> intLong = (ArrayList<Double>)xmlToList(intLongRange, \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(intLong,intLongTest);\n    //Int Double\n    String intDoubleRange = getFacetXML(response, \"mi\", \"rangeFacets\", \"double_dd\");    \n    ArrayList<Double> intDouble = (ArrayList<Double>)xmlToList(intDoubleRange, \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(intDouble,intDoubleTest);\n    //Int Date\n    String intDateRange = getFacetXML(response, \"mi\", \"rangeFacets\", \"date_dtd\");\n    ArrayList<Long> intDate = (ArrayList<Long>)xmlToList(intDateRange, \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(intDate,intDateTest);\n    \n    //Float Long\n    String floatLongRange = getFacetXML(response, \"mf\", \"rangeFacets\", \"long_ld\");\n    ArrayList<Double> floatLong = (ArrayList<Double>)xmlToList(floatLongRange, \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(floatLong,floatLongTest);\n    //Float Double\n    String floatDoubleRange = getFacetXML(response, \"mf\", \"rangeFacets\", \"double_dd\");    \n    ArrayList<Long> floatDouble = (ArrayList<Long>)xmlToList(floatDoubleRange, \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(floatDouble,floatDoubleTest);\n    //Float Date                      \n    String floatDateRange = getFacetXML(response, \"mf\", \"rangeFacets\", \"date_dtd\");\n    ArrayList<Double> floatDate = (ArrayList<Double>)xmlToList(floatDateRange, \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(floatDate,floatDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c0586e0570de2261142e339891d57c0f36f45c6"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["1c0586e0570de2261142e339891d57c0f36f45c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"1c0586e0570de2261142e339891d57c0f36f45c6":["ff403346522eaa9de75403763e297e83a3ea585c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["1c0586e0570de2261142e339891d57c0f36f45c6"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c0586e0570de2261142e339891d57c0f36f45c6":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}