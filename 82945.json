{"path":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      String[] docs = {\n\t\"a b c d e\",\n\t\"a b c d e a b c d e\",\n\t\"a b c d e f g h i j\",\n\t\"a c e\",\n\t\"e c a\",\n\t\"a c e a c e\",\n\t\"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n\tDocument d = new Document();\n\td.add(Field.Text(\"contents\", docs[j]));\n\twriter.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t\"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n\tQuery query = parser.parse(queries[j]);\n\tSystem.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n\thits = searcher.search(query, null);\n\n\tSystem.out.println(hits.length() + \" total results\");\n\tfor (int i = 0 ; i < hits.length() && i < 10; i++) {\n\t  Document d = hits.doc(i);\n\t  System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n\t\t\t     + \" \" + d.get(\"contents\"));\n\t}\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c3c367a9a447fbe22b73e7dde652f132e693c5d","date":1004577180,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      String[] docs = {\n\t\"a b c d e\",\n\t\"a b c d e a b c d e\",\n\t\"a b c d e f g h i j\",\n\t\"a c e\",\n\t\"e c a\",\n\t\"a c e a c e\",\n\t\"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n\tDocument d = new Document();\n\td.add(Field.Text(\"contents\", docs[j]));\n\twriter.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t\"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n\tQuery query = parser.parse(queries[j]);\n\tSystem.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n\thits = searcher.search(query);\n\n\tSystem.out.println(hits.length() + \" total results\");\n\tfor (int i = 0 ; i < hits.length() && i < 10; i++) {\n\t  Document d = hits.doc(i);\n\t  System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n\t\t\t     + \" \" + d.get(\"contents\"));\n\t}\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      String[] docs = {\n\t\"a b c d e\",\n\t\"a b c d e a b c d e\",\n\t\"a b c d e f g h i j\",\n\t\"a c e\",\n\t\"e c a\",\n\t\"a c e a c e\",\n\t\"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n\tDocument d = new Document();\n\td.add(Field.Text(\"contents\", docs[j]));\n\twriter.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t\"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n\tQuery query = parser.parse(queries[j]);\n\tSystem.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n\thits = searcher.search(query, null);\n\n\tSystem.out.println(hits.length() + \" total results\");\n\tfor (int i = 0 ; i < hits.length() && i < 10; i++) {\n\t  Document d = hits.doc(i);\n\t  System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n\t\t\t     + \" \" + d.get(\"contents\"));\n\t}\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(Field.Text(\"contents\", docs[j]));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query);\n\n        System.out.println(hits.length() + \" total results\");\n        for (int i = 0 ; i < hits.length() && i < 10; i++) {\n          Document d = hits.doc(i);\n          System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      String[] docs = {\n\t\"a b c d e\",\n\t\"a b c d e a b c d e\",\n\t\"a b c d e f g h i j\",\n\t\"a c e\",\n\t\"e c a\",\n\t\"a c e a c e\",\n\t\"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n\tDocument d = new Document();\n\td.add(Field.Text(\"contents\", docs[j]));\n\twriter.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t\"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n\tQuery query = parser.parse(queries[j]);\n\tSystem.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n\thits = searcher.search(query);\n\n\tSystem.out.println(hits.length() + \" total results\");\n\tfor (int i = 0 ; i < hits.length() && i < 10; i++) {\n\t  Document d = hits.doc(i);\n\t  System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n\t\t\t     + \" \" + d.get(\"contents\"));\n\t}\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2355382afa0f25b02f903f0c0c00433c59edd075","date":1094509762,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query);\n\n        System.out.println(hits.length() + \" total results\");\n        for (int i = 0 ; i < hits.length() && i < 10; i++) {\n          Document d = hits.doc(i);\n          System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(Field.Text(\"contents\", docs[j]));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query);\n\n        System.out.println(hits.length() + \" total results\");\n        for (int i = 0 ; i < hits.length() && i < 10; i++) {\n          Document d = hits.doc(i);\n          System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query);\n\n        System.out.println(hits.length() + \" total results\");\n        for (int i = 0 ; i < hits.length() && i < 10; i++) {\n          Document d = hits.doc(i);\n          System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query);\n\n        System.out.println(hits.length() + \" total results\");\n        for (int i = 0 ; i < hits.length() && i < 10; i++) {\n          Document d = hits.doc(i);\n          System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        ScoreDoc[] hits = searcher.search(query, null, docs.length).scoreDocs;\n\n        System.out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          System.out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query);\n\n        System.out.println(hits.length() + \" total results\");\n        for (int i = 0 ; i < hits.length() && i < 10; i++) {\n          Document d = hits.doc(i);\n          System.out.println(i + \" \" + hits.score(i)\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        ScoreDoc[] hits = searcher.search(query, null, docs.length).scoreDocs;\n\n        System.out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          System.out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        ScoreDoc[] hits = searcher.search(query, null, docs.length).scoreDocs;\n\n        System.out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          System.out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520d06488b13c8ef837dd0815b77a80fff8779e1","date":1240950232,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/SearchTest#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();  \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory);\n      \n      String[] queries = {\n// \t\"a b\",\n// \t\"\\\"a b\\\"\",\n// \t\"\\\"a b c\\\"\",\n// \t\"a c\",\n// \t\"\\\"a c\\\"\",\n\t    \"\\\"a c e\\\"\",\n      };\n\n      QueryParser parser = new QueryParser(\"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        System.out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        ScoreDoc[] hits = searcher.search(query, null, docs.length).scoreDocs;\n\n        System.out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          System.out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n            + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      \n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c3c367a9a447fbe22b73e7dde652f132e693c5d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"1acbe60842541f8c38e2d60b03591478c9f91546":["4c3c367a9a447fbe22b73e7dde652f132e693c5d"],"2355382afa0f25b02f903f0c0c00433c59edd075":["1acbe60842541f8c38e2d60b03591478c9f91546"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["2355382afa0f25b02f903f0c0c00433c59edd075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["520d06488b13c8ef837dd0815b77a80fff8779e1"]},"commit2Childs":{"4c3c367a9a447fbe22b73e7dde652f132e693c5d":["1acbe60842541f8c38e2d60b03591478c9f91546"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["4c3c367a9a447fbe22b73e7dde652f132e693c5d"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["520d06488b13c8ef837dd0815b77a80fff8779e1"],"1acbe60842541f8c38e2d60b03591478c9f91546":["2355382afa0f25b02f903f0c0c00433c59edd075"],"2355382afa0f25b02f903f0c0c00433c59edd075":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}