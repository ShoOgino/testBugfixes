{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testCannotIndexTermVectors().mjava","commits":[{"id":"ca044bd4a0bea8391cbebb44a34aba53a9b50541","date":1400784655,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testCannotIndexTermVectors().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n  // non-deleted documents on flush, CheckIndex will see this as corruption:\n  public void testCannotIndexTermVectors() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n\n    FieldType ft = new FieldType(StringAndPayloadField.TYPE);\n    ft.setStoreTermVectors(true);\n    SingleTokenWithPayloadTokenStream ts = new SingleTokenWithPayloadTokenStream();\n    BytesRef payload = new BytesRef(8);\n    payload.length = 8;\n    IDVersionPostingsFormat.longToBytes(17, payload);\n    ts.setValue(\"foo\", payload);\n    Field field = new Field(\"id\", ts, ft);\n    doc.add(new Field(\"id\", ts, ft));\n    try {\n      w.addDocument(doc);\n      w.commit();\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n      // iae.printStackTrace(System.out);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testCannotIndexTermVectors().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testCannotIndexTermVectors().mjava","sourceNew":"  // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n  // non-deleted documents on flush, CheckIndex will see this as corruption:\n  public void testCannotIndexTermVectors() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n\n    FieldType ft = new FieldType(StringAndPayloadField.TYPE);\n    ft.setStoreTermVectors(true);\n    SingleTokenWithPayloadTokenStream ts = new SingleTokenWithPayloadTokenStream();\n    BytesRef payload = new BytesRef(8);\n    payload.length = 8;\n    IDVersionPostingsFormat.longToBytes(17, payload);\n    ts.setValue(\"foo\", payload);\n    Field field = new Field(\"id\", ts, ft);\n    doc.add(new Field(\"id\", ts, ft));\n    try {\n      w.addDocument(doc);\n      w.commit();\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n      // iae.printStackTrace(System.out);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n  // non-deleted documents on flush, CheckIndex will see this as corruption:\n  public void testCannotIndexTermVectors() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n\n    FieldType ft = new FieldType(StringAndPayloadField.TYPE);\n    ft.setStoreTermVectors(true);\n    SingleTokenWithPayloadTokenStream ts = new SingleTokenWithPayloadTokenStream();\n    BytesRef payload = new BytesRef(8);\n    payload.length = 8;\n    IDVersionPostingsFormat.longToBytes(17, payload);\n    ts.setValue(\"foo\", payload);\n    Field field = new Field(\"id\", ts, ft);\n    doc.add(new Field(\"id\", ts, ft));\n    try {\n      w.addDocument(doc);\n      w.commit();\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n      // iae.printStackTrace(System.out);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["ca044bd4a0bea8391cbebb44a34aba53a9b50541"],"ca044bd4a0bea8391cbebb44a34aba53a9b50541":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"ca044bd4a0bea8391cbebb44a34aba53a9b50541":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca044bd4a0bea8391cbebb44a34aba53a9b50541","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}