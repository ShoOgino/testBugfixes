{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","commits":[{"id":"4b4cf21055ce3298c85f04952b1aa208983470c4","date":1108840132,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks  \n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b","date":1143666100,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks  \n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @deprecated This method incorrectly hardcodes the choice of fieldname. Use the\n\t * method of the same name that takes a fieldname.\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks  \n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f","date":1153001991,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @deprecated This method incorrectly hardcodes the choice of fieldname. Use the\n\t * method of the same name that takes a fieldname.\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks  \n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @deprecated This method incorrectly hardcodes the choice of fieldname. Use the\n\t * method of the same name that takes a fieldname.\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4dbfaec317df80ca6f412ce1b94b337b581e17","date":1238022314,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @deprecated This method incorrectly hardcodes the choice of fieldname. Use the\n\t * method of the same name that takes a fieldname.\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException  thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @deprecated This method incorrectly hardcodes the choice of fieldname. Use the\n\t * method of the same name that takes a fieldname.\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2aa9553aad4bb588f33e036ce51485a850a2917","date":1257895368,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,int).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @deprecated This method incorrectly hardcodes the choice of fieldname. Use the\n\t * method of the same name that takes a fieldname.\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException  thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2aa9553aad4bb588f33e036ce51485a850a2917":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"4b4cf21055ce3298c85f04952b1aa208983470c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f":["4ef0bc276292640209b4a2a0cb33ebdab85e1a5b"],"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b":["4b4cf21055ce3298c85f04952b1aa208983470c4"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2aa9553aad4bb588f33e036ce51485a850a2917"]},"commit2Childs":{"f2aa9553aad4bb588f33e036ce51485a850a2917":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b4cf21055ce3298c85f04952b1aa208983470c4":["4ef0bc276292640209b4a2a0cb33ebdab85e1a5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b4cf21055ce3298c85f04952b1aa208983470c4"],"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b":["f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["f2aa9553aad4bb588f33e036ce51485a850a2917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}