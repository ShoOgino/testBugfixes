{"path":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#seedCoreRootDirWithDefaultTestCore(Path).mjava","commits":[{"id":"87e71a21d5a987fc33ae9a0f50353e220e64f2c7","date":1425319675,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#seedCoreRootDirWithDefaultTestCore(Path).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a directory that will be used as the <code>coreRootDirectory</code> for a jetty instance, \n   * Creates a core directory named {@link #DEFAULT_TEST_CORENAME} using a trivial\n   * <code>core.properties</code> if this file does not already exist.\n   *\n   * @see #writeCoreProperties(Path,String)\n   * @see #CORE_PROPERTIES_FILENAME\n   */\n  private void seedCoreRootDirWithDefaultTestCore(Path coreRootDirectory) throws IOException {\n    // Kludgy and brittle with assumptions about writeCoreProperties, but i don't want to \n    // try to change the semantics of that method to ignore existing files\n    Path coreDir = coreRootDirectory.resolve(DEFAULT_TEST_CORENAME);\n    if (Files.notExists(coreDir.resolve(CORE_PROPERTIES_FILENAME))) {\n      writeCoreProperties(coreDir, DEFAULT_TEST_CORENAME);\n    } // else nothing to do, DEFAULT_TEST_CORENAME already exists\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#seedCoreRootDirWithDefaultTestCore(Path).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a directory that will be used as the <code>coreRootDirectory</code> for a jetty instance, \n   * Creates a core directory named {@link #DEFAULT_TEST_CORENAME} using a trivial\n   * <code>core.properties</code> if this file does not already exist.\n   *\n   * @see #writeCoreProperties(Path,String)\n   * @see #CORE_PROPERTIES_FILENAME\n   */\n  private void seedCoreRootDirWithDefaultTestCore(Path coreRootDirectory) throws IOException {\n    // Kludgy and brittle with assumptions about writeCoreProperties, but i don't want to \n    // try to change the semantics of that method to ignore existing files\n    Path coreDir = coreRootDirectory.resolve(DEFAULT_TEST_CORENAME);\n    if (Files.notExists(coreDir.resolve(CORE_PROPERTIES_FILENAME))) {\n      writeCoreProperties(coreDir, DEFAULT_TEST_CORENAME);\n    } // else nothing to do, DEFAULT_TEST_CORENAME already exists\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#seedCoreRootDirWithDefaultTestCore(Path).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a directory that will be used as the <code>coreRootDirectory</code> for a jetty instance, \n   * Creates a core directory named {@link #DEFAULT_TEST_CORENAME} using a trivial\n   * <code>core.properties</code> if this file does not already exist.\n   *\n   * @see #writeCoreProperties(Path,String)\n   * @see #CORE_PROPERTIES_FILENAME\n   */\n  private void seedCoreRootDirWithDefaultTestCore(Path coreRootDirectory) throws IOException {\n    // Kludgy and brittle with assumptions about writeCoreProperties, but i don't want to \n    // try to change the semantics of that method to ignore existing files\n    Path coreDir = coreRootDirectory.resolve(DEFAULT_TEST_CORENAME);\n    if (Files.notExists(coreDir.resolve(CORE_PROPERTIES_FILENAME))) {\n      writeCoreProperties(coreDir, DEFAULT_TEST_CORENAME);\n    } // else nothing to do, DEFAULT_TEST_CORENAME already exists\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87e71a21d5a987fc33ae9a0f50353e220e64f2c7"],"87e71a21d5a987fc33ae9a0f50353e220e64f2c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b06445ae1731e049327712db0454e5643ca9b7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87e71a21d5a987fc33ae9a0f50353e220e64f2c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87e71a21d5a987fc33ae9a0f50353e220e64f2c7"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"87e71a21d5a987fc33ae9a0f50353e220e64f2c7":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","87e71a21d5a987fc33ae9a0f50353e220e64f2c7","b06445ae1731e049327712db0454e5643ca9b7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}