{"path":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterIdCollating().mjava","commits":[{"id":"ad74a68eca82ce50fc02b618627a1d3cf9d74433","date":1227959428,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterIdCollating().mjava","pathOld":"/dev/null","sourceNew":"    public void testRangeFilterIdCollating() throws IOException {\n\n        IndexReader reader = IndexReader.open(signedIndex.index);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        int medId = ((maxId - minId) / 2);\n\n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n\n        int numDocs = reader.numDocs();\n\n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n\n        Hits result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,T,c));\n        assertEquals(\"find all\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,F,c));\n        assertEquals(\"all but last\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,T,c));\n        assertEquals(\"all but first\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,F,c));\n        assertEquals(\"all but ends\", numDocs-2, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,T,c));\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,T,T,c));\n        assertEquals(\"up to med\", 1+ medId-minId, result.length());\n\n        // unbounded id\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,null,T,F,c));\n        assertEquals(\"min and up\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,T,c));\n        assertEquals(\"max and down\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,null,F,F,c));\n        assertEquals(\"not min, but up\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,F,c));\n        assertEquals(\"not max, but down\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,F,c));\n        assertEquals(\"med and up, not max\", maxId-medId, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,F,T,c));\n        assertEquals(\"not min, up to med\", medId-minId, result.length());\n\n        // very small sets\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,minIP,F,F,c));\n        assertEquals(\"min,min,F,F\", 0, result.length());\n        result = search.search(q,new RangeFilter(\"id\",medIP,medIP,F,F,c));\n        assertEquals(\"med,med,F,F\", 0, result.length());\n        result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,F,F,c));\n        assertEquals(\"max,max,F,F\", 0, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,minIP,T,T,c));\n        assertEquals(\"min,min,T,T\", 1, result.length());\n        result = search.search(q,new RangeFilter(\"id\",null,minIP,F,T,c));\n        assertEquals(\"nul,min,F,T\", 1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,T,T,c));\n        assertEquals(\"max,max,T,T\", 1, result.length());\n        result = search.search(q,new RangeFilter(\"id\",maxIP,null,T,F,c));\n        assertEquals(\"max,nul,T,T\", 1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",medIP,medIP,T,T,c));\n        assertEquals(\"med,med,T,T\", 1, result.length());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3fd920798ed4dd32cd47f16d414a89df5daf626","date":1228161174,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterIdCollating().mjava","sourceNew":null,"sourceOld":"    public void testRangeFilterIdCollating() throws IOException {\n\n        IndexReader reader = IndexReader.open(signedIndex.index);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        int medId = ((maxId - minId) / 2);\n\n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n\n        int numDocs = reader.numDocs();\n\n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n\n        Hits result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,T,c));\n        assertEquals(\"find all\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,F,c));\n        assertEquals(\"all but last\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,T,c));\n        assertEquals(\"all but first\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,F,c));\n        assertEquals(\"all but ends\", numDocs-2, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,T,c));\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,T,T,c));\n        assertEquals(\"up to med\", 1+ medId-minId, result.length());\n\n        // unbounded id\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,null,T,F,c));\n        assertEquals(\"min and up\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,T,c));\n        assertEquals(\"max and down\", numDocs, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,null,F,F,c));\n        assertEquals(\"not min, but up\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,F,c));\n        assertEquals(\"not max, but down\", numDocs-1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,F,c));\n        assertEquals(\"med and up, not max\", maxId-medId, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,F,T,c));\n        assertEquals(\"not min, up to med\", medId-minId, result.length());\n\n        // very small sets\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,minIP,F,F,c));\n        assertEquals(\"min,min,F,F\", 0, result.length());\n        result = search.search(q,new RangeFilter(\"id\",medIP,medIP,F,F,c));\n        assertEquals(\"med,med,F,F\", 0, result.length());\n        result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,F,F,c));\n        assertEquals(\"max,max,F,F\", 0, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",minIP,minIP,T,T,c));\n        assertEquals(\"min,min,T,T\", 1, result.length());\n        result = search.search(q,new RangeFilter(\"id\",null,minIP,F,T,c));\n        assertEquals(\"nul,min,F,T\", 1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,T,T,c));\n        assertEquals(\"max,max,T,T\", 1, result.length());\n        result = search.search(q,new RangeFilter(\"id\",maxIP,null,T,F,c));\n        assertEquals(\"max,nul,T,T\", 1, result.length());\n\n        result = search.search(q,new RangeFilter(\"id\",medIP,medIP,T,T,c));\n        assertEquals(\"med,med,T,T\", 1, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad74a68eca82ce50fc02b618627a1d3cf9d74433":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3fd920798ed4dd32cd47f16d414a89df5daf626":["ad74a68eca82ce50fc02b618627a1d3cf9d74433"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3fd920798ed4dd32cd47f16d414a89df5daf626"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad74a68eca82ce50fc02b618627a1d3cf9d74433"],"ad74a68eca82ce50fc02b618627a1d3cf9d74433":["e3fd920798ed4dd32cd47f16d414a89df5daf626"],"e3fd920798ed4dd32cd47f16d414a89df5daf626":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}