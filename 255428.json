{"path":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b870d11eae2250e41b4ed48d248bc043cbbd7711","date":1272408055,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbacbb60f995079ca6bdfef735fd4881040ec3cf","date":1292341298,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["bbacbb60f995079ca6bdfef735fd4881040ec3cf"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["b870d11eae2250e41b4ed48d248bc043cbbd7711","bbacbb60f995079ca6bdfef735fd4881040ec3cf"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b870d11eae2250e41b4ed48d248bc043cbbd7711","bbacbb60f995079ca6bdfef735fd4881040ec3cf"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b870d11eae2250e41b4ed48d248bc043cbbd7711":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"bbacbb60f995079ca6bdfef735fd4881040ec3cf":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b870d11eae2250e41b4ed48d248bc043cbbd7711":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bbacbb60f995079ca6bdfef735fd4881040ec3cf"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bbacbb60f995079ca6bdfef735fd4881040ec3cf":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}