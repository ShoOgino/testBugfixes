{"path":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      associations.setAssociation(aint, new CategoryIntAssociation(2));\n      associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n      if (i % 2 == 0) { // 50\n        associations.setAssociation(bint, new CategoryIntAssociation(3));\n        associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      associations.setAssociation(aint, new CategoryIntAssociation(2));\n      associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n      if (i % 2 == 0) { // 50\n        associations.setAssociation(bint, new CategoryIntAssociation(3));\n        associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84be3657a3c5fda07efa8c78a5c01950e0a17cfb","date":1375192418,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        associations.setAssociation(aint, new CategoryIntAssociation(2));\n        associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n        if (i % 2 == 0) { // 50\n          associations.setAssociation(bint, new CategoryIntAssociation(3));\n          associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n        }\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      associations.setAssociation(aint, new CategoryIntAssociation(2));\n      associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n      if (i % 2 == 0) { // 50\n        associations.setAssociation(bint, new CategoryIntAssociation(3));\n        associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        associations.setAssociation(aint, new CategoryIntAssociation(2));\n        associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n        if (i % 2 == 0) { // 50\n          associations.setAssociation(bint, new CategoryIntAssociation(3));\n          associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n        }\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      associations.setAssociation(aint, new CategoryIntAssociation(2));\n      associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n      if (i % 2 == 0) { // 50\n        associations.setAssociation(bint, new CategoryIntAssociation(3));\n        associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        associations.setAssociation(aint, new CategoryIntAssociation(2));\n        associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n        if (i % 2 == 0) { // 50\n          associations.setAssociation(bint, new CategoryIntAssociation(3));\n          associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n        }\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        associations.setAssociation(aint, new CategoryIntAssociation(2));\n        associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n        if (i % 2 == 0) { // 50\n          associations.setAssociation(bint, new CategoryIntAssociation(3));\n          associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n        }\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["607428da722dcb3e86bbd11c63de8986e6275c36"],"84be3657a3c5fda07efa8c78a5c01950e0a17cfb":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["84be3657a3c5fda07efa8c78a5c01950e0a17cfb","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["84be3657a3c5fda07efa8c78a5c01950e0a17cfb"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","84be3657a3c5fda07efa8c78a5c01950e0a17cfb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"84be3657a3c5fda07efa8c78a5c01950e0a17cfb":["3cc728b07df73b197e6d940d27f9b08b63918f13","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}