{"path":"lucene/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","commits":[{"id":"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d","date":1311520881,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testSuppressedExceptions() {\n    boolean isJava7 = true;\n    try {\n      // this class only exists in Java 7:\n      Class.forName(\"java.lang.AutoCloseable\");\n    } catch (ClassNotFoundException cnfe) {\n      isJava7 = false;\n    }\n    \n    if (!isJava7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeSafely(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (isJava7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeSafely((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (isJava7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","sourceNew":"  public void testSuppressedExceptions() {\n    boolean isJava7 = true;\n    try {\n      // this class only exists in Java 7:\n      Class.forName(\"java.lang.AutoCloseable\");\n    } catch (ClassNotFoundException cnfe) {\n      isJava7 = false;\n    }\n    \n    if (!isJava7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (isJava7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (isJava7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSuppressedExceptions() {\n    boolean isJava7 = true;\n    try {\n      // this class only exists in Java 7:\n      Class.forName(\"java.lang.AutoCloseable\");\n    } catch (ClassNotFoundException cnfe) {\n      isJava7 = false;\n    }\n    \n    if (!isJava7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeSafely(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (isJava7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeSafely((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (isJava7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ff2eb8f7c1cfff9a0c28551ce7b67c6f190933","date":1321283337,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","sourceNew":"  public void testSuppressedExceptions() {\n    if (!Constants.JRE_IS_MINIMUM_JAVA7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSuppressedExceptions() {\n    boolean isJava7 = true;\n    try {\n      // this class only exists in Java 7:\n      Class.forName(\"java.lang.AutoCloseable\");\n    } catch (ClassNotFoundException cnfe) {\n      isJava7 = false;\n    }\n    \n    if (!isJava7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (isJava7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (isJava7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","sourceNew":"  public void testSuppressedExceptions() {\n    if (!Constants.JRE_IS_MINIMUM_JAVA7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSuppressedExceptions() {\n    if (!Constants.JRE_IS_MINIMUM_JAVA7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a1ff2eb8f7c1cfff9a0c28551ce7b67c6f190933"],"a1ff2eb8f7c1cfff9a0c28551ce7b67c6f190933":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["a1ff2eb8f7c1cfff9a0c28551ce7b67c6f190933"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1ff2eb8f7c1cfff9a0c28551ce7b67c6f190933":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d"],"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d":["24230fe54121f9be9d85f2c2067536296785e421"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}