{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams,String,String...).mjava","commits":[{"id":"a05704e317032f0bcc6bc978b6c6c5af1cba5cd9","date":1424933272,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams requestAndParams, String paramName, String... values) {\n    if (requestAndParams == null) return;\n    int expectedCount = values.length;\n    String[] params = requestAndParams.params.getParams(paramName);\n    if (expectedCount > 0 && (params == null || params.length == 0)) {\n      fail(\"Expected non-zero number of '\" + paramName + \"' parameters in request\");\n    }\n    Set<String> requestedFields = new HashSet<>();\n    for (String p : params) {\n      requestedFields.addAll(StrUtils.splitSmart(p, ','));\n    }\n    assertEquals(\"Number of requested fields do not match with expectations\", expectedCount, requestedFields.size());\n    for (String field : values) {\n      if (!requestedFields.contains(field)) {\n        fail(\"Field \" + field + \" not found in param: \" + paramName + \" request had \" + paramName + \"=\" + requestedFields);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["575cbc4cfd0766ac94f3329777fc87ad16bace2f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"575cbc4cfd0766ac94f3329777fc87ad16bace2f","date":1425052207,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams,String,String...).mjava","sourceNew":"  private void assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams requestAndParams, String paramName, String... values) {\n    if (requestAndParams == null) return;\n    int expectedCount = values.length;\n    String[] params = requestAndParams.params.getParams(paramName);\n    if (expectedCount > 0 && (params == null || params.length == 0)) {\n      fail(\"Expected non-zero number of '\" + paramName + \"' parameters in request\");\n    }\n    Set<String> requestedFields = new HashSet<>();\n    if (params != null) {\n      for (String p : params) {\n        List<String> list = StrUtils.splitSmart(p, ',');\n        for (String s : list) {\n          // make sure field names aren't duplicated in the parameters\n          assertTrue(\"Field name \" + s + \" was requested multiple times: params = \" + requestAndParams.params,\n              requestedFields.add(s));\n        }\n      }\n    }\n    // if a wildcard ALL field is requested then we don't need to match exact number of params\n    if (!requestedFields.contains(\"*\"))  {\n      assertEquals(\"Number of requested fields do not match with expectations\", expectedCount, requestedFields.size());\n      for (String field : values) {\n        if (!requestedFields.contains(field)) {\n          fail(\"Field \" + field + \" not found in param: \" + paramName + \" request had \" + paramName + \"=\" + requestedFields);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams requestAndParams, String paramName, String... values) {\n    if (requestAndParams == null) return;\n    int expectedCount = values.length;\n    String[] params = requestAndParams.params.getParams(paramName);\n    if (expectedCount > 0 && (params == null || params.length == 0)) {\n      fail(\"Expected non-zero number of '\" + paramName + \"' parameters in request\");\n    }\n    Set<String> requestedFields = new HashSet<>();\n    for (String p : params) {\n      requestedFields.addAll(StrUtils.splitSmart(p, ','));\n    }\n    assertEquals(\"Number of requested fields do not match with expectations\", expectedCount, requestedFields.size());\n    for (String field : values) {\n      if (!requestedFields.contains(field)) {\n        fail(\"Field \" + field + \" not found in param: \" + paramName + \" request had \" + paramName + \"=\" + requestedFields);\n      }\n    }\n  }\n\n","bugFix":["a05704e317032f0bcc6bc978b6c6c5af1cba5cd9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertParamsEquals(TrackingShardHandlerFactory.ShardRequestAndParams requestAndParams, String paramName, String... values) {\n    if (requestAndParams == null) return;\n    int expectedCount = values.length;\n    String[] params = requestAndParams.params.getParams(paramName);\n    if (expectedCount > 0 && (params == null || params.length == 0)) {\n      fail(\"Expected non-zero number of '\" + paramName + \"' parameters in request\");\n    }\n    Set<String> requestedFields = new HashSet<>();\n    if (params != null) {\n      for (String p : params) {\n        List<String> list = StrUtils.splitSmart(p, ',');\n        for (String s : list) {\n          // make sure field names aren't duplicated in the parameters\n          assertTrue(\"Field name \" + s + \" was requested multiple times: params = \" + requestAndParams.params,\n              requestedFields.add(s));\n        }\n      }\n    }\n    // if a wildcard ALL field is requested then we don't need to match exact number of params\n    if (!requestedFields.contains(\"*\"))  {\n      assertEquals(\"Number of requested fields do not match with expectations\", expectedCount, requestedFields.size());\n      for (String field : values) {\n        if (!requestedFields.contains(field)) {\n          fail(\"Field \" + field + \" not found in param: \" + paramName + \" request had \" + paramName + \"=\" + requestedFields);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a05704e317032f0bcc6bc978b6c6c5af1cba5cd9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","575cbc4cfd0766ac94f3329777fc87ad16bace2f"],"575cbc4cfd0766ac94f3329777fc87ad16bace2f":["a05704e317032f0bcc6bc978b6c6c5af1cba5cd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575cbc4cfd0766ac94f3329777fc87ad16bace2f"]},"commit2Childs":{"a05704e317032f0bcc6bc978b6c6c5af1cba5cd9":["575cbc4cfd0766ac94f3329777fc87ad16bace2f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05704e317032f0bcc6bc978b6c6c5af1cba5cd9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"575cbc4cfd0766ac94f3329777fc87ad16bace2f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}