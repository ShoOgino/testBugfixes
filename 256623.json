{"path":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","pathOld":"/dev/null","sourceNew":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query query = new MatchAllDocsQuery();\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, false));\n    assertEquals(5, searcher.search(query, filter, 5).totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","sourceNew":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query query = new MatchAllDocsQuery();\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, PostingsEnum.FLAG_NONE));\n    assertEquals(5, searcher.search(query, filter, 5).totalHits);\n  }\n\n","sourceOld":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query query = new MatchAllDocsQuery();\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, false));\n    assertEquals(5, searcher.search(query, filter, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","sourceNew":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query query = new MatchAllDocsQuery();\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, false));\n    assertEquals(5, searcher.search(query, filter, 5).totalHits);\n  }\n\n","sourceOld":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query query = new MatchAllDocsQuery();\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, PostingsEnum.FLAG_NONE));\n    assertEquals(5, searcher.search(query, filter, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","sourceNew":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query query = new MatchAllDocsQuery();\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, false));\n    assertEquals(5, searcher.search(new FilteredQuery(query, filter), 5).totalHits);\n  }\n\n","sourceOld":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query query = new MatchAllDocsQuery();\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, false));\n    assertEquals(5, searcher.search(query, filter, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","sourceNew":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, false));\n    assertEquals(5, searcher.search(filter, 5).totalHits);\n  }\n\n","sourceOld":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query query = new MatchAllDocsQuery();\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, false));\n    assertEquals(5, searcher.search(new FilteredQuery(query, filter), 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testQueryWrapperFilter().mjava","sourceNew":null,"sourceOld":"  /** when converted to a filter */\n  public void testQueryWrapperFilter() throws Exception {\n    Query term = new TermQuery(new Term(\"field\", \"this\"));\n    Filter filter = new QueryWrapperFilter(new AssertNeedsScores(term, false));\n    assertEquals(5, searcher.search(filter, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["1db68e96dd908fcd79ef809095822736aa601d08"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"1db68e96dd908fcd79ef809095822736aa601d08":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["954e59be3da8dc1b046646ad7af4b466852009d3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}