{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f8b5ba78b252ff57082799d1b662ad3d677ecfc","date":1347893162,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://127.0.0.1/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://127.0.0.1/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://127.0.0.1/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","sourceNew":null,"sourceOld":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://127.0.0.1/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}