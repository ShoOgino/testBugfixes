{"path":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref.get());\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref.get(), hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref);\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref, hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","bugFix":["fb189bc11e1880ca8686216e1af74536edab3b1c","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91","date":1456586780,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort()}.\n   */\n  @Test\n  public void testSort() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n\n      // Sorts by unicode code point order (is there a simple way, e.g. a Collator?)\n      SortedSet<String> strings = new TreeSet<>(new Comparator<String>() {\n          @Override\n          public int compare(String a, String b) {\n            int[] aCodePoints = codePoints(a);\n            int[] bCodePoints = codePoints(b);\n            for(int i=0;i<Math.min(aCodePoints.length, bCodePoints.length);i++) {\n              if (aCodePoints[i] < bCodePoints[i]) {\n                return -1;\n              } else if (aCodePoints[i] > bCodePoints[i]) {\n                return 1;\n              }\n            }\n            return aCodePoints.length - bCodePoints.length;\n          }\n        });\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref.get());\n        strings.add(str);\n      }\n      int[] sort = hash.sort();\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref.get(), hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref.get());\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref.get(), hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort()}.\n   */\n  @Test\n  public void testSort() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n\n      // Sorts by unicode code point order (is there a simple way, e.g. a Collator?)\n      SortedSet<String> strings = new TreeSet<>(TestUtil.STRING_CODEPOINT_COMPARATOR);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref.get());\n        strings.add(str);\n      }\n      int[] sort = hash.sort();\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref.get(), hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort()}.\n   */\n  @Test\n  public void testSort() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n\n      // Sorts by unicode code point order (is there a simple way, e.g. a Collator?)\n      SortedSet<String> strings = new TreeSet<>(new Comparator<String>() {\n          @Override\n          public int compare(String a, String b) {\n            int[] aCodePoints = codePoints(a);\n            int[] bCodePoints = codePoints(b);\n            for(int i=0;i<Math.min(aCodePoints.length, bCodePoints.length);i++) {\n              if (aCodePoints[i] < bCodePoints[i]) {\n                return -1;\n              } else if (aCodePoints[i] > bCodePoints[i]) {\n                return 1;\n              }\n            }\n            return aCodePoints.length - bCodePoints.length;\n          }\n        });\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref.get());\n        strings.add(str);\n      }\n      int[] sort = hash.sort();\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref.get(), hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSort().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort()}.\n   */\n  @Test\n  public void testSort() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n\n      // Sorts by unicode code point order (is there a simple way, e.g. a Collator?)\n      SortedSet<String> strings = new TreeSet<>(TestUtil.STRING_CODEPOINT_COMPARATOR);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref.get());\n        strings.add(str);\n      }\n      int[] sort = hash.sort();\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref.get(), hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#sort(java.util.Comparator)}.\n   */\n  @Test\n  public void testSort() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      SortedSet<String> strings = new TreeSet<>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        hash.add(ref.get());\n        strings.add(str);\n      }\n      // We use the UTF-16 comparator here, because we need to be able to\n      // compare to native String.compareTo() [UTF-16]:\n      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n      assertTrue(strings.size() < sort.length);\n      int i = 0;\n      BytesRef scratch = new BytesRef();\n      for (String string : strings) {\n        ref.copyChars(string);\n        assertEquals(ref.get(), hash.get(sort[i++], scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"af2638813028b254a88b418ebeafb541afb49653":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["b51ee14e04858fe1f47f241ac29486de23b215b5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["af2638813028b254a88b418ebeafb541afb49653","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}