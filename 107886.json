{"path":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","commits":[{"id":"052d6a9887bbf0e7b3620c505ab07df06740289f","date":1028567700,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Two common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., when a word has multiple stems.  This way searches for\n   * phrases including either stem will match this occurence.  In this case,\n   * all but the first stem's increment should be set to zero: the increment of\n   * the first instance should be one.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across stop words,\n   * then one could build a stop word filter that removes stop words and also\n   * sets the increment to the number of stop words removed before each\n   * non-stop word.\n   *\n   * </ul>\n   * @see TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be positive: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c128714b34ca8c89dfe103f73e11df526cd31807","date":1028569143,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @see TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be positive: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Two common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., when a word has multiple stems.  This way searches for\n   * phrases including either stem will match this occurence.  In this case,\n   * all but the first stem's increment should be set to zero: the increment of\n   * the first instance should be one.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across stop words,\n   * then one could build a stop word filter that removes stop words and also\n   * sets the increment to the number of stop words removed before each\n   * non-stop word.\n   *\n   * </ul>\n   * @see TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be positive: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2c2edc2a0763bd4b406285bbd78b391c38ea0d4","date":1036971355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @see TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @see TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be positive: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f54fa30ea56866ccda49c4ad3b3ce4684d641a10","date":1048184893,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @see org.apache.lucene.index.TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @see TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @see org.apache.lucene.index.TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":null,"sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["f54fa30ea56866ccda49c4ad3b3ce4684d641a10"],"f54fa30ea56866ccda49c4ad3b3ce4684d641a10":["e2c2edc2a0763bd4b406285bbd78b391c38ea0d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2c2edc2a0763bd4b406285bbd78b391c38ea0d4":["c128714b34ca8c89dfe103f73e11df526cd31807"],"052d6a9887bbf0e7b3620c505ab07df06740289f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c128714b34ca8c89dfe103f73e11df526cd31807":["052d6a9887bbf0e7b3620c505ab07df06740289f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f54fa30ea56866ccda49c4ad3b3ce4684d641a10":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052d6a9887bbf0e7b3620c505ab07df06740289f"],"e2c2edc2a0763bd4b406285bbd78b391c38ea0d4":["f54fa30ea56866ccda49c4ad3b3ce4684d641a10"],"052d6a9887bbf0e7b3620c505ab07df06740289f":["c128714b34ca8c89dfe103f73e11df526cd31807"],"c128714b34ca8c89dfe103f73e11df526cd31807":["e2c2edc2a0763bd4b406285bbd78b391c38ea0d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}