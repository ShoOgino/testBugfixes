{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.getTopReaderContext().leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","date":1344896544,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.getTopReaderContext().leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.getTopReaderContext().leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.getTopReaderContext().leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.getTopReaderContext().leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.getTopReaderContext().leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (LeafReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newStringField(\"f\", \"\", Field.Store.NO);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setStringValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    for (AtomicReaderContext ctx : r.leaves()) {\n      checkTermsOrder(ctx.reader(), allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}