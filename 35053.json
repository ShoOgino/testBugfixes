{"path":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,List[BytesRef]).mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,List[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,List[BytesRef]).mjava","sourceNew":"  /**\n   * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.List} of payloads to match\n   */\n  public SpanPayloadCheckQuery(SpanQuery match, List<BytesRef> payloadToMatch) {\n    this.match = match;\n    this.payloadToMatch = payloadToMatch;\n  }\n\n","sourceOld":"  /**\n   * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.List} of payloads to match\n   */\n  public SpanPayloadCheckQuery(SpanQuery match, List<BytesRef> payloadToMatch) {\n    this.match = match;\n    this.payloadToMatch = payloadToMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}