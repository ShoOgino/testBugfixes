{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":null,"sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}