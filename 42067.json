{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":null,"sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}