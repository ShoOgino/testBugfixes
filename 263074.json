{"path":"src/test/org/apache/lucene/search/TestRangeFilter#testDanish().mjava","commits":[{"id":"7cf50d425f7279e262a8d6be16253e72b8d898c2","date":1226483019,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeFilter#testDanish().mjava","pathOld":"/dev/null","sourceNew":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter\n            (danishIndex, new SimpleAnalyzer(), T, \n             IndexWriter.MaxFieldLength.LIMITED);\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.UN_TOKENIZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.UN_TOKENIZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n        Query query = new RangeQuery\n            (\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        Hits result = search.search\n            (q, new RangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator));\n        assertEquals(\"The index Term should be included.\", 1, result.length());\n\n        result = search.search\n            (q, new RangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator));\n        assertEquals\n            (\"The index Term should not be included.\", 0, result.length());\n        search.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeFilter#testDanish().mjava","sourceNew":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter\n            (danishIndex, new SimpleAnalyzer(), T, \n             IndexWriter.MaxFieldLength.LIMITED);\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.UN_TOKENIZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.UN_TOKENIZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n        Query query = new TermRangeQuery\n            (\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        Hits result = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator));\n        assertEquals(\"The index Term should be included.\", 1, result.length());\n\n        result = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator));\n        assertEquals\n            (\"The index Term should not be included.\", 0, result.length());\n        search.close();\n    }\n\n","sourceOld":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter\n            (danishIndex, new SimpleAnalyzer(), T, \n             IndexWriter.MaxFieldLength.LIMITED);\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.UN_TOKENIZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.UN_TOKENIZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n        Query query = new RangeQuery\n            (\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        Hits result = search.search\n            (q, new RangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator));\n        assertEquals(\"The index Term should be included.\", 1, result.length());\n\n        result = search.search\n            (q, new RangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator));\n        assertEquals\n            (\"The index Term should not be included.\", 0, result.length());\n        search.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cf50d425f7279e262a8d6be16253e72b8d898c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"]},"commit2Childs":{"7cf50d425f7279e262a8d6be16253e72b8d898c2":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}