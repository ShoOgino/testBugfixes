{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","pathOld":"/dev/null","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","sourceNew":null,"sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","pathOld":"/dev/null","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","sourceNew":null,"sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","pathOld":"/dev/null","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403b6d8b3e6cec80048e9cfc481bbffdd57517bb","date":1410598299,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"bafca15d8e408346a67f4282ad1143b88023893b":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["bafca15d8e408346a67f4282ad1143b88023893b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"9279b175e5e66258442d2123a50f052219a9cc1b":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}