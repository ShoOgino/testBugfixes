{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n        if (!hasPos) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n          final int[] postings = term.postings;\n          final byte[] payloads = term.payloads;\n          return new LowFreqDocsAndPositionsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          return new HighFreqDocsAndPositionsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n        if (!hasPos) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n          final int[] postings = term.postings;\n          final byte[] payloads = term.payloads;\n          return new LowFreqDocsAndPositionsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          return new HighFreqDocsAndPositionsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n        if (!hasPos) {\n          return null;\n        }\n\n        // TODO: implement reuse\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n          final int[] postings = term.postings;\n          final byte[] payloads = term.payloads;\n          return new LowFreqDocsAndPositionsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          return new HighFreqDocsAndPositionsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n        if (!hasPos) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n          final int[] postings = term.postings;\n          final byte[] payloads = term.payloads;\n          return new LowFreqDocsAndPositionsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          return new HighFreqDocsAndPositionsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":null,"sourceOld":"      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n        if (!hasPos) {\n          return null;\n        }\n\n        // TODO: implement reuse\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n          final int[] postings = term.postings;\n          final byte[] payloads = term.payloads;\n          return new LowFreqDocsAndPositionsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          return new HighFreqDocsAndPositionsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbaae1c00d39df2c872bbe043af26d02d3818313":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"fbaae1c00d39df2c872bbe043af26d02d3818313":["51f5280f31484820499077f41fcdfe92d527d9dc"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}