{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":null,"sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setUseCompoundFile(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}