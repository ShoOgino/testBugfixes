{"path":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#beforeTests().mjava","commits":[{"id":"a2c21c57833fe3ebba9997f38f63f717c64e1e3f","date":1493060181,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#beforeTests().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need consistent segments that aren't merged because we want to have\n    // segments with and without docvalues\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n\n    // HACK: Don't use a RandomMergePolicy, but only use the mergePolicyFactory that we've just set\n    System.setProperty(SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n    System.setProperty(SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[]{\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\", \"booldv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n          sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n          sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n          sf.hasDocValues());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need consistent segments that aren't merged because we want to have\n    // segments with and without docvalues\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[]{\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\", \"booldv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n          sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n          sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n          sf.hasDocValues());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need consistent segments that aren't merged because we want to have\n    // segments with and without docvalues\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n\n    // HACK: Don't use a RandomMergePolicy, but only use the mergePolicyFactory that we've just set\n    System.setProperty(SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n    System.setProperty(SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[]{\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\", \"booldv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n          sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n          sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n          sf.hasDocValues());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#beforeTests().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need consistent segments that aren't merged because we want to have\n    // segments with and without docvalues\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[]{\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\", \"booldv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n          sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n          sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n          sf.hasDocValues());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestHalfAndHalfDocValues#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need consistent segments that aren't merged because we want to have\n    // segments with and without docvalues\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[]{\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\", \"booldv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n          sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n          sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n          sf.hasDocValues());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need consistent segments that aren't merged because we want to have\n    // segments with and without docvalues\n    systemSetPropertySolrTestsMergePolicyFactory(NoMergePolicyFactory.class.getName());\n\n    // HACK: Don't use a RandomMergePolicy, but only use the mergePolicyFactory that we've just set\n    System.setProperty(SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n    System.setProperty(SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[]{\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\", \"booldv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n          sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n          sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n          sf.hasDocValues());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2c21c57833fe3ebba9997f38f63f717c64e1e3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["a2c21c57833fe3ebba9997f38f63f717c64e1e3f"],"28288370235ed02234a64753cdbf0c6ec096304a":["a2c21c57833fe3ebba9997f38f63f717c64e1e3f","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","a2c21c57833fe3ebba9997f38f63f717c64e1e3f"],"a2c21c57833fe3ebba9997f38f63f717c64e1e3f":["70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}