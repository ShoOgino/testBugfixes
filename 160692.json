{"path":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","commits":[{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(\n        10).setMergeScheduler(mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(\n        10).setMergeScheduler(mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["87c966e9308847938a7c905c2e46a56d8df788b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}