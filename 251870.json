{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Ascending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Descending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testUniqueStream();\n    testMetricStream();\n    testRollupStream();\n    testRankStream();\n    testFilterStream();\n    testGroupByStream();\n    testHashJoinStream();\n    testMergeJoinStream();\n    testMergeStream();\n    testParallelStream();\n    testParallelRollupStream();\n    testParallelMetricStream();\n    testParallelGroupByStream();\n    testParallelHashJoinStream();\n    testParallelMergeJoinStream();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d9f14d94de8864c593dc7504d7bfcd9271a79aa","date":1425997553,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Ascending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Descending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testUniqueStream();\n    testMetricStream();\n    testRollupStream();\n    testRankStream();\n    testFilterStream();\n    testGroupByStream();\n    testHashJoinStream();\n    testMergeJoinStream();\n    testMergeStream();\n    testParallelStreamSingleWorker();\n    testParallelStream();\n    testParallelRollupStream();\n    testParallelMetricStream();\n    testParallelGroupByStream();\n    testParallelHashJoinStream();\n    testParallelMergeJoinStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Ascending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Descending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testUniqueStream();\n    testMetricStream();\n    testRollupStream();\n    testRankStream();\n    testFilterStream();\n    testGroupByStream();\n    testHashJoinStream();\n    testMergeJoinStream();\n    testMergeStream();\n    testParallelStream();\n    testParallelRollupStream();\n    testParallelMetricStream();\n    testParallelGroupByStream();\n    testParallelHashJoinStream();\n    testParallelMergeJoinStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Ascending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Descending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testUniqueStream();\n    testMetricStream();\n    testRollupStream();\n    testRankStream();\n    testFilterStream();\n    testGroupByStream();\n    testHashJoinStream();\n    testMergeJoinStream();\n    testMergeStream();\n    testParallelStreamSingleWorker();\n    testParallelStream();\n    testParallelRollupStream();\n    testParallelMetricStream();\n    testParallelGroupByStream();\n    testParallelHashJoinStream();\n    testParallelMergeJoinStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6127e3b5c60a3982abec2dfd5c289d3f6a64194d","date":1428333164,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["6127e3b5c60a3982abec2dfd5c289d3f6a64194d"],"8d9f14d94de8864c593dc7504d7bfcd9271a79aa":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["8d9f14d94de8864c593dc7504d7bfcd9271a79aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6127e3b5c60a3982abec2dfd5c289d3f6a64194d":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d9f14d94de8864c593dc7504d7bfcd9271a79aa":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6127e3b5c60a3982abec2dfd5c289d3f6a64194d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"6127e3b5c60a3982abec2dfd5c289d3f6a64194d":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"91814ce09be68efd0626969632e79ae47d8876d4":["8d9f14d94de8864c593dc7504d7bfcd9271a79aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}