{"path":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Constructs an IndexWriter for the index in <code>path</code>.  Text will\n    be analyzed with <code>a</code>.  If <code>create</code> is true, then a\n    new, empty index will be created in <code>d</code>, replacing the index\n    already there, if any. */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c912d2722c230fd91bab81e5e8d9af878cf1e9d","date":1012217942,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /** Constructs an IndexWriter for the index in <code>path</code>.  Text will\n    be analyzed with <code>a</code>.  If <code>create</code> is true, then a\n    new, empty index will be created in <code>path</code>, replacing the index\n    already there, if any. */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create);\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>path</code>.  Text will\n    be analyzed with <code>a</code>.  If <code>create</code> is true, then a\n    new, empty index will be created in <code>d</code>, replacing the index\n    already there, if any. */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7961006605708cac1ca5185ead37902442ceff6","date":1078410713,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create);\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>path</code>.  Text will\n    be analyzed with <code>a</code>.  If <code>create</code> is true, then a\n    new, empty index will be created in <code>path</code>, replacing the index\n    already there, if any. */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create);\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32cf2e30bd45f6248722d0d19a0045a712782ebc","date":1080240435,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42a7d0b384f0022c5a29e562b809ebf73991d7e6","date":1082489615,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create, true);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create);\n  }\n\n","bugFix":null,"bugIntro":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a664b1395d4341b88e32d36297d7670f1a665ac","date":1166527887,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    init(path, a, create);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    this(FSDirectory.getDirectory(path, create), a, create, true);\n  }\n\n","bugFix":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(path, a, create);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws IOException {\n    init(path, a, create);\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","f7961006605708cac1ca5185ead37902442ceff6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(path, a, create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link #IndexWriter(File,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(File,Analyzer,boolean,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link #IndexWriter(File,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","bugFix":null,"bugIntro":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(File,Analyzer,boolean,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(File,Analyzer,boolean,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f658c721de6fbc0c439a5288182c4a6bb53ac21b","date":1244025537,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(File,Analyzer,boolean,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","bugFix":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(File,Analyzer,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>path</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>path</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(File path, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(FSDirectory.getDirectory(path), a, create, true, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["8b6187898fc4413ccd18229711786550a280383c"],"1b54a9bc667895a2095a886184bf69a3179e63df":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["f7961006605708cac1ca5185ead37902442ceff6"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"f7961006605708cac1ca5185ead37902442ceff6":["7c912d2722c230fd91bab81e5e8d9af878cf1e9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c912d2722c230fd91bab81e5e8d9af878cf1e9d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"8b6187898fc4413ccd18229711786550a280383c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["7c912d2722c230fd91bab81e5e8d9af878cf1e9d"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8b6187898fc4413ccd18229711786550a280383c"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["1b54a9bc667895a2095a886184bf69a3179e63df"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"f7961006605708cac1ca5185ead37902442ceff6":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"7c912d2722c230fd91bab81e5e8d9af878cf1e9d":["f7961006605708cac1ca5185ead37902442ceff6"],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"8b6187898fc4413ccd18229711786550a280383c":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}