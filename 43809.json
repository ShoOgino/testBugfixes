{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += (int)docDeltaBuffer[docBufferUpto];\n        freq = (int)freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastEndOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += (int)docDeltaBuffer[docBufferUpto];\n        freq = (int)freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += (int)docDeltaBuffer[docBufferUpto];\n        freq = (int)freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastEndOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        //System.out.println(\"[\"+docFreq+\"]\"+\" nextDoc\");\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = (int) freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += (int)docDeltaBuffer[docBufferUpto];\n        freq = (int)freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97b1b5806a1f8e249985ae7c486ef449726fd236","date":1344446896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        //System.out.println(\"[\"+docFreq+\"]\"+\" nextDoc\");\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        //System.out.println(\"[\"+docFreq+\"]\"+\" nextDoc\");\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = (int) freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75","date":1344503769,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        //System.out.println(\"[\"+docFreq+\"]\"+\" nextDoc\");\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75"],"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}