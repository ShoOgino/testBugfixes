{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesCache#createValue(LeafReader,CacheKey).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Accountable createValue(LeafReader reader, CacheKey key)\n        throws IOException {\n\n      final int maxDoc = reader.maxDoc();\n\n      Terms terms = reader.terms(key.field);\n\n      final float acceptableOverheadRatio = ((Float) key.custom).floatValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startTermsBPV;\n\n      // TODO: use Uninvert?\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = terms.size();\n        if (numUniqueTerms != -1L) {\n          if (numUniqueTerms > maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n        } else {\n          startTermsBPV = 1;\n        }\n      } else {\n        startTermsBPV = 1;\n      }\n\n      PackedLongValues.Builder termOrdToBytesOffset = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, acceptableOverheadRatio);\n\n      int termOrd = 0;\n\n      // TODO: use Uninvert?\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        PostingsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= maxDoc) {\n            throw new IllegalStateException(\"Type mismatch: \" + key.field + \" was indexed with multiple values per document, use SORTED_SET instead\");\n          }\n\n          termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            // Store 1+ ord into packed bits\n            docToTermOrd.set(docID, 1+termOrd);\n          }\n          termOrd++;\n        }\n      }\n\n      // maybe an int-only impl?\n      return new SortedDocValuesImpl(bytes.freeze(true), termOrdToBytesOffset.build(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}